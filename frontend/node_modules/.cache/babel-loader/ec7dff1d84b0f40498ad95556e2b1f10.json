{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar eventDefinitionReference = require('./EventDefinitionReference'),\n    elementReferenceProperty = require('./ElementReferenceProperty');\n\nmodule.exports = function (group, element, bpmnFactory, errorEventDefinition, showErrorCodeVariable, showErrorMessageVariable) {\n  var getValue = function (modelProperty) {\n    return function (element) {\n      var modelPropertyValue = errorEventDefinition.get('camunda:' + modelProperty);\n      var value = {};\n      value[modelProperty] = modelPropertyValue;\n      return value;\n    };\n  };\n\n  var setValue = function (modelProperty) {\n    return function (element, values) {\n      var props = {};\n      props['camunda:' + modelProperty] = values[modelProperty] || undefined;\n      return cmdHelper.updateBusinessObject(element, errorEventDefinition, props);\n    };\n  };\n\n  group.entries = group.entries.concat(eventDefinitionReference(element, errorEventDefinition, bpmnFactory, {\n    label: 'Error',\n    elementName: 'error',\n    elementType: 'bpmn:Error',\n    referenceProperty: 'errorRef',\n    newElementIdPrefix: 'Error_'\n  }));\n  group.entries = group.entries.concat(elementReferenceProperty(element, errorEventDefinition, bpmnFactory, {\n    id: 'error-element-name',\n    label: 'Error Name',\n    referenceProperty: 'errorRef',\n    modelProperty: 'name',\n    shouldValidate: true\n  }));\n  group.entries = group.entries.concat(elementReferenceProperty(element, errorEventDefinition, bpmnFactory, {\n    id: 'error-element-code',\n    label: 'Error Code',\n    referenceProperty: 'errorRef',\n    modelProperty: 'errorCode'\n  }));\n\n  if (showErrorCodeVariable) {\n    group.entries.push(entryFactory.textField({\n      id: 'errorCodeVariable',\n      label: 'Error Code Variable',\n      modelProperty: 'errorCodeVariable',\n      get: getValue('errorCodeVariable'),\n      set: setValue('errorCodeVariable')\n    }));\n  }\n\n  if (showErrorMessageVariable) {\n    group.entries.push(entryFactory.textField({\n      id: 'errorMessageVariable',\n      label: 'Error Message Variable',\n      modelProperty: 'errorMessageVariable',\n      get: getValue('errorMessageVariable'),\n      set: setValue('errorMessageVariable')\n    }));\n  }\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/ErrorEventDefinition.js"],"names":["entryFactory","require","cmdHelper","eventDefinitionReference","elementReferenceProperty","module","exports","group","element","bpmnFactory","errorEventDefinition","showErrorCodeVariable","showErrorMessageVariable","getValue","modelProperty","modelPropertyValue","get","value","setValue","values","props","undefined","updateBusinessObject","entries","concat","label","elementName","elementType","referenceProperty","newElementIdPrefix","id","shouldValidate","push","textField","set"],"mappings":"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","sourcesContent":["'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar eventDefinitionReference = require('./EventDefinitionReference'),\n    elementReferenceProperty = require('./ElementReferenceProperty');\n\n\nmodule.exports = function(group, element, bpmnFactory, errorEventDefinition, showErrorCodeVariable,\n    showErrorMessageVariable) {\n\n\n  var getValue = function(modelProperty) {\n    return function(element) {\n      var modelPropertyValue = errorEventDefinition.get('camunda:' + modelProperty);\n      var value = {};\n\n      value[modelProperty] = modelPropertyValue;\n      return value;\n    };\n  };\n\n  var setValue = function(modelProperty) {\n    return function(element, values) {\n      var props = {};\n\n      props['camunda:' + modelProperty] = values[modelProperty] || undefined;\n\n      return cmdHelper.updateBusinessObject(element, errorEventDefinition, props);\n    };\n  };\n\n\n  group.entries = group.entries.concat(eventDefinitionReference(element, errorEventDefinition, bpmnFactory, {\n    label: 'Error',\n    elementName: 'error',\n    elementType: 'bpmn:Error',\n    referenceProperty: 'errorRef',\n    newElementIdPrefix: 'Error_'\n  }));\n\n\n  group.entries = group.entries.concat(elementReferenceProperty(element, errorEventDefinition, bpmnFactory, {\n    id: 'error-element-name',\n    label: 'Error Name',\n    referenceProperty: 'errorRef',\n    modelProperty: 'name',\n    shouldValidate: true\n  }));\n\n\n  group.entries = group.entries.concat(elementReferenceProperty(element, errorEventDefinition, bpmnFactory, {\n    id: 'error-element-code',\n    label: 'Error Code',\n    referenceProperty: 'errorRef',\n    modelProperty: 'errorCode'\n  }));\n\n\n  if (showErrorCodeVariable) {\n    group.entries.push(entryFactory.textField({\n      id : 'errorCodeVariable',\n      label : 'Error Code Variable',\n      modelProperty : 'errorCodeVariable',\n\n      get: getValue('errorCodeVariable'),\n      set: setValue('errorCodeVariable')\n    }));\n  }\n\n  if (showErrorMessageVariable) {\n    group.entries.push(entryFactory.textField({\n      id : 'errorMessageVariable',\n      label : 'Error Message Variable',\n      modelProperty : 'errorMessageVariable',\n\n      get: getValue('errorMessageVariable'),\n      set: setValue('errorMessageVariable')\n    }));\n  }\n\n};\n"]},"metadata":{},"sourceType":"script"}