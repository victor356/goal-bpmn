{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar DELEGATE_TYPES = ['class', 'expression', 'delegateExpression'];\nvar PROPERTIES = {\n  class: 'camunda:class',\n  expression: 'camunda:expression',\n  delegateExpression: 'camunda:delegateExpression'\n};\n\nfunction isDelegate(type) {\n  return DELEGATE_TYPES.indexOf(type) !== -1;\n}\n\nfunction getAttribute(type) {\n  return PROPERTIES[type];\n}\n\nmodule.exports = function (element, bpmnFactory, options, translate) {\n  var getImplementationType = options.getImplementationType,\n      getBusinessObject = options.getBusinessObject;\n\n  function getDelegationLabel(type) {\n    switch (type) {\n      case 'class':\n        return translate('Java Class');\n\n      case 'expression':\n        return translate('Expression');\n\n      case 'delegateExpression':\n        return translate('Delegate Expression');\n\n      default:\n        return '';\n    }\n  }\n\n  var delegateEntry = entryFactory.textField({\n    id: 'delegate',\n    label: translate('Value'),\n    dataValueLabel: 'delegationLabel',\n    modelProperty: 'delegate',\n    get: function (element, node) {\n      var bo = getBusinessObject(element);\n      var type = getImplementationType(element);\n      var attr = getAttribute(type);\n      var label = getDelegationLabel(type);\n      return {\n        delegate: bo.get(attr),\n        delegationLabel: label\n      };\n    },\n    set: function (element, values, node) {\n      var bo = getBusinessObject(element);\n      var type = getImplementationType(element);\n      var attr = getAttribute(type);\n      var prop = {};\n      prop[attr] = values.delegate || '';\n      return cmdHelper.updateBusinessObject(element, bo, prop);\n    },\n    validate: function (element, values, node) {\n      return isDelegate(getImplementationType(element)) && !values.delegate ? {\n        delegate: 'Must provide a value'\n      } : {};\n    },\n    hidden: function (element, node) {\n      return !isDelegate(getImplementationType(element));\n    }\n  });\n  return [delegateEntry];\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/implementation/Delegate.js"],"names":["entryFactory","require","cmdHelper","DELEGATE_TYPES","PROPERTIES","class","expression","delegateExpression","isDelegate","type","indexOf","getAttribute","module","exports","element","bpmnFactory","options","translate","getImplementationType","getBusinessObject","getDelegationLabel","delegateEntry","textField","id","label","dataValueLabel","modelProperty","get","node","bo","attr","delegate","delegationLabel","set","values","prop","updateBusinessObject","validate","hidden"],"mappings":"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","sourcesContent":["'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar DELEGATE_TYPES = [\n  'class',\n  'expression',\n  'delegateExpression'\n];\n\nvar PROPERTIES = {\n  class: 'camunda:class',\n  expression: 'camunda:expression',\n  delegateExpression: 'camunda:delegateExpression'\n};\n\nfunction isDelegate(type) {\n  return DELEGATE_TYPES.indexOf(type) !== -1;\n}\n\nfunction getAttribute(type) {\n  return PROPERTIES[type];\n}\n\n\nmodule.exports = function(element, bpmnFactory, options, translate) {\n\n  var getImplementationType = options.getImplementationType,\n      getBusinessObject = options.getBusinessObject;\n\n  function getDelegationLabel(type) {\n    switch (type) {\n    case 'class':\n      return translate('Java Class');\n    case 'expression':\n      return translate('Expression');\n    case 'delegateExpression':\n      return translate('Delegate Expression');\n    default:\n      return '';\n    }\n  }\n\n  var delegateEntry = entryFactory.textField({\n    id: 'delegate',\n    label: translate('Value'),\n    dataValueLabel: 'delegationLabel',\n    modelProperty: 'delegate',\n\n    get: function(element, node) {\n      var bo = getBusinessObject(element);\n      var type = getImplementationType(element);\n      var attr = getAttribute(type);\n      var label = getDelegationLabel(type);\n      return {\n        delegate: bo.get(attr),\n        delegationLabel: label\n      };\n    },\n\n    set: function(element, values, node) {\n      var bo = getBusinessObject(element);\n      var type = getImplementationType(element);\n      var attr = getAttribute(type);\n      var prop = {};\n      prop[attr] = values.delegate || '';\n      return cmdHelper.updateBusinessObject(element, bo, prop);\n    },\n\n    validate: function(element, values, node) {\n      return isDelegate(getImplementationType(element)) && !values.delegate ? { delegate: 'Must provide a value' } : {};\n    },\n\n    hidden: function(element, node) {\n      return !isDelegate(getImplementationType(element));\n    }\n\n  });\n\n  return [ delegateEntry ];\n\n};\n"]},"metadata":{},"sourceType":"script"}