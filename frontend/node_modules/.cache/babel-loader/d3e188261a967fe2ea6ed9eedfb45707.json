{"ast":null,"code":"import { getBusinessObject, is } from '../../util/ModelUtil';\nimport ModelCloneHelper from '../../util/model/ModelCloneHelper';\nimport { getProperties, IGNORED_PROPERTIES } from '../../util/model/ModelCloneUtils';\nimport { filter, forEach } from 'min-dash';\n\nfunction setProperties(descriptor, data, properties) {\n  forEach(properties, function (property) {\n    if (data[property] !== undefined) {\n      descriptor[property] = data[property];\n    }\n  });\n}\n\nfunction removeProperties(element, properties) {\n  forEach(properties, function (prop) {\n    if (element[prop]) {\n      delete element[prop];\n    }\n  });\n}\n\nexport default function BpmnCopyPaste(bpmnFactory, eventBus, copyPaste, clipboard, canvas, bpmnRules) {\n  var helper = new ModelCloneHelper(eventBus, bpmnFactory);\n  copyPaste.registerDescriptor(function (element, descriptor) {\n    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);\n    var colors = {};\n    descriptor.type = element.type;\n    setProperties(descriptor, businessObject.di, ['isExpanded']);\n    setProperties(colors, businessObject.di, ['fill', 'stroke']);\n    descriptor.colors = colors;\n\n    if (element.type === 'label') {\n      return descriptor;\n    }\n\n    setProperties(descriptor, businessObject, ['processRef', 'triggeredByEvent']);\n\n    if (businessObject.default) {\n      descriptor.default = businessObject.default.id;\n    }\n\n    return descriptor;\n  });\n  eventBus.on('element.paste', function (context) {\n    var descriptor = context.descriptor,\n        createdElements = context.createdElements,\n        parent = descriptor.parent,\n        rootElement = canvas.getRootElement(),\n        oldBusinessObject = descriptor.oldBusinessObject,\n        newBusinessObject,\n        source,\n        target,\n        canConnect;\n    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);\n    var properties = getProperties(oldBusinessObject.$descriptor);\n    properties = filter(properties, function (property) {\n      return IGNORED_PROPERTIES.indexOf(property.replace(/bpmn:/, '')) === -1;\n    });\n    descriptor.businessObject = helper.clone(oldBusinessObject, newBusinessObject, properties);\n\n    if (descriptor.type === 'label') {\n      return;\n    }\n\n    if (is(parent, 'bpmn:Process')) {\n      descriptor.parent = is(rootElement, 'bpmn:Collaboration') ? rootElement : parent;\n    }\n\n    if (descriptor.type === 'bpmn:DataOutputAssociation' || descriptor.type === 'bpmn:DataInputAssociation' || descriptor.type === 'bpmn:MessageFlow') {\n      descriptor.parent = rootElement;\n    }\n\n    if (is(parent, 'bpmn:Lane')) {\n      descriptor.parent = parent.parent;\n    } // make sure that the correct type of connection is created\n\n\n    if (descriptor.waypoints) {\n      source = createdElements[descriptor.source];\n      target = createdElements[descriptor.target];\n\n      if (source && target) {\n        source = source.element;\n        target = target.element;\n      }\n\n      canConnect = bpmnRules.canConnect(source, target);\n\n      if (canConnect) {\n        descriptor.type = canConnect.type;\n      }\n    } // remove the id or else we cannot paste multiple times\n\n\n    delete newBusinessObject.id; // assign an ID\n\n    bpmnFactory._ensureId(newBusinessObject);\n\n    if (descriptor.type === 'bpmn:Participant' && descriptor.processRef) {\n      descriptor.processRef = newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n    }\n\n    setProperties(newBusinessObject, descriptor, ['isExpanded', 'triggeredByEvent']);\n    removeProperties(descriptor, ['triggeredByEvent']);\n  });\n}\nBpmnCopyPaste.$inject = ['bpmnFactory', 'eventBus', 'copyPaste', 'clipboard', 'canvas', 'bpmnRules'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/features/copy-paste/BpmnCopyPaste.js"],"names":["getBusinessObject","is","ModelCloneHelper","getProperties","IGNORED_PROPERTIES","filter","forEach","setProperties","descriptor","data","properties","property","undefined","removeProperties","element","prop","BpmnCopyPaste","bpmnFactory","eventBus","copyPaste","clipboard","canvas","bpmnRules","helper","registerDescriptor","businessObject","oldBusinessObject","colors","type","di","default","id","on","context","createdElements","parent","rootElement","getRootElement","newBusinessObject","source","target","canConnect","create","$type","$descriptor","indexOf","replace","clone","waypoints","_ensureId","processRef","$inject"],"mappings":"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","sourcesContent":["import {\n  getBusinessObject,\n  is\n} from '../../util/ModelUtil';\n\nimport ModelCloneHelper from '../../util/model/ModelCloneHelper';\n\nimport {\n  getProperties,\n  IGNORED_PROPERTIES\n} from '../../util/model/ModelCloneUtils';\n\nimport {\n  filter,\n  forEach\n} from 'min-dash';\n\nfunction setProperties(descriptor, data, properties) {\n  forEach(properties, function(property) {\n    if (data[property] !== undefined) {\n      descriptor[property] = data[property];\n    }\n  });\n}\n\nfunction removeProperties(element, properties) {\n  forEach(properties, function(prop) {\n    if (element[prop]) {\n      delete element[prop];\n    }\n  });\n}\n\nexport default function BpmnCopyPaste(\n    bpmnFactory, eventBus, copyPaste,\n    clipboard, canvas, bpmnRules) {\n\n  var helper = new ModelCloneHelper(eventBus, bpmnFactory);\n\n  copyPaste.registerDescriptor(function(element, descriptor) {\n    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);\n\n    var colors = {};\n\n    descriptor.type = element.type;\n\n    setProperties(descriptor, businessObject.di, [ 'isExpanded' ]);\n\n    setProperties(colors, businessObject.di, [ 'fill', 'stroke' ]);\n\n    descriptor.colors = colors;\n\n    if (element.type === 'label') {\n      return descriptor;\n    }\n\n    setProperties(descriptor, businessObject, [\n      'processRef',\n      'triggeredByEvent'\n    ]);\n\n    if (businessObject.default) {\n      descriptor.default = businessObject.default.id;\n    }\n\n    return descriptor;\n  });\n\n  eventBus.on('element.paste', function(context) {\n    var descriptor = context.descriptor,\n        createdElements = context.createdElements,\n        parent = descriptor.parent,\n        rootElement = canvas.getRootElement(),\n        oldBusinessObject = descriptor.oldBusinessObject,\n        newBusinessObject,\n        source,\n        target,\n        canConnect;\n\n    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);\n\n    var properties = getProperties(oldBusinessObject.$descriptor);\n\n    properties = filter(properties, function(property) {\n      return IGNORED_PROPERTIES.indexOf(property.replace(/bpmn:/, '')) === -1;\n    });\n\n    descriptor.businessObject = helper.clone(oldBusinessObject, newBusinessObject, properties);\n\n    if (descriptor.type === 'label') {\n      return;\n    }\n\n    if (is(parent, 'bpmn:Process')) {\n      descriptor.parent = is(rootElement, 'bpmn:Collaboration') ? rootElement : parent;\n    }\n\n    if (descriptor.type === 'bpmn:DataOutputAssociation' ||\n        descriptor.type === 'bpmn:DataInputAssociation' ||\n        descriptor.type === 'bpmn:MessageFlow') {\n      descriptor.parent = rootElement;\n    }\n\n    if (is(parent, 'bpmn:Lane')) {\n      descriptor.parent = parent.parent;\n    }\n\n    // make sure that the correct type of connection is created\n    if (descriptor.waypoints) {\n      source = createdElements[descriptor.source];\n      target = createdElements[descriptor.target];\n\n      if (source && target) {\n        source = source.element;\n        target = target.element;\n      }\n\n      canConnect = bpmnRules.canConnect(source, target);\n\n      if (canConnect) {\n        descriptor.type = canConnect.type;\n      }\n    }\n\n    // remove the id or else we cannot paste multiple times\n    delete newBusinessObject.id;\n\n    // assign an ID\n    bpmnFactory._ensureId(newBusinessObject);\n\n    if (descriptor.type === 'bpmn:Participant' && descriptor.processRef) {\n      descriptor.processRef = newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n    }\n\n    setProperties(newBusinessObject, descriptor, [\n      'isExpanded',\n      'triggeredByEvent'\n    ]);\n\n    removeProperties(descriptor, [\n      'triggeredByEvent'\n    ]);\n  });\n\n}\n\n\nBpmnCopyPaste.$inject = [\n  'bpmnFactory',\n  'eventBus',\n  'copyPaste',\n  'clipboard',\n  'canvas',\n  'bpmnRules'\n];"]},"metadata":{},"sourceType":"module"}