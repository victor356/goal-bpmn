{"ast":null,"code":"import { pointDistance, pointsOnLine } from '../../util/Geometry';\nimport { addBendpoint } from './BendpointUtil';\nvar MARKER_OK = 'connect-ok',\n    MARKER_NOT_OK = 'connect-not-ok',\n    MARKER_CONNECT_HOVER = 'connect-hover',\n    MARKER_CONNECT_UPDATING = 'djs-updating';\nvar COMMAND_BENDPOINT_UPDATE = 'connection.updateWaypoints',\n    COMMAND_RECONNECT_START = 'connection.reconnectStart',\n    COMMAND_RECONNECT_END = 'connection.reconnectEnd';\nvar round = Math.round;\nimport { classes as svgClasses, remove as svgRemove } from 'tiny-svg';\nimport { translate } from '../../util/SvgTransformUtil';\n/**\n * A component that implements moving of bendpoints\n */\n\nexport default function BendpointMove(injector, eventBus, canvas, dragging, graphicsFactory, rules, modeling) {\n  // optional connection docking integration\n  var connectionDocking = injector.get('connectionDocking', false); // API\n\n  this.start = function (event, connection, bendpointIndex, insert) {\n    var type,\n        context,\n        waypoints = connection.waypoints,\n        gfx = canvas.getGraphics(connection);\n\n    if (!insert && bendpointIndex === 0) {\n      type = COMMAND_RECONNECT_START;\n    } else if (!insert && bendpointIndex === waypoints.length - 1) {\n      type = COMMAND_RECONNECT_END;\n    } else {\n      type = COMMAND_BENDPOINT_UPDATE;\n    }\n\n    context = {\n      connection: connection,\n      bendpointIndex: bendpointIndex,\n      insert: insert,\n      type: type\n    };\n    dragging.init(event, 'bendpoint.move', {\n      data: {\n        connection: connection,\n        connectionGfx: gfx,\n        context: context\n      }\n    });\n  }; // DRAGGING IMPLEMENTATION\n\n\n  function redrawConnection(data) {\n    graphicsFactory.update('connection', data.connection, data.connectionGfx);\n  }\n\n  function filterRedundantWaypoints(waypoints) {\n    // alter copy of waypoints, not original\n    waypoints = waypoints.slice();\n    var idx = 0,\n        point,\n        previousPoint,\n        nextPoint;\n\n    while (waypoints[idx]) {\n      point = waypoints[idx];\n      previousPoint = waypoints[idx - 1];\n      nextPoint = waypoints[idx + 1];\n\n      if (pointDistance(point, nextPoint) === 0 || pointsOnLine(previousPoint, nextPoint, point)) {\n        // remove point, if overlapping with {nextPoint}\n        // or on line with {previousPoint} -> {point} -> {nextPoint}\n        waypoints.splice(idx, 1);\n      } else {\n        idx++;\n      }\n    }\n\n    return waypoints;\n  }\n\n  eventBus.on('bendpoint.move.start', function (e) {\n    var context = e.context,\n        connection = context.connection,\n        originalWaypoints = connection.waypoints,\n        waypoints = originalWaypoints.slice(),\n        insert = context.insert,\n        idx = context.bendpointIndex;\n    context.originalWaypoints = originalWaypoints;\n\n    if (insert) {\n      // insert placeholder for bendpoint to-be-added\n      waypoints.splice(idx, 0, null);\n    }\n\n    connection.waypoints = waypoints; // add dragger gfx\n\n    context.draggerGfx = addBendpoint(canvas.getLayer('overlays'));\n    svgClasses(context.draggerGfx).add('djs-dragging');\n    canvas.addMarker(connection, MARKER_CONNECT_UPDATING);\n  });\n  eventBus.on('bendpoint.move.hover', function (e) {\n    var context = e.context;\n    context.hover = e.hover;\n\n    if (e.hover) {\n      canvas.addMarker(e.hover, MARKER_CONNECT_HOVER); // asks whether reconnect / bendpoint move / bendpoint add\n      // is allowed at the given position\n\n      var allowed = context.allowed = rules.allowed(context.type, context);\n\n      if (allowed) {\n        canvas.removeMarker(context.hover, MARKER_NOT_OK);\n        canvas.addMarker(context.hover, MARKER_OK);\n        context.target = context.hover;\n      } else if (allowed === false) {\n        canvas.removeMarker(context.hover, MARKER_OK);\n        canvas.addMarker(context.hover, MARKER_NOT_OK);\n        context.target = null;\n      }\n    }\n  });\n  eventBus.on(['bendpoint.move.out', 'bendpoint.move.cleanup'], function (e) {\n    // remove connect marker\n    // if it was added\n    var hover = e.context.hover;\n\n    if (hover) {\n      canvas.removeMarker(hover, MARKER_CONNECT_HOVER);\n      canvas.removeMarker(hover, e.context.target ? MARKER_OK : MARKER_NOT_OK);\n    }\n  });\n  eventBus.on('bendpoint.move.move', function (e) {\n    var context = e.context,\n        moveType = context.type,\n        connection = e.connection,\n        source,\n        target;\n    connection.waypoints[context.bendpointIndex] = {\n      x: e.x,\n      y: e.y\n    };\n\n    if (connectionDocking) {\n      if (context.hover) {\n        if (moveType === COMMAND_RECONNECT_START) {\n          source = context.hover;\n        }\n\n        if (moveType === COMMAND_RECONNECT_END) {\n          target = context.hover;\n        }\n      }\n\n      connection.waypoints = connectionDocking.getCroppedWaypoints(connection, source, target);\n    } // add dragger gfx\n\n\n    translate(context.draggerGfx, e.x, e.y);\n    redrawConnection(e);\n  });\n  eventBus.on(['bendpoint.move.end', 'bendpoint.move.cancel'], function (e) {\n    var context = e.context,\n        hover = context.hover,\n        connection = context.connection; // remove dragger gfx\n\n    svgRemove(context.draggerGfx);\n    context.newWaypoints = connection.waypoints.slice();\n    connection.waypoints = context.originalWaypoints;\n    canvas.removeMarker(connection, MARKER_CONNECT_UPDATING);\n\n    if (hover) {\n      canvas.removeMarker(hover, MARKER_OK);\n      canvas.removeMarker(hover, MARKER_NOT_OK);\n    }\n  });\n  eventBus.on('bendpoint.move.end', function (e) {\n    var context = e.context,\n        waypoints = context.newWaypoints,\n        bendpointIndex = context.bendpointIndex,\n        bendpoint = waypoints[bendpointIndex],\n        allowed = context.allowed,\n        hints; // ensure we have actual pixel values bendpoint\n    // coordinates (important when zoom level was > 1 during move)\n\n    bendpoint.x = round(bendpoint.x);\n    bendpoint.y = round(bendpoint.y);\n\n    if (allowed && context.type === COMMAND_RECONNECT_START) {\n      modeling.reconnectStart(context.connection, context.target, bendpoint);\n    } else if (allowed && context.type === COMMAND_RECONNECT_END) {\n      modeling.reconnectEnd(context.connection, context.target, bendpoint);\n    } else if (allowed !== false && context.type === COMMAND_BENDPOINT_UPDATE) {\n      // pass hints on the actual moved bendpoint\n      // this is useful for connection and label layouting\n      hints = {\n        bendpointMove: {\n          insert: e.context.insert,\n          bendpointIndex: bendpointIndex\n        }\n      };\n      modeling.updateWaypoints(context.connection, filterRedundantWaypoints(waypoints), hints);\n    } else {\n      redrawConnection(e);\n      return false;\n    }\n  });\n  eventBus.on('bendpoint.move.cancel', function (e) {\n    redrawConnection(e);\n  });\n}\nBendpointMove.$inject = ['injector', 'eventBus', 'canvas', 'dragging', 'graphicsFactory', 'rules', 'modeling'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/features/bendpoints/BendpointMove.js"],"names":["pointDistance","pointsOnLine","addBendpoint","MARKER_OK","MARKER_NOT_OK","MARKER_CONNECT_HOVER","MARKER_CONNECT_UPDATING","COMMAND_BENDPOINT_UPDATE","COMMAND_RECONNECT_START","COMMAND_RECONNECT_END","round","Math","classes","svgClasses","remove","svgRemove","translate","BendpointMove","injector","eventBus","canvas","dragging","graphicsFactory","rules","modeling","connectionDocking","get","start","event","connection","bendpointIndex","insert","type","context","waypoints","gfx","getGraphics","length","init","data","connectionGfx","redrawConnection","update","filterRedundantWaypoints","slice","idx","point","previousPoint","nextPoint","splice","on","e","originalWaypoints","draggerGfx","getLayer","add","addMarker","hover","allowed","removeMarker","target","moveType","source","x","y","getCroppedWaypoints","newWaypoints","bendpoint","hints","reconnectStart","reconnectEnd","bendpointMove","updateWaypoints","$inject"],"mappings":"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","sourcesContent":["import {\n  pointDistance,\n  pointsOnLine\n} from '../../util/Geometry';\n\nimport {\n  addBendpoint\n} from './BendpointUtil';\n\nvar MARKER_OK = 'connect-ok',\n    MARKER_NOT_OK = 'connect-not-ok',\n    MARKER_CONNECT_HOVER = 'connect-hover',\n    MARKER_CONNECT_UPDATING = 'djs-updating';\n\nvar COMMAND_BENDPOINT_UPDATE = 'connection.updateWaypoints',\n    COMMAND_RECONNECT_START = 'connection.reconnectStart',\n    COMMAND_RECONNECT_END = 'connection.reconnectEnd';\n\nvar round = Math.round;\n\nimport {\n  classes as svgClasses,\n  remove as svgRemove\n} from 'tiny-svg';\n\nimport { translate } from '../../util/SvgTransformUtil';\n\n\n/**\n * A component that implements moving of bendpoints\n */\nexport default function BendpointMove(\n    injector, eventBus, canvas,\n    dragging, graphicsFactory, rules,\n    modeling) {\n\n\n  // optional connection docking integration\n  var connectionDocking = injector.get('connectionDocking', false);\n\n\n  // API\n\n  this.start = function(event, connection, bendpointIndex, insert) {\n\n    var type,\n        context,\n        waypoints = connection.waypoints,\n        gfx = canvas.getGraphics(connection);\n\n    if (!insert && bendpointIndex === 0) {\n      type = COMMAND_RECONNECT_START;\n    } else\n    if (!insert && bendpointIndex === waypoints.length - 1) {\n      type = COMMAND_RECONNECT_END;\n    } else {\n      type = COMMAND_BENDPOINT_UPDATE;\n    }\n\n    context = {\n      connection: connection,\n      bendpointIndex: bendpointIndex,\n      insert: insert,\n      type: type\n    };\n\n    dragging.init(event, 'bendpoint.move', {\n      data: {\n        connection: connection,\n        connectionGfx: gfx,\n        context: context\n      }\n    });\n  };\n\n\n  // DRAGGING IMPLEMENTATION\n\n\n  function redrawConnection(data) {\n    graphicsFactory.update('connection', data.connection, data.connectionGfx);\n  }\n\n  function filterRedundantWaypoints(waypoints) {\n\n    // alter copy of waypoints, not original\n    waypoints = waypoints.slice();\n\n    var idx = 0,\n        point,\n        previousPoint,\n        nextPoint;\n\n    while (waypoints[idx]) {\n      point = waypoints[idx];\n      previousPoint = waypoints[idx - 1];\n      nextPoint = waypoints[idx + 1];\n\n      if (pointDistance(point, nextPoint) === 0 ||\n          pointsOnLine(previousPoint, nextPoint, point)) {\n\n        // remove point, if overlapping with {nextPoint}\n        // or on line with {previousPoint} -> {point} -> {nextPoint}\n        waypoints.splice(idx, 1);\n      } else {\n        idx++;\n      }\n    }\n\n    return waypoints;\n  }\n\n  eventBus.on('bendpoint.move.start', function(e) {\n\n    var context = e.context,\n        connection = context.connection,\n        originalWaypoints = connection.waypoints,\n        waypoints = originalWaypoints.slice(),\n        insert = context.insert,\n        idx = context.bendpointIndex;\n\n    context.originalWaypoints = originalWaypoints;\n\n    if (insert) {\n      // insert placeholder for bendpoint to-be-added\n      waypoints.splice(idx, 0, null);\n    }\n\n    connection.waypoints = waypoints;\n\n    // add dragger gfx\n    context.draggerGfx = addBendpoint(canvas.getLayer('overlays'));\n    svgClasses(context.draggerGfx).add('djs-dragging');\n\n    canvas.addMarker(connection, MARKER_CONNECT_UPDATING);\n  });\n\n  eventBus.on('bendpoint.move.hover', function(e) {\n    var context = e.context;\n\n    context.hover = e.hover;\n\n    if (e.hover) {\n      canvas.addMarker(e.hover, MARKER_CONNECT_HOVER);\n\n      // asks whether reconnect / bendpoint move / bendpoint add\n      // is allowed at the given position\n      var allowed = context.allowed = rules.allowed(context.type, context);\n\n      if (allowed) {\n        canvas.removeMarker(context.hover, MARKER_NOT_OK);\n        canvas.addMarker(context.hover, MARKER_OK);\n\n        context.target = context.hover;\n      } else if (allowed === false) {\n        canvas.removeMarker(context.hover, MARKER_OK);\n        canvas.addMarker(context.hover, MARKER_NOT_OK);\n\n        context.target = null;\n      }\n    }\n  });\n\n  eventBus.on([\n    'bendpoint.move.out',\n    'bendpoint.move.cleanup'\n  ], function(e) {\n\n    // remove connect marker\n    // if it was added\n    var hover = e.context.hover;\n\n    if (hover) {\n      canvas.removeMarker(hover, MARKER_CONNECT_HOVER);\n      canvas.removeMarker(hover, e.context.target ? MARKER_OK : MARKER_NOT_OK);\n    }\n  });\n\n  eventBus.on('bendpoint.move.move', function(e) {\n\n    var context = e.context,\n        moveType = context.type,\n        connection = e.connection,\n        source, target;\n\n    connection.waypoints[context.bendpointIndex] = { x: e.x, y: e.y };\n\n    if (connectionDocking) {\n\n      if (context.hover) {\n        if (moveType === COMMAND_RECONNECT_START) {\n          source = context.hover;\n        }\n\n        if (moveType === COMMAND_RECONNECT_END) {\n          target = context.hover;\n        }\n      }\n\n      connection.waypoints = connectionDocking.getCroppedWaypoints(connection, source, target);\n    }\n\n    // add dragger gfx\n    translate(context.draggerGfx, e.x, e.y);\n\n    redrawConnection(e);\n  });\n\n  eventBus.on([\n    'bendpoint.move.end',\n    'bendpoint.move.cancel'\n  ], function(e) {\n\n    var context = e.context,\n        hover = context.hover,\n        connection = context.connection;\n\n    // remove dragger gfx\n    svgRemove(context.draggerGfx);\n    context.newWaypoints = connection.waypoints.slice();\n    connection.waypoints = context.originalWaypoints;\n    canvas.removeMarker(connection, MARKER_CONNECT_UPDATING);\n\n    if (hover) {\n      canvas.removeMarker(hover, MARKER_OK);\n      canvas.removeMarker(hover, MARKER_NOT_OK);\n    }\n  });\n\n  eventBus.on('bendpoint.move.end', function(e) {\n\n    var context = e.context,\n        waypoints = context.newWaypoints,\n        bendpointIndex = context.bendpointIndex,\n        bendpoint = waypoints[bendpointIndex],\n        allowed = context.allowed,\n        hints;\n\n    // ensure we have actual pixel values bendpoint\n    // coordinates (important when zoom level was > 1 during move)\n    bendpoint.x = round(bendpoint.x);\n    bendpoint.y = round(bendpoint.y);\n\n    if (allowed && context.type === COMMAND_RECONNECT_START) {\n      modeling.reconnectStart(context.connection, context.target, bendpoint);\n    } else\n    if (allowed && context.type === COMMAND_RECONNECT_END) {\n      modeling.reconnectEnd(context.connection, context.target, bendpoint);\n    } else\n    if (allowed !== false && context.type === COMMAND_BENDPOINT_UPDATE) {\n\n      // pass hints on the actual moved bendpoint\n      // this is useful for connection and label layouting\n      hints = {\n        bendpointMove: {\n          insert: e.context.insert,\n          bendpointIndex: bendpointIndex\n        }\n      };\n\n      modeling.updateWaypoints(context.connection, filterRedundantWaypoints(waypoints), hints);\n    } else {\n      redrawConnection(e);\n\n      return false;\n    }\n  });\n\n  eventBus.on('bendpoint.move.cancel', function(e) {\n    redrawConnection(e);\n  });\n}\n\nBendpointMove.$inject = [\n  'injector',\n  'eventBus',\n  'canvas',\n  'dragging',\n  'graphicsFactory',\n  'rules',\n  'modeling'\n];"]},"metadata":{},"sourceType":"module"}