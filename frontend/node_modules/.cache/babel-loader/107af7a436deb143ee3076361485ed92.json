{"ast":null,"code":"'use strict';\n\nvar domify = require('min-dom').domify;\n\nvar forEach = require('lodash/forEach');\n\nvar entryFieldDescription = require('./EntryFieldDescription');\n\nvar isList = function (list) {\n  return !(!list || Object.prototype.toString.call(list) !== '[object Array]');\n};\n\nvar addEmptyParameter = function (list) {\n  return list.concat([{\n    name: '',\n    value: ''\n  }]);\n};\n\nvar createOption = function (option) {\n  return '<option value=\"' + option.value + '\">' + option.name + '</option>';\n};\n/**\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {string} [options.label]\n * @param  {Array<Object>} options.selectOptions\n * @param  {string} options.modelProperty\n * @param  {boolean} options.emptyParameter\n * @param  {function} options.disabled\n * @param  {function} options.hidden\n * @param  {Object} defaultParameters\n *\n * @return {Object}\n */\n\n\nvar selectbox = function (options, defaultParameters) {\n  var resource = defaultParameters,\n      label = options.label || resource.id,\n      selectOptions = options.selectOptions || [{\n    name: '',\n    value: ''\n  }],\n      modelProperty = options.modelProperty,\n      emptyParameter = options.emptyParameter,\n      canBeDisabled = !!options.disabled && typeof options.disabled === 'function',\n      canBeHidden = !!options.hidden && typeof options.hidden === 'function',\n      description = options.description;\n\n  if (emptyParameter) {\n    selectOptions = addEmptyParameter(selectOptions);\n  }\n\n  resource.html = '<label for=\"camunda-' + resource.id + '\"' + (canBeDisabled ? 'data-disable=\"isDisabled\" ' : '') + (canBeHidden ? 'data-show=\"isHidden\" ' : '') + '>' + label + '</label>' + '<select id=\"camunda-' + resource.id + '-select\" name=\"' + modelProperty + '\"' + (canBeDisabled ? 'data-disable=\"isDisabled\" ' : '') + (canBeHidden ? 'data-show=\"isHidden\" ' : '') + ' data-value>';\n\n  if (isList(selectOptions)) {\n    forEach(selectOptions, function (option) {\n      resource.html += '<option value=\"' + option.value + '\">' + (option.name || '') + '</option>';\n    });\n  }\n\n  resource.html += '</select>'; // add description below select box entry field\n\n  if (description && typeof options.showCustomInput !== 'function') {\n    resource.html += entryFieldDescription(description);\n  }\n  /**\n   * Fill the select box options dynamically.\n   *\n   * Calls the defined function #selectOptions in the entry to get the\n   * values for the options and set the value to the inputNode.\n   *\n   * @param {djs.model.Base} element\n   * @param {HTMLElement} entryNode\n   * @param {EntryDescriptor} inputNode\n   * @param {Object} inputName\n   * @param {Object} newValue\n   */\n\n\n  resource.setControlValue = function (element, entryNode, inputNode, inputName, newValue) {\n    if (typeof selectOptions === 'function') {\n      var options = selectOptions(element, inputNode);\n\n      if (options) {\n        // remove existing options\n        while (inputNode.firstChild) {\n          inputNode.removeChild(inputNode.firstChild);\n        } // add options\n\n\n        forEach(options, function (option) {\n          var template = domify(createOption(option));\n          inputNode.appendChild(template);\n        });\n      }\n    } // set select value\n\n\n    if (newValue !== undefined) {\n      inputNode.value = newValue;\n    }\n  };\n\n  if (canBeDisabled) {\n    resource.isDisabled = function () {\n      return options.disabled.apply(resource, arguments);\n    };\n  }\n\n  if (canBeHidden) {\n    resource.isHidden = function () {\n      return !options.hidden.apply(resource, arguments);\n    };\n  }\n\n  resource.cssClasses = ['bpp-dropdown'];\n  return resource;\n};\n\nmodule.exports = selectbox;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/factory/SelectEntryFactory.js"],"names":["domify","require","forEach","entryFieldDescription","isList","list","Object","prototype","toString","call","addEmptyParameter","concat","name","value","createOption","option","selectbox","options","defaultParameters","resource","label","id","selectOptions","modelProperty","emptyParameter","canBeDisabled","disabled","canBeHidden","hidden","description","html","showCustomInput","setControlValue","element","entryNode","inputNode","inputName","newValue","firstChild","removeChild","template","appendChild","undefined","isDisabled","apply","arguments","isHidden","cssClasses","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar domify = require('min-dom').domify;\n\nvar forEach = require('lodash/forEach');\n\nvar entryFieldDescription = require('./EntryFieldDescription');\n\n\nvar isList = function(list) {\n  return !(!list || Object.prototype.toString.call(list) !== '[object Array]');\n};\n\nvar addEmptyParameter = function(list) {\n  return list.concat([ { name: '', value: '' } ]);\n};\n\nvar createOption = function(option) {\n  return '<option value=\"' + option.value + '\">' + option.name + '</option>';\n};\n\n/**\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {string} [options.label]\n * @param  {Array<Object>} options.selectOptions\n * @param  {string} options.modelProperty\n * @param  {boolean} options.emptyParameter\n * @param  {function} options.disabled\n * @param  {function} options.hidden\n * @param  {Object} defaultParameters\n *\n * @return {Object}\n */\nvar selectbox = function(options, defaultParameters) {\n  var resource = defaultParameters,\n      label = options.label || resource.id,\n      selectOptions = options.selectOptions || [ { name: '', value: '' } ],\n      modelProperty = options.modelProperty,\n      emptyParameter = options.emptyParameter,\n      canBeDisabled = !!options.disabled && typeof options.disabled === 'function',\n      canBeHidden = !!options.hidden && typeof options.hidden === 'function',\n      description = options.description;\n\n\n  if (emptyParameter) {\n    selectOptions = addEmptyParameter(selectOptions);\n  }\n\n\n  resource.html =\n    '<label for=\"camunda-' + resource.id + '\"' +\n    (canBeDisabled ? 'data-disable=\"isDisabled\" ' : '') +\n    (canBeHidden ? 'data-show=\"isHidden\" ' : '') +\n    '>' + label + '</label>' +\n    '<select id=\"camunda-' + resource.id + '-select\" name=\"' + modelProperty + '\"' +\n    (canBeDisabled ? 'data-disable=\"isDisabled\" ' : '') +\n    (canBeHidden ? 'data-show=\"isHidden\" ' : '') +\n    ' data-value>';\n\n  if (isList(selectOptions)) {\n    forEach(selectOptions, function(option) {\n      resource.html += '<option value=\"' + option.value + '\">' + (option.name || '') + '</option>';\n    });\n  }\n\n  resource.html += '</select>';\n\n  // add description below select box entry field\n  if (description && typeof options.showCustomInput !== 'function') {\n    resource.html += entryFieldDescription(description);\n  }\n\n  /**\n   * Fill the select box options dynamically.\n   *\n   * Calls the defined function #selectOptions in the entry to get the\n   * values for the options and set the value to the inputNode.\n   *\n   * @param {djs.model.Base} element\n   * @param {HTMLElement} entryNode\n   * @param {EntryDescriptor} inputNode\n   * @param {Object} inputName\n   * @param {Object} newValue\n   */\n  resource.setControlValue = function(element, entryNode, inputNode, inputName, newValue) {\n    if (typeof selectOptions === 'function') {\n\n      var options = selectOptions(element, inputNode);\n\n      if (options) {\n\n        // remove existing options\n        while (inputNode.firstChild) {\n          inputNode.removeChild(inputNode.firstChild);\n        }\n\n        // add options\n        forEach(options, function(option) {\n          var template = domify(createOption(option));\n\n          inputNode.appendChild(template);\n        });\n\n\n      }\n    }\n\n    // set select value\n    if (newValue !== undefined) {\n      inputNode.value = newValue;\n    }\n\n  };\n\n  if (canBeDisabled) {\n    resource.isDisabled = function() {\n      return options.disabled.apply(resource, arguments);\n    };\n  }\n\n  if (canBeHidden) {\n    resource.isHidden = function() {\n      return !options.hidden.apply(resource, arguments);\n    };\n  }\n\n  resource.cssClasses = ['bpp-dropdown'];\n\n  return resource;\n};\n\nmodule.exports = selectbox;\n"]},"metadata":{},"sourceType":"script"}