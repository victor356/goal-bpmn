{"ast":null,"code":"var ELEMENT_ID = 'data-element-id';\nimport { attr as svgAttr } from 'tiny-svg';\n/**\n * @class\n *\n * A registry that keeps track of all shapes in the diagram.\n */\n\nexport default function ElementRegistry(eventBus) {\n  this._elements = {};\n  this._eventBus = eventBus;\n}\nElementRegistry.$inject = ['eventBus'];\n/**\n * Register a pair of (element, gfx, (secondaryGfx)).\n *\n * @param {djs.model.Base} element\n * @param {SVGElement} gfx\n * @param {SVGElement} [secondaryGfx] optional other element to register, too\n */\n\nElementRegistry.prototype.add = function (element, gfx, secondaryGfx) {\n  var id = element.id;\n\n  this._validateId(id); // associate dom node with element\n\n\n  svgAttr(gfx, ELEMENT_ID, id);\n\n  if (secondaryGfx) {\n    svgAttr(secondaryGfx, ELEMENT_ID, id);\n  }\n\n  this._elements[id] = {\n    element: element,\n    gfx: gfx,\n    secondaryGfx: secondaryGfx\n  };\n};\n/**\n * Removes an element from the registry.\n *\n * @param {djs.model.Base} element\n */\n\n\nElementRegistry.prototype.remove = function (element) {\n  var elements = this._elements,\n      id = element.id || element,\n      container = id && elements[id];\n\n  if (container) {\n    // unset element id on gfx\n    svgAttr(container.gfx, ELEMENT_ID, '');\n\n    if (container.secondaryGfx) {\n      svgAttr(container.secondaryGfx, ELEMENT_ID, '');\n    }\n\n    delete elements[id];\n  }\n};\n/**\n * Update the id of an element\n *\n * @param {djs.model.Base} element\n * @param {String} newId\n */\n\n\nElementRegistry.prototype.updateId = function (element, newId) {\n  this._validateId(newId);\n\n  if (typeof element === 'string') {\n    element = this.get(element);\n  }\n\n  this._eventBus.fire('element.updateId', {\n    element: element,\n    newId: newId\n  });\n\n  var gfx = this.getGraphics(element),\n      secondaryGfx = this.getGraphics(element, true);\n  this.remove(element);\n  element.id = newId;\n  this.add(element, gfx, secondaryGfx);\n};\n/**\n * Return the model element for a given id or graphics.\n *\n * @example\n *\n * elementRegistry.get('SomeElementId_1');\n * elementRegistry.get(gfx);\n *\n *\n * @param {String|SVGElement} filter for selecting the element\n *\n * @return {djs.model.Base}\n */\n\n\nElementRegistry.prototype.get = function (filter) {\n  var id;\n\n  if (typeof filter === 'string') {\n    id = filter;\n  } else {\n    id = filter && svgAttr(filter, ELEMENT_ID);\n  }\n\n  var container = this._elements[id];\n  return container && container.element;\n};\n/**\n * Return all elements that match a given filter function.\n *\n * @param {Function} fn\n *\n * @return {Array<djs.model.Base>}\n */\n\n\nElementRegistry.prototype.filter = function (fn) {\n  var filtered = [];\n  this.forEach(function (element, gfx) {\n    if (fn(element, gfx)) {\n      filtered.push(element);\n    }\n  });\n  return filtered;\n};\n/**\n * Return all rendered model elements.\n *\n * @return {Array<djs.model.Base>}\n */\n\n\nElementRegistry.prototype.getAll = function () {\n  return this.filter(function (e) {\n    return e;\n  });\n};\n/**\n * Iterate over all diagram elements.\n *\n * @param {Function} fn\n */\n\n\nElementRegistry.prototype.forEach = function (fn) {\n  var map = this._elements;\n  Object.keys(map).forEach(function (id) {\n    var container = map[id],\n        element = container.element,\n        gfx = container.gfx;\n    return fn(element, gfx);\n  });\n};\n/**\n * Return the graphical representation of an element or its id.\n *\n * @example\n * elementRegistry.getGraphics('SomeElementId_1');\n * elementRegistry.getGraphics(rootElement); // <g ...>\n *\n * elementRegistry.getGraphics(rootElement, true); // <svg ...>\n *\n *\n * @param {String|djs.model.Base} filter\n * @param {Boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\n\n\nElementRegistry.prototype.getGraphics = function (filter, secondary) {\n  var id = filter.id || filter;\n  var container = this._elements[id];\n  return container && (secondary ? container.secondaryGfx : container.gfx);\n};\n/**\n * Validate the suitability of the given id and signals a problem\n * with an exception.\n *\n * @param {String} id\n *\n * @throws {Error} if id is empty or already assigned\n */\n\n\nElementRegistry.prototype._validateId = function (id) {\n  if (!id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elements[id]) {\n    throw new Error('element with id ' + id + ' already added');\n  }\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/core/ElementRegistry.js"],"names":["ELEMENT_ID","attr","svgAttr","ElementRegistry","eventBus","_elements","_eventBus","$inject","prototype","add","element","gfx","secondaryGfx","id","_validateId","remove","elements","container","updateId","newId","get","fire","getGraphics","filter","fn","filtered","forEach","push","getAll","e","map","Object","keys","secondary","Error"],"mappings":"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","sourcesContent":["var ELEMENT_ID = 'data-element-id';\n\nimport { attr as svgAttr } from 'tiny-svg';\n\n\n/**\n * @class\n *\n * A registry that keeps track of all shapes in the diagram.\n */\nexport default function ElementRegistry(eventBus) {\n  this._elements = {};\n\n  this._eventBus = eventBus;\n}\n\nElementRegistry.$inject = [ 'eventBus' ];\n\n/**\n * Register a pair of (element, gfx, (secondaryGfx)).\n *\n * @param {djs.model.Base} element\n * @param {SVGElement} gfx\n * @param {SVGElement} [secondaryGfx] optional other element to register, too\n */\nElementRegistry.prototype.add = function(element, gfx, secondaryGfx) {\n\n  var id = element.id;\n\n  this._validateId(id);\n\n  // associate dom node with element\n  svgAttr(gfx, ELEMENT_ID, id);\n\n  if (secondaryGfx) {\n    svgAttr(secondaryGfx, ELEMENT_ID, id);\n  }\n\n  this._elements[id] = { element: element, gfx: gfx, secondaryGfx: secondaryGfx };\n};\n\n/**\n * Removes an element from the registry.\n *\n * @param {djs.model.Base} element\n */\nElementRegistry.prototype.remove = function(element) {\n  var elements = this._elements,\n      id = element.id || element,\n      container = id && elements[id];\n\n  if (container) {\n\n    // unset element id on gfx\n    svgAttr(container.gfx, ELEMENT_ID, '');\n\n    if (container.secondaryGfx) {\n      svgAttr(container.secondaryGfx, ELEMENT_ID, '');\n    }\n\n    delete elements[id];\n  }\n};\n\n/**\n * Update the id of an element\n *\n * @param {djs.model.Base} element\n * @param {String} newId\n */\nElementRegistry.prototype.updateId = function(element, newId) {\n\n  this._validateId(newId);\n\n  if (typeof element === 'string') {\n    element = this.get(element);\n  }\n\n  this._eventBus.fire('element.updateId', {\n    element: element,\n    newId: newId\n  });\n\n  var gfx = this.getGraphics(element),\n      secondaryGfx = this.getGraphics(element, true);\n\n  this.remove(element);\n\n  element.id = newId;\n\n  this.add(element, gfx, secondaryGfx);\n};\n\n/**\n * Return the model element for a given id or graphics.\n *\n * @example\n *\n * elementRegistry.get('SomeElementId_1');\n * elementRegistry.get(gfx);\n *\n *\n * @param {String|SVGElement} filter for selecting the element\n *\n * @return {djs.model.Base}\n */\nElementRegistry.prototype.get = function(filter) {\n  var id;\n\n  if (typeof filter === 'string') {\n    id = filter;\n  } else {\n    id = filter && svgAttr(filter, ELEMENT_ID);\n  }\n\n  var container = this._elements[id];\n  return container && container.element;\n};\n\n/**\n * Return all elements that match a given filter function.\n *\n * @param {Function} fn\n *\n * @return {Array<djs.model.Base>}\n */\nElementRegistry.prototype.filter = function(fn) {\n\n  var filtered = [];\n\n  this.forEach(function(element, gfx) {\n    if (fn(element, gfx)) {\n      filtered.push(element);\n    }\n  });\n\n  return filtered;\n};\n\n/**\n * Return all rendered model elements.\n *\n * @return {Array<djs.model.Base>}\n */\nElementRegistry.prototype.getAll = function() {\n  return this.filter(function(e) { return e; });\n};\n\n/**\n * Iterate over all diagram elements.\n *\n * @param {Function} fn\n */\nElementRegistry.prototype.forEach = function(fn) {\n\n  var map = this._elements;\n\n  Object.keys(map).forEach(function(id) {\n    var container = map[id],\n        element = container.element,\n        gfx = container.gfx;\n\n    return fn(element, gfx);\n  });\n};\n\n/**\n * Return the graphical representation of an element or its id.\n *\n * @example\n * elementRegistry.getGraphics('SomeElementId_1');\n * elementRegistry.getGraphics(rootElement); // <g ...>\n *\n * elementRegistry.getGraphics(rootElement, true); // <svg ...>\n *\n *\n * @param {String|djs.model.Base} filter\n * @param {Boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\nElementRegistry.prototype.getGraphics = function(filter, secondary) {\n  var id = filter.id || filter;\n\n  var container = this._elements[id];\n  return container && (secondary ? container.secondaryGfx : container.gfx);\n};\n\n/**\n * Validate the suitability of the given id and signals a problem\n * with an exception.\n *\n * @param {String} id\n *\n * @throws {Error} if id is empty or already assigned\n */\nElementRegistry.prototype._validateId = function(id) {\n  if (!id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elements[id]) {\n    throw new Error('element with id ' + id + ' already added');\n  }\n};\n"]},"metadata":{},"sourceType":"module"}