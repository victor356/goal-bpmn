{"ast":null,"code":"import { isCmd, isKey, isShift } from './KeyboardUtil';\nvar LOW_PRIORITY = 500;\n/**\n * Adds default keyboard bindings.\n *\n * This does not pull in any features will bind only actions that\n * have previously been registered against the editorActions component.\n *\n * @param {EventBus} eventBus\n * @param {Keyboard} keyboard\n */\n\nexport default function KeyboardBindings(eventBus, keyboard) {\n  var self = this;\n  eventBus.on('editorActions.init', LOW_PRIORITY, function (event) {\n    var editorActions = event.editorActions;\n    self.registerBindings(keyboard, editorActions);\n  });\n}\nKeyboardBindings.$inject = ['eventBus', 'keyboard'];\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\n\nKeyboardBindings.prototype.registerBindings = function (keyboard, editorActions) {\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {String} action name\n   * @param {Function} fn that implements the key binding\n   */\n  function addListener(action, fn) {\n    if (editorActions.isRegistered(action)) {\n      keyboard.addListener(fn);\n    }\n  } // undo\n  // (CTRL|CMD) + Z\n\n\n  addListener('undo', function (context) {\n    var event = context.keyEvent;\n\n    if (isCmd(event) && !isShift(event) && isKey(['z', 'Z'], event)) {\n      editorActions.trigger('undo');\n      return true;\n    }\n  }); // redo\n  // CTRL + Y\n  // CMD + SHIFT + Z\n\n  addListener('redo', function (context) {\n    var event = context.keyEvent;\n\n    if (isCmd(event) && (isKey(['y', 'Y'], event) || isKey(['z', 'Z'], event) && isShift(event))) {\n      editorActions.trigger('redo');\n      return true;\n    }\n  }); // copy\n  // CTRL/CMD + C\n\n  addListener('copy', function (context) {\n    var event = context.keyEvent;\n\n    if (isCmd(event) && isKey(['c', 'C'], event)) {\n      editorActions.trigger('copy');\n      return true;\n    }\n  }); // paste\n  // CTRL/CMD + V\n\n  addListener('paste', function (context) {\n    var event = context.keyEvent;\n\n    if (isCmd(event) && isKey(['v', 'V'], event)) {\n      editorActions.trigger('paste');\n      return true;\n    }\n  }); // zoom in one step\n  // CTRL/CMD + +\n\n  addListener('stepZoom', function (context) {\n    var event = context.keyEvent;\n\n    if (isKey(['+', 'Add'], event) && isCmd(event)) {\n      editorActions.trigger('stepZoom', {\n        value: 1\n      });\n      return true;\n    }\n  }); // zoom out one step\n  // CTRL + -\n\n  addListener('stepZoom', function (context) {\n    var event = context.keyEvent;\n\n    if (isKey(['-', 'Subtract'], event) && isCmd(event)) {\n      editorActions.trigger('stepZoom', {\n        value: -1\n      });\n      return true;\n    }\n  }); // zoom to the default level\n  // CTRL + 0\n\n  addListener('zoom', function (context) {\n    var event = context.keyEvent;\n\n    if (isKey('0', event) && isCmd(event)) {\n      editorActions.trigger('zoom', {\n        value: 1\n      });\n      return true;\n    }\n  }); // delete selected element\n  // DEL\n\n  addListener('removeSelection', function (context) {\n    var event = context.keyEvent;\n\n    if (isKey(['Delete', 'Del'], event)) {\n      editorActions.trigger('removeSelection');\n      return true;\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/features/keyboard/KeyboardBindings.js"],"names":["isCmd","isKey","isShift","LOW_PRIORITY","KeyboardBindings","eventBus","keyboard","self","on","event","editorActions","registerBindings","$inject","prototype","addListener","action","fn","isRegistered","context","keyEvent","trigger","value"],"mappings":"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","sourcesContent":["import {\n  isCmd,\n  isKey,\n  isShift\n} from './KeyboardUtil';\n\nvar LOW_PRIORITY = 500;\n\n\n/**\n * Adds default keyboard bindings.\n *\n * This does not pull in any features will bind only actions that\n * have previously been registered against the editorActions component.\n *\n * @param {EventBus} eventBus\n * @param {Keyboard} keyboard\n */\nexport default function KeyboardBindings(eventBus, keyboard) {\n\n  var self = this;\n\n  eventBus.on('editorActions.init', LOW_PRIORITY, function(event) {\n\n    var editorActions = event.editorActions;\n\n    self.registerBindings(keyboard, editorActions);\n  });\n}\n\nKeyboardBindings.$inject = [\n  'eventBus',\n  'keyboard'\n];\n\n\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nKeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {\n\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {String} action name\n   * @param {Function} fn that implements the key binding\n   */\n  function addListener(action, fn) {\n\n    if (editorActions.isRegistered(action)) {\n      keyboard.addListener(fn);\n    }\n  }\n\n\n  // undo\n  // (CTRL|CMD) + Z\n  addListener('undo', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isCmd(event) && !isShift(event) && isKey(['z', 'Z'], event)) {\n      editorActions.trigger('undo');\n\n      return true;\n    }\n  });\n\n  // redo\n  // CTRL + Y\n  // CMD + SHIFT + Z\n  addListener('redo', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isCmd(event) && (isKey(['y', 'Y'], event) || (isKey(['z', 'Z'], event) && isShift(event)))) {\n      editorActions.trigger('redo');\n\n      return true;\n    }\n  });\n\n  // copy\n  // CTRL/CMD + C\n  addListener('copy', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isCmd(event) && isKey(['c', 'C'], event)) {\n      editorActions.trigger('copy');\n\n      return true;\n    }\n  });\n\n  // paste\n  // CTRL/CMD + V\n  addListener('paste', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isCmd(event) && isKey(['v', 'V'], event)) {\n      editorActions.trigger('paste');\n\n      return true;\n    }\n  });\n\n  // zoom in one step\n  // CTRL/CMD + +\n  addListener('stepZoom', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isKey([ '+', 'Add' ], event) && isCmd(event)) {\n      editorActions.trigger('stepZoom', { value: 1 });\n\n      return true;\n    }\n  });\n\n  // zoom out one step\n  // CTRL + -\n  addListener('stepZoom', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isKey([ '-', 'Subtract' ], event) && isCmd(event)) {\n      editorActions.trigger('stepZoom', { value: -1 });\n\n      return true;\n    }\n  });\n\n  // zoom to the default level\n  // CTRL + 0\n  addListener('zoom', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isKey('0', event) && isCmd(event)) {\n      editorActions.trigger('zoom', { value: 1 });\n\n      return true;\n    }\n  });\n\n  // delete selected element\n  // DEL\n  addListener('removeSelection', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isKey([ 'Delete', 'Del' ], event)) {\n      editorActions.trigger('removeSelection');\n\n      return true;\n    }\n  });\n};"]},"metadata":{},"sourceType":"module"}