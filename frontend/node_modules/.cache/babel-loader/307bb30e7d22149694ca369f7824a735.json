{"ast":null,"code":"import BaseRenderer from 'diagram-js/lib/draw/BaseRenderer';\nimport { append as svgAppend, attr as svgAttr, create as svgCreate, remove as svgRemove } from 'tiny-svg';\nimport { getRoundRectPath } from 'bpmn-js/lib/draw/BpmnRenderUtil';\nimport { is } from 'bpmn-js/lib/util/ModelUtil';\nimport { isAny } from 'bpmn-js/lib/features/modeling/util/ModelingUtil';\nimport * as d3 from \"d3\";\nconst HIGH_PRIORITY = 1500,\n      TASK_BORDER_RADIUS = 10;\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(eventBus, bpmnRenderer) {\n    super(eventBus, HIGH_PRIORITY);\n    this.bpmnRenderer = bpmnRenderer;\n  }\n\n  canRender(element) {\n    // only render tasks and events (ignore labels)\n    return isAny(element, ['bpmn:ServiceTask', 'bpmn:Event']) && !element.labelTarget;\n  }\n\n  drawShape(parentNode, element) {\n    const shape = this.bpmnRenderer.drawShape(parentNode, element); //const icon = this.bpmnRenderer.getPath();\n    //console.log('shape', this.bpmnRenderer);\n\n    if (is(element, 'bpmn:ServiceTask') && element.businessObject.modelerTemplate == 'getCallThinger') {\n      //console.log('element',element.businessObject.modelerTemplate)\n      //const rect = drawRect(parentNode, 100, 80, TASK_BORDER_RADIUS, '#52B415');\n      var div = document.createElement('div'); // assing your HTML to div's innerHTML\n\n      div.innerHTML = parentNode;\n      console.log(\"div\", div.innerHTML);\n      console.log(\"paren\", parentNode);\n      div.innerHTML = d3.selectAll(\"path\").remove();\n      var catGfx = svgCreate('image', {\n        x: 0,\n        y: -1,\n        width: 50,\n        height: 29,\n        href: \"https://i.postimg.cc/MTXJ9kdZ/icono.png\"\n      });\n      const rect = drawRect(parentNode, 100, 80, TASK_BORDER_RADIUS, '#52B415');\n      svgAppend(parentNode, catGfx);\n      return catGfx; //prependTo(rect, parentNode);\n      //return shape;\n    }\n\n    if (is(element, 'bpmn:ServiceTask') && element.businessObject.modelerTemplate == 'postCall') {\n      //console.log('element',element.businessObject.modelerTemplate)\n      //const rect = drawRect(parentNode, 100, 80, TASK_BORDER_RADIUS, '#52B415');\n      var div = document.createElement('div'); // assing your HTML to div's innerHTML\n\n      div.innerHTML = parentNode;\n      console.log(\"div\", div.innerHTML);\n      console.log(\"paren\", parentNode);\n      div.innerHTML = d3.selectAll(\"path\").remove();\n      var catGfx = svgCreate('image', {\n        x: 0,\n        y: -1,\n        width: 50,\n        height: 29,\n        href: \"https://i.postimg.cc/R0SQRFPf/iconRed.png\"\n      });\n      const rect = drawRect(parentNode, 100, 80, TASK_BORDER_RADIUS, 'red');\n      svgAppend(parentNode, catGfx);\n      return catGfx; //prependTo(rect, parentNode);\n      //return shape;\n    } //const rect = drawRect(parentNode, 30, 20, TASK_BORDER_RADIUS, '#cc0000');\n\n    /* svgAttr(rect, {\r\n      transform: 'translate(-20, -10)'\r\n    }); */\n\n\n    return shape;\n  }\n  /*   getShapePath(shape) {\r\n      if (is(shape, 'bpmn:Task')) {\r\n        return getRoundRectPath(shape, TASK_BORDER_RADIUS);\r\n      }\r\n  \r\n      return this.bpmnRenderer.getShapePath(shape);\r\n    } */\n\n\n}\nCustomRenderer.$inject = ['eventBus', 'bpmnRenderer']; // helpers //////////\n// copied from https://github.com/bpmn-io/bpmn-js/blob/master/lib/draw/BpmnRenderer.js\n\nfunction drawRect(parentNode, width, height, borderRadius, strokeColor) {\n  const rect = svgCreate('rect');\n  svgAttr(rect, {\n    width: width,\n    height: height,\n    rx: borderRadius,\n    ry: borderRadius,\n    stroke: strokeColor || '#000',\n    strokeWidth: 2,\n    fill: 'rgba(0, 0, 0, 0)'\n  });\n  svgAppend(parentNode, rect);\n  return rect;\n} // copied from https://github.com/bpmn-io/diagram-js/blob/master/lib/core/GraphicsFactory.js\n\n\nfunction prependTo(newNode, parentNode, siblingNode) {\n  parentNode.insertBefore(newNode, siblingNode || parentNode.firstChild);\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/src/components/renderer/CustomRenderer.js"],"names":["BaseRenderer","append","svgAppend","attr","svgAttr","create","svgCreate","remove","svgRemove","getRoundRectPath","is","isAny","d3","HIGH_PRIORITY","TASK_BORDER_RADIUS","CustomRenderer","constructor","eventBus","bpmnRenderer","canRender","element","labelTarget","drawShape","parentNode","shape","businessObject","modelerTemplate","div","document","createElement","innerHTML","console","log","selectAll","catGfx","x","y","width","height","href","rect","drawRect","$inject","borderRadius","strokeColor","rx","ry","stroke","strokeWidth","fill","prependTo","newNode","siblingNode","insertBefore","firstChild"],"mappings":"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","sourcesContent":["import BaseRenderer from 'diagram-js/lib/draw/BaseRenderer';\r\n\r\nimport {\r\n    append as svgAppend,\r\n    attr as svgAttr,\r\n    create as svgCreate,\r\n    remove as svgRemove\r\n} from 'tiny-svg';\r\n\r\nimport {\r\n    getRoundRectPath\r\n} from 'bpmn-js/lib/draw/BpmnRenderUtil';\r\n\r\nimport { is } from 'bpmn-js/lib/util/ModelUtil';\r\nimport { isAny } from 'bpmn-js/lib/features/modeling/util/ModelingUtil';\r\nimport * as d3 from \"d3\";\r\n\r\nconst HIGH_PRIORITY = 1500,\r\n    TASK_BORDER_RADIUS = 10;\r\n\r\n\r\nexport default class CustomRenderer extends BaseRenderer {\r\n    constructor(eventBus, bpmnRenderer) {\r\n        super(eventBus, HIGH_PRIORITY);\r\n\r\n        this.bpmnRenderer = bpmnRenderer;\r\n    }\r\n\r\n    canRender(element) {\r\n\r\n        // only render tasks and events (ignore labels)\r\n        return isAny(element, ['bpmn:ServiceTask', 'bpmn:Event']) && !element.labelTarget;\r\n    }\r\n\r\n    drawShape(parentNode, element) {\r\n        const shape = this.bpmnRenderer.drawShape(parentNode, element);\r\n        //const icon = this.bpmnRenderer.getPath();\r\n        //console.log('shape', this.bpmnRenderer);\r\n        if (is(element, 'bpmn:ServiceTask') && (element.businessObject.modelerTemplate == 'getCallThinger' )) {\r\n            //console.log('element',element.businessObject.modelerTemplate)\r\n            //const rect = drawRect(parentNode, 100, 80, TASK_BORDER_RADIUS, '#52B415');\r\n\r\n            var div = document.createElement('div');\r\n            // assing your HTML to div's innerHTML\r\n            div.innerHTML = parentNode;\r\n            console.log(\"div\", div.innerHTML);\r\n            console.log(\"paren\", parentNode);\r\n\r\n            div.innerHTML = d3.selectAll(\"path\").remove();\r\n      \r\n            var catGfx = svgCreate('image', {\r\n                x: 0,\r\n                y: -1,\r\n                width: 50,\r\n                height: 29,\r\n                href: \"https://i.postimg.cc/MTXJ9kdZ/icono.png\"\r\n            });\r\n            const rect = drawRect(parentNode, 100, 80, TASK_BORDER_RADIUS, '#52B415');\r\n            svgAppend(parentNode, catGfx);\r\n\r\n            return catGfx;\r\n            //prependTo(rect, parentNode);\r\n\r\n\r\n            //return shape;\r\n        }\r\n\r\n        if (is(element, 'bpmn:ServiceTask') && element.businessObject.modelerTemplate == 'postCall') {\r\n            //console.log('element',element.businessObject.modelerTemplate)\r\n            //const rect = drawRect(parentNode, 100, 80, TASK_BORDER_RADIUS, '#52B415');\r\n\r\n            var div = document.createElement('div');\r\n            // assing your HTML to div's innerHTML\r\n            div.innerHTML = parentNode;\r\n            console.log(\"div\", div.innerHTML);\r\n            console.log(\"paren\", parentNode);\r\n\r\n            div.innerHTML = d3.selectAll(\"path\").remove();\r\n      \r\n            var catGfx = svgCreate('image', {\r\n                x: 0,\r\n                y: -1,\r\n                width: 50,\r\n                height: 29,\r\n                href: \"https://i.postimg.cc/R0SQRFPf/iconRed.png\"\r\n            });\r\n            const rect = drawRect(parentNode, 100, 80, TASK_BORDER_RADIUS, 'red');\r\n            svgAppend(parentNode, catGfx);\r\n\r\n            return catGfx;\r\n            //prependTo(rect, parentNode);\r\n\r\n\r\n            //return shape;\r\n        }\r\n\r\n        //const rect = drawRect(parentNode, 30, 20, TASK_BORDER_RADIUS, '#cc0000');\r\n\r\n        /* svgAttr(rect, {\r\n          transform: 'translate(-20, -10)'\r\n        }); */\r\n\r\n        return shape;\r\n    }\r\n\r\n    /*   getShapePath(shape) {\r\n        if (is(shape, 'bpmn:Task')) {\r\n          return getRoundRectPath(shape, TASK_BORDER_RADIUS);\r\n        }\r\n    \r\n        return this.bpmnRenderer.getShapePath(shape);\r\n      } */\r\n}\r\n\r\nCustomRenderer.$inject = ['eventBus', 'bpmnRenderer'];\r\n\r\n// helpers //////////\r\n\r\n// copied from https://github.com/bpmn-io/bpmn-js/blob/master/lib/draw/BpmnRenderer.js\r\nfunction drawRect(parentNode, width, height, borderRadius, strokeColor) {\r\n    const rect = svgCreate('rect');\r\n\r\n    svgAttr(rect, {\r\n        width: width,\r\n        height: height,\r\n        rx: borderRadius,\r\n        ry: borderRadius,\r\n        stroke: strokeColor || '#000',\r\n        strokeWidth: 2,\r\n        fill: 'rgba(0, 0, 0, 0)'\r\n    });\r\n\r\n    svgAppend(parentNode, rect);\r\n\r\n    return rect;\r\n}\r\n\r\n// copied from https://github.com/bpmn-io/diagram-js/blob/master/lib/core/GraphicsFactory.js\r\nfunction prependTo(newNode, parentNode, siblingNode) {\r\n    parentNode.insertBefore(newNode, siblingNode || parentNode.firstChild);\r\n}"]},"metadata":{},"sourceType":"module"}