{"ast":null,"code":"/**\n * Failsafe remove an element from a collection\n *\n * @param  {Array<Object>} [collection]\n * @param  {Object} [element]\n *\n * @return {Number} the previous index of the element\n */\nexport function remove(collection, element) {\n  if (!collection || !element) {\n    return -1;\n  }\n\n  var idx = collection.indexOf(element);\n\n  if (idx !== -1) {\n    collection.splice(idx, 1);\n  }\n\n  return idx;\n}\n/**\n * Fail save add an element to the given connection, ensuring\n * it does not yet exist.\n *\n * @param {Array<Object>} collection\n * @param {Object} element\n * @param {Number} idx\n */\n\nexport function add(collection, element, idx) {\n  if (!collection || !element) {\n    return;\n  }\n\n  if (typeof idx !== 'number') {\n    idx = -1;\n  }\n\n  var currentIdx = collection.indexOf(element);\n\n  if (currentIdx !== -1) {\n    if (currentIdx === idx) {\n      // nothing to do, position has not changed\n      return;\n    } else {\n      if (idx !== -1) {\n        // remove from current position\n        collection.splice(currentIdx, 1);\n      } else {\n        // already exists in collection\n        return;\n      }\n    }\n  }\n\n  if (idx !== -1) {\n    // insert at specified position\n    collection.splice(idx, 0, element);\n  } else {\n    // push to end\n    collection.push(element);\n  }\n}\n/**\n * Fail save get the index of an element in a collection.\n *\n * @param {Array<Object>} collection\n * @param {Object} element\n *\n * @return {Number} the index or -1 if collection or element do\n *                  not exist or the element is not contained.\n */\n\nexport function indexOf(collection, element) {\n  if (!collection || !element) {\n    return -1;\n  }\n\n  return collection.indexOf(element);\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/util/Collections.js"],"names":["remove","collection","element","idx","indexOf","splice","add","currentIdx","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAT,CAAgBC,UAAhB,EAA4BC,OAA5B,EAAqC;AAE1C,MAAI,CAACD,UAAD,IAAe,CAACC,OAApB,EAA6B;AAC3B,WAAO,CAAC,CAAR;AACD;;AAED,MAAIC,GAAG,GAAGF,UAAU,CAACG,OAAX,CAAmBF,OAAnB,CAAV;;AAEA,MAAIC,GAAG,KAAK,CAAC,CAAb,EAAgB;AACdF,IAAAA,UAAU,CAACI,MAAX,CAAkBF,GAAlB,EAAuB,CAAvB;AACD;;AAED,SAAOA,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,GAAT,CAAaL,UAAb,EAAyBC,OAAzB,EAAkCC,GAAlC,EAAuC;AAE5C,MAAI,CAACF,UAAD,IAAe,CAACC,OAApB,EAA6B;AAC3B;AACD;;AAED,MAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAG,CAAC,CAAP;AACD;;AAED,MAAII,UAAU,GAAGN,UAAU,CAACG,OAAX,CAAmBF,OAAnB,CAAjB;;AAEA,MAAIK,UAAU,KAAK,CAAC,CAApB,EAAuB;AAErB,QAAIA,UAAU,KAAKJ,GAAnB,EAAwB;AACtB;AACA;AACD,KAHD,MAGO;AAEL,UAAIA,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd;AACAF,QAAAA,UAAU,CAACI,MAAX,CAAkBE,UAAlB,EAA8B,CAA9B;AACD,OAHD,MAGO;AACL;AACA;AACD;AACF;AACF;;AAED,MAAIJ,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd;AACAF,IAAAA,UAAU,CAACI,MAAX,CAAkBF,GAAlB,EAAuB,CAAvB,EAA0BD,OAA1B;AACD,GAHD,MAGO;AACL;AACAD,IAAAA,UAAU,CAACO,IAAX,CAAgBN,OAAhB;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,OAAT,CAAiBH,UAAjB,EAA6BC,OAA7B,EAAsC;AAE3C,MAAI,CAACD,UAAD,IAAe,CAACC,OAApB,EAA6B;AAC3B,WAAO,CAAC,CAAR;AACD;;AAED,SAAOD,UAAU,CAACG,OAAX,CAAmBF,OAAnB,CAAP;AACD","sourcesContent":["/**\n * Failsafe remove an element from a collection\n *\n * @param  {Array<Object>} [collection]\n * @param  {Object} [element]\n *\n * @return {Number} the previous index of the element\n */\nexport function remove(collection, element) {\n\n  if (!collection || !element) {\n    return -1;\n  }\n\n  var idx = collection.indexOf(element);\n\n  if (idx !== -1) {\n    collection.splice(idx, 1);\n  }\n\n  return idx;\n}\n\n/**\n * Fail save add an element to the given connection, ensuring\n * it does not yet exist.\n *\n * @param {Array<Object>} collection\n * @param {Object} element\n * @param {Number} idx\n */\nexport function add(collection, element, idx) {\n\n  if (!collection || !element) {\n    return;\n  }\n\n  if (typeof idx !== 'number') {\n    idx = -1;\n  }\n\n  var currentIdx = collection.indexOf(element);\n\n  if (currentIdx !== -1) {\n\n    if (currentIdx === idx) {\n      // nothing to do, position has not changed\n      return;\n    } else {\n\n      if (idx !== -1) {\n        // remove from current position\n        collection.splice(currentIdx, 1);\n      } else {\n        // already exists in collection\n        return;\n      }\n    }\n  }\n\n  if (idx !== -1) {\n    // insert at specified position\n    collection.splice(idx, 0, element);\n  } else {\n    // push to end\n    collection.push(element);\n  }\n}\n\n\n/**\n * Fail save get the index of an element in a collection.\n *\n * @param {Array<Object>} collection\n * @param {Object} element\n *\n * @return {Number} the index or -1 if collection or element do\n *                  not exist or the element is not contained.\n */\nexport function indexOf(collection, element) {\n\n  if (!collection || !element) {\n    return -1;\n  }\n\n  return collection.indexOf(element);\n}\n"]},"metadata":{},"sourceType":"module"}