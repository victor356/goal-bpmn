{"ast":null,"code":"'use strict';\n\nvar assign = require('lodash/assign'),\n    find = require('lodash/find');\n\nvar domQuery = require('min-dom').query;\n\nvar selectEntryFactory = require('./SelectEntryFactory'),\n    entryFieldDescription = require('./EntryFieldDescription');\n/**\n * The combo box is a special implementation of the select entry and adds the option 'custom' to the\n * select box. If 'custom' is selected, an additional text input field is shown which allows to define\n * a custom value.\n *\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {string} options.label\n * @param  {Array<Object>} options.selectOptions list of name/value pairs\n * @param  {string} options.modelProperty\n * @param  {function} options.get\n * @param  {function} options.set\n * @param  {string} [options.customValue] custom select option value (default: 'custom')\n * @param  {string} [options.customName] custom select option name visible in the select box (default: 'custom')\n *\n * @return {Object}\n */\n\n\nvar comboBox = function (options) {\n  var selectOptions = options.selectOptions,\n      modelProperty = options.modelProperty,\n      customValue = options.customValue || 'custom',\n      customName = options.customName || 'custom ' + modelProperty,\n      description = options.description; // check if a value is not a built in value\n\n  var isCustomValue = function (value) {\n    if (typeof value[modelProperty] === 'undefined') {\n      return false;\n    }\n\n    var isCustom = !find(selectOptions, function (option) {\n      return value[modelProperty] === option.value;\n    });\n    return isCustom;\n  };\n\n  var comboOptions = assign({}, options); // true if the selected value in the select box is customValue\n\n  comboOptions.showCustomInput = function (element, node) {\n    var selectBox = domQuery('[data-entry=\"' + options.id + '\"] select', node.parentNode);\n\n    if (selectBox) {\n      return selectBox.value === customValue;\n    }\n\n    return false;\n  };\n\n  comboOptions.get = function (element, node) {\n    var value = options.get(element, node);\n    var modifiedValues = {};\n\n    if (!isCustomValue(value)) {\n      modifiedValues[modelProperty] = value[modelProperty] || '';\n      return modifiedValues;\n    }\n\n    modifiedValues[modelProperty] = customValue;\n    modifiedValues['custom-' + modelProperty] = value[modelProperty];\n    return modifiedValues;\n  };\n\n  comboOptions.set = function (element, values, node) {\n    var modifiedValues = {}; // if the custom select option has been selected\n    // take the value from the text input field\n\n    if (values[modelProperty] === customValue) {\n      modifiedValues[modelProperty] = values['custom-' + modelProperty] || '';\n    } else if (options.emptyParameter && values[modelProperty] === '') {\n      modifiedValues[modelProperty] = undefined;\n    } else {\n      modifiedValues[modelProperty] = values[modelProperty];\n    }\n\n    return options.set(element, modifiedValues, node);\n  };\n\n  comboOptions.selectOptions.push({\n    name: customName,\n    value: customValue\n  });\n  var comboBoxEntry = assign({}, selectEntryFactory(comboOptions, comboOptions));\n  comboBoxEntry.html += '<div class=\"bpp-field-wrapper bpp-combo-input\" ' + 'data-show=\"showCustomInput\"' + '>' + '<input id=\"camunda-' + options.id + '-input\" type=\"text\" name=\"custom-' + modelProperty + '\" ' + ' />' + '</div>'; // add description below combo box entry field\n\n  if (description) {\n    comboBoxEntry.html += entryFieldDescription(description);\n  }\n\n  return comboBoxEntry;\n};\n\nmodule.exports = comboBox;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/factory/ComboEntryFactory.js"],"names":["assign","require","find","domQuery","query","selectEntryFactory","entryFieldDescription","comboBox","options","selectOptions","modelProperty","customValue","customName","description","isCustomValue","value","isCustom","option","comboOptions","showCustomInput","element","node","selectBox","id","parentNode","get","modifiedValues","set","values","emptyParameter","undefined","push","name","comboBoxEntry","html","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar assign = require('lodash/assign'),\n    find = require('lodash/find');\n\nvar domQuery = require('min-dom').query;\n\nvar selectEntryFactory = require('./SelectEntryFactory'),\n    entryFieldDescription = require('./EntryFieldDescription');\n\n\n/**\n * The combo box is a special implementation of the select entry and adds the option 'custom' to the\n * select box. If 'custom' is selected, an additional text input field is shown which allows to define\n * a custom value.\n *\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {string} options.label\n * @param  {Array<Object>} options.selectOptions list of name/value pairs\n * @param  {string} options.modelProperty\n * @param  {function} options.get\n * @param  {function} options.set\n * @param  {string} [options.customValue] custom select option value (default: 'custom')\n * @param  {string} [options.customName] custom select option name visible in the select box (default: 'custom')\n *\n * @return {Object}\n */\nvar comboBox = function(options) {\n\n  var selectOptions = options.selectOptions,\n      modelProperty = options.modelProperty,\n      customValue = options.customValue || 'custom',\n      customName = options.customName || 'custom ' + modelProperty,\n      description = options.description;\n\n  // check if a value is not a built in value\n  var isCustomValue = function(value) {\n    if (typeof value[modelProperty] === 'undefined') {\n      return false;\n    }\n\n    var isCustom = !find(selectOptions, function(option) {\n      return value[modelProperty] === option.value;\n    });\n\n    return isCustom;\n  };\n\n  var comboOptions = assign({}, options);\n\n  // true if the selected value in the select box is customValue\n  comboOptions.showCustomInput = function(element, node) {\n    var selectBox = domQuery('[data-entry=\"'+ options.id +'\"] select', node.parentNode);\n\n    if (selectBox) {\n      return selectBox.value === customValue;\n    }\n\n    return false;\n  };\n\n  comboOptions.get = function(element, node) {\n    var value = options.get(element, node);\n\n    var modifiedValues = {};\n\n    if (!isCustomValue(value)) {\n      modifiedValues[modelProperty] = value[modelProperty] || '';\n\n      return modifiedValues;\n    }\n\n    modifiedValues[modelProperty] = customValue;\n    modifiedValues['custom-'+modelProperty] = value[modelProperty];\n\n    return modifiedValues;\n  };\n\n  comboOptions.set = function(element, values, node) {\n    var modifiedValues = {};\n\n    // if the custom select option has been selected\n    // take the value from the text input field\n    if (values[modelProperty] === customValue) {\n      modifiedValues[modelProperty] = values['custom-' + modelProperty] || '';\n    }\n    else if (options.emptyParameter && values[modelProperty] === '') {\n      modifiedValues[modelProperty] = undefined;\n    } else {\n      modifiedValues[modelProperty] = values[modelProperty];\n    }\n    return options.set(element, modifiedValues, node);\n  };\n\n  comboOptions.selectOptions.push({ name: customName, value: customValue });\n\n  var comboBoxEntry = assign({}, selectEntryFactory(comboOptions, comboOptions));\n\n  comboBoxEntry.html += '<div class=\"bpp-field-wrapper bpp-combo-input\" ' +\n    'data-show=\"showCustomInput\"' +\n    '>' +\n    '<input id=\"camunda-' + options.id + '-input\" type=\"text\" name=\"custom-' + modelProperty+'\" ' +\n      ' />' +\n  '</div>';\n\n  // add description below combo box entry field\n  if (description) {\n    comboBoxEntry.html += entryFieldDescription(description);\n  }\n\n  return comboBoxEntry;\n};\n\nmodule.exports = comboBox;\n"]},"metadata":{},"sourceType":"script"}