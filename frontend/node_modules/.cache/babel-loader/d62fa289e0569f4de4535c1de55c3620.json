{"ast":null,"code":"import { forEach, isFunction, isArray, isNumber, isObject } from 'min-dash';\nvar DEFAULT_PRIORITY = 1000;\n/**\n * A utility that can be used to plug-in into the command execution for\n * extension and/or validation.\n *\n * @param {EventBus} eventBus\n *\n * @example\n *\n * import inherits from 'inherits';\n *\n * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n *\n * function CommandLogger(eventBus) {\n *   CommandInterceptor.call(this, eventBus);\n *\n *   this.preExecute(function(event) {\n *     console.log('command pre-execute', event);\n *   });\n * }\n *\n * inherits(CommandLogger, CommandInterceptor);\n *\n */\n\nexport default function CommandInterceptor(eventBus) {\n  this._eventBus = eventBus;\n}\nCommandInterceptor.$inject = ['eventBus'];\n\nfunction unwrapEvent(fn, that) {\n  return function (event) {\n    return fn.call(that || null, event.context, event.command, event);\n  };\n}\n/**\n * Register an interceptor for a command execution\n *\n * @param {String|Array<String>} [events] list of commands to register on\n * @param {String} [hook] command hook, i.e. preExecute, executed to listen on\n * @param {Number} [priority] the priority on which to hook into the execution\n * @param {Function} handlerFn interceptor to be invoked with (event)\n * @param {Boolean} unwrap if true, unwrap the event and pass (context, command, event) to the\n *                          listener instead\n * @param {Object} [that] Pass context (`this`) to the handler function\n */\n\n\nCommandInterceptor.prototype.on = function (events, hook, priority, handlerFn, unwrap, that) {\n  if (isFunction(hook) || isNumber(hook)) {\n    that = unwrap;\n    unwrap = handlerFn;\n    handlerFn = priority;\n    priority = hook;\n    hook = null;\n  }\n\n  if (isFunction(priority)) {\n    that = unwrap;\n    unwrap = handlerFn;\n    handlerFn = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  if (isObject(unwrap)) {\n    that = unwrap;\n    unwrap = false;\n  }\n\n  if (!isFunction(handlerFn)) {\n    throw new Error('handlerFn must be a function');\n  }\n\n  if (!isArray(events)) {\n    events = [events];\n  }\n\n  var eventBus = this._eventBus;\n  forEach(events, function (event) {\n    // concat commandStack(.event)?(.hook)?\n    var fullEvent = ['commandStack', event, hook].filter(function (e) {\n      return e;\n    }).join('.');\n    eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);\n  });\n};\n\nvar hooks = ['canExecute', 'preExecute', 'preExecuted', 'execute', 'executed', 'postExecute', 'postExecuted', 'revert', 'reverted'];\n/*\n * Install hook shortcuts\n *\n * This will generate the CommandInterceptor#(preExecute|...|reverted) methods\n * which will in term forward to CommandInterceptor#on.\n */\n\nforEach(hooks, function (hook) {\n  /**\n   * {canExecute|preExecute|preExecuted|execute|executed|postExecute|postExecuted|revert|reverted}\n   *\n   * A named hook for plugging into the command execution\n   *\n   * @param {String|Array<String>} [events] list of commands to register on\n   * @param {Number} [priority] the priority on which to hook into the execution\n   * @param {Function} handlerFn interceptor to be invoked with (event)\n   * @param {Boolean} [unwrap=false] if true, unwrap the event and pass (context, command, event) to the\n   *                          listener instead\n   * @param {Object} [that] Pass context (`this`) to the handler function\n   */\n  CommandInterceptor.prototype[hook] = function (events, priority, handlerFn, unwrap, that) {\n    if (isFunction(events) || isNumber(events)) {\n      that = unwrap;\n      unwrap = handlerFn;\n      handlerFn = priority;\n      priority = events;\n      events = null;\n    }\n\n    this.on(events, hook, priority, handlerFn, unwrap, that);\n  };\n});","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/command/CommandInterceptor.js"],"names":["forEach","isFunction","isArray","isNumber","isObject","DEFAULT_PRIORITY","CommandInterceptor","eventBus","_eventBus","$inject","unwrapEvent","fn","that","event","call","context","command","prototype","on","events","hook","priority","handlerFn","unwrap","Error","fullEvent","filter","e","join","hooks"],"mappings":"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","sourcesContent":["import {\n  forEach,\n  isFunction,\n  isArray,\n  isNumber,\n  isObject\n} from 'min-dash';\n\n\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A utility that can be used to plug-in into the command execution for\n * extension and/or validation.\n *\n * @param {EventBus} eventBus\n *\n * @example\n *\n * import inherits from 'inherits';\n *\n * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n *\n * function CommandLogger(eventBus) {\n *   CommandInterceptor.call(this, eventBus);\n *\n *   this.preExecute(function(event) {\n *     console.log('command pre-execute', event);\n *   });\n * }\n *\n * inherits(CommandLogger, CommandInterceptor);\n *\n */\nexport default function CommandInterceptor(eventBus) {\n  this._eventBus = eventBus;\n}\n\nCommandInterceptor.$inject = [ 'eventBus' ];\n\nfunction unwrapEvent(fn, that) {\n  return function(event) {\n    return fn.call(that || null, event.context, event.command, event);\n  };\n}\n\n/**\n * Register an interceptor for a command execution\n *\n * @param {String|Array<String>} [events] list of commands to register on\n * @param {String} [hook] command hook, i.e. preExecute, executed to listen on\n * @param {Number} [priority] the priority on which to hook into the execution\n * @param {Function} handlerFn interceptor to be invoked with (event)\n * @param {Boolean} unwrap if true, unwrap the event and pass (context, command, event) to the\n *                          listener instead\n * @param {Object} [that] Pass context (`this`) to the handler function\n */\nCommandInterceptor.prototype.on = function(events, hook, priority, handlerFn, unwrap, that) {\n\n  if (isFunction(hook) || isNumber(hook)) {\n    that = unwrap;\n    unwrap = handlerFn;\n    handlerFn = priority;\n    priority = hook;\n    hook = null;\n  }\n\n  if (isFunction(priority)) {\n    that = unwrap;\n    unwrap = handlerFn;\n    handlerFn = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  if (isObject(unwrap)) {\n    that = unwrap;\n    unwrap = false;\n  }\n\n  if (!isFunction(handlerFn)) {\n    throw new Error('handlerFn must be a function');\n  }\n\n  if (!isArray(events)) {\n    events = [ events ];\n  }\n\n  var eventBus = this._eventBus;\n\n  forEach(events, function(event) {\n    // concat commandStack(.event)?(.hook)?\n    var fullEvent = [ 'commandStack', event, hook ].filter(function(e) { return e; }).join('.');\n\n    eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);\n  });\n};\n\n\nvar hooks = [\n  'canExecute',\n  'preExecute',\n  'preExecuted',\n  'execute',\n  'executed',\n  'postExecute',\n  'postExecuted',\n  'revert',\n  'reverted'\n];\n\n/*\n * Install hook shortcuts\n *\n * This will generate the CommandInterceptor#(preExecute|...|reverted) methods\n * which will in term forward to CommandInterceptor#on.\n */\nforEach(hooks, function(hook) {\n\n  /**\n   * {canExecute|preExecute|preExecuted|execute|executed|postExecute|postExecuted|revert|reverted}\n   *\n   * A named hook for plugging into the command execution\n   *\n   * @param {String|Array<String>} [events] list of commands to register on\n   * @param {Number} [priority] the priority on which to hook into the execution\n   * @param {Function} handlerFn interceptor to be invoked with (event)\n   * @param {Boolean} [unwrap=false] if true, unwrap the event and pass (context, command, event) to the\n   *                          listener instead\n   * @param {Object} [that] Pass context (`this`) to the handler function\n   */\n  CommandInterceptor.prototype[hook] = function(events, priority, handlerFn, unwrap, that) {\n\n    if (isFunction(events) || isNumber(events)) {\n      that = unwrap;\n      unwrap = handlerFn;\n      handlerFn = priority;\n      priority = events;\n      events = null;\n    }\n\n    this.on(events, hook, priority, handlerFn, unwrap, that);\n  };\n});\n"]},"metadata":{},"sourceType":"module"}