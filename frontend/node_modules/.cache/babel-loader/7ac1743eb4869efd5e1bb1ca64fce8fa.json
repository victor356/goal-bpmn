{"ast":null,"code":"'use strict';\n\nvar entryFieldDescription = require('./EntryFieldDescription');\n\nvar bind = require('lodash/bind');\n/**\n * An entry that renders a clickable link.\n *\n * A passed {@link options#handleClick} handler is responsible\n * to process the click.\n *\n * The link may be conditionally shown or hidden. This can be\n * controlled via the {@link options.showLink}.\n *\n * @param {Object} options\n * @param {String} options.id\n * @param {String} [options.label]\n * @param {Function} options.handleClick\n * @param {Function} [options.showLink] returning false to hide link\n * @param {String} [options.description]\n *\n * @example\n *\n * var linkEntry = link({\n *   id: 'foo',\n *   description: 'Some Description',\n *   handleClick: function(element, node, event) { ... },\n *   showLink: function(element, node) { ... }\n * });\n *\n * @return {Entry} the newly created entry\n */\n\n\nfunction link(options) {\n  var id = options.id,\n      label = options.label || id,\n      showLink = options.showLink,\n      handleClick = options.handleClick,\n      description = options.description;\n\n  if (showLink && typeof showLink !== 'function') {\n    throw new Error('options.showLink must be a function');\n  }\n\n  if (typeof handleClick !== 'function') {\n    throw new Error('options.handleClick must be a function');\n  }\n\n  var resource = {\n    id: id\n  };\n  resource.html = '<a data-action=\"handleClick\" ' + (showLink ? 'data-show=\"showLink\" ' : '') + 'class=\"bpp-entry-link' + (options.cssClasses ? ' ' + options.cssClasses : '') + '\">' + label + '</a>'; // add description below link entry field\n\n  if (description) {\n    resource.html += entryFieldDescription(description);\n  }\n\n  resource.handleClick = bind(handleClick, resource);\n\n  if (typeof showLink === 'function') {\n    resource.showLink = function () {\n      return showLink.apply(resource, arguments);\n    };\n  }\n\n  return resource;\n}\n\nmodule.exports = link;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/factory/LinkEntryFactory.js"],"names":["entryFieldDescription","require","bind","link","options","id","label","showLink","handleClick","description","Error","resource","html","cssClasses","apply","arguments","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAAnC;;AAEA,IAAIC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,IAAT,CAAcC,OAAd,EAAuB;AAErB,MAAIC,EAAE,GAAGD,OAAO,CAACC,EAAjB;AAAA,MACIC,KAAK,GAAGF,OAAO,CAACE,KAAR,IAAiBD,EAD7B;AAAA,MAEIE,QAAQ,GAAGH,OAAO,CAACG,QAFvB;AAAA,MAGIC,WAAW,GAAGJ,OAAO,CAACI,WAH1B;AAAA,MAIIC,WAAW,GAAGL,OAAO,CAACK,WAJ1B;;AAMA,MAAIF,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9C,UAAM,IAAIG,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,MAAI,OAAOF,WAAP,KAAuB,UAA3B,EAAuC;AACrC,UAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,MAAIC,QAAQ,GAAG;AACbN,IAAAA,EAAE,EAAEA;AADS,GAAf;AAIAM,EAAAA,QAAQ,CAACC,IAAT,GACE,mCACCL,QAAQ,GAAG,uBAAH,GAA6B,EADtC,IAEA,uBAFA,IAE2BH,OAAO,CAACS,UAAR,GAAqB,MAAMT,OAAO,CAACS,UAAnC,GAAgD,EAF3E,IAGA,IAHA,GAGOP,KAHP,GAGe,MAJjB,CApBqB,CA0BrB;;AACA,MAAIG,WAAJ,EAAiB;AACfE,IAAAA,QAAQ,CAACC,IAAT,IAAiBZ,qBAAqB,CAACS,WAAD,CAAtC;AACD;;AAEDE,EAAAA,QAAQ,CAACH,WAAT,GAAuBN,IAAI,CAACM,WAAD,EAAcG,QAAd,CAA3B;;AAEA,MAAI,OAAOJ,QAAP,KAAoB,UAAxB,EAAoC;AAClCI,IAAAA,QAAQ,CAACJ,QAAT,GAAoB,YAAW;AAC7B,aAAOA,QAAQ,CAACO,KAAT,CAAeH,QAAf,EAAyBI,SAAzB,CAAP;AACD,KAFD;AAGD;;AAED,SAAOJ,QAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBd,IAAjB","sourcesContent":["'use strict';\n\nvar entryFieldDescription = require('./EntryFieldDescription');\n\nvar bind = require('lodash/bind');\n\n/**\n * An entry that renders a clickable link.\n *\n * A passed {@link options#handleClick} handler is responsible\n * to process the click.\n *\n * The link may be conditionally shown or hidden. This can be\n * controlled via the {@link options.showLink}.\n *\n * @param {Object} options\n * @param {String} options.id\n * @param {String} [options.label]\n * @param {Function} options.handleClick\n * @param {Function} [options.showLink] returning false to hide link\n * @param {String} [options.description]\n *\n * @example\n *\n * var linkEntry = link({\n *   id: 'foo',\n *   description: 'Some Description',\n *   handleClick: function(element, node, event) { ... },\n *   showLink: function(element, node) { ... }\n * });\n *\n * @return {Entry} the newly created entry\n */\nfunction link(options) {\n\n  var id = options.id,\n      label = options.label || id,\n      showLink = options.showLink,\n      handleClick = options.handleClick,\n      description = options.description;\n\n  if (showLink && typeof showLink !== 'function') {\n    throw new Error('options.showLink must be a function');\n  }\n\n  if (typeof handleClick !== 'function') {\n    throw new Error('options.handleClick must be a function');\n  }\n\n  var resource = {\n    id: id\n  };\n\n  resource.html =\n    '<a data-action=\"handleClick\" ' +\n    (showLink ? 'data-show=\"showLink\" ' : '') +\n    'class=\"bpp-entry-link' + (options.cssClasses ? ' ' + options.cssClasses : '') +\n    '\">' + label + '</a>';\n\n  // add description below link entry field\n  if (description) {\n    resource.html += entryFieldDescription(description);\n  }\n\n  resource.handleClick = bind(handleClick, resource);\n\n  if (typeof showLink === 'function') {\n    resource.showLink = function() {\n      return showLink.apply(resource, arguments);\n    };\n  }\n\n  return resource;\n}\n\nmodule.exports = link;\n"]},"metadata":{},"sourceType":"script"}