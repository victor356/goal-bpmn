{"ast":null,"code":"'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    getExtensionElements = require('./ExtensionElementsHelper').getExtensionElements;\n\nvar FormHelper = {};\nmodule.exports = FormHelper;\n/**\n * Return form data from business object or undefined if none exist\n *\n * @param  {djs.model.Base} element\n *\n * @return {ModdleElement|undefined} formData\n */\n\nFormHelper.getFormData = function (element) {\n  var bo = getBusinessObject(element);\n  var formData = getExtensionElements(bo, 'camunda:FormData');\n\n  if (typeof formData !== 'undefined') {\n    return formData[0];\n  }\n};\n/**\n * Return all form fields existing in the business object, and\n * an empty array if none exist.\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array} a list of form field objects\n */\n\n\nFormHelper.getFormFields = function (element) {\n  var formData = this.getFormData(element);\n\n  if (typeof formData === 'undefined') {\n    return [];\n  }\n\n  return formData.fields || [];\n};\n/**\n * Get a form field from the business object at given index\n *\n * @param {djs.model.Base} element\n * @param {number} idx\n *\n * @return {ModdleElement} the form field\n */\n\n\nFormHelper.getFormField = function (element, idx) {\n  var formFields = this.getFormFields(element);\n  return formFields[idx];\n};\n/**\n * Get all constraints for a specific form field from the business object\n *\n * @param  {ModdleElement} formField\n *\n * @return {Array<ModdleElement>} a list of constraint objects\n */\n\n\nFormHelper.getConstraints = function (formField) {\n  if (formField && formField.validation && formField.validation.constraints) {\n    return formField.validation.constraints;\n  }\n\n  return [];\n};\n/**\n * Get all camunda:value objects for a specific form field from the business object\n *\n * @param  {ModdleElement} formField\n *\n * @return {Array<ModdleElement>} a list of camunda:value objects\n */\n\n\nFormHelper.getEnumValues = function (formField) {\n  if (formField && formField.values) {\n    return formField.values;\n  }\n\n  return [];\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/helper/FormHelper.js"],"names":["getBusinessObject","require","getExtensionElements","FormHelper","module","exports","getFormData","element","bo","formData","getFormFields","fields","getFormField","idx","formFields","getConstraints","formField","validation","constraints","getEnumValues","values"],"mappings":"AAAA;;AAEA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,4BAAD,CAAP,CAAsCD,iBAA9D;AAAA,IACIE,oBAAoB,GAAGD,OAAO,CAAC,2BAAD,CAAP,CAAqCC,oBADhE;;AAGA,IAAIC,UAAU,GAAG,EAAjB;AAEAC,MAAM,CAACC,OAAP,GAAiBF,UAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,UAAU,CAACG,WAAX,GAAyB,UAASC,OAAT,EAAkB;AACzC,MAAIC,EAAE,GAAGR,iBAAiB,CAACO,OAAD,CAA1B;AAEA,MAAIE,QAAQ,GAAGP,oBAAoB,CAACM,EAAD,EAAK,kBAAL,CAAnC;;AAEA,MAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnC,WAAOA,QAAQ,CAAC,CAAD,CAAf;AACD;AACF,CARD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,UAAU,CAACO,aAAX,GAA2B,UAASH,OAAT,EAAkB;AAC3C,MAAIE,QAAQ,GAAG,KAAKH,WAAL,CAAiBC,OAAjB,CAAf;;AAEA,MAAI,OAAOE,QAAP,KAAoB,WAAxB,EAAqC;AACnC,WAAO,EAAP;AACD;;AAED,SAAOA,QAAQ,CAACE,MAAT,IAAmB,EAA1B;AACD,CARD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,UAAU,CAACS,YAAX,GAA0B,UAASL,OAAT,EAAkBM,GAAlB,EAAuB;AAE/C,MAAIC,UAAU,GAAG,KAAKJ,aAAL,CAAmBH,OAAnB,CAAjB;AAEA,SAAOO,UAAU,CAACD,GAAD,CAAjB;AACD,CALD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,UAAU,CAACY,cAAX,GAA4B,UAASC,SAAT,EAAoB;AAC9C,MAAIA,SAAS,IAAIA,SAAS,CAACC,UAAvB,IAAqCD,SAAS,CAACC,UAAV,CAAqBC,WAA9D,EAA2E;AACzE,WAAOF,SAAS,CAACC,UAAV,CAAqBC,WAA5B;AACD;;AACD,SAAO,EAAP;AACD,CALD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAf,UAAU,CAACgB,aAAX,GAA2B,UAASH,SAAT,EAAoB;AAC7C,MAAIA,SAAS,IAAIA,SAAS,CAACI,MAA3B,EAAmC;AACjC,WAAOJ,SAAS,CAACI,MAAjB;AACD;;AACD,SAAO,EAAP;AACD,CALD","sourcesContent":["'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    getExtensionElements = require('./ExtensionElementsHelper').getExtensionElements;\n\nvar FormHelper = {};\n\nmodule.exports = FormHelper;\n\n/**\n * Return form data from business object or undefined if none exist\n *\n * @param  {djs.model.Base} element\n *\n * @return {ModdleElement|undefined} formData\n */\nFormHelper.getFormData = function(element) {\n  var bo = getBusinessObject(element);\n\n  var formData = getExtensionElements(bo, 'camunda:FormData');\n\n  if (typeof formData !== 'undefined') {\n    return formData[0];\n  }\n};\n\n\n/**\n * Return all form fields existing in the business object, and\n * an empty array if none exist.\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array} a list of form field objects\n */\nFormHelper.getFormFields = function(element) {\n  var formData = this.getFormData(element);\n\n  if (typeof formData === 'undefined') {\n    return [];\n  }\n\n  return formData.fields || [];\n};\n\n\n/**\n * Get a form field from the business object at given index\n *\n * @param {djs.model.Base} element\n * @param {number} idx\n *\n * @return {ModdleElement} the form field\n */\nFormHelper.getFormField = function(element, idx) {\n\n  var formFields = this.getFormFields(element);\n\n  return formFields[idx];\n};\n\n\n/**\n * Get all constraints for a specific form field from the business object\n *\n * @param  {ModdleElement} formField\n *\n * @return {Array<ModdleElement>} a list of constraint objects\n */\nFormHelper.getConstraints = function(formField) {\n  if (formField && formField.validation && formField.validation.constraints) {\n    return formField.validation.constraints;\n  }\n  return [];\n};\n\n\n/**\n * Get all camunda:value objects for a specific form field from the business object\n *\n * @param  {ModdleElement} formField\n *\n * @return {Array<ModdleElement>} a list of camunda:value objects\n */\nFormHelper.getEnumValues = function(formField) {\n  if (formField && formField.values) {\n    return formField.values;\n  }\n  return [];\n};\n\n"]},"metadata":{},"sourceType":"script"}