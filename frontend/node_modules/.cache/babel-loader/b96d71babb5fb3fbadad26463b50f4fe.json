{"ast":null,"code":"import inherits from 'inherits';\nimport KeyboardBindings from 'diagram-js/lib/features/keyboard/KeyboardBindings';\n/**\n * BPMN 2.0 specific keyboard bindings.\n *\n * @param {Injector} injector\n */\n\nexport default function BpmnKeyboardBindings(injector) {\n  injector.invoke(KeyboardBindings, this);\n}\ninherits(BpmnKeyboardBindings, KeyboardBindings);\nBpmnKeyboardBindings.$inject = ['injector'];\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\n\nBpmnKeyboardBindings.prototype.registerBindings = function (keyboard, editorActions) {\n  // inherit default bindings\n  KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {String} action name\n   * @param {Function} fn that implements the key binding\n   */\n\n  function addListener(action, fn) {\n    if (editorActions.isRegistered(action)) {\n      keyboard.addListener(fn);\n    }\n  } // select all elements\n  // CTRL + A\n\n\n  addListener('selectElements', function (context) {\n    var event = context.keyEvent;\n\n    if (keyboard.isKey(['a', 'A'], event) && keyboard.isCmd(event)) {\n      editorActions.trigger('selectElements');\n      return true;\n    }\n  }); // search labels\n  // CTRL + F\n\n  addListener('find', function (context) {\n    var event = context.keyEvent;\n\n    if (keyboard.isKey(['f', 'F'], event) && keyboard.isCmd(event)) {\n      editorActions.trigger('find');\n      return true;\n    }\n  }); // activate space tool\n  // S\n\n  addListener('spaceTool', function (context) {\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['s', 'S'], event)) {\n      editorActions.trigger('spaceTool');\n      return true;\n    }\n  }); // activate lasso tool\n  // L\n\n  addListener('lassoTool', function (context) {\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['l', 'L'], event)) {\n      editorActions.trigger('lassoTool');\n      return true;\n    }\n  }); // activate hand tool\n  // H\n\n  addListener('handTool', function (context) {\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['h', 'H'], event)) {\n      editorActions.trigger('handTool');\n      return true;\n    }\n  }); // activate global connect tool\n  // C\n\n  addListener('globalConnectTool', function (context) {\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['c', 'C'], event)) {\n      editorActions.trigger('globalConnectTool');\n      return true;\n    }\n  }); // activate direct editing\n  // E\n\n  addListener('directEditing', function (context) {\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['e', 'E'], event)) {\n      editorActions.trigger('directEditing');\n      return true;\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/features/keyboard/BpmnKeyboardBindings.js"],"names":["inherits","KeyboardBindings","BpmnKeyboardBindings","injector","invoke","$inject","prototype","registerBindings","keyboard","editorActions","call","addListener","action","fn","isRegistered","context","event","keyEvent","isKey","isCmd","trigger","hasModifier"],"mappings":"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","sourcesContent":["import inherits from 'inherits';\n\nimport KeyboardBindings from 'diagram-js/lib/features/keyboard/KeyboardBindings';\n\n\n/**\n * BPMN 2.0 specific keyboard bindings.\n *\n * @param {Injector} injector\n */\nexport default function BpmnKeyboardBindings(injector) {\n  injector.invoke(KeyboardBindings, this);\n}\n\ninherits(BpmnKeyboardBindings, KeyboardBindings);\n\nBpmnKeyboardBindings.$inject = [\n  'injector'\n];\n\n\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nBpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {\n\n  // inherit default bindings\n  KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);\n\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {String} action name\n   * @param {Function} fn that implements the key binding\n   */\n  function addListener(action, fn) {\n\n    if (editorActions.isRegistered(action)) {\n      keyboard.addListener(fn);\n    }\n  }\n\n  // select all elements\n  // CTRL + A\n  addListener('selectElements', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.isKey(['a', 'A'], event) && keyboard.isCmd(event)) {\n      editorActions.trigger('selectElements');\n\n      return true;\n    }\n  });\n\n  // search labels\n  // CTRL + F\n  addListener('find', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.isKey(['f', 'F'], event) && keyboard.isCmd(event)) {\n      editorActions.trigger('find');\n\n      return true;\n    }\n  });\n\n  // activate space tool\n  // S\n  addListener('spaceTool', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['s', 'S'], event)) {\n      editorActions.trigger('spaceTool');\n\n      return true;\n    }\n  });\n\n  // activate lasso tool\n  // L\n  addListener('lassoTool', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['l', 'L'], event)) {\n      editorActions.trigger('lassoTool');\n\n      return true;\n    }\n  });\n\n  // activate hand tool\n  // H\n  addListener('handTool', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['h', 'H'], event)) {\n      editorActions.trigger('handTool');\n\n      return true;\n    }\n  });\n\n  // activate global connect tool\n  // C\n  addListener('globalConnectTool', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['c', 'C'], event)) {\n      editorActions.trigger('globalConnectTool');\n\n      return true;\n    }\n  });\n\n  // activate direct editing\n  // E\n  addListener('directEditing', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['e', 'E'], event)) {\n      editorActions.trigger('directEditing');\n\n      return true;\n    }\n  });\n\n};"]},"metadata":{},"sourceType":"module"}