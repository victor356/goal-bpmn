{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from '../../command/CommandInterceptor';\n/**\n * An abstract provider that allows modelers to implement a custom\n * ordering of diagram elements on the canvas.\n *\n * It makes sure that the order is always preserved during element\n * creation and move operations.\n *\n * In order to use this behavior, inherit from it and override\n * the method {@link OrderingProvider#getOrdering}.\n *\n * @example\n *\n * ```javascript\n * function CustomOrderingProvider(eventBus) {\n *   OrderingProvider.call(this, eventBus);\n *\n *   this.getOrdering = function(element, newParent) {\n *     // always insert elements at the front\n *     // when moving\n *     return {\n *       index: 0,\n *       parent: newParent\n *     };\n *   };\n * }\n * ```\n *\n * @param {EventBus} eventBus\n */\n\nexport default function OrderingProvider(eventBus) {\n  CommandInterceptor.call(this, eventBus);\n  var self = this;\n  this.preExecute(['shape.create', 'connection.create'], function (event) {\n    var context = event.context,\n        element = context.shape || context.connection,\n        parent = context.parent;\n    var ordering = self.getOrdering(element, parent);\n\n    if (ordering) {\n      if (ordering.parent !== undefined) {\n        context.parent = ordering.parent;\n      }\n\n      context.parentIndex = ordering.index;\n    }\n  });\n  this.preExecute(['shape.move', 'connection.move'], function (event) {\n    var context = event.context,\n        element = context.shape || context.connection,\n        parent = context.newParent || element.parent;\n    var ordering = self.getOrdering(element, parent);\n\n    if (ordering) {\n      if (ordering.parent !== undefined) {\n        context.newParent = ordering.parent;\n      }\n\n      context.newParentIndex = ordering.index;\n    }\n  });\n}\n/**\n * Return a custom ordering of the element, both in terms\n * of parent element and index in the new parent.\n *\n * Implementors of this method must return an object with\n * `parent` _and_ `index` in it.\n *\n * @param {djs.model.Base} element\n * @param {djs.model.Shape} newParent\n *\n * @return {Object} ordering descriptor\n */\n\nOrderingProvider.prototype.getOrdering = function (element, newParent) {\n  return null;\n};\n\ninherits(OrderingProvider, CommandInterceptor);","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/features/ordering/OrderingProvider.js"],"names":["inherits","CommandInterceptor","OrderingProvider","eventBus","call","self","preExecute","event","context","element","shape","connection","parent","ordering","getOrdering","undefined","parentIndex","index","newParent","newParentIndex","prototype"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,OAAOC,kBAAP,MAA+B,kCAA/B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAEjDF,EAAAA,kBAAkB,CAACG,IAAnB,CAAwB,IAAxB,EAA8BD,QAA9B;AAGA,MAAIE,IAAI,GAAG,IAAX;AAEA,OAAKC,UAAL,CAAgB,CAAE,cAAF,EAAkB,mBAAlB,CAAhB,EAAyD,UAASC,KAAT,EAAgB;AAEvE,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,OAAO,GAAGD,OAAO,CAACE,KAAR,IAAiBF,OAAO,CAACG,UADvC;AAAA,QAEIC,MAAM,GAAGJ,OAAO,CAACI,MAFrB;AAIA,QAAIC,QAAQ,GAAGR,IAAI,CAACS,WAAL,CAAiBL,OAAjB,EAA0BG,MAA1B,CAAf;;AAEA,QAAIC,QAAJ,EAAc;AAEZ,UAAIA,QAAQ,CAACD,MAAT,KAAoBG,SAAxB,EAAmC;AACjCP,QAAAA,OAAO,CAACI,MAAR,GAAiBC,QAAQ,CAACD,MAA1B;AACD;;AAEDJ,MAAAA,OAAO,CAACQ,WAAR,GAAsBH,QAAQ,CAACI,KAA/B;AACD;AACF,GAhBD;AAkBA,OAAKX,UAAL,CAAgB,CAAE,YAAF,EAAgB,iBAAhB,CAAhB,EAAqD,UAASC,KAAT,EAAgB;AAEnE,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,OAAO,GAAGD,OAAO,CAACE,KAAR,IAAiBF,OAAO,CAACG,UADvC;AAAA,QAEIC,MAAM,GAAGJ,OAAO,CAACU,SAAR,IAAqBT,OAAO,CAACG,MAF1C;AAIA,QAAIC,QAAQ,GAAGR,IAAI,CAACS,WAAL,CAAiBL,OAAjB,EAA0BG,MAA1B,CAAf;;AAEA,QAAIC,QAAJ,EAAc;AAEZ,UAAIA,QAAQ,CAACD,MAAT,KAAoBG,SAAxB,EAAmC;AACjCP,QAAAA,OAAO,CAACU,SAAR,GAAoBL,QAAQ,CAACD,MAA7B;AACD;;AAEDJ,MAAAA,OAAO,CAACW,cAAR,GAAyBN,QAAQ,CAACI,KAAlC;AACD;AACF,GAhBD;AAiBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAf,gBAAgB,CAACkB,SAAjB,CAA2BN,WAA3B,GAAyC,UAASL,OAAT,EAAkBS,SAAlB,EAA6B;AACpE,SAAO,IAAP;AACD,CAFD;;AAIAlB,QAAQ,CAACE,gBAAD,EAAmBD,kBAAnB,CAAR","sourcesContent":["import inherits from 'inherits';\n\nimport CommandInterceptor from '../../command/CommandInterceptor';\n\n\n/**\n * An abstract provider that allows modelers to implement a custom\n * ordering of diagram elements on the canvas.\n *\n * It makes sure that the order is always preserved during element\n * creation and move operations.\n *\n * In order to use this behavior, inherit from it and override\n * the method {@link OrderingProvider#getOrdering}.\n *\n * @example\n *\n * ```javascript\n * function CustomOrderingProvider(eventBus) {\n *   OrderingProvider.call(this, eventBus);\n *\n *   this.getOrdering = function(element, newParent) {\n *     // always insert elements at the front\n *     // when moving\n *     return {\n *       index: 0,\n *       parent: newParent\n *     };\n *   };\n * }\n * ```\n *\n * @param {EventBus} eventBus\n */\nexport default function OrderingProvider(eventBus) {\n\n  CommandInterceptor.call(this, eventBus);\n\n\n  var self = this;\n\n  this.preExecute([ 'shape.create', 'connection.create' ], function(event) {\n\n    var context = event.context,\n        element = context.shape || context.connection,\n        parent = context.parent;\n\n    var ordering = self.getOrdering(element, parent);\n\n    if (ordering) {\n\n      if (ordering.parent !== undefined) {\n        context.parent = ordering.parent;\n      }\n\n      context.parentIndex = ordering.index;\n    }\n  });\n\n  this.preExecute([ 'shape.move', 'connection.move' ], function(event) {\n\n    var context = event.context,\n        element = context.shape || context.connection,\n        parent = context.newParent || element.parent;\n\n    var ordering = self.getOrdering(element, parent);\n\n    if (ordering) {\n\n      if (ordering.parent !== undefined) {\n        context.newParent = ordering.parent;\n      }\n\n      context.newParentIndex = ordering.index;\n    }\n  });\n}\n\n/**\n * Return a custom ordering of the element, both in terms\n * of parent element and index in the new parent.\n *\n * Implementors of this method must return an object with\n * `parent` _and_ `index` in it.\n *\n * @param {djs.model.Base} element\n * @param {djs.model.Shape} newParent\n *\n * @return {Object} ordering descriptor\n */\nOrderingProvider.prototype.getOrdering = function(element, newParent) {\n  return null;\n};\n\ninherits(OrderingProvider, CommandInterceptor);"]},"metadata":{},"sourceType":"module"}