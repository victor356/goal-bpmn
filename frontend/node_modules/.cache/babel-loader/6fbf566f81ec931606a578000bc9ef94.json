{"ast":null,"code":"import { getElementLineIntersection } from '../../layout/LayoutUtil';\nimport { getMid } from '../../layout/LayoutUtil';\nvar MARKER_OK = 'connect-ok',\n    MARKER_NOT_OK = 'connect-not-ok';\nimport { append as svgAppend, attr as svgAttr, create as svgCreate, remove as svgRemove } from 'tiny-svg';\nexport default function Connect(eventBus, dragging, modeling, rules, canvas, graphicsFactory) {\n  // TODO(nre): separate UI and events\n  // rules\n  function canConnect(source, target) {\n    return rules.allowed('connection.create', {\n      source: source,\n      target: target\n    });\n  } // layouting\n\n\n  function crop(start, end, source, target) {\n    var sourcePath = graphicsFactory.getShapePath(source),\n        targetPath = target && graphicsFactory.getShapePath(target),\n        connectionPath = graphicsFactory.getConnectionPath({\n      waypoints: [start, end]\n    });\n    start = getElementLineIntersection(sourcePath, connectionPath, true) || start;\n    end = target && getElementLineIntersection(targetPath, connectionPath, false) || end;\n    return [start, end];\n  } // event handlers\n\n\n  eventBus.on('connect.move', function (event) {\n    var context = event.context,\n        source = context.source,\n        target = context.target,\n        visual = context.visual,\n        sourcePosition = context.sourcePosition,\n        endPosition,\n        waypoints; // update connection visuals during drag\n\n    endPosition = {\n      x: event.x,\n      y: event.y\n    };\n    waypoints = crop(sourcePosition, endPosition, source, target);\n    svgAttr(visual, {\n      'points': [waypoints[0].x, waypoints[0].y, waypoints[1].x, waypoints[1].y]\n    });\n  });\n  eventBus.on('connect.hover', function (event) {\n    var context = event.context,\n        source = context.source,\n        hover = event.hover,\n        canExecute;\n    canExecute = context.canExecute = canConnect(source, hover); // simply ignore hover\n\n    if (canExecute === null) {\n      return;\n    }\n\n    context.target = hover;\n    canvas.addMarker(hover, canExecute ? MARKER_OK : MARKER_NOT_OK);\n  });\n  eventBus.on(['connect.out', 'connect.cleanup'], function (event) {\n    var context = event.context;\n\n    if (context.target) {\n      canvas.removeMarker(context.target, context.canExecute ? MARKER_OK : MARKER_NOT_OK);\n    }\n\n    context.target = null;\n    context.canExecute = false;\n  });\n  eventBus.on('connect.cleanup', function (event) {\n    var context = event.context;\n\n    if (context.visual) {\n      svgRemove(context.visual);\n    }\n  });\n  eventBus.on('connect.start', function (event) {\n    var context = event.context,\n        visual;\n    visual = svgCreate('polyline');\n    svgAttr(visual, {\n      'stroke': '#333',\n      'strokeDasharray': [1],\n      'strokeWidth': 2,\n      'pointer-events': 'none'\n    });\n    svgAppend(canvas.getDefaultLayer(), visual);\n    context.visual = visual;\n  });\n  eventBus.on('connect.end', function (event) {\n    var context = event.context,\n        source = context.source,\n        sourcePosition = context.sourcePosition,\n        target = context.target,\n        targetPosition = {\n      x: event.x,\n      y: event.y\n    },\n        canExecute = context.canExecute || canConnect(source, target);\n\n    if (!canExecute) {\n      return false;\n    }\n\n    var attrs = null,\n        hints = {\n      connectionStart: sourcePosition,\n      connectionEnd: targetPosition\n    };\n\n    if (typeof canExecute === 'object') {\n      attrs = canExecute;\n    }\n\n    modeling.connect(source, target, attrs, hints);\n  }); // API\n\n  /**\n   * Start connect operation.\n   *\n   * @param {DOMEvent} event\n   * @param {djs.model.Base} source\n   * @param {Point} [sourcePosition]\n   * @param {Boolean} [autoActivate=false]\n   */\n\n  this.start = function (event, source, sourcePosition, autoActivate) {\n    if (typeof sourcePosition !== 'object') {\n      autoActivate = sourcePosition;\n      sourcePosition = getMid(source);\n    }\n\n    dragging.init(event, 'connect', {\n      autoActivate: autoActivate,\n      data: {\n        shape: source,\n        context: {\n          source: source,\n          sourcePosition: sourcePosition\n        }\n      }\n    });\n  };\n}\nConnect.$inject = ['eventBus', 'dragging', 'modeling', 'rules', 'canvas', 'graphicsFactory'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/connect/Connect.js"],"names":["getElementLineIntersection","getMid","MARKER_OK","MARKER_NOT_OK","append","svgAppend","attr","svgAttr","create","svgCreate","remove","svgRemove","Connect","eventBus","dragging","modeling","rules","canvas","graphicsFactory","canConnect","source","target","allowed","crop","start","end","sourcePath","getShapePath","targetPath","connectionPath","getConnectionPath","waypoints","on","event","context","visual","sourcePosition","endPosition","x","y","hover","canExecute","addMarker","removeMarker","getDefaultLayer","targetPosition","attrs","hints","connectionStart","connectionEnd","connect","autoActivate","init","data","shape","$inject"],"mappings":"AAAA,SACEA,0BADF,QAEO,yBAFP;AAIA,SACEC,MADF,QAEO,yBAFP;AAIA,IAAIC,SAAS,GAAG,YAAhB;AAAA,IACIC,aAAa,GAAG,gBADpB;AAGA,SACEC,MAAM,IAAIC,SADZ,EAEEC,IAAI,IAAIC,OAFV,EAGEC,MAAM,IAAIC,SAHZ,EAIEC,MAAM,IAAIC,SAJZ,QAKO,UALP;AAQA,eAAe,SAASC,OAAT,CACXC,QADW,EACDC,QADC,EACSC,QADT,EAEXC,KAFW,EAEJC,MAFI,EAEIC,eAFJ,EAEqB;AAElC;AAEA;AAEA,WAASC,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AAClC,WAAOL,KAAK,CAACM,OAAN,CAAc,mBAAd,EAAmC;AACxCF,MAAAA,MAAM,EAAEA,MADgC;AAExCC,MAAAA,MAAM,EAAEA;AAFgC,KAAnC,CAAP;AAID,GAXiC,CAclC;;;AAEA,WAASE,IAAT,CAAcC,KAAd,EAAqBC,GAArB,EAA0BL,MAA1B,EAAkCC,MAAlC,EAA0C;AAExC,QAAIK,UAAU,GAAGR,eAAe,CAACS,YAAhB,CAA6BP,MAA7B,CAAjB;AAAA,QACIQ,UAAU,GAAGP,MAAM,IAAIH,eAAe,CAACS,YAAhB,CAA6BN,MAA7B,CAD3B;AAAA,QAEIQ,cAAc,GAAGX,eAAe,CAACY,iBAAhB,CAAkC;AAAEC,MAAAA,SAAS,EAAE,CAAEP,KAAF,EAASC,GAAT;AAAb,KAAlC,CAFrB;AAIAD,IAAAA,KAAK,GAAGxB,0BAA0B,CAAC0B,UAAD,EAAaG,cAAb,EAA6B,IAA7B,CAA1B,IAAgEL,KAAxE;AACAC,IAAAA,GAAG,GAAIJ,MAAM,IAAIrB,0BAA0B,CAAC4B,UAAD,EAAaC,cAAb,EAA6B,KAA7B,CAArC,IAA6EJ,GAAnF;AAEA,WAAO,CAAED,KAAF,EAASC,GAAT,CAAP;AACD,GA1BiC,CA6BlC;;;AAEAZ,EAAAA,QAAQ,CAACmB,EAAT,CAAY,cAAZ,EAA4B,UAASC,KAAT,EAAgB;AAE1C,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACId,MAAM,GAAGc,OAAO,CAACd,MADrB;AAAA,QAEIC,MAAM,GAAGa,OAAO,CAACb,MAFrB;AAAA,QAGIc,MAAM,GAAGD,OAAO,CAACC,MAHrB;AAAA,QAIIC,cAAc,GAAGF,OAAO,CAACE,cAJ7B;AAAA,QAKIC,WALJ;AAAA,QAMIN,SANJ,CAF0C,CAU1C;;AAEAM,IAAAA,WAAW,GAAG;AACZC,MAAAA,CAAC,EAAEL,KAAK,CAACK,CADG;AAEZC,MAAAA,CAAC,EAAEN,KAAK,CAACM;AAFG,KAAd;AAKAR,IAAAA,SAAS,GAAGR,IAAI,CAACa,cAAD,EAAiBC,WAAjB,EAA8BjB,MAA9B,EAAsCC,MAAtC,CAAhB;AAEAd,IAAAA,OAAO,CAAC4B,MAAD,EAAS;AAAE,gBAAU,CAAEJ,SAAS,CAAC,CAAD,CAAT,CAAaO,CAAf,EAAkBP,SAAS,CAAC,CAAD,CAAT,CAAaQ,CAA/B,EAAkCR,SAAS,CAAC,CAAD,CAAT,CAAaO,CAA/C,EAAkDP,SAAS,CAAC,CAAD,CAAT,CAAaQ,CAA/D;AAAZ,KAAT,CAAP;AACD,GApBD;AAsBA1B,EAAAA,QAAQ,CAACmB,EAAT,CAAY,eAAZ,EAA6B,UAASC,KAAT,EAAgB;AAC3C,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACId,MAAM,GAAGc,OAAO,CAACd,MADrB;AAAA,QAEIoB,KAAK,GAAGP,KAAK,CAACO,KAFlB;AAAA,QAGIC,UAHJ;AAKAA,IAAAA,UAAU,GAAGP,OAAO,CAACO,UAAR,GAAqBtB,UAAU,CAACC,MAAD,EAASoB,KAAT,CAA5C,CAN2C,CAQ3C;;AACA,QAAIC,UAAU,KAAK,IAAnB,EAAyB;AACvB;AACD;;AAEDP,IAAAA,OAAO,CAACb,MAAR,GAAiBmB,KAAjB;AAEAvB,IAAAA,MAAM,CAACyB,SAAP,CAAiBF,KAAjB,EAAwBC,UAAU,GAAGvC,SAAH,GAAeC,aAAjD;AACD,GAhBD;AAkBAU,EAAAA,QAAQ,CAACmB,EAAT,CAAY,CAAE,aAAF,EAAiB,iBAAjB,CAAZ,EAAkD,UAASC,KAAT,EAAgB;AAChE,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;;AAEA,QAAIA,OAAO,CAACb,MAAZ,EAAoB;AAClBJ,MAAAA,MAAM,CAAC0B,YAAP,CAAoBT,OAAO,CAACb,MAA5B,EAAoCa,OAAO,CAACO,UAAR,GAAqBvC,SAArB,GAAiCC,aAArE;AACD;;AAED+B,IAAAA,OAAO,CAACb,MAAR,GAAiB,IAAjB;AACAa,IAAAA,OAAO,CAACO,UAAR,GAAqB,KAArB;AACD,GATD;AAWA5B,EAAAA,QAAQ,CAACmB,EAAT,CAAY,iBAAZ,EAA+B,UAASC,KAAT,EAAgB;AAC7C,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;;AAEA,QAAIA,OAAO,CAACC,MAAZ,EAAoB;AAClBxB,MAAAA,SAAS,CAACuB,OAAO,CAACC,MAAT,CAAT;AACD;AACF,GAND;AAQAtB,EAAAA,QAAQ,CAACmB,EAAT,CAAY,eAAZ,EAA6B,UAASC,KAAT,EAAgB;AAC3C,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,MADJ;AAGAA,IAAAA,MAAM,GAAG1B,SAAS,CAAC,UAAD,CAAlB;AACAF,IAAAA,OAAO,CAAC4B,MAAD,EAAS;AACd,gBAAU,MADI;AAEd,yBAAmB,CAAE,CAAF,CAFL;AAGd,qBAAe,CAHD;AAId,wBAAkB;AAJJ,KAAT,CAAP;AAOA9B,IAAAA,SAAS,CAACY,MAAM,CAAC2B,eAAP,EAAD,EAA2BT,MAA3B,CAAT;AAEAD,IAAAA,OAAO,CAACC,MAAR,GAAiBA,MAAjB;AACD,GAfD;AAiBAtB,EAAAA,QAAQ,CAACmB,EAAT,CAAY,aAAZ,EAA2B,UAASC,KAAT,EAAgB;AAEzC,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACId,MAAM,GAAGc,OAAO,CAACd,MADrB;AAAA,QAEIgB,cAAc,GAAGF,OAAO,CAACE,cAF7B;AAAA,QAGIf,MAAM,GAAGa,OAAO,CAACb,MAHrB;AAAA,QAIIwB,cAAc,GAAG;AACfP,MAAAA,CAAC,EAAEL,KAAK,CAACK,CADM;AAEfC,MAAAA,CAAC,EAAEN,KAAK,CAACM;AAFM,KAJrB;AAAA,QAQIE,UAAU,GAAGP,OAAO,CAACO,UAAR,IAAsBtB,UAAU,CAACC,MAAD,EAASC,MAAT,CARjD;;AAUA,QAAI,CAACoB,UAAL,EAAiB;AACf,aAAO,KAAP;AACD;;AAED,QAAIK,KAAK,GAAG,IAAZ;AAAA,QACIC,KAAK,GAAG;AACNC,MAAAA,eAAe,EAAEZ,cADX;AAENa,MAAAA,aAAa,EAAEJ;AAFT,KADZ;;AAMA,QAAI,OAAOJ,UAAP,KAAsB,QAA1B,EAAoC;AAClCK,MAAAA,KAAK,GAAGL,UAAR;AACD;;AAED1B,IAAAA,QAAQ,CAACmC,OAAT,CAAiB9B,MAAjB,EAAyBC,MAAzB,EAAiCyB,KAAjC,EAAwCC,KAAxC;AACD,GA3BD,EA3GkC,CAyIlC;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKvB,KAAL,GAAa,UAASS,KAAT,EAAgBb,MAAhB,EAAwBgB,cAAxB,EAAwCe,YAAxC,EAAsD;AAEjE,QAAI,OAAOf,cAAP,KAA0B,QAA9B,EAAwC;AACtCe,MAAAA,YAAY,GAAGf,cAAf;AACAA,MAAAA,cAAc,GAAGnC,MAAM,CAACmB,MAAD,CAAvB;AACD;;AAEDN,IAAAA,QAAQ,CAACsC,IAAT,CAAcnB,KAAd,EAAqB,SAArB,EAAgC;AAC9BkB,MAAAA,YAAY,EAAEA,YADgB;AAE9BE,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAElC,MADH;AAEJc,QAAAA,OAAO,EAAE;AACPd,UAAAA,MAAM,EAAEA,MADD;AAEPgB,UAAAA,cAAc,EAAEA;AAFT;AAFL;AAFwB,KAAhC;AAUD,GAjBD;AAkBD;AAEDxB,OAAO,CAAC2C,OAAR,GAAkB,CAChB,UADgB,EAEhB,UAFgB,EAGhB,UAHgB,EAIhB,OAJgB,EAKhB,QALgB,EAMhB,iBANgB,CAAlB","sourcesContent":["import {\n  getElementLineIntersection\n} from '../../layout/LayoutUtil';\n\nimport {\n  getMid\n} from '../../layout/LayoutUtil';\n\nvar MARKER_OK = 'connect-ok',\n    MARKER_NOT_OK = 'connect-not-ok';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  create as svgCreate,\n  remove as svgRemove\n} from 'tiny-svg';\n\n\nexport default function Connect(\n    eventBus, dragging, modeling,\n    rules, canvas, graphicsFactory) {\n\n  // TODO(nre): separate UI and events\n\n  // rules\n\n  function canConnect(source, target) {\n    return rules.allowed('connection.create', {\n      source: source,\n      target: target\n    });\n  }\n\n\n  // layouting\n\n  function crop(start, end, source, target) {\n\n    var sourcePath = graphicsFactory.getShapePath(source),\n        targetPath = target && graphicsFactory.getShapePath(target),\n        connectionPath = graphicsFactory.getConnectionPath({ waypoints: [ start, end ] });\n\n    start = getElementLineIntersection(sourcePath, connectionPath, true) || start;\n    end = (target && getElementLineIntersection(targetPath, connectionPath, false)) || end;\n\n    return [ start, end ];\n  }\n\n\n  // event handlers\n\n  eventBus.on('connect.move', function(event) {\n\n    var context = event.context,\n        source = context.source,\n        target = context.target,\n        visual = context.visual,\n        sourcePosition = context.sourcePosition,\n        endPosition,\n        waypoints;\n\n    // update connection visuals during drag\n\n    endPosition = {\n      x: event.x,\n      y: event.y\n    };\n\n    waypoints = crop(sourcePosition, endPosition, source, target);\n\n    svgAttr(visual, { 'points': [ waypoints[0].x, waypoints[0].y, waypoints[1].x, waypoints[1].y ] });\n  });\n\n  eventBus.on('connect.hover', function(event) {\n    var context = event.context,\n        source = context.source,\n        hover = event.hover,\n        canExecute;\n\n    canExecute = context.canExecute = canConnect(source, hover);\n\n    // simply ignore hover\n    if (canExecute === null) {\n      return;\n    }\n\n    context.target = hover;\n\n    canvas.addMarker(hover, canExecute ? MARKER_OK : MARKER_NOT_OK);\n  });\n\n  eventBus.on([ 'connect.out', 'connect.cleanup' ], function(event) {\n    var context = event.context;\n\n    if (context.target) {\n      canvas.removeMarker(context.target, context.canExecute ? MARKER_OK : MARKER_NOT_OK);\n    }\n\n    context.target = null;\n    context.canExecute = false;\n  });\n\n  eventBus.on('connect.cleanup', function(event) {\n    var context = event.context;\n\n    if (context.visual) {\n      svgRemove(context.visual);\n    }\n  });\n\n  eventBus.on('connect.start', function(event) {\n    var context = event.context,\n        visual;\n\n    visual = svgCreate('polyline');\n    svgAttr(visual, {\n      'stroke': '#333',\n      'strokeDasharray': [ 1 ],\n      'strokeWidth': 2,\n      'pointer-events': 'none'\n    });\n\n    svgAppend(canvas.getDefaultLayer(), visual);\n\n    context.visual = visual;\n  });\n\n  eventBus.on('connect.end', function(event) {\n\n    var context = event.context,\n        source = context.source,\n        sourcePosition = context.sourcePosition,\n        target = context.target,\n        targetPosition = {\n          x: event.x,\n          y: event.y\n        },\n        canExecute = context.canExecute || canConnect(source, target);\n\n    if (!canExecute) {\n      return false;\n    }\n\n    var attrs = null,\n        hints = {\n          connectionStart: sourcePosition,\n          connectionEnd: targetPosition\n        };\n\n    if (typeof canExecute === 'object') {\n      attrs = canExecute;\n    }\n\n    modeling.connect(source, target, attrs, hints);\n  });\n\n\n  // API\n\n  /**\n   * Start connect operation.\n   *\n   * @param {DOMEvent} event\n   * @param {djs.model.Base} source\n   * @param {Point} [sourcePosition]\n   * @param {Boolean} [autoActivate=false]\n   */\n  this.start = function(event, source, sourcePosition, autoActivate) {\n\n    if (typeof sourcePosition !== 'object') {\n      autoActivate = sourcePosition;\n      sourcePosition = getMid(source);\n    }\n\n    dragging.init(event, 'connect', {\n      autoActivate: autoActivate,\n      data: {\n        shape: source,\n        context: {\n          source: source,\n          sourcePosition: sourcePosition\n        }\n      }\n    });\n  };\n}\n\nConnect.$inject = [\n  'eventBus',\n  'dragging',\n  'modeling',\n  'rules',\n  'canvas',\n  'graphicsFactory'\n];"]},"metadata":{},"sourceType":"module"}