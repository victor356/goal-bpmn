{"ast":null,"code":"'use strict';\n\nvar elementHelper = require('../helper/ElementHelper');\n/**\n * A handler capable of creating a new element under a provided parent\n * and updating / creating a reference to it in one atomic action.\n *\n * @class\n * @constructor\n */\n\n\nfunction CreateAndReferenceElementHandler(elementRegistry, bpmnFactory) {\n  this._elementRegistry = elementRegistry;\n  this._bpmnFactory = bpmnFactory;\n}\n\nCreateAndReferenceElementHandler.$inject = ['elementRegistry', 'bpmnFactory'];\nmodule.exports = CreateAndReferenceElementHandler; // api ////////////////////\n\n/**\n * Creates a new element under a provided parent and updates / creates a reference to it in\n * one atomic action.\n *\n * @method  CreateAndReferenceElementHandler#execute\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element which is the context for the reference\n * @param {moddle.referencingObject} context.referencingObject the object which creates the reference\n * @param {String} context.referenceProperty the property of the referencingObject which makes the reference\n * @param {moddle.newObject} context.newObject the new object to add\n * @param {moddle.newObjectContainer} context.newObjectContainer the container for the new object\n *\n * @returns {Array<djs.mode.Base>} the updated element\n */\n\nCreateAndReferenceElementHandler.prototype.execute = function (context) {\n  var referencingObject = ensureNotNull(context.referencingObject, 'referencingObject'),\n      referenceProperty = ensureNotNull(context.referenceProperty, 'referenceProperty'),\n      newObject = ensureNotNull(context.newObject, 'newObject'),\n      newObjectContainer = ensureNotNull(context.newObjectContainer, 'newObjectContainer'),\n      newObjectParent = ensureNotNull(context.newObjectParent, 'newObjectParent'),\n      changed = [context.element]; // this will not change any diagram-js elements\n  // create new object\n\n  var referencedObject = elementHelper.createElement(newObject.type, newObject.properties, newObjectParent, this._bpmnFactory);\n  context.referencedObject = referencedObject; // add to containing list\n\n  newObjectContainer.push(referencedObject); // adjust reference attribute\n\n  context.previousReference = referencingObject[referenceProperty];\n  referencingObject[referenceProperty] = referencedObject;\n  context.changed = changed; // indicate changed on objects affected by the update\n\n  return changed;\n};\n/**\n * Reverts the update\n *\n * @method  CreateAndReferenceElementHandler#revert\n *\n * @param {Object} context\n *\n * @returns {djs.mode.Base} the updated element\n */\n\n\nCreateAndReferenceElementHandler.prototype.revert = function (context) {\n  var referencingObject = context.referencingObject,\n      referenceProperty = context.referenceProperty,\n      previousReference = context.previousReference,\n      referencedObject = context.referencedObject,\n      newObjectContainer = context.newObjectContainer; // reset reference\n\n  referencingObject.set(referenceProperty, previousReference); // remove new element\n\n  newObjectContainer.splice(newObjectContainer.indexOf(referencedObject), 1);\n  return context.changed;\n}; // helpers //////////////\n\n\nfunction ensureNotNull(prop, name) {\n  if (!prop) {\n    throw new Error(name + ' required');\n  }\n\n  return prop;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/cmd/CreateAndReferenceHandler.js"],"names":["elementHelper","require","CreateAndReferenceElementHandler","elementRegistry","bpmnFactory","_elementRegistry","_bpmnFactory","$inject","module","exports","prototype","execute","context","referencingObject","ensureNotNull","referenceProperty","newObject","newObjectContainer","newObjectParent","changed","element","referencedObject","createElement","type","properties","push","previousReference","revert","set","splice","indexOf","prop","name","Error"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,yBAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gCAAT,CAA0CC,eAA1C,EAA2DC,WAA3D,EAAwE;AACtE,OAAKC,gBAAL,GAAwBF,eAAxB;AACA,OAAKG,YAAL,GAAoBF,WAApB;AACD;;AAEDF,gCAAgC,CAACK,OAAjC,GAA2C,CAAE,iBAAF,EAAqB,aAArB,CAA3C;AAEAC,MAAM,CAACC,OAAP,GAAiBP,gCAAjB,C,CAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,gCAAgC,CAACQ,SAAjC,CAA2CC,OAA3C,GAAqD,UAASC,OAAT,EAAkB;AAErE,MAAIC,iBAAiB,GAAGC,aAAa,CAACF,OAAO,CAACC,iBAAT,EAA4B,mBAA5B,CAArC;AAAA,MACIE,iBAAiB,GAAGD,aAAa,CAACF,OAAO,CAACG,iBAAT,EAA4B,mBAA5B,CADrC;AAAA,MAEIC,SAAS,GAAGF,aAAa,CAACF,OAAO,CAACI,SAAT,EAAoB,WAApB,CAF7B;AAAA,MAGIC,kBAAkB,GAAGH,aAAa,CAACF,OAAO,CAACK,kBAAT,EAA6B,oBAA7B,CAHtC;AAAA,MAIIC,eAAe,GAAGJ,aAAa,CAACF,OAAO,CAACM,eAAT,EAA0B,iBAA1B,CAJnC;AAAA,MAKIC,OAAO,GAAG,CAAEP,OAAO,CAACQ,OAAV,CALd,CAFqE,CAOlC;AAEnC;;AACA,MAAIC,gBAAgB,GAAGrB,aAAa,CACjCsB,aADoB,CACNN,SAAS,CAACO,IADJ,EACUP,SAAS,CAACQ,UADpB,EACgCN,eADhC,EACiD,KAAKZ,YADtD,CAAvB;AAEAM,EAAAA,OAAO,CAACS,gBAAR,GAA2BA,gBAA3B,CAZqE,CAcrE;;AACAJ,EAAAA,kBAAkB,CAACQ,IAAnB,CAAwBJ,gBAAxB,EAfqE,CAiBrE;;AACAT,EAAAA,OAAO,CAACc,iBAAR,GAA4Bb,iBAAiB,CAACE,iBAAD,CAA7C;AACAF,EAAAA,iBAAiB,CAACE,iBAAD,CAAjB,GAAuCM,gBAAvC;AAEAT,EAAAA,OAAO,CAACO,OAAR,GAAkBA,OAAlB,CArBqE,CAuBrE;;AACA,SAAOA,OAAP;AACD,CAzBD;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjB,gCAAgC,CAACQ,SAAjC,CAA2CiB,MAA3C,GAAoD,UAASf,OAAT,EAAkB;AAEpE,MAAIC,iBAAiB,GAAGD,OAAO,CAACC,iBAAhC;AAAA,MACIE,iBAAiB,GAAGH,OAAO,CAACG,iBADhC;AAAA,MAEIW,iBAAiB,GAAGd,OAAO,CAACc,iBAFhC;AAAA,MAGIL,gBAAgB,GAAGT,OAAO,CAACS,gBAH/B;AAAA,MAIIJ,kBAAkB,GAAGL,OAAO,CAACK,kBAJjC,CAFoE,CAQpE;;AACAJ,EAAAA,iBAAiB,CAACe,GAAlB,CAAsBb,iBAAtB,EAAyCW,iBAAzC,EAToE,CAWpE;;AACAT,EAAAA,kBAAkB,CAACY,MAAnB,CAA0BZ,kBAAkB,CAACa,OAAnB,CAA2BT,gBAA3B,CAA1B,EAAwE,CAAxE;AAEA,SAAOT,OAAO,CAACO,OAAf;AACD,CAfD,C,CAmBA;;;AAEA,SAASL,aAAT,CAAuBiB,IAAvB,EAA6BC,IAA7B,EAAmC;AACjC,MAAI,CAACD,IAAL,EAAW;AACT,UAAM,IAAIE,KAAJ,CAAUD,IAAI,GAAG,WAAjB,CAAN;AACD;;AACD,SAAOD,IAAP;AACD","sourcesContent":["'use strict';\n\nvar elementHelper = require('../helper/ElementHelper');\n\n/**\n * A handler capable of creating a new element under a provided parent\n * and updating / creating a reference to it in one atomic action.\n *\n * @class\n * @constructor\n */\nfunction CreateAndReferenceElementHandler(elementRegistry, bpmnFactory) {\n  this._elementRegistry = elementRegistry;\n  this._bpmnFactory = bpmnFactory;\n}\n\nCreateAndReferenceElementHandler.$inject = [ 'elementRegistry', 'bpmnFactory' ];\n\nmodule.exports = CreateAndReferenceElementHandler;\n\n\n// api ////////////////////\n\n/**\n * Creates a new element under a provided parent and updates / creates a reference to it in\n * one atomic action.\n *\n * @method  CreateAndReferenceElementHandler#execute\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element which is the context for the reference\n * @param {moddle.referencingObject} context.referencingObject the object which creates the reference\n * @param {String} context.referenceProperty the property of the referencingObject which makes the reference\n * @param {moddle.newObject} context.newObject the new object to add\n * @param {moddle.newObjectContainer} context.newObjectContainer the container for the new object\n *\n * @returns {Array<djs.mode.Base>} the updated element\n */\nCreateAndReferenceElementHandler.prototype.execute = function(context) {\n\n  var referencingObject = ensureNotNull(context.referencingObject, 'referencingObject'),\n      referenceProperty = ensureNotNull(context.referenceProperty, 'referenceProperty'),\n      newObject = ensureNotNull(context.newObject, 'newObject'),\n      newObjectContainer = ensureNotNull(context.newObjectContainer, 'newObjectContainer'),\n      newObjectParent = ensureNotNull(context.newObjectParent, 'newObjectParent'),\n      changed = [ context.element ]; // this will not change any diagram-js elements\n\n  // create new object\n  var referencedObject = elementHelper\n    .createElement(newObject.type, newObject.properties, newObjectParent, this._bpmnFactory);\n  context.referencedObject = referencedObject;\n\n  // add to containing list\n  newObjectContainer.push(referencedObject);\n\n  // adjust reference attribute\n  context.previousReference = referencingObject[referenceProperty];\n  referencingObject[referenceProperty] = referencedObject;\n\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n/**\n * Reverts the update\n *\n * @method  CreateAndReferenceElementHandler#revert\n *\n * @param {Object} context\n *\n * @returns {djs.mode.Base} the updated element\n */\nCreateAndReferenceElementHandler.prototype.revert = function(context) {\n\n  var referencingObject = context.referencingObject,\n      referenceProperty = context.referenceProperty,\n      previousReference = context.previousReference,\n      referencedObject = context.referencedObject,\n      newObjectContainer = context.newObjectContainer;\n\n  // reset reference\n  referencingObject.set(referenceProperty, previousReference);\n\n  // remove new element\n  newObjectContainer.splice(newObjectContainer.indexOf(referencedObject), 1);\n\n  return context.changed;\n};\n\n\n\n// helpers //////////////\n\nfunction ensureNotNull(prop, name) {\n  if (!prop) {\n    throw new Error(name + ' required');\n  }\n  return prop;\n}\n"]},"metadata":{},"sourceType":"script"}