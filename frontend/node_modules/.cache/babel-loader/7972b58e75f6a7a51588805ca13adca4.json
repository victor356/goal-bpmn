{"ast":null,"code":"import { is } from '../../util/ModelUtil';\nimport { isAny } from '../modeling/util/ModelingUtil';\nimport { getTextAnnotationPosition, getDataElementPosition, getFlowNodePosition, getDefaultPosition } from './AutoPlaceUtil';\n/**\n * A service that places elements connected to existing ones\n * to an appropriate position in an _automated_ fashion.\n *\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n */\n\nexport default function AutoPlace(eventBus, modeling) {\n  function emit(event, payload) {\n    return eventBus.fire(event, payload);\n  }\n  /**\n   * Append shape to source at appropriate position.\n   *\n   * @param {djs.model.Shape} source\n   * @param {djs.model.Shape} shape\n   *\n   * @return {djs.model.Shape} appended shape\n   */\n\n\n  this.append = function (source, shape) {\n    // allow others to provide the position\n    var position = emit('autoPlace', {\n      source: source,\n      shape: shape\n    });\n\n    if (!position) {\n      position = getNewShapePosition(source, shape);\n    }\n\n    var newShape = modeling.appendShape(source, shape, position, source.parent); // notify interested parties on new shape placed\n\n    emit('autoPlace.end', {\n      shape: newShape\n    });\n    return newShape;\n  };\n}\nAutoPlace.$inject = ['eventBus', 'modeling']; // helpers //////////////////////\n\n/**\n * Find the new position for the target element to\n * connect to source.\n *\n * @param  {djs.model.Shape} source\n * @param  {djs.model.Shape} element\n *\n * @return {Point}\n */\n\nfunction getNewShapePosition(source, element) {\n  if (is(element, 'bpmn:TextAnnotation')) {\n    return getTextAnnotationPosition(source, element);\n  }\n\n  if (isAny(element, ['bpmn:DataObjectReference', 'bpmn:DataStoreReference'])) {\n    return getDataElementPosition(source, element);\n  }\n\n  if (is(element, 'bpmn:FlowNode')) {\n    return getFlowNodePosition(source, element);\n  }\n\n  return getDefaultPosition(source, element);\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/auto-place/AutoPlace.js"],"names":["is","isAny","getTextAnnotationPosition","getDataElementPosition","getFlowNodePosition","getDefaultPosition","AutoPlace","eventBus","modeling","emit","event","payload","fire","append","source","shape","position","getNewShapePosition","newShape","appendShape","parent","$inject","element"],"mappings":"AAAA,SAASA,EAAT,QAAmB,sBAAnB;AACA,SAASC,KAAT,QAAsB,+BAAtB;AAEA,SACEC,yBADF,EAEEC,sBAFF,EAGEC,mBAHF,EAIEC,kBAJF,QAKO,iBALP;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,QAA7B,EAAuC;AAEpD,WAASC,IAAT,CAAcC,KAAd,EAAqBC,OAArB,EAA8B;AAC5B,WAAOJ,QAAQ,CAACK,IAAT,CAAcF,KAAd,EAAqBC,OAArB,CAAP;AACD;AAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,OAAKE,MAAL,GAAc,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;AAEpC;AACA,QAAIC,QAAQ,GAAGP,IAAI,CAAC,WAAD,EAAc;AAC/BK,MAAAA,MAAM,EAAEA,MADuB;AAE/BC,MAAAA,KAAK,EAAEA;AAFwB,KAAd,CAAnB;;AAKA,QAAI,CAACC,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAGC,mBAAmB,CAACH,MAAD,EAASC,KAAT,CAA9B;AACD;;AAED,QAAIG,QAAQ,GAAGV,QAAQ,CAACW,WAAT,CAAqBL,MAArB,EAA6BC,KAA7B,EAAoCC,QAApC,EAA8CF,MAAM,CAACM,MAArD,CAAf,CAZoC,CAcpC;;AACAX,IAAAA,IAAI,CAAC,eAAD,EAAkB;AACpBM,MAAAA,KAAK,EAAEG;AADa,KAAlB,CAAJ;AAIA,WAAOA,QAAP;AACD,GApBD;AAsBD;AAEDZ,SAAS,CAACe,OAAV,GAAoB,CAClB,UADkB,EAElB,UAFkB,CAApB,C,CAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASJ,mBAAT,CAA6BH,MAA7B,EAAqCQ,OAArC,EAA8C;AAE5C,MAAItB,EAAE,CAACsB,OAAD,EAAU,qBAAV,CAAN,EAAwC;AACtC,WAAOpB,yBAAyB,CAACY,MAAD,EAASQ,OAAT,CAAhC;AACD;;AAED,MAAIrB,KAAK,CAACqB,OAAD,EAAU,CAAE,0BAAF,EAA8B,yBAA9B,CAAV,CAAT,EAA+E;AAC7E,WAAOnB,sBAAsB,CAACW,MAAD,EAASQ,OAAT,CAA7B;AACD;;AAED,MAAItB,EAAE,CAACsB,OAAD,EAAU,eAAV,CAAN,EAAkC;AAChC,WAAOlB,mBAAmB,CAACU,MAAD,EAASQ,OAAT,CAA1B;AACD;;AAED,SAAOjB,kBAAkB,CAACS,MAAD,EAASQ,OAAT,CAAzB;AACD","sourcesContent":["import { is } from '../../util/ModelUtil';\nimport { isAny } from '../modeling/util/ModelingUtil';\n\nimport {\n  getTextAnnotationPosition,\n  getDataElementPosition,\n  getFlowNodePosition,\n  getDefaultPosition\n} from './AutoPlaceUtil';\n\n\n/**\n * A service that places elements connected to existing ones\n * to an appropriate position in an _automated_ fashion.\n *\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n */\nexport default function AutoPlace(eventBus, modeling) {\n\n  function emit(event, payload) {\n    return eventBus.fire(event, payload);\n  }\n\n\n  /**\n   * Append shape to source at appropriate position.\n   *\n   * @param {djs.model.Shape} source\n   * @param {djs.model.Shape} shape\n   *\n   * @return {djs.model.Shape} appended shape\n   */\n  this.append = function(source, shape) {\n\n    // allow others to provide the position\n    var position = emit('autoPlace', {\n      source: source,\n      shape: shape\n    });\n\n    if (!position) {\n      position = getNewShapePosition(source, shape);\n    }\n\n    var newShape = modeling.appendShape(source, shape, position, source.parent);\n\n    // notify interested parties on new shape placed\n    emit('autoPlace.end', {\n      shape: newShape\n    });\n\n    return newShape;\n  };\n\n}\n\nAutoPlace.$inject = [\n  'eventBus',\n  'modeling'\n];\n\n\n// helpers //////////////////////\n\n/**\n * Find the new position for the target element to\n * connect to source.\n *\n * @param  {djs.model.Shape} source\n * @param  {djs.model.Shape} element\n *\n * @return {Point}\n */\nfunction getNewShapePosition(source, element) {\n\n  if (is(element, 'bpmn:TextAnnotation')) {\n    return getTextAnnotationPosition(source, element);\n  }\n\n  if (isAny(element, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ])) {\n    return getDataElementPosition(source, element);\n  }\n\n  if (is(element, 'bpmn:FlowNode')) {\n    return getFlowNodePosition(source, element);\n  }\n\n  return getDefaultPosition(source, element);\n}\n"]},"metadata":{},"sourceType":"module"}