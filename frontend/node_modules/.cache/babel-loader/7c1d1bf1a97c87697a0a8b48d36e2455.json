{"ast":null,"code":"'use strict';\n\nvar values = require('lodash/values');\n/**\n * The guy knowing all configured element templates.\n *\n * This registry won't validate. Use the {@link Validator}\n * to verify a template is valid prior to adding it to\n * this registry.\n */\n\n\nfunction ElementTemplates() {\n  this._templates = {};\n  /**\n   * Sets the known element templates.\n   *\n   * @param {Array<TemplateDescriptor>} descriptors\n   *\n   * @return {ElementTemplates}\n   */\n\n  this.set = function (descriptors) {\n    var templates = this._templates = {};\n    descriptors.forEach(function (descriptor) {\n      templates[descriptor.id] = descriptor;\n    });\n    return this;\n  };\n  /**\n   * Get template descriptor with given id.\n   *\n   * @param {String} id\n   *\n   * @return {TemplateDescriptor}\n   */\n\n\n  this.get = function (id) {\n    return this._templates[id];\n  };\n  /**\n   * Return all known template descriptors.\n   *\n   * @return {Array<TemplateDescriptor>}\n   */\n\n\n  this.getAll = function () {\n    return values(this._templates);\n  };\n}\n\nmodule.exports = ElementTemplates;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/element-templates/ElementTemplates.js"],"names":["values","require","ElementTemplates","_templates","set","descriptors","templates","forEach","descriptor","id","get","getAll","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,GAA4B;AAE1B,OAAKC,UAAL,GAAkB,EAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,GAAL,GAAW,UAASC,WAAT,EAAsB;AAE/B,QAAIC,SAAS,GAAG,KAAKH,UAAL,GAAkB,EAAlC;AAEAE,IAAAA,WAAW,CAACE,OAAZ,CAAoB,UAASC,UAAT,EAAqB;AACvCF,MAAAA,SAAS,CAACE,UAAU,CAACC,EAAZ,CAAT,GAA2BD,UAA3B;AACD,KAFD;AAIA,WAAO,IAAP;AACD,GATD;AAWA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,OAAKE,GAAL,GAAW,UAASD,EAAT,EAAa;AACtB,WAAO,KAAKN,UAAL,CAAgBM,EAAhB,CAAP;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;;;AACE,OAAKE,MAAL,GAAc,YAAW;AACvB,WAAOX,MAAM,CAAC,KAAKG,UAAN,CAAb;AACD,GAFD;AAID;;AAEDS,MAAM,CAACC,OAAP,GAAiBX,gBAAjB","sourcesContent":["'use strict';\n\nvar values = require('lodash/values');\n\n/**\n * The guy knowing all configured element templates.\n *\n * This registry won't validate. Use the {@link Validator}\n * to verify a template is valid prior to adding it to\n * this registry.\n */\nfunction ElementTemplates() {\n\n  this._templates = {};\n\n  /**\n   * Sets the known element templates.\n   *\n   * @param {Array<TemplateDescriptor>} descriptors\n   *\n   * @return {ElementTemplates}\n   */\n  this.set = function(descriptors) {\n\n    var templates = this._templates = {};\n\n    descriptors.forEach(function(descriptor) {\n      templates[descriptor.id] = descriptor;\n    });\n\n    return this;\n  };\n\n  /**\n   * Get template descriptor with given id.\n   *\n   * @param {String} id\n   *\n   * @return {TemplateDescriptor}\n   */\n  this.get = function(id) {\n    return this._templates[id];\n  };\n\n  /**\n   * Return all known template descriptors.\n   *\n   * @return {Array<TemplateDescriptor>}\n   */\n  this.getAll = function() {\n    return values(this._templates);\n  };\n\n}\n\nmodule.exports = ElementTemplates;"]},"metadata":{},"sourceType":"script"}