{"ast":null,"code":"import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport inherits from 'inherits';\nimport cssEscape from 'css.escape';\nimport { assign, forEach } from 'min-dash';\nimport { query as domQuery } from 'min-dom';\nimport { attr as svgAttr } from 'tiny-svg';\nvar LOW_PRIORITY = 250;\nexport default function BpmnReplacePreview(eventBus, elementRegistry, elementFactory, canvas, previewSupport) {\n  CommandInterceptor.call(this, eventBus);\n  /**\n   * Replace the visuals of all elements in the context which can be replaced\n   *\n   * @param  {Object} context\n   */\n\n  function replaceVisual(context) {\n    var replacements = context.canExecute.replacements;\n    forEach(replacements, function (replacement) {\n      var id = replacement.oldElementId;\n      var newElement = {\n        type: replacement.newElementType\n      }; // if the visual of the element is already replaced\n\n      if (context.visualReplacements[id]) {\n        return;\n      }\n\n      var element = elementRegistry.get(id);\n      assign(newElement, {\n        x: element.x,\n        y: element.y\n      }); // create a temporary shape\n\n      var tempShape = elementFactory.createShape(newElement);\n      canvas.addShape(tempShape, element.parent); // select the original SVG element related to the element and hide it\n\n      var gfx = domQuery('[data-element-id=\"' + cssEscape(element.id) + '\"]', context.dragGroup);\n\n      if (gfx) {\n        svgAttr(gfx, {\n          display: 'none'\n        });\n      } // clone the gfx of the temporary shape and add it to the drag group\n\n\n      var dragger = previewSupport.addDragger(tempShape, context.dragGroup);\n      context.visualReplacements[id] = dragger;\n      canvas.removeShape(tempShape);\n    });\n  }\n  /**\n   * Restore the original visuals of the previously replaced elements\n   *\n   * @param  {Object} context\n   */\n\n\n  function restoreVisual(context) {\n    var visualReplacements = context.visualReplacements;\n    forEach(visualReplacements, function (dragger, id) {\n      var originalGfx = domQuery('[data-element-id=\"' + cssEscape(id) + '\"]', context.dragGroup);\n\n      if (originalGfx) {\n        svgAttr(originalGfx, {\n          display: 'inline'\n        });\n      }\n\n      dragger.remove();\n\n      if (visualReplacements[id]) {\n        delete visualReplacements[id];\n      }\n    });\n  }\n\n  eventBus.on('shape.move.move', LOW_PRIORITY, function (event) {\n    var context = event.context,\n        canExecute = context.canExecute;\n\n    if (!context.visualReplacements) {\n      context.visualReplacements = {};\n    }\n\n    if (canExecute.replacements) {\n      replaceVisual(context);\n    } else {\n      restoreVisual(context);\n    }\n  });\n}\nBpmnReplacePreview.$inject = ['eventBus', 'elementRegistry', 'elementFactory', 'canvas', 'previewSupport'];\ninherits(BpmnReplacePreview, CommandInterceptor);","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/replace-preview/BpmnReplacePreview.js"],"names":["CommandInterceptor","inherits","cssEscape","assign","forEach","query","domQuery","attr","svgAttr","LOW_PRIORITY","BpmnReplacePreview","eventBus","elementRegistry","elementFactory","canvas","previewSupport","call","replaceVisual","context","replacements","canExecute","replacement","id","oldElementId","newElement","type","newElementType","visualReplacements","element","get","x","y","tempShape","createShape","addShape","parent","gfx","dragGroup","display","dragger","addDragger","removeShape","restoreVisual","originalGfx","remove","on","event","$inject"],"mappings":"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","sourcesContent":["import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport inherits from 'inherits';\n\nimport cssEscape from 'css.escape';\n\nimport {\n  assign,\n  forEach\n} from 'min-dash';\n\nimport {\n  query as domQuery\n} from 'min-dom';\n\nimport {\n  attr as svgAttr\n} from 'tiny-svg';\n\nvar LOW_PRIORITY = 250;\n\n\nexport default function BpmnReplacePreview(\n    eventBus, elementRegistry, elementFactory,\n    canvas, previewSupport) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  /**\n   * Replace the visuals of all elements in the context which can be replaced\n   *\n   * @param  {Object} context\n   */\n  function replaceVisual(context) {\n\n    var replacements = context.canExecute.replacements;\n\n    forEach(replacements, function(replacement) {\n\n      var id = replacement.oldElementId;\n\n      var newElement = {\n        type: replacement.newElementType\n      };\n\n      // if the visual of the element is already replaced\n      if (context.visualReplacements[id]) {\n        return;\n      }\n\n      var element = elementRegistry.get(id);\n\n      assign(newElement, { x: element.x, y: element.y });\n\n      // create a temporary shape\n      var tempShape = elementFactory.createShape(newElement);\n\n      canvas.addShape(tempShape, element.parent);\n\n      // select the original SVG element related to the element and hide it\n      var gfx = domQuery('[data-element-id=\"' + cssEscape(element.id) + '\"]', context.dragGroup);\n\n      if (gfx) {\n        svgAttr(gfx, { display: 'none' });\n      }\n\n      // clone the gfx of the temporary shape and add it to the drag group\n      var dragger = previewSupport.addDragger(tempShape, context.dragGroup);\n\n      context.visualReplacements[id] = dragger;\n\n      canvas.removeShape(tempShape);\n    });\n  }\n\n  /**\n   * Restore the original visuals of the previously replaced elements\n   *\n   * @param  {Object} context\n   */\n  function restoreVisual(context) {\n\n    var visualReplacements = context.visualReplacements;\n\n    forEach(visualReplacements, function(dragger, id) {\n\n      var originalGfx = domQuery('[data-element-id=\"' + cssEscape(id) + '\"]', context.dragGroup);\n\n      if (originalGfx) {\n        svgAttr(originalGfx, { display: 'inline' });\n      }\n\n      dragger.remove();\n\n      if (visualReplacements[id]) {\n        delete visualReplacements[id];\n      }\n    });\n  }\n\n  eventBus.on('shape.move.move', LOW_PRIORITY, function(event) {\n\n    var context = event.context,\n        canExecute = context.canExecute;\n\n    if (!context.visualReplacements) {\n      context.visualReplacements = {};\n    }\n\n    if (canExecute.replacements) {\n      replaceVisual(context);\n    } else {\n      restoreVisual(context);\n    }\n  });\n}\n\nBpmnReplacePreview.$inject = [\n  'eventBus',\n  'elementRegistry',\n  'elementFactory',\n  'canvas',\n  'previewSupport'\n];\n\ninherits(BpmnReplacePreview, CommandInterceptor);"]},"metadata":{},"sourceType":"module"}