{"ast":null,"code":"import { assign } from 'min-dash';\nimport { is } from '../util/ModelUtil';\nimport { isLabelExternal, getExternalLabelBounds } from '../util/LabelUtil';\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport { isExpanded } from '../util/DiUtil';\nimport { elementToString } from './Util';\n\nfunction elementData(semantic, attrs) {\n  return assign({\n    id: semantic.id,\n    type: semantic.$type,\n    businessObject: semantic\n  }, attrs);\n}\n\nfunction getWaypoints(bo, source, target) {\n  var waypoints = bo.di.waypoint;\n\n  if (!waypoints || waypoints.length < 2) {\n    return [getMid(source), getMid(target)];\n  }\n\n  return waypoints.map(function (p) {\n    return {\n      x: p.x,\n      y: p.y\n    };\n  });\n}\n\nfunction notYetDrawn(translate, semantic, refSemantic, property) {\n  return new Error(translate('element {element} referenced by {referenced}#{property} not yet drawn', {\n    element: elementToString(refSemantic),\n    referenced: elementToString(semantic),\n    property: property\n  }));\n}\n/**\n * An importer that adds bpmn elements to the canvas\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementFactory} elementFactory\n * @param {ElementRegistry} elementRegistry\n * @param {Function} translate\n * @param {TextRenderer} textRenderer\n */\n\n\nexport default function BpmnImporter(eventBus, canvas, elementFactory, elementRegistry, translate, textRenderer) {\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementFactory = elementFactory;\n  this._elementRegistry = elementRegistry;\n  this._translate = translate;\n  this._textRenderer = textRenderer;\n}\nBpmnImporter.$inject = ['eventBus', 'canvas', 'elementFactory', 'elementRegistry', 'translate', 'textRenderer'];\n/**\n * Add bpmn element (semantic) to the canvas onto the\n * specified parent shape.\n */\n\nBpmnImporter.prototype.add = function (semantic, parentElement) {\n  var di = semantic.di,\n      element,\n      translate = this._translate,\n      hidden;\n  var parentIndex; // ROOT ELEMENT\n  // handle the special case that we deal with a\n  // invisible root element (process or collaboration)\n\n  if (is(di, 'bpmndi:BPMNPlane')) {\n    // add a virtual element (not being drawn)\n    element = this._elementFactory.createRoot(elementData(semantic));\n\n    this._canvas.setRootElement(element);\n  } // SHAPE\n  else if (is(di, 'bpmndi:BPMNShape')) {\n      var collapsed = !isExpanded(semantic);\n      hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n      var bounds = semantic.di.bounds;\n      element = this._elementFactory.createShape(elementData(semantic, {\n        collapsed: collapsed,\n        hidden: hidden,\n        x: Math.round(bounds.x),\n        y: Math.round(bounds.y),\n        width: Math.round(bounds.width),\n        height: Math.round(bounds.height)\n      }));\n\n      if (is(semantic, 'bpmn:BoundaryEvent')) {\n        this._attachBoundary(semantic, element);\n      } // insert lanes behind other flow nodes (cf. #727)\n\n\n      if (is(semantic, 'bpmn:Lane')) {\n        parentIndex = 0;\n      }\n\n      if (is(semantic, 'bpmn:DataStoreReference')) {\n        // check wether data store is inside our outside of its semantic parent\n        if (!isPointInsideBBox(parentElement, getMid(bounds))) {\n          parentElement = this._canvas.getRootElement();\n        }\n      }\n\n      this._canvas.addShape(element, parentElement, parentIndex);\n    } // CONNECTION\n    else if (is(di, 'bpmndi:BPMNEdge')) {\n        var source = this._getSource(semantic),\n            target = this._getTarget(semantic);\n\n        hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n        element = this._elementFactory.createConnection(elementData(semantic, {\n          hidden: hidden,\n          source: source,\n          target: target,\n          waypoints: getWaypoints(semantic, source, target)\n        }));\n\n        if (is(semantic, 'bpmn:DataAssociation')) {\n          // render always on top; this ensures DataAssociations\n          // are rendered correctly across different \"hacks\" people\n          // love to model such as cross participant / sub process\n          // associations\n          parentElement = null;\n        } // insert sequence flows behind other flow nodes (cf. #727)\n\n\n        if (is(semantic, 'bpmn:SequenceFlow')) {\n          parentIndex = 0;\n        }\n\n        this._canvas.addConnection(element, parentElement, parentIndex);\n      } else {\n        throw new Error(translate('unknown di {di} for element {semantic}', {\n          di: elementToString(di),\n          semantic: elementToString(semantic)\n        }));\n      } // (optional) LABEL\n\n\n  if (isLabelExternal(semantic) && semantic.name) {\n    this.addLabel(semantic, element);\n  }\n\n  this._eventBus.fire('bpmnElement.added', {\n    element: element\n  });\n\n  return element;\n};\n/**\n * Attach the boundary element to the given host\n *\n * @param {ModdleElement} boundarySemantic\n * @param {djs.model.Base} boundaryElement\n */\n\n\nBpmnImporter.prototype._attachBoundary = function (boundarySemantic, boundaryElement) {\n  var translate = this._translate;\n  var hostSemantic = boundarySemantic.attachedToRef;\n\n  if (!hostSemantic) {\n    throw new Error(translate('missing {semantic}#attachedToRef', {\n      semantic: elementToString(boundarySemantic)\n    }));\n  }\n\n  var host = this._elementRegistry.get(hostSemantic.id),\n      attachers = host && host.attachers;\n\n  if (!host) {\n    throw notYetDrawn(translate, boundarySemantic, hostSemantic, 'attachedToRef');\n  } // wire element.host <> host.attachers\n\n\n  boundaryElement.host = host;\n\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n\n  if (attachers.indexOf(boundaryElement) === -1) {\n    attachers.push(boundaryElement);\n  }\n};\n/**\n * add label for an element\n */\n\n\nBpmnImporter.prototype.addLabel = function (semantic, element) {\n  var bounds, text, label;\n  bounds = getExternalLabelBounds(semantic, element);\n  text = semantic.name;\n\n  if (text) {\n    // get corrected bounds from actual layouted text\n    bounds = this._textRenderer.getExternalLabelBounds(bounds, text);\n  }\n\n  label = this._elementFactory.createLabel(elementData(semantic, {\n    id: semantic.id + '_label',\n    labelTarget: element,\n    type: 'label',\n    hidden: element.hidden || !semantic.name,\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  }));\n  return this._canvas.addShape(label, element.parent);\n};\n/**\n * Return the drawn connection end based on the given side.\n *\n * @throws {Error} if the end is not yet drawn\n */\n\n\nBpmnImporter.prototype._getEnd = function (semantic, side) {\n  var element,\n      refSemantic,\n      type = semantic.$type,\n      translate = this._translate;\n  refSemantic = semantic[side + 'Ref']; // handle mysterious isMany DataAssociation#sourceRef\n\n  if (side === 'source' && type === 'bpmn:DataInputAssociation') {\n    refSemantic = refSemantic && refSemantic[0];\n  } // fix source / target for DataInputAssociation / DataOutputAssociation\n\n\n  if (side === 'source' && type === 'bpmn:DataOutputAssociation' || side === 'target' && type === 'bpmn:DataInputAssociation') {\n    refSemantic = semantic.$parent;\n  }\n\n  element = refSemantic && this._getElement(refSemantic);\n\n  if (element) {\n    return element;\n  }\n\n  if (refSemantic) {\n    throw notYetDrawn(translate, semantic, refSemantic, side + 'Ref');\n  } else {\n    throw new Error(translate('{semantic}#{side} Ref not specified', {\n      semantic: elementToString(semantic),\n      side: side\n    }));\n  }\n};\n\nBpmnImporter.prototype._getSource = function (semantic) {\n  return this._getEnd(semantic, 'source');\n};\n\nBpmnImporter.prototype._getTarget = function (semantic) {\n  return this._getEnd(semantic, 'target');\n};\n\nBpmnImporter.prototype._getElement = function (semantic) {\n  return this._elementRegistry.get(semantic.id);\n}; // helpers ////////////////////\n\n\nfunction isPointInsideBBox(bbox, point) {\n  var x = point.x,\n      y = point.y;\n  return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/import/BpmnImporter.js"],"names":["assign","is","isLabelExternal","getExternalLabelBounds","getMid","isExpanded","elementToString","elementData","semantic","attrs","id","type","$type","businessObject","getWaypoints","bo","source","target","waypoints","di","waypoint","length","map","p","x","y","notYetDrawn","translate","refSemantic","property","Error","element","referenced","BpmnImporter","eventBus","canvas","elementFactory","elementRegistry","textRenderer","_eventBus","_canvas","_elementFactory","_elementRegistry","_translate","_textRenderer","$inject","prototype","add","parentElement","hidden","parentIndex","createRoot","setRootElement","collapsed","bounds","createShape","Math","round","width","height","_attachBoundary","isPointInsideBBox","getRootElement","addShape","_getSource","_getTarget","createConnection","addConnection","name","addLabel","fire","boundarySemantic","boundaryElement","hostSemantic","attachedToRef","host","get","attachers","indexOf","push","text","label","createLabel","labelTarget","parent","_getEnd","side","$parent","_getElement","bbox","point"],"mappings":"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","sourcesContent":["import {\n  assign\n} from 'min-dash';\n\nimport { is } from '../util/ModelUtil';\n\nimport {\n  isLabelExternal,\n  getExternalLabelBounds\n} from '../util/LabelUtil';\n\nimport {\n  getMid\n} from 'diagram-js/lib/layout/LayoutUtil';\n\nimport {\n  isExpanded\n} from '../util/DiUtil';\n\nimport {\n  elementToString\n} from './Util';\n\n\nfunction elementData(semantic, attrs) {\n  return assign({\n    id: semantic.id,\n    type: semantic.$type,\n    businessObject: semantic\n  }, attrs);\n}\n\nfunction getWaypoints(bo, source, target) {\n\n  var waypoints = bo.di.waypoint;\n\n  if (!waypoints || waypoints.length < 2) {\n    return [ getMid(source), getMid(target) ];\n  }\n\n  return waypoints.map(function(p) {\n    return { x: p.x, y: p.y };\n  });\n}\n\nfunction notYetDrawn(translate, semantic, refSemantic, property) {\n  return new Error(translate('element {element} referenced by {referenced}#{property} not yet drawn', {\n    element: elementToString(refSemantic),\n    referenced: elementToString(semantic),\n    property: property\n  }));\n}\n\n\n/**\n * An importer that adds bpmn elements to the canvas\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementFactory} elementFactory\n * @param {ElementRegistry} elementRegistry\n * @param {Function} translate\n * @param {TextRenderer} textRenderer\n */\nexport default function BpmnImporter(\n    eventBus, canvas, elementFactory,\n    elementRegistry, translate, textRenderer) {\n\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementFactory = elementFactory;\n  this._elementRegistry = elementRegistry;\n  this._translate = translate;\n  this._textRenderer = textRenderer;\n}\n\nBpmnImporter.$inject = [\n  'eventBus',\n  'canvas',\n  'elementFactory',\n  'elementRegistry',\n  'translate',\n  'textRenderer'\n];\n\n\n/**\n * Add bpmn element (semantic) to the canvas onto the\n * specified parent shape.\n */\nBpmnImporter.prototype.add = function(semantic, parentElement) {\n\n  var di = semantic.di,\n      element,\n      translate = this._translate,\n      hidden;\n\n  var parentIndex;\n\n  // ROOT ELEMENT\n  // handle the special case that we deal with a\n  // invisible root element (process or collaboration)\n  if (is(di, 'bpmndi:BPMNPlane')) {\n\n    // add a virtual element (not being drawn)\n    element = this._elementFactory.createRoot(elementData(semantic));\n\n    this._canvas.setRootElement(element);\n  }\n\n  // SHAPE\n  else if (is(di, 'bpmndi:BPMNShape')) {\n\n    var collapsed = !isExpanded(semantic);\n    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n\n    var bounds = semantic.di.bounds;\n\n    element = this._elementFactory.createShape(elementData(semantic, {\n      collapsed: collapsed,\n      hidden: hidden,\n      x: Math.round(bounds.x),\n      y: Math.round(bounds.y),\n      width: Math.round(bounds.width),\n      height: Math.round(bounds.height)\n    }));\n\n    if (is(semantic, 'bpmn:BoundaryEvent')) {\n      this._attachBoundary(semantic, element);\n    }\n\n    // insert lanes behind other flow nodes (cf. #727)\n    if (is(semantic, 'bpmn:Lane')) {\n      parentIndex = 0;\n    }\n\n    if (is(semantic, 'bpmn:DataStoreReference')) {\n\n      // check wether data store is inside our outside of its semantic parent\n      if (!isPointInsideBBox(parentElement, getMid(bounds))) {\n        parentElement = this._canvas.getRootElement();\n      }\n    }\n\n    this._canvas.addShape(element, parentElement, parentIndex);\n  }\n\n  // CONNECTION\n  else if (is(di, 'bpmndi:BPMNEdge')) {\n\n    var source = this._getSource(semantic),\n        target = this._getTarget(semantic);\n\n    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n\n    element = this._elementFactory.createConnection(elementData(semantic, {\n      hidden: hidden,\n      source: source,\n      target: target,\n      waypoints: getWaypoints(semantic, source, target)\n    }));\n\n    if (is(semantic, 'bpmn:DataAssociation')) {\n\n      // render always on top; this ensures DataAssociations\n      // are rendered correctly across different \"hacks\" people\n      // love to model such as cross participant / sub process\n      // associations\n      parentElement = null;\n    }\n\n    // insert sequence flows behind other flow nodes (cf. #727)\n    if (is(semantic, 'bpmn:SequenceFlow')) {\n      parentIndex = 0;\n    }\n\n    this._canvas.addConnection(element, parentElement, parentIndex);\n  } else {\n    throw new Error(translate('unknown di {di} for element {semantic}', {\n      di: elementToString(di),\n      semantic: elementToString(semantic)\n    }));\n  }\n  // (optional) LABEL\n  if (isLabelExternal(semantic) && semantic.name) {\n    this.addLabel(semantic, element);\n  }\n\n\n  this._eventBus.fire('bpmnElement.added', { element: element });\n\n  return element;\n};\n\n\n/**\n * Attach the boundary element to the given host\n *\n * @param {ModdleElement} boundarySemantic\n * @param {djs.model.Base} boundaryElement\n */\nBpmnImporter.prototype._attachBoundary = function(boundarySemantic, boundaryElement) {\n  var translate = this._translate;\n  var hostSemantic = boundarySemantic.attachedToRef;\n\n  if (!hostSemantic) {\n    throw new Error(translate('missing {semantic}#attachedToRef', {\n      semantic: elementToString(boundarySemantic)\n    }));\n  }\n\n  var host = this._elementRegistry.get(hostSemantic.id),\n      attachers = host && host.attachers;\n\n  if (!host) {\n    throw notYetDrawn(translate, boundarySemantic, hostSemantic, 'attachedToRef');\n  }\n\n  // wire element.host <> host.attachers\n  boundaryElement.host = host;\n\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n\n  if (attachers.indexOf(boundaryElement) === -1) {\n    attachers.push(boundaryElement);\n  }\n};\n\n\n/**\n * add label for an element\n */\nBpmnImporter.prototype.addLabel = function(semantic, element) {\n  var bounds,\n      text,\n      label;\n\n  bounds = getExternalLabelBounds(semantic, element);\n\n  text = semantic.name;\n\n  if (text) {\n    // get corrected bounds from actual layouted text\n    bounds = this._textRenderer.getExternalLabelBounds(bounds, text);\n  }\n\n  label = this._elementFactory.createLabel(elementData(semantic, {\n    id: semantic.id + '_label',\n    labelTarget: element,\n    type: 'label',\n    hidden: element.hidden || !semantic.name,\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  }));\n\n  return this._canvas.addShape(label, element.parent);\n};\n\n/**\n * Return the drawn connection end based on the given side.\n *\n * @throws {Error} if the end is not yet drawn\n */\nBpmnImporter.prototype._getEnd = function(semantic, side) {\n\n  var element,\n      refSemantic,\n      type = semantic.$type,\n      translate = this._translate;\n\n  refSemantic = semantic[side + 'Ref'];\n\n  // handle mysterious isMany DataAssociation#sourceRef\n  if (side === 'source' && type === 'bpmn:DataInputAssociation') {\n    refSemantic = refSemantic && refSemantic[0];\n  }\n\n  // fix source / target for DataInputAssociation / DataOutputAssociation\n  if (side === 'source' && type === 'bpmn:DataOutputAssociation' ||\n      side === 'target' && type === 'bpmn:DataInputAssociation') {\n\n    refSemantic = semantic.$parent;\n  }\n\n  element = refSemantic && this._getElement(refSemantic);\n\n  if (element) {\n    return element;\n  }\n\n  if (refSemantic) {\n    throw notYetDrawn(translate, semantic, refSemantic, side + 'Ref');\n  } else {\n    throw new Error(translate('{semantic}#{side} Ref not specified', {\n      semantic: elementToString(semantic),\n      side: side\n    }));\n  }\n};\n\nBpmnImporter.prototype._getSource = function(semantic) {\n  return this._getEnd(semantic, 'source');\n};\n\nBpmnImporter.prototype._getTarget = function(semantic) {\n  return this._getEnd(semantic, 'target');\n};\n\n\nBpmnImporter.prototype._getElement = function(semantic) {\n  return this._elementRegistry.get(semantic.id);\n};\n\n\n// helpers ////////////////////\n\nfunction isPointInsideBBox(bbox, point) {\n  var x = point.x,\n      y = point.y;\n\n  return x >= bbox.x &&\n    x <= bbox.x + bbox.width &&\n    y >= bbox.y &&\n    y <= bbox.y + bbox.height;\n}"]},"metadata":{},"sourceType":"module"}