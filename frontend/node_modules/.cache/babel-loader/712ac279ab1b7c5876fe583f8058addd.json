{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory');\n\nvar cmdHelper = require('../../../../helper/CmdHelper'),\n    eventDefinitionHelper = require('../../../../helper/EventDefinitionHelper'),\n    utils = require('../../../../Utils');\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar forEach = require('lodash/forEach'),\n    find = require('lodash/find'),\n    filter = require('lodash/filter');\n\nfunction getContainedActivities(element) {\n  return getFlowElements(element, 'bpmn:Activity');\n}\n\nfunction getContainedBoundaryEvents(element) {\n  return getFlowElements(element, 'bpmn:BoundaryEvent');\n}\n\nfunction getFlowElements(element, type) {\n  return utils.filterElementsByType(element.flowElements, type);\n}\n\nfunction isCompensationEventAttachedToActivity(activity, boundaryEvents) {\n  var activityId = activity.id;\n  var boundaryEvent = find(boundaryEvents, function (boundaryEvent) {\n    var compensateEventDefinition = eventDefinitionHelper.getCompensateEventDefinition(boundaryEvent);\n    var attachedToRef = boundaryEvent.attachedToRef;\n    return compensateEventDefinition && attachedToRef && attachedToRef.id === activityId;\n  });\n  return !!boundaryEvent;\n} // subprocess: only when it is not triggeredByEvent\n// activity: only when it attach a compensation boundary event\n// callActivity: no limitation\n\n\nfunction canActivityBeCompensated(activity, boundaryEvents) {\n  return is(activity, 'bpmn:SubProcess') && !activity.triggeredByEvent || is(activity, 'bpmn:CallActivity') || isCompensationEventAttachedToActivity(activity, boundaryEvents);\n}\n\nfunction getActivitiesForCompensation(element) {\n  var boundaryEvents = getContainedBoundaryEvents(element);\n  return filter(getContainedActivities(element), function (activity) {\n    return canActivityBeCompensated(activity, boundaryEvents);\n  });\n}\n\nfunction getActivitiesForActivityRef(element) {\n  var bo = getBusinessObject(element);\n  var parent = bo.$parent;\n  var activitiesForActivityRef = getActivitiesForCompensation(parent); // if throwing compensation event is in an event sub process:\n  // get also all activities outside of the event sub process\n\n  if (is(parent, 'bpmn:SubProcess') && parent.triggeredByEvent) {\n    parent = parent.$parent;\n\n    if (parent) {\n      activitiesForActivityRef = activitiesForActivityRef.concat(getActivitiesForCompensation(parent));\n    }\n  }\n\n  return activitiesForActivityRef;\n}\n\nfunction createActivityRefOptions(element) {\n  var options = [{\n    value: ''\n  }];\n  var activities = getActivitiesForActivityRef(element);\n  forEach(activities, function (activity) {\n    var activityId = activity.id;\n    var name = (activity.name ? activity.name + ' ' : '') + '(id=' + activityId + ')';\n    options.push({\n      value: activityId,\n      name: name\n    });\n  });\n  return options;\n}\n\nmodule.exports = function (group, element, bpmnFactory, compensateEventDefinition, elementRegistry) {\n  group.entries.push(entryFactory.checkbox({\n    id: 'wait-for-completion',\n    label: 'Wait for Completion',\n    modelProperty: 'waitForCompletion',\n    get: function (element, node) {\n      return {\n        waitForCompletion: compensateEventDefinition.waitForCompletion\n      };\n    },\n    set: function (element, values) {\n      values.waitForCompletion = values.waitForCompletion || false;\n      return cmdHelper.updateBusinessObject(element, compensateEventDefinition, values);\n    }\n  }));\n  group.entries.push(entryFactory.selectBox({\n    id: 'activity-ref',\n    label: 'Activity Ref',\n    selectOptions: createActivityRefOptions(element),\n    modelProperty: 'activityRef',\n    get: function (element, node) {\n      var activityRef = compensateEventDefinition.activityRef;\n      activityRef = activityRef && activityRef.id;\n      return {\n        activityRef: activityRef || ''\n      };\n    },\n    set: function (element, values) {\n      var activityRef = values.activityRef || undefined;\n      activityRef = activityRef && getBusinessObject(elementRegistry.get(activityRef));\n      return cmdHelper.updateBusinessObject(element, compensateEventDefinition, {\n        activityRef: activityRef\n      });\n    }\n  }));\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/CompensateEventDefinition.js"],"names":["entryFactory","require","cmdHelper","eventDefinitionHelper","utils","getBusinessObject","is","forEach","find","filter","getContainedActivities","element","getFlowElements","getContainedBoundaryEvents","type","filterElementsByType","flowElements","isCompensationEventAttachedToActivity","activity","boundaryEvents","activityId","id","boundaryEvent","compensateEventDefinition","getCompensateEventDefinition","attachedToRef","canActivityBeCompensated","triggeredByEvent","getActivitiesForCompensation","getActivitiesForActivityRef","bo","parent","$parent","activitiesForActivityRef","concat","createActivityRefOptions","options","value","activities","name","push","module","exports","group","bpmnFactory","elementRegistry","entries","checkbox","label","modelProperty","get","node","waitForCompletion","set","values","updateBusinessObject","selectBox","selectOptions","activityRef","undefined"],"mappings":"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","sourcesContent":["'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory');\n\nvar cmdHelper = require('../../../../helper/CmdHelper'),\n    eventDefinitionHelper = require('../../../../helper/EventDefinitionHelper'),\n    utils = require('../../../../Utils');\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar forEach = require('lodash/forEach'),\n    find = require('lodash/find'),\n    filter = require('lodash/filter');\n\n\nfunction getContainedActivities(element) {\n  return getFlowElements(element, 'bpmn:Activity');\n}\n\nfunction getContainedBoundaryEvents(element) {\n  return getFlowElements(element, 'bpmn:BoundaryEvent');\n}\n\nfunction getFlowElements(element, type) {\n  return utils.filterElementsByType(element.flowElements, type);\n}\n\nfunction isCompensationEventAttachedToActivity(activity, boundaryEvents) {\n  var activityId = activity.id;\n  var boundaryEvent = find(boundaryEvents, function(boundaryEvent) {\n    var compensateEventDefinition = eventDefinitionHelper.getCompensateEventDefinition(boundaryEvent);\n    var attachedToRef = boundaryEvent.attachedToRef;\n    return compensateEventDefinition && attachedToRef && attachedToRef.id === activityId;\n  });\n  return !!boundaryEvent;\n}\n\n// subprocess: only when it is not triggeredByEvent\n// activity: only when it attach a compensation boundary event\n// callActivity: no limitation\nfunction canActivityBeCompensated(activity, boundaryEvents) {\n  return (is(activity, 'bpmn:SubProcess') && !activity.triggeredByEvent) ||\n          is(activity, 'bpmn:CallActivity') ||\n          isCompensationEventAttachedToActivity(activity, boundaryEvents);\n}\n\nfunction getActivitiesForCompensation(element) {\n  var boundaryEvents = getContainedBoundaryEvents(element);\n  return filter(getContainedActivities(element), function(activity) {\n    return canActivityBeCompensated(activity, boundaryEvents);\n  });\n}\n\nfunction getActivitiesForActivityRef(element) {\n  var bo = getBusinessObject(element);\n  var parent = bo.$parent;\n\n  var activitiesForActivityRef = getActivitiesForCompensation(parent);\n\n  // if throwing compensation event is in an event sub process:\n  // get also all activities outside of the event sub process\n  if (is(parent, 'bpmn:SubProcess') && parent.triggeredByEvent) {\n    parent = parent.$parent;\n    if (parent) {\n      activitiesForActivityRef = activitiesForActivityRef.concat(getActivitiesForCompensation(parent));\n    }\n\n  }\n\n  return activitiesForActivityRef;\n}\n\nfunction createActivityRefOptions(element) {\n  var options = [ { value: '' } ];\n\n  var activities = getActivitiesForActivityRef(element);\n  forEach(activities, function(activity) {\n    var activityId = activity.id;\n    var name = (activity.name ? (activity.name + ' ') : '') + '(id=' + activityId + ')';\n    options.push({ value: activityId, name: name });\n  });\n\n  return options;\n}\n\n\nmodule.exports = function(group, element, bpmnFactory, compensateEventDefinition, elementRegistry) {\n\n  group.entries.push(entryFactory.checkbox({\n    id: 'wait-for-completion',\n    label: 'Wait for Completion',\n    modelProperty: 'waitForCompletion',\n\n    get: function(element, node) {\n      return {\n        waitForCompletion: compensateEventDefinition.waitForCompletion\n      };\n    },\n\n    set: function(element, values) {\n      values.waitForCompletion = values.waitForCompletion || false;\n      return cmdHelper.updateBusinessObject(element, compensateEventDefinition, values);\n    }\n  }));\n\n  group.entries.push(entryFactory.selectBox({\n    id: 'activity-ref',\n    label: 'Activity Ref',\n    selectOptions: createActivityRefOptions(element),\n    modelProperty: 'activityRef',\n\n    get: function(element, node) {\n      var activityRef = compensateEventDefinition.activityRef;\n      activityRef = activityRef && activityRef.id;\n      return {\n        activityRef: activityRef || ''\n      };\n    },\n\n    set: function(element, values) {\n      var activityRef = values.activityRef || undefined;\n      activityRef = activityRef && getBusinessObject(elementRegistry.get(activityRef));\n      return cmdHelper.updateBusinessObject(element, compensateEventDefinition, {\n        activityRef: activityRef\n      });\n    }\n  }));\n\n};\n"]},"metadata":{},"sourceType":"script"}