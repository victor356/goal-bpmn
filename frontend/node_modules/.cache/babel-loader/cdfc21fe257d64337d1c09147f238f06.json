{"ast":null,"code":"'use strict';\n/**\n * The label factory provides a label entry. For the label text\n * it expects either a string provided by the options.labelText\n * parameter or it could be generated programmatically using a\n * function passed as the options.get parameter.\n *\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {string} [options.labelText]\n * @param  {Function} [options.get]\n * @param  {Function} [options.showLabel]\n * @param  {Boolean} [options.divider] adds a divider at the top of the label if true; default: false\n */\n\nvar label = function (options) {\n  return {\n    id: options.id,\n    html: '<label data-value=\"label\" ' + 'data-show=\"showLabel\" ' + 'class=\"entry-label' + (options.divider ? ' divider' : '') + '\">' + '</label>',\n    get: function (element, node) {\n      if (typeof options.get === 'function') {\n        return options.get(element, node);\n      }\n\n      return {\n        label: options.labelText\n      };\n    },\n    showLabel: function (element, node) {\n      if (typeof options.showLabel === 'function') {\n        return options.showLabel(element, node);\n      }\n\n      return true;\n    }\n  };\n};\n\nmodule.exports = label;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/factory/LabelFactory.js"],"names":["label","options","id","html","divider","get","element","node","labelText","showLabel","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,KAAK,GAAG,UAASC,OAAT,EAAkB;AAC5B,SAAO;AACLC,IAAAA,EAAE,EAAED,OAAO,CAACC,EADP;AAELC,IAAAA,IAAI,EAAE,+BACE,wBADF,GAEE,oBAFF,IAE0BF,OAAO,CAACG,OAAR,GAAkB,UAAlB,GAA+B,EAFzD,IAE+D,IAF/D,GAGA,UALD;AAMLC,IAAAA,GAAG,EAAE,UAASC,OAAT,EAAkBC,IAAlB,EAAwB;AAC3B,UAAI,OAAON,OAAO,CAACI,GAAf,KAAuB,UAA3B,EAAuC;AACrC,eAAOJ,OAAO,CAACI,GAAR,CAAYC,OAAZ,EAAqBC,IAArB,CAAP;AACD;;AACD,aAAO;AAAEP,QAAAA,KAAK,EAAEC,OAAO,CAACO;AAAjB,OAAP;AACD,KAXI;AAYLC,IAAAA,SAAS,EAAE,UAASH,OAAT,EAAkBC,IAAlB,EAAwB;AACjC,UAAI,OAAON,OAAO,CAACQ,SAAf,KAA6B,UAAjC,EAA6C;AAC3C,eAAOR,OAAO,CAACQ,SAAR,CAAkBH,OAAlB,EAA2BC,IAA3B,CAAP;AACD;;AACD,aAAO,IAAP;AACD;AAjBI,GAAP;AAmBD,CApBD;;AAsBAG,MAAM,CAACC,OAAP,GAAiBX,KAAjB","sourcesContent":["'use strict';\n\n/**\n * The label factory provides a label entry. For the label text\n * it expects either a string provided by the options.labelText\n * parameter or it could be generated programmatically using a\n * function passed as the options.get parameter.\n *\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {string} [options.labelText]\n * @param  {Function} [options.get]\n * @param  {Function} [options.showLabel]\n * @param  {Boolean} [options.divider] adds a divider at the top of the label if true; default: false\n */\nvar label = function(options) {\n  return {\n    id: options.id,\n    html: '<label data-value=\"label\" ' +\n            'data-show=\"showLabel\" ' +\n            'class=\"entry-label' + (options.divider ? ' divider' : '') + '\">' +\n          '</label>',\n    get: function(element, node) {\n      if (typeof options.get === 'function') {\n        return options.get(element, node);\n      }\n      return { label: options.labelText };\n    },\n    showLabel: function(element, node) {\n      if (typeof options.showLabel === 'function') {\n        return options.showLabel(element, node);\n      }\n      return true;\n    }\n  };\n};\n\nmodule.exports = label;\n"]},"metadata":{},"sourceType":"script"}