{"ast":null,"code":"import { isFunction, isArray, forEach } from 'min-dash';\nimport { domify, query as domQuery, attr as domAttr, clear as domClear, classes as domClasses, matches as domMatches, delegate as domDelegate, event as domEvent } from 'min-dom';\nvar TOGGLE_SELECTOR = '.djs-palette-toggle',\n    ENTRY_SELECTOR = '.entry',\n    ELEMENT_SELECTOR = TOGGLE_SELECTOR + ', ' + ENTRY_SELECTOR;\nvar PALETTE_OPEN_CLS = 'open',\n    PALETTE_TWO_COLUMN_CLS = 'two-column';\n/**\n * A palette containing modeling elements.\n */\n\nexport default function Palette(eventBus, canvas) {\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._providers = [];\n  var self = this;\n  eventBus.on('tool-manager.update', function (event) {\n    var tool = event.tool;\n    self.updateToolHighlight(tool);\n  });\n  eventBus.on('i18n.changed', function () {\n    self._update();\n  });\n  eventBus.on('diagram.init', function () {\n    self._diagramInitialized = true; // initialize + update once diagram is ready\n\n    if (self._providers.length) {\n      self._init();\n\n      self._update();\n    }\n  });\n}\nPalette.$inject = ['eventBus', 'canvas'];\n/**\n * Register a provider with the palette\n *\n * @param  {PaletteProvider} provider\n */\n\nPalette.prototype.registerProvider = function (provider) {\n  this._providers.push(provider); // postpone init / update until diagram is initialized\n\n\n  if (!this._diagramInitialized) {\n    return;\n  }\n\n  if (!this._container) {\n    this._init();\n  }\n\n  this._update();\n};\n/**\n * Returns the palette entries for a given element\n *\n * @return {Array<PaletteEntryDescriptor>} list of entries\n */\n\n\nPalette.prototype.getEntries = function () {\n  var entries = {}; // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n\n  forEach(this._providers, function (provider) {\n    var e = provider.getPaletteEntries();\n    forEach(e, function (entry, id) {\n      entries[id] = entry;\n    });\n  });\n  return entries;\n};\n/**\n * Initialize\n */\n\n\nPalette.prototype._init = function () {\n  var canvas = this._canvas,\n      eventBus = this._eventBus;\n  var parent = canvas.getContainer(),\n      container = this._container = domify(Palette.HTML_MARKUP),\n      self = this;\n  parent.appendChild(container);\n  domDelegate.bind(container, ELEMENT_SELECTOR, 'click', function (event) {\n    var target = event.delegateTarget;\n\n    if (domMatches(target, TOGGLE_SELECTOR)) {\n      return self.toggle();\n    }\n\n    self.trigger('click', event);\n  }); // prevent drag propagation\n\n  domEvent.bind(container, 'mousedown', function (event) {\n    event.stopPropagation();\n  }); // prevent drag propagation\n\n  domDelegate.bind(container, ENTRY_SELECTOR, 'dragstart', function (event) {\n    self.trigger('dragstart', event);\n  });\n  eventBus.on('canvas.resized', this._layoutChanged, this);\n  eventBus.fire('palette.create', {\n    container: container\n  });\n};\n/**\n * Update palette state.\n *\n * @param  {Object} [state] { open, twoColumn }\n */\n\n\nPalette.prototype._toggleState = function (state) {\n  state = state || {};\n\n  var parent = this._getParentContainer(),\n      container = this._container;\n\n  var eventBus = this._eventBus;\n  var twoColumn;\n  var cls = domClasses(container);\n\n  if ('twoColumn' in state) {\n    twoColumn = state.twoColumn;\n  } else {\n    twoColumn = this._needsCollapse(parent.clientHeight, this._entries || {});\n  } // always update two column\n\n\n  cls.toggle(PALETTE_TWO_COLUMN_CLS, twoColumn);\n\n  if ('open' in state) {\n    cls.toggle(PALETTE_OPEN_CLS, state.open);\n  }\n\n  eventBus.fire('palette.changed', {\n    twoColumn: twoColumn,\n    open: this.isOpen()\n  });\n};\n\nPalette.prototype._update = function () {\n  var entriesContainer = domQuery('.djs-palette-entries', this._container),\n      entries = this._entries = this.getEntries();\n  domClear(entriesContainer);\n  forEach(entries, function (entry, id) {\n    var grouping = entry.group || 'default';\n    var container = domQuery('[data-group=' + grouping + ']', entriesContainer);\n\n    if (!container) {\n      container = domify('<div class=\"group\" data-group=\"' + grouping + '\"></div>');\n      entriesContainer.appendChild(container);\n    }\n\n    var html = entry.html || (entry.separator ? '<hr class=\"separator\" />' : '<div class=\"entry\" draggable=\"true\"></div>');\n    var control = domify(html);\n    container.appendChild(control);\n\n    if (!entry.separator) {\n      domAttr(control, 'data-action', id);\n\n      if (entry.title) {\n        domAttr(control, 'title', entry.title);\n      }\n\n      if (entry.className) {\n        addClasses(control, entry.className);\n      }\n\n      if (entry.imageUrl) {\n        control.appendChild(domify('<img src=\"' + entry.imageUrl + '\">'));\n      }\n    }\n  }); // open after update\n\n  this.open();\n};\n/**\n * Trigger an action available on the palette\n *\n * @param  {String} action\n * @param  {Event} event\n */\n\n\nPalette.prototype.trigger = function (action, event, autoActivate) {\n  var entries = this._entries,\n      entry,\n      handler,\n      originalEvent,\n      button = event.delegateTarget || event.target;\n\n  if (!button) {\n    return event.preventDefault();\n  }\n\n  entry = entries[domAttr(button, 'data-action')]; // when user clicks on the palette and not on an action\n\n  if (!entry) {\n    return;\n  }\n\n  handler = entry.action;\n  originalEvent = event.originalEvent || event; // simple action (via callback function)\n\n  if (isFunction(handler)) {\n    if (action === 'click') {\n      handler(originalEvent, autoActivate);\n    }\n  } else {\n    if (handler[action]) {\n      handler[action](originalEvent, autoActivate);\n    }\n  } // silence other actions\n\n\n  event.preventDefault();\n};\n\nPalette.prototype._layoutChanged = function () {\n  this._toggleState({});\n};\n/**\n * Do we need to collapse to two columns?\n *\n * @param {Number} availableHeight\n * @param {Object} entries\n *\n * @return {Boolean}\n */\n\n\nPalette.prototype._needsCollapse = function (availableHeight, entries) {\n  // top margin + bottom toggle + bottom margin\n  // implementors must override this method if they\n  // change the palette styles\n  var margin = 20 + 10 + 20;\n  var entriesHeight = Object.keys(entries).length * 46;\n  return availableHeight < entriesHeight + margin;\n};\n/**\n * Close the palette\n */\n\n\nPalette.prototype.close = function () {\n  this._toggleState({\n    open: false,\n    twoColumn: false\n  });\n};\n/**\n * Open the palette\n */\n\n\nPalette.prototype.open = function () {\n  this._toggleState({\n    open: true\n  });\n};\n\nPalette.prototype.toggle = function (open) {\n  if (this.isOpen()) {\n    this.close();\n  } else {\n    this.open();\n  }\n};\n\nPalette.prototype.isActiveTool = function (tool) {\n  return tool && this._activeTool === tool;\n};\n\nPalette.prototype.updateToolHighlight = function (name) {\n  var entriesContainer, toolsContainer;\n\n  if (!this._toolsContainer) {\n    entriesContainer = domQuery('.djs-palette-entries', this._container);\n    this._toolsContainer = domQuery('[data-group=tools]', entriesContainer);\n  }\n\n  toolsContainer = this._toolsContainer;\n  forEach(toolsContainer.children, function (tool) {\n    var actionName = tool.getAttribute('data-action');\n\n    if (!actionName) {\n      return;\n    }\n\n    var toolClasses = domClasses(tool);\n    actionName = actionName.replace('-tool', '');\n\n    if (toolClasses.contains('entry') && actionName === name) {\n      toolClasses.add('highlighted-entry');\n    } else {\n      toolClasses.remove('highlighted-entry');\n    }\n  });\n};\n/**\n * Return true if the palette is opened.\n *\n * @example\n *\n * palette.open();\n *\n * if (palette.isOpen()) {\n *   // yes, we are open\n * }\n *\n * @return {boolean} true if palette is opened\n */\n\n\nPalette.prototype.isOpen = function () {\n  return domClasses(this._container).has(PALETTE_OPEN_CLS);\n};\n/**\n * Get container the palette lives in.\n *\n * @return {Element}\n */\n\n\nPalette.prototype._getParentContainer = function () {\n  return this._canvas.getContainer();\n};\n/* markup definition */\n\n\nPalette.HTML_MARKUP = '<div class=\"djs-palette\">' + '<div class=\"djs-palette-entries\"></div>' + '<div class=\"djs-palette-toggle\"></div>' + '</div>'; // helpers //////////////////////\n\nfunction addClasses(element, classNames) {\n  var classes = domClasses(element);\n  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n  actualClassNames.forEach(function (cls) {\n    classes.add(cls);\n  });\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/palette/Palette.js"],"names":["isFunction","isArray","forEach","domify","query","domQuery","attr","domAttr","clear","domClear","classes","domClasses","matches","domMatches","delegate","domDelegate","event","domEvent","TOGGLE_SELECTOR","ENTRY_SELECTOR","ELEMENT_SELECTOR","PALETTE_OPEN_CLS","PALETTE_TWO_COLUMN_CLS","Palette","eventBus","canvas","_eventBus","_canvas","_providers","self","on","tool","updateToolHighlight","_update","_diagramInitialized","length","_init","$inject","prototype","registerProvider","provider","push","_container","getEntries","entries","e","getPaletteEntries","entry","id","parent","getContainer","container","HTML_MARKUP","appendChild","bind","target","delegateTarget","toggle","trigger","stopPropagation","_layoutChanged","fire","_toggleState","state","_getParentContainer","twoColumn","cls","_needsCollapse","clientHeight","_entries","open","isOpen","entriesContainer","grouping","group","html","separator","control","title","className","addClasses","imageUrl","action","autoActivate","handler","originalEvent","button","preventDefault","availableHeight","margin","entriesHeight","Object","keys","close","isActiveTool","_activeTool","name","toolsContainer","_toolsContainer","children","actionName","getAttribute","toolClasses","replace","contains","add","remove","has","element","classNames","actualClassNames","split"],"mappings":"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","sourcesContent":["import {\n  isFunction,\n  isArray,\n  forEach\n} from 'min-dash';\n\nimport {\n  domify,\n  query as domQuery,\n  attr as domAttr,\n  clear as domClear,\n  classes as domClasses,\n  matches as domMatches,\n  delegate as domDelegate,\n  event as domEvent\n} from 'min-dom';\n\n\nvar TOGGLE_SELECTOR = '.djs-palette-toggle',\n    ENTRY_SELECTOR = '.entry',\n    ELEMENT_SELECTOR = TOGGLE_SELECTOR + ', ' + ENTRY_SELECTOR;\n\nvar PALETTE_OPEN_CLS = 'open',\n    PALETTE_TWO_COLUMN_CLS = 'two-column';\n\n\n/**\n * A palette containing modeling elements.\n */\nexport default function Palette(eventBus, canvas) {\n\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n\n  this._providers = [];\n\n  var self = this;\n\n  eventBus.on('tool-manager.update', function(event) {\n    var tool = event.tool;\n\n    self.updateToolHighlight(tool);\n  });\n\n  eventBus.on('i18n.changed', function() {\n    self._update();\n  });\n\n  eventBus.on('diagram.init', function() {\n\n    self._diagramInitialized = true;\n\n    // initialize + update once diagram is ready\n    if (self._providers.length) {\n      self._init();\n\n      self._update();\n    }\n  });\n}\n\nPalette.$inject = [ 'eventBus', 'canvas' ];\n\n\n/**\n * Register a provider with the palette\n *\n * @param  {PaletteProvider} provider\n */\nPalette.prototype.registerProvider = function(provider) {\n  this._providers.push(provider);\n\n  // postpone init / update until diagram is initialized\n  if (!this._diagramInitialized) {\n    return;\n  }\n\n  if (!this._container) {\n    this._init();\n  }\n\n  this._update();\n};\n\n\n/**\n * Returns the palette entries for a given element\n *\n * @return {Array<PaletteEntryDescriptor>} list of entries\n */\nPalette.prototype.getEntries = function() {\n\n  var entries = {};\n\n  // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n  forEach(this._providers, function(provider) {\n    var e = provider.getPaletteEntries();\n\n    forEach(e, function(entry, id) {\n      entries[id] = entry;\n    });\n  });\n\n  return entries;\n};\n\n\n/**\n * Initialize\n */\nPalette.prototype._init = function() {\n  var canvas = this._canvas,\n      eventBus = this._eventBus;\n\n  var parent = canvas.getContainer(),\n      container = this._container = domify(Palette.HTML_MARKUP),\n      self = this;\n\n  parent.appendChild(container);\n\n  domDelegate.bind(container, ELEMENT_SELECTOR, 'click', function(event) {\n\n    var target = event.delegateTarget;\n\n    if (domMatches(target, TOGGLE_SELECTOR)) {\n      return self.toggle();\n    }\n\n    self.trigger('click', event);\n  });\n\n  // prevent drag propagation\n  domEvent.bind(container, 'mousedown', function(event) {\n    event.stopPropagation();\n  });\n\n  // prevent drag propagation\n  domDelegate.bind(container, ENTRY_SELECTOR, 'dragstart', function(event) {\n    self.trigger('dragstart', event);\n  });\n\n  eventBus.on('canvas.resized', this._layoutChanged, this);\n\n  eventBus.fire('palette.create', {\n    container: container\n  });\n};\n\n/**\n * Update palette state.\n *\n * @param  {Object} [state] { open, twoColumn }\n */\nPalette.prototype._toggleState = function(state) {\n\n  state = state || {};\n\n  var parent = this._getParentContainer(),\n      container = this._container;\n\n  var eventBus = this._eventBus;\n\n  var twoColumn;\n\n  var cls = domClasses(container);\n\n  if ('twoColumn' in state) {\n    twoColumn = state.twoColumn;\n  } else {\n    twoColumn = this._needsCollapse(parent.clientHeight, this._entries || {});\n  }\n\n  // always update two column\n  cls.toggle(PALETTE_TWO_COLUMN_CLS, twoColumn);\n\n  if ('open' in state) {\n    cls.toggle(PALETTE_OPEN_CLS, state.open);\n  }\n\n  eventBus.fire('palette.changed', {\n    twoColumn: twoColumn,\n    open: this.isOpen()\n  });\n};\n\nPalette.prototype._update = function() {\n\n  var entriesContainer = domQuery('.djs-palette-entries', this._container),\n      entries = this._entries = this.getEntries();\n\n  domClear(entriesContainer);\n\n  forEach(entries, function(entry, id) {\n\n    var grouping = entry.group || 'default';\n\n    var container = domQuery('[data-group=' + grouping + ']', entriesContainer);\n    if (!container) {\n      container = domify('<div class=\"group\" data-group=\"' + grouping + '\"></div>');\n      entriesContainer.appendChild(container);\n    }\n\n    var html = entry.html || (\n      entry.separator ?\n        '<hr class=\"separator\" />' :\n        '<div class=\"entry\" draggable=\"true\"></div>');\n\n\n    var control = domify(html);\n    container.appendChild(control);\n\n    if (!entry.separator) {\n      domAttr(control, 'data-action', id);\n\n      if (entry.title) {\n        domAttr(control, 'title', entry.title);\n      }\n\n      if (entry.className) {\n        addClasses(control, entry.className);\n      }\n\n      if (entry.imageUrl) {\n        control.appendChild(domify('<img src=\"' + entry.imageUrl + '\">'));\n      }\n    }\n  });\n\n  // open after update\n  this.open();\n};\n\n\n/**\n * Trigger an action available on the palette\n *\n * @param  {String} action\n * @param  {Event} event\n */\nPalette.prototype.trigger = function(action, event, autoActivate) {\n  var entries = this._entries,\n      entry,\n      handler,\n      originalEvent,\n      button = event.delegateTarget || event.target;\n\n  if (!button) {\n    return event.preventDefault();\n  }\n\n  entry = entries[domAttr(button, 'data-action')];\n\n  // when user clicks on the palette and not on an action\n  if (!entry) {\n    return;\n  }\n\n  handler = entry.action;\n\n  originalEvent = event.originalEvent || event;\n\n  // simple action (via callback function)\n  if (isFunction(handler)) {\n    if (action === 'click') {\n      handler(originalEvent, autoActivate);\n    }\n  } else {\n    if (handler[action]) {\n      handler[action](originalEvent, autoActivate);\n    }\n  }\n\n  // silence other actions\n  event.preventDefault();\n};\n\nPalette.prototype._layoutChanged = function() {\n  this._toggleState({});\n};\n\n/**\n * Do we need to collapse to two columns?\n *\n * @param {Number} availableHeight\n * @param {Object} entries\n *\n * @return {Boolean}\n */\nPalette.prototype._needsCollapse = function(availableHeight, entries) {\n\n  // top margin + bottom toggle + bottom margin\n  // implementors must override this method if they\n  // change the palette styles\n  var margin = 20 + 10 + 20;\n\n  var entriesHeight = Object.keys(entries).length * 46;\n\n  return availableHeight < entriesHeight + margin;\n};\n\n/**\n * Close the palette\n */\nPalette.prototype.close = function() {\n\n  this._toggleState({\n    open: false,\n    twoColumn: false\n  });\n};\n\n\n/**\n * Open the palette\n */\nPalette.prototype.open = function() {\n  this._toggleState({ open: true });\n};\n\n\nPalette.prototype.toggle = function(open) {\n  if (this.isOpen()) {\n    this.close();\n  } else {\n    this.open();\n  }\n};\n\nPalette.prototype.isActiveTool = function(tool) {\n  return tool && this._activeTool === tool;\n};\n\nPalette.prototype.updateToolHighlight = function(name) {\n  var entriesContainer,\n      toolsContainer;\n\n  if (!this._toolsContainer) {\n    entriesContainer = domQuery('.djs-palette-entries', this._container);\n\n    this._toolsContainer = domQuery('[data-group=tools]', entriesContainer);\n  }\n\n  toolsContainer = this._toolsContainer;\n\n  forEach(toolsContainer.children, function(tool) {\n    var actionName = tool.getAttribute('data-action');\n\n    if (!actionName) {\n      return;\n    }\n\n    var toolClasses = domClasses(tool);\n\n    actionName = actionName.replace('-tool', '');\n\n    if (toolClasses.contains('entry') && actionName === name) {\n      toolClasses.add('highlighted-entry');\n    } else {\n      toolClasses.remove('highlighted-entry');\n    }\n  });\n};\n\n\n/**\n * Return true if the palette is opened.\n *\n * @example\n *\n * palette.open();\n *\n * if (palette.isOpen()) {\n *   // yes, we are open\n * }\n *\n * @return {boolean} true if palette is opened\n */\nPalette.prototype.isOpen = function() {\n  return domClasses(this._container).has(PALETTE_OPEN_CLS);\n};\n\n/**\n * Get container the palette lives in.\n *\n * @return {Element}\n */\nPalette.prototype._getParentContainer = function() {\n  return this._canvas.getContainer();\n};\n\n\n/* markup definition */\n\nPalette.HTML_MARKUP =\n  '<div class=\"djs-palette\">' +\n    '<div class=\"djs-palette-entries\"></div>' +\n    '<div class=\"djs-palette-toggle\"></div>' +\n  '</div>';\n\n\n// helpers //////////////////////\n\nfunction addClasses(element, classNames) {\n\n  var classes = domClasses(element);\n\n  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n  actualClassNames.forEach(function(cls) {\n    classes.add(cls);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}