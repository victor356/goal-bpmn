{"ast":null,"code":"'use strict';\n\nvar cmdHelper = require('../../../../helper/CmdHelper');\n\nvar domQuery = require('min-dom').query,\n    domify = require('min-dom').domify,\n    domAttr = require('min-dom').attr;\n\nvar forEach = require('lodash/forEach'),\n    find = require('lodash/find');\n\nvar elementHelper = require('../../../../helper/ElementHelper');\n\nvar utils = require('../../../../Utils');\n\nvar selector = 'select[name=selectedElement]';\n/**\n * Get select box containing all elements.\n *\n * @param {DOMElement} node\n *\n * @return {DOMElement} the select box\n */\n\nfunction getSelectBox(node) {\n  return domQuery(selector, node.parentElement);\n}\n/**\n * Find element by given id.\n *\n * @param {ModdleElement} eventDefinition\n *\n * @return {ModdleElement} an element\n */\n\n\nfunction findElementById(eventDefinition, type, id) {\n  var elements = utils.findRootElementsByType(eventDefinition, type);\n  return find(elements, function (element) {\n    return element.id === id;\n  });\n}\n/**\n * Create an entry to modify the reference to an element from an\n * event definition.\n *\n * @param  {djs.model.Base} element\n * @param  {ModdleElement} definition\n * @param  {BpmnFactory} bpmnFactory\n * @param  {Object} options\n * @param  {string} options.label the label of the entry\n * @param  {string} options.description the description of the entry\n * @param  {string} options.elementName the name of the element\n * @param  {string} options.elementType the type of the element\n * @param  {string} options.referenceProperty the name of referencing property\n * @param  {string} options.newElementIdPrefix the prefix of a new created element\n *\n * @return {Array<Object>} return an array containing the entries\n */\n\n\nmodule.exports = function (element, definition, bpmnFactory, options) {\n  var elementName = options.elementName || '',\n      elementType = options.elementType,\n      referenceProperty = options.referenceProperty;\n  var newElementIdPrefix = options.newElementIdPrefix || 'elem_';\n  var label = options.label || '',\n      description = options.description || '';\n  var entries = [];\n  entries.push({\n    id: 'event-definitions-' + elementName,\n    description: description,\n    html: '<div class=\"bpp-row bpp-select\">' + '<label for=\"camunda-' + elementName + '\">' + label + '</label>' + '<div class=\"bpp-field-wrapper\">' + '<select id=\"camunda-' + elementName + '\" name=\"selectedElement\" data-value>' + '</select>' + '<button class=\"add\" id=\"addElement\" data-action=\"addElement\"><span>+</span></button>' + '</div>' + '</div>',\n    get: function (element, entryNode) {\n      utils.updateOptionsDropDown(selector, definition, elementType, entryNode);\n      var reference = definition.get(referenceProperty);\n      return {\n        selectedElement: reference && reference.id || ''\n      };\n    },\n    set: function (element, values) {\n      var selection = values.selectedElement;\n      var props = {};\n\n      if (!selection || typeof selection === 'undefined') {\n        // remove reference to element\n        props[referenceProperty] = undefined;\n        return cmdHelper.updateBusinessObject(element, definition, props);\n      }\n\n      var commands = [];\n      var selectedElement = findElementById(definition, elementType, selection);\n\n      if (!selectedElement) {\n        var root = utils.getRoot(definition); // create a new element\n\n        selectedElement = elementHelper.createElement(elementType, {\n          name: selection\n        }, root, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(element, root, 'rootElements', null, [selectedElement]));\n      } // update reference to element\n\n\n      props[referenceProperty] = selectedElement;\n      commands.push(cmdHelper.updateBusinessObject(element, definition, props));\n      return commands;\n    },\n    addElement: function (element, inputNode) {\n      // note: this generated id will be used as name\n      // of the element and not as id\n      var id = utils.nextId(newElementIdPrefix);\n      var optionTemplate = domify('<option value=\"' + id + '\"> (id=' + id + ')' + '</option>'); // add new option\n\n      var selectBox = getSelectBox(inputNode);\n      selectBox.insertBefore(optionTemplate, selectBox.firstChild); // select new element in the select box\n\n      forEach(selectBox, function (option) {\n        if (option.value === id) {\n          domAttr(option, 'selected', 'selected');\n        } else {\n          domAttr(option, 'selected', null);\n        }\n      });\n      return true;\n    }\n  });\n  return entries;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/EventDefinitionReference.js"],"names":["cmdHelper","require","domQuery","query","domify","domAttr","attr","forEach","find","elementHelper","utils","selector","getSelectBox","node","parentElement","findElementById","eventDefinition","type","id","elements","findRootElementsByType","element","module","exports","definition","bpmnFactory","options","elementName","elementType","referenceProperty","newElementIdPrefix","label","description","entries","push","html","get","entryNode","updateOptionsDropDown","reference","selectedElement","set","values","selection","props","undefined","updateBusinessObject","commands","root","getRoot","createElement","name","addAndRemoveElementsFromList","addElement","inputNode","nextId","optionTemplate","selectBox","insertBefore","firstChild","option","value"],"mappings":"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","sourcesContent":["'use strict';\n\nvar cmdHelper = require('../../../../helper/CmdHelper');\n\nvar domQuery = require('min-dom').query,\n    domify = require('min-dom').domify,\n    domAttr = require('min-dom').attr;\n\nvar forEach = require('lodash/forEach'),\n    find = require('lodash/find');\n\nvar elementHelper = require('../../../../helper/ElementHelper');\nvar utils = require('../../../../Utils');\n\nvar selector = 'select[name=selectedElement]';\n\n/**\n * Get select box containing all elements.\n *\n * @param {DOMElement} node\n *\n * @return {DOMElement} the select box\n */\nfunction getSelectBox(node) {\n  return domQuery(selector, node.parentElement);\n}\n\n/**\n * Find element by given id.\n *\n * @param {ModdleElement} eventDefinition\n *\n * @return {ModdleElement} an element\n */\nfunction findElementById(eventDefinition, type, id) {\n  var elements = utils.findRootElementsByType(eventDefinition, type);\n  return find(elements, function(element) {\n    return element.id === id;\n  });\n}\n\n/**\n * Create an entry to modify the reference to an element from an\n * event definition.\n *\n * @param  {djs.model.Base} element\n * @param  {ModdleElement} definition\n * @param  {BpmnFactory} bpmnFactory\n * @param  {Object} options\n * @param  {string} options.label the label of the entry\n * @param  {string} options.description the description of the entry\n * @param  {string} options.elementName the name of the element\n * @param  {string} options.elementType the type of the element\n * @param  {string} options.referenceProperty the name of referencing property\n * @param  {string} options.newElementIdPrefix the prefix of a new created element\n *\n * @return {Array<Object>} return an array containing the entries\n */\nmodule.exports = function(element, definition, bpmnFactory, options) {\n\n  var elementName = options.elementName || '',\n      elementType = options.elementType,\n      referenceProperty = options.referenceProperty;\n\n  var newElementIdPrefix = options.newElementIdPrefix || 'elem_';\n\n  var label = options.label || '',\n      description = options.description || '';\n\n  var entries = [];\n\n  entries.push({\n\n    id: 'event-definitions-' + elementName,\n    description: description,\n    html: '<div class=\"bpp-row bpp-select\">' +\n             '<label for=\"camunda-' + elementName + '\">' + label + '</label>' +\n             '<div class=\"bpp-field-wrapper\">' +\n               '<select id=\"camunda-' + elementName + '\" name=\"selectedElement\" data-value>' +\n               '</select>' +\n               '<button class=\"add\" id=\"addElement\" data-action=\"addElement\"><span>+</span></button>' +\n             '</div>' +\n          '</div>',\n\n    get: function(element, entryNode) {\n      utils.updateOptionsDropDown(selector, definition, elementType, entryNode);\n      var reference = definition.get(referenceProperty);\n      return {\n        selectedElement: (reference && reference.id) || ''\n      };\n    },\n\n    set: function(element, values) {\n      var selection = values.selectedElement;\n\n      var props = {};\n\n      if (!selection || typeof selection === 'undefined') {\n        // remove reference to element\n        props[referenceProperty] = undefined;\n        return cmdHelper.updateBusinessObject(element, definition, props);\n      }\n\n      var commands = [];\n\n      var selectedElement = findElementById(definition, elementType, selection);\n      if (!selectedElement) {\n        var root = utils.getRoot(definition);\n\n        // create a new element\n        selectedElement = elementHelper.createElement(elementType, { name: selection }, root, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(element, root, 'rootElements', null, [ selectedElement ]));\n      }\n\n      // update reference to element\n      props[referenceProperty] = selectedElement;\n      commands.push(cmdHelper.updateBusinessObject(element, definition, props));\n\n      return commands;\n    },\n\n    addElement: function(element, inputNode) {\n      // note: this generated id will be used as name\n      // of the element and not as id\n      var id = utils.nextId(newElementIdPrefix);\n\n      var optionTemplate = domify('<option value=\"' + id + '\"> (id='+id+')' + '</option>');\n\n      // add new option\n      var selectBox = getSelectBox(inputNode);\n      selectBox.insertBefore(optionTemplate, selectBox.firstChild);\n\n      // select new element in the select box\n      forEach(selectBox, function(option) {\n        if (option.value === id) {\n          domAttr(option, 'selected', 'selected');\n        } else {\n          domAttr(option, 'selected', null);\n        }\n      });\n\n      return true;\n    }\n\n  });\n\n  return entries;\n\n};\n"]},"metadata":{},"sourceType":"script"}