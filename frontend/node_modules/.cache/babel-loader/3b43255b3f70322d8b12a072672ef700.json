{"ast":null,"code":"import { bind, find } from 'min-dash';\nimport TextBox from './TextBox';\n/**\n * A direct editing component that allows users\n * to edit an elements text directly in the diagram\n *\n * @param {EventBus} eventBus the event bus\n */\n\nexport default function DirectEditing(eventBus, canvas) {\n  this._eventBus = eventBus;\n  this._providers = [];\n  this._textbox = new TextBox({\n    container: canvas.getContainer(),\n    keyHandler: bind(this._handleKey, this),\n    resizeHandler: bind(this._handleResize, this)\n  });\n}\nDirectEditing.$inject = ['eventBus', 'canvas'];\n/**\n * Register a direct editing provider\n\n * @param {Object} provider the provider, must expose an #activate(element) method that returns\n *                          an activation context ({ bounds: {x, y, width, height }, text }) if\n *                          direct editing is available for the given element.\n *                          Additionally the provider must expose a #update(element, value) method\n *                          to receive direct editing updates.\n */\n\nDirectEditing.prototype.registerProvider = function (provider) {\n  this._providers.push(provider);\n};\n/**\n * Returns true if direct editing is currently active\n *\n * @return {Boolean}\n */\n\n\nDirectEditing.prototype.isActive = function () {\n  return !!this._active;\n};\n/**\n * Cancel direct editing, if it is currently active\n */\n\n\nDirectEditing.prototype.cancel = function () {\n  if (!this._active) {\n    return;\n  }\n\n  this._fire('cancel');\n\n  this.close();\n};\n\nDirectEditing.prototype._fire = function (event, context) {\n  this._eventBus.fire('directEditing.' + event, context || {\n    active: this._active\n  });\n};\n\nDirectEditing.prototype.close = function () {\n  this._textbox.destroy();\n\n  this._fire('deactivate');\n\n  this._active = null;\n  this.resizable = undefined;\n};\n\nDirectEditing.prototype.complete = function () {\n  var active = this._active;\n\n  if (!active) {\n    return;\n  }\n\n  var containerBounds,\n      previousBounds = active.context.bounds,\n      newBounds = this.$textbox.getBoundingClientRect(),\n      newText = this.getValue(),\n      previousText = active.context.text;\n\n  if (newText !== previousText || newBounds.height !== previousBounds.height || newBounds.width !== previousBounds.width) {\n    containerBounds = this._textbox.container.getBoundingClientRect();\n    active.provider.update(active.element, newText, active.context.text, {\n      x: newBounds.left - containerBounds.left,\n      y: newBounds.top - containerBounds.top,\n      width: newBounds.width,\n      height: newBounds.height\n    });\n  }\n\n  this._fire('complete');\n\n  this.close();\n};\n\nDirectEditing.prototype.getValue = function () {\n  return this._textbox.getValue();\n};\n\nDirectEditing.prototype._handleKey = function (e) {\n  // stop bubble\n  e.stopPropagation();\n  var key = e.keyCode || e.charCode; // ESC\n\n  if (key === 27) {\n    e.preventDefault();\n    return this.cancel();\n  } // Enter\n\n\n  if (key === 13 && !e.shiftKey) {\n    e.preventDefault();\n    return this.complete();\n  }\n};\n\nDirectEditing.prototype._handleResize = function (event) {\n  this._fire('resize', event);\n};\n/**\n * Activate direct editing on the given element\n *\n * @param {Object} ElementDescriptor the descriptor for a shape or connection\n * @return {Boolean} true if the activation was possible\n */\n\n\nDirectEditing.prototype.activate = function (element) {\n  if (this.isActive()) {\n    this.cancel();\n  } // the direct editing context\n\n\n  var context;\n  var provider = find(this._providers, function (p) {\n    return (context = p.activate(element)) ? p : null;\n  }); // check if activation took place\n\n  if (context) {\n    this.$textbox = this._textbox.create(context.bounds, context.style, context.text, context.options);\n    this._active = {\n      element: element,\n      context: context,\n      provider: provider\n    };\n\n    if (context.options && context.options.resizable) {\n      this.resizable = true;\n    }\n\n    this._fire('activate');\n  }\n\n  return !!context;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js-direct-editing/lib/DirectEditing.js"],"names":["bind","find","TextBox","DirectEditing","eventBus","canvas","_eventBus","_providers","_textbox","container","getContainer","keyHandler","_handleKey","resizeHandler","_handleResize","$inject","prototype","registerProvider","provider","push","isActive","_active","cancel","_fire","close","event","context","fire","active","destroy","resizable","undefined","complete","containerBounds","previousBounds","bounds","newBounds","$textbox","getBoundingClientRect","newText","getValue","previousText","text","height","width","update","element","x","left","y","top","e","stopPropagation","key","keyCode","charCode","preventDefault","shiftKey","activate","p","create","style","options"],"mappings":"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","sourcesContent":["import {\n  bind,\n  find\n} from 'min-dash';\n\nimport TextBox from './TextBox';\n\n\n/**\n * A direct editing component that allows users\n * to edit an elements text directly in the diagram\n *\n * @param {EventBus} eventBus the event bus\n */\nexport default function DirectEditing(eventBus, canvas) {\n\n  this._eventBus = eventBus;\n\n  this._providers = [];\n  this._textbox = new TextBox({\n    container: canvas.getContainer(),\n    keyHandler: bind(this._handleKey, this),\n    resizeHandler: bind(this._handleResize, this)\n  });\n}\n\nDirectEditing.$inject = [ 'eventBus', 'canvas' ];\n\n\n/**\n * Register a direct editing provider\n\n * @param {Object} provider the provider, must expose an #activate(element) method that returns\n *                          an activation context ({ bounds: {x, y, width, height }, text }) if\n *                          direct editing is available for the given element.\n *                          Additionally the provider must expose a #update(element, value) method\n *                          to receive direct editing updates.\n */\nDirectEditing.prototype.registerProvider = function(provider) {\n  this._providers.push(provider);\n};\n\n\n/**\n * Returns true if direct editing is currently active\n *\n * @return {Boolean}\n */\nDirectEditing.prototype.isActive = function() {\n  return !!this._active;\n};\n\n\n/**\n * Cancel direct editing, if it is currently active\n */\nDirectEditing.prototype.cancel = function() {\n  if (!this._active) {\n    return;\n  }\n\n  this._fire('cancel');\n  this.close();\n};\n\n\nDirectEditing.prototype._fire = function(event, context) {\n  this._eventBus.fire('directEditing.' + event, context || { active: this._active });\n};\n\nDirectEditing.prototype.close = function() {\n  this._textbox.destroy();\n\n  this._fire('deactivate');\n\n  this._active = null;\n\n  this.resizable = undefined;\n};\n\n\nDirectEditing.prototype.complete = function() {\n\n  var active = this._active;\n\n  if (!active) {\n    return;\n  }\n\n  var containerBounds,\n      previousBounds = active.context.bounds,\n      newBounds = this.$textbox.getBoundingClientRect(),\n      newText = this.getValue(),\n      previousText = active.context.text;\n\n  if (\n    newText !== previousText ||\n    newBounds.height !== previousBounds.height ||\n    newBounds.width !== previousBounds.width\n  ) {\n    containerBounds = this._textbox.container.getBoundingClientRect();\n\n    active.provider.update(active.element, newText, active.context.text, {\n      x: newBounds.left - containerBounds.left,\n      y: newBounds.top - containerBounds.top,\n      width: newBounds.width,\n      height: newBounds.height\n    });\n  }\n\n  this._fire('complete');\n\n  this.close();\n};\n\n\nDirectEditing.prototype.getValue = function() {\n  return this._textbox.getValue();\n};\n\n\nDirectEditing.prototype._handleKey = function(e) {\n\n  // stop bubble\n  e.stopPropagation();\n\n  var key = e.keyCode || e.charCode;\n\n  // ESC\n  if (key === 27) {\n    e.preventDefault();\n    return this.cancel();\n  }\n\n  // Enter\n  if (key === 13 && !e.shiftKey) {\n    e.preventDefault();\n    return this.complete();\n  }\n};\n\n\nDirectEditing.prototype._handleResize = function(event) {\n  this._fire('resize', event);\n};\n\n\n/**\n * Activate direct editing on the given element\n *\n * @param {Object} ElementDescriptor the descriptor for a shape or connection\n * @return {Boolean} true if the activation was possible\n */\nDirectEditing.prototype.activate = function(element) {\n  if (this.isActive()) {\n    this.cancel();\n  }\n\n  // the direct editing context\n  var context;\n\n  var provider = find(this._providers, function(p) {\n    return (context = p.activate(element)) ? p : null;\n  });\n\n  // check if activation took place\n  if (context) {\n    this.$textbox = this._textbox.create(\n      context.bounds,\n      context.style,\n      context.text,\n      context.options\n    );\n\n    this._active = {\n      element: element,\n      context: context,\n      provider: provider\n    };\n\n    if (context.options && context.options.resizable) {\n      this.resizable = true;\n    }\n\n    this._fire('activate');\n  }\n\n  return !!context;\n};\n"]},"metadata":{},"sourceType":"module"}