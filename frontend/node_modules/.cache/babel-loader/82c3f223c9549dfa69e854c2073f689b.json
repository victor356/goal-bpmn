{"ast":null,"code":"import { is } from '../../../util/ModelUtil';\nimport { roundBounds } from 'diagram-js/lib/layout/LayoutUtil';\nimport { hasPrimaryModifier } from 'diagram-js/lib/util/Mouse';\nvar SLIGHTLY_HIGHER_PRIORITY = 1001;\n/**\n * Invoke {@link Modeling#resizeLane} instead of\n * {@link Modeling#resizeShape} when resizing a Lane\n * or Participant shape.\n */\n\nexport default function ResizeLaneBehavior(eventBus, modeling) {\n  eventBus.on('resize.start', SLIGHTLY_HIGHER_PRIORITY + 500, function (event) {\n    var context = event.context,\n        shape = context.shape;\n\n    if (is(shape, 'bpmn:Lane') || is(shape, 'bpmn:Participant')) {\n      // should we resize the opposite lane(s) in\n      // order to compensate for the resize operation?\n      context.balanced = !hasPrimaryModifier(event);\n    }\n  });\n  /**\n   * Intercept resize end and call resize lane function instead.\n   */\n\n  eventBus.on('resize.end', SLIGHTLY_HIGHER_PRIORITY, function (event) {\n    var context = event.context,\n        shape = context.shape,\n        canExecute = context.canExecute,\n        newBounds = context.newBounds;\n\n    if (is(shape, 'bpmn:Lane') || is(shape, 'bpmn:Participant')) {\n      if (canExecute) {\n        // ensure we have actual pixel values for new bounds\n        // (important when zoom level was > 1 during move)\n        newBounds = roundBounds(newBounds); // perform the actual resize\n\n        modeling.resizeLane(shape, newBounds, context.balanced);\n      } // stop propagation\n\n\n      return false;\n    }\n  });\n}\nResizeLaneBehavior.$inject = ['eventBus', 'modeling'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/modeling/behavior/ResizeLaneBehavior.js"],"names":["is","roundBounds","hasPrimaryModifier","SLIGHTLY_HIGHER_PRIORITY","ResizeLaneBehavior","eventBus","modeling","on","event","context","shape","balanced","canExecute","newBounds","resizeLane","$inject"],"mappings":"AAAA,SAASA,EAAT,QAAmB,yBAAnB;AAEA,SACEC,WADF,QAEO,kCAFP;AAIA,SACEC,kBADF,QAEO,2BAFP;AAIA,IAAIC,wBAAwB,GAAG,IAA/B;AAGA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AAE7DD,EAAAA,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4BJ,wBAAwB,GAAG,GAAvD,EAA4D,UAASK,KAAT,EAAgB;AAC1E,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,KAAK,GAAGD,OAAO,CAACC,KADpB;;AAGA,QAAIV,EAAE,CAACU,KAAD,EAAQ,WAAR,CAAF,IAA0BV,EAAE,CAACU,KAAD,EAAQ,kBAAR,CAAhC,EAA6D;AAE3D;AACA;AACAD,MAAAA,OAAO,CAACE,QAAR,GAAmB,CAACT,kBAAkB,CAACM,KAAD,CAAtC;AACD;AACF,GAVD;AAYA;AACF;AACA;;AACEH,EAAAA,QAAQ,CAACE,EAAT,CAAY,YAAZ,EAA0BJ,wBAA1B,EAAoD,UAASK,KAAT,EAAgB;AAClE,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,KAAK,GAAGD,OAAO,CAACC,KADpB;AAAA,QAEIE,UAAU,GAAGH,OAAO,CAACG,UAFzB;AAAA,QAGIC,SAAS,GAAGJ,OAAO,CAACI,SAHxB;;AAKA,QAAIb,EAAE,CAACU,KAAD,EAAQ,WAAR,CAAF,IAA0BV,EAAE,CAACU,KAAD,EAAQ,kBAAR,CAAhC,EAA6D;AAE3D,UAAIE,UAAJ,EAAgB;AACd;AACA;AACAC,QAAAA,SAAS,GAAGZ,WAAW,CAACY,SAAD,CAAvB,CAHc,CAKd;;AACAP,QAAAA,QAAQ,CAACQ,UAAT,CAAoBJ,KAApB,EAA2BG,SAA3B,EAAsCJ,OAAO,CAACE,QAA9C;AACD,OAT0D,CAW3D;;;AACA,aAAO,KAAP;AACD;AACF,GApBD;AAqBD;AAEDP,kBAAkB,CAACW,OAAnB,GAA6B,CAC3B,UAD2B,EAE3B,UAF2B,CAA7B","sourcesContent":["import { is } from '../../../util/ModelUtil';\n\nimport {\n  roundBounds\n} from 'diagram-js/lib/layout/LayoutUtil';\n\nimport {\n  hasPrimaryModifier\n} from 'diagram-js/lib/util/Mouse';\n\nvar SLIGHTLY_HIGHER_PRIORITY = 1001;\n\n\n/**\n * Invoke {@link Modeling#resizeLane} instead of\n * {@link Modeling#resizeShape} when resizing a Lane\n * or Participant shape.\n */\nexport default function ResizeLaneBehavior(eventBus, modeling) {\n\n  eventBus.on('resize.start', SLIGHTLY_HIGHER_PRIORITY + 500, function(event) {\n    var context = event.context,\n        shape = context.shape;\n\n    if (is(shape, 'bpmn:Lane') || is(shape, 'bpmn:Participant')) {\n\n      // should we resize the opposite lane(s) in\n      // order to compensate for the resize operation?\n      context.balanced = !hasPrimaryModifier(event);\n    }\n  });\n\n  /**\n   * Intercept resize end and call resize lane function instead.\n   */\n  eventBus.on('resize.end', SLIGHTLY_HIGHER_PRIORITY, function(event) {\n    var context = event.context,\n        shape = context.shape,\n        canExecute = context.canExecute,\n        newBounds = context.newBounds;\n\n    if (is(shape, 'bpmn:Lane') || is(shape, 'bpmn:Participant')) {\n\n      if (canExecute) {\n        // ensure we have actual pixel values for new bounds\n        // (important when zoom level was > 1 during move)\n        newBounds = roundBounds(newBounds);\n\n        // perform the actual resize\n        modeling.resizeLane(shape, newBounds, context.balanced);\n      }\n\n      // stop propagation\n      return false;\n    }\n  });\n}\n\nResizeLaneBehavior.$inject = [\n  'eventBus',\n  'modeling'\n];\n"]},"metadata":{},"sourceType":"module"}