{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vittorio\\\\Documents\\\\GitHub\\\\SPM2021-MTV\\\\frontend\\\\src\\\\components\\\\bpmn\\\\bpmn.modeler.component.jsx\";\nimport React, { Component } from 'react';\nimport BpmnModeler from 'bpmn-js/lib/Modeler';\nimport 'bpmn-js/dist/assets/diagram-js.css';\nimport 'bpmn-font/dist/css/bpmn-embedded.css';\nimport { emptyBpmn } from '../../assets/empty.bpmn';\nimport propertiesPanelModule from 'bpmn-js-properties-panel';\nimport propertiesProviderModule from 'bpmn-js-properties-panel/lib/provider/camunda';\nimport camundaModdleDescriptor from 'camunda-bpmn-moddle/resources/camunda';\nimport \"./bpmn.scss\";\nimport { is } from 'bpmn-js/lib/util/ModelUtil';\nimport { ExternalLink } from 'react-external-link';\nimport { getCurrentUser } from '../util/APIUtils';\nimport $ from 'jquery'; // prova gatto\n\nimport resizeAllModule from '../../lib/resize-all-rules';\nimport colorPickerModule from '../../lib/color-picker';\nimport nyanDrawModule from '../../lib/nyan/draw';\nimport nyanPaletteModule from '../../lib/nyan/palette';\nimport templates from '../bpmn/element-templates/data.json';\nimport PropertiesPanelModule from \"bpmn-js-properties-panel\";\nimport CamundaPropertiesProviderModule from \"bpmn-js-properties-panel/lib/provider/camunda\";\nimport CustomPaletteProvider from \"../palette\";\nimport CamundaModdlePackage from \"camunda-bpmn-moddle/resources/camunda\";\nimport CamundaModdleExtension from \"camunda-bpmn-moddle/lib\";\nimport { _url, _urlNuovo } from '../config';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BpmnModelerComponent extends Component {\n  constructor(_props) {\n    super(_props);\n    this.modeler = null;\n    this.listaNomi = [];\n\n    this.componentDidMount = () => {\n      this.modeler = new BpmnModeler({\n        container: '#bpmnview',\n        keyboard: {\n          bindTo: window\n        },\n        propertiesPanel: {\n          parent: '#propview'\n        },\n        additionalModules: [propertiesPanelModule, propertiesProviderModule, // templates,\n        // gatto\n        //resizeAllModule,\n        //colorPickerModule,\n        //nyanDrawModule,\n        //nyanPaletteModule,\n        CamundaPropertiesProviderModule, CamundaModdleExtension, CustomPaletteProvider],\n        elementTemplates: templates,\n        moddleExtensions: {\n          camunda: camundaModdleDescriptor,\n          camunda: CamundaModdlePackage\n        }\n      });\n      this.newBpmnDiagram();\n      this.loadCurrentlyLoggedInUser();\n    };\n\n    this.newBpmnDiagram = () => {\n      this.state.bpmn ? this.openBpmnDiagram(this.state.bpmnString) : this.openBpmnDiagram(emptyBpmn);\n      console.log(\"this.state.bpmnString\", this.state);\n    };\n\n    this.openBpmnDiagram = xml => {\n      this.modeler.importXML(xml, error => {\n        if (error) {\n          return console.log('fail import xml');\n        }\n\n        var canvas = this.modeler.get('canvas');\n        canvas.zoom('fit-viewport');\n      });\n    };\n\n    this.saveDiagram = done => {\n      this.modeler.saveXML({\n        format: true\n      }, function (err, xml) {\n        done(err, xml);\n      });\n    };\n\n    this.Validate = props => {\n      const name = this.getParameter();\n      console.log('name', name);\n      const formData = new FormData();\n      const formData1 = new FormData();\n      const img = this.getImage();\n      this.saveDiagram(function (err, xml) {\n        const imgBlob = new Blob([xml], {\n          type: 'xml'\n        });\n        formData.append(\"upload\", imgBlob, name + \".bpmn\");\n        formData1.append(\"upload\", imgBlob, \"static/\" + props.id + \"/\" + name + \".bpmn\");\n        console.log(\"formDaTA\", formData);\n        $.ajax({\n          method: 'POST',\n          url: \"http://90.147.42.60:8080/engine-rest/deployment/create\",\n          data: formData1,\n          processData: false,\n          contentType: false\n        }).done(function (result) {\n          // do something with the result now\n          console.log(result);\n        }).fail(function (a, b, c) {\n          alert(\"error\");\n        });\n        formData.append(\"id\", props.id);\n        formData.append(\"svg\", img, name + \".svg\");\n        $.ajax({\n          method: 'POST',\n          url: _url + \"/upload\",\n          data: formData,\n          processData: false,\n          contentType: false\n        }).done(function (result) {\n          // do something with the result now\n          console.log(result);\n        }).fail(function (a, b, c) {\n          alert(\"error\");\n        });\n      });\n    };\n\n    this.Download = () => {\n      this.modeler.saveXML({\n        format: true\n      }, function (err, xml) {\n        if (err) {\n          console.error(err);\n        } else {\n          var encodedData = err ? '' : encodeURIComponent(xml);\n          window.location.href = 'data:application/bpmn20-xml;charset=UTF-8,' + encodedData;\n        }\n      });\n    };\n\n    this.getImage = () => {\n      var blob;\n      this.modeler.saveSVG({\n        format: true\n      }, function (err, svg) {\n        if (err) {\n          return;\n        }\n\n        var svgBlob = new Blob([svg], {\n          type: 'image/svg+xml'\n        });\n        blob = svgBlob;\n      });\n      return blob;\n    };\n\n    this.getParameter = () => {\n      const canvas = this.modeler.get('canvas');\n      const rootElement = canvas.getRootElement();\n      console.log('Process Id:', rootElement.id);\n      rootElement.businessObject.participants.map((item, index) => {\n        this.listaNomi[index] = item.processRef.id; // return console.log('item', this.listaNomi[index]);\n      }); //const formData = new FormData();\n      //formData.append('nameList', this.listaNomi);\n      //var xhr = new XMLHttpRequest();\n      //xhr.open('POST', 'http://localhost:8081/uploadNames');\n      //xhr.onload = function (e) {\n      //    console.log(\"xhr onload function\");\n      //};\n      //xhr.send(formData);\n\n      return rootElement.id;\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bpmncontainer\",\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"propview\",\n          style: {\n            width: '25%',\n            height: '100%',\n            float: 'right',\n            maxHeight: '100%',\n            overflowX: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"bpmnview\",\n          style: {\n            width: '75%',\n            height: '100%',\n            float: 'left'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modelerBPMN\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"downloadButton\",\n            onClick: () => {\n              this.Validate(this.state.currentUser);\n            },\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ExternalLink, {\n            href: _urlNuovo + \"/camunda/app/\",\n            className: \"link\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"validateButton\",\n              onClick: () => {\n                this.Validate(this.state.currentUser);\n              },\n              children: \"Deploy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 87\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"downloadButton\",\n            onClick: () => {\n              this.Download();\n            },\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/cockpit\",\n            className: \"link\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"validateButton\",\n              onClick: () => {},\n              children: \"Cockpit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      currentUser: null,\n      bpmn: _props.xml,\n      bpmnString: _props.bpmnString\n    };\n    this.loadCurrentlyLoggedInUser = this.loadCurrentlyLoggedInUser.bind(this);\n  }\n\n  loadCurrentlyLoggedInUser() {\n    getCurrentUser().then(response => {\n      this.setState({\n        currentUser: response\n      });\n    }).catch(error => {\n      console.log(\"error\", error);\n    });\n  }\n\n}\n\nexport default BpmnModelerComponent;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/src/components/bpmn/bpmn.modeler.component.jsx"],"names":["React","Component","BpmnModeler","emptyBpmn","propertiesPanelModule","propertiesProviderModule","camundaModdleDescriptor","is","ExternalLink","getCurrentUser","$","resizeAllModule","colorPickerModule","nyanDrawModule","nyanPaletteModule","templates","PropertiesPanelModule","CamundaPropertiesProviderModule","CustomPaletteProvider","CamundaModdlePackage","CamundaModdleExtension","_url","_urlNuovo","Link","BpmnModelerComponent","constructor","props","modeler","listaNomi","componentDidMount","container","keyboard","bindTo","window","propertiesPanel","parent","additionalModules","elementTemplates","moddleExtensions","camunda","newBpmnDiagram","loadCurrentlyLoggedInUser","state","bpmn","openBpmnDiagram","bpmnString","console","log","xml","importXML","error","canvas","get","zoom","saveDiagram","done","saveXML","format","err","Validate","name","getParameter","formData","FormData","formData1","img","getImage","imgBlob","Blob","type","append","id","ajax","method","url","data","processData","contentType","result","fail","a","b","c","alert","Download","encodedData","encodeURIComponent","location","href","blob","saveSVG","svg","svgBlob","rootElement","getRootElement","businessObject","participants","map","item","index","processRef","render","width","height","float","maxHeight","overflowX","currentUser","bind","then","response","setState","catch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport BpmnModeler from 'bpmn-js/lib/Modeler';\r\nimport 'bpmn-js/dist/assets/diagram-js.css';\r\nimport 'bpmn-font/dist/css/bpmn-embedded.css';\r\nimport { emptyBpmn } from '../../assets/empty.bpmn';\r\nimport propertiesPanelModule from 'bpmn-js-properties-panel';\r\nimport propertiesProviderModule from 'bpmn-js-properties-panel/lib/provider/camunda';\r\nimport camundaModdleDescriptor from 'camunda-bpmn-moddle/resources/camunda';\r\nimport \"./bpmn.scss\";\r\nimport { is } from 'bpmn-js/lib/util/ModelUtil';\r\nimport { ExternalLink } from 'react-external-link';\r\nimport { getCurrentUser } from '../util/APIUtils';\r\nimport $ from 'jquery';\r\n\r\n// prova gatto\r\nimport resizeAllModule from '../../lib/resize-all-rules';\r\nimport colorPickerModule from '../../lib/color-picker';\r\nimport nyanDrawModule from '../../lib/nyan/draw';\r\nimport nyanPaletteModule from '../../lib/nyan/palette';\r\nimport templates from '../bpmn/element-templates/data.json';\r\n\r\nimport PropertiesPanelModule from \"bpmn-js-properties-panel\";\r\nimport CamundaPropertiesProviderModule from \"bpmn-js-properties-panel/lib/provider/camunda\";\r\nimport CustomPaletteProvider from \"../palette\";\r\nimport CamundaModdlePackage from \"camunda-bpmn-moddle/resources/camunda\";\r\nimport CamundaModdleExtension from \"camunda-bpmn-moddle/lib\";\r\nimport { _url, _urlNuovo } from '../config';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass BpmnModelerComponent extends Component {\r\n\r\n    modeler = null;\r\n    listaNomi = [];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { currentUser: null, bpmn: props.xml, bpmnString: props.bpmnString }\r\n        this.loadCurrentlyLoggedInUser = this.loadCurrentlyLoggedInUser.bind(this);\r\n    }\r\n\r\n    loadCurrentlyLoggedInUser() {\r\n        getCurrentUser()\r\n            .then(response => {\r\n                this.setState({\r\n                    currentUser: response,\r\n                });\r\n            }).catch(error => {\r\n                console.log(\"error\", error);\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.modeler = new BpmnModeler({\r\n            container: '#bpmnview',\r\n            keyboard: {\r\n                bindTo: window\r\n            },\r\n            propertiesPanel: {\r\n                parent: '#propview'\r\n            },\r\n            additionalModules: [\r\n                propertiesPanelModule,\r\n                propertiesProviderModule,\r\n                // templates,\r\n\r\n                // gatto\r\n                //resizeAllModule,\r\n                //colorPickerModule,\r\n                //nyanDrawModule,\r\n                //nyanPaletteModule,\r\n\r\n                CamundaPropertiesProviderModule,\r\n                CamundaModdleExtension,\r\n                CustomPaletteProvider\r\n            ],\r\n            elementTemplates: templates,\r\n            moddleExtensions: {\r\n                camunda: camundaModdleDescriptor,\r\n                camunda: CamundaModdlePackage\r\n\r\n            },\r\n\r\n\r\n\r\n        });\r\n\r\n        this.newBpmnDiagram();\r\n        this.loadCurrentlyLoggedInUser();\r\n\r\n    }\r\n\r\n    newBpmnDiagram = () => {\r\n        this.state.bpmn\r\n            ? this.openBpmnDiagram(this.state.bpmnString)\r\n            : this.openBpmnDiagram(emptyBpmn)\r\n\r\n        console.log(\"this.state.bpmnString\", this.state);\r\n\r\n    }\r\n\r\n    openBpmnDiagram = (xml) => {\r\n        this.modeler.importXML(xml, (error) => {\r\n            if (error) {\r\n                return console.log('fail import xml');\r\n            }\r\n\r\n            var canvas = this.modeler.get('canvas');\r\n\r\n            canvas.zoom('fit-viewport');\r\n        });\r\n    }\r\n\r\n    saveDiagram = (done) => {\r\n\r\n        this.modeler.saveXML({ format: true }, function (err, xml) {\r\n            done(err, xml);\r\n        });\r\n    }\r\n    Validate = (props) => {\r\n        const name = this.getParameter();\r\n        console.log('name', name);\r\n        const formData = new FormData();\r\n        const formData1 = new FormData();\r\n        const img = this.getImage();\r\n        this.saveDiagram(function (err, xml) {\r\n            const imgBlob = new Blob([xml], { type: 'xml' });\r\n            formData.append(\r\n                \"upload\",\r\n                imgBlob,\r\n                name + \".bpmn\"\r\n            );\r\n            formData1.append(\r\n                \"upload\",\r\n                imgBlob,\r\n                \"static/\" + props.id + \"/\" + name + \".bpmn\"\r\n            )\r\n            console.log(\"formDaTA\", formData);\r\n\r\n            $.ajax({\r\n                method: 'POST',\r\n                url: \"http://90.147.42.60:8080/engine-rest/deployment/create\",\r\n                data: formData1,\r\n                processData: false,\r\n                contentType: false\r\n            }).done(function (result) {\r\n                // do something with the result now\r\n\r\n                console.log(result);\r\n            }).fail(function (a, b, c) {\r\n                alert(\"error\");\r\n            });\r\n            formData.append(\"id\", props.id);\r\n            formData.append(\"svg\", img, name + \".svg\");\r\n            $.ajax({\r\n                method: 'POST',\r\n                url: _url + \"/upload\",\r\n                data: formData,\r\n                processData: false,\r\n                contentType: false\r\n            }).done(function (result) {\r\n                // do something with the result now\r\n\r\n                console.log(result);\r\n            }).fail(function (a, b, c) {\r\n                alert(\"error\");\r\n            });\r\n        });\r\n\r\n    }\r\n    Download = () => {\r\n        this.modeler.saveXML({ format: true }, function (err, xml) {\r\n            if (err) {\r\n                console.error(err);\r\n            } else {\r\n                var encodedData = err ? '' : encodeURIComponent(xml);\r\n                window.location.href = 'data:application/bpmn20-xml;charset=UTF-8,' + encodedData;\r\n            }\r\n        });\r\n    }\r\n\r\n    getImage = () => {\r\n        var blob;\r\n        this.modeler.saveSVG({ format: true }, function (err, svg) {\r\n            if (err) {\r\n                return;\r\n            }\r\n\r\n            var svgBlob = new Blob([svg], {\r\n                type: 'image/svg+xml'\r\n            });\r\n            blob = svgBlob;\r\n\r\n        })\r\n        return blob;\r\n    }\r\n\r\n    getParameter = () => {\r\n\r\n        const canvas = this.modeler.get('canvas');\r\n\r\n        const rootElement = canvas.getRootElement();\r\n\r\n        console.log('Process Id:', rootElement.id);\r\n        rootElement.businessObject.participants.map((item, index) => {\r\n            this.listaNomi[index] = item.processRef.id\r\n            // return console.log('item', this.listaNomi[index]);\r\n        })\r\n        //const formData = new FormData();\r\n        //formData.append('nameList', this.listaNomi);\r\n        //var xhr = new XMLHttpRequest();\r\n        //xhr.open('POST', 'http://localhost:8081/uploadNames');\r\n        //xhr.onload = function (e) {\r\n        //    console.log(\"xhr onload function\");\r\n        //};\r\n        //xhr.send(formData);\r\n        return rootElement.id;\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div id=\"bpmncontainer\" style={{ width: '100%', height: '100%' }} >\r\n                <div id=\"propview\" style={{ width: '25%', height: '100%', float: 'right', maxHeight: '100%', overflowX: 'auto' }}></div>\r\n                <div id=\"bpmnview\" style={{ width: '75%', height: '100%', float: 'left' }}></div>\r\n                <div className=\"modelerBPMN\">\r\n                    <button className=\"downloadButton\" onClick={() => { this.Validate(this.state.currentUser) }}>Save</button>\r\n                    <ExternalLink href={_urlNuovo + \"/camunda/app/\"} className=\"link\"><button className=\"validateButton\" onClick={() => { this.Validate(this.state.currentUser) }}>Deploy</button></ExternalLink>\r\n                    <button className=\"downloadButton\" onClick={() => { this.Download() }}>Download</button>\r\n                    <Link to=\"/cockpit\" className=\"link\" >\r\n                        <button className=\"validateButton\" onClick={() => { }}>Cockpit</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BpmnModelerComponent;\r\n"]},"metadata":{},"sourceType":"module"}