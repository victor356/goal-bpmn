{"ast":null,"code":"import { event as domEvent, matches as domMatches } from 'min-dom';\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain the fields (node, listeners).\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n * @param {EditorActions} editorActions\n */\n\nexport default function Keyboard(config, eventBus, editorActions) {\n  var self = this;\n  this._config = config || {};\n  this._eventBus = eventBus;\n  this._editorActions = editorActions;\n  this._listeners = []; // our key handler is a singleton that passes\n  // (keycode, modifiers) to each listener.\n  //\n  // listeners must indicate that they handled a key event\n  // by returning true. This stops the event propagation.\n  //\n\n  this._keyHandler = function (event) {\n    var i,\n        l,\n        target = event.target,\n        listeners = self._listeners,\n        code = event.keyCode || event.charCode || -1;\n\n    if (target && (domMatches(target, 'input, textarea') || target.contentEditable === 'true')) {\n      return;\n    }\n\n    for (i = 0; l = listeners[i]; i++) {\n      if (l(code, event)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n  }; // properly clean dom registrations\n\n\n  eventBus.on('diagram.destroy', function () {\n    self._fire('destroy');\n\n    self.unbind();\n    self._listeners = null;\n  });\n  eventBus.on('diagram.init', function () {\n    self._fire('init');\n  });\n  eventBus.on('attach', function () {\n    if (config && config.bindTo) {\n      self.bind(config.bindTo);\n    }\n  });\n  eventBus.on('detach', function () {\n    self.unbind();\n  });\n\n  this._init();\n}\nKeyboard.$inject = ['config.keyboard', 'eventBus', 'editorActions'];\n\nKeyboard.prototype.bind = function (node) {\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n  this._node = node; // bind key events\n\n  domEvent.bind(node, 'keydown', this._keyHandler, true);\n\n  this._fire('bind');\n};\n\nKeyboard.prototype.getBinding = function () {\n  return this._node;\n};\n\nKeyboard.prototype.unbind = function () {\n  var node = this._node;\n\n  if (node) {\n    this._fire('unbind'); // unbind key events\n\n\n    domEvent.unbind(node, 'keydown', this._keyHandler, true);\n  }\n\n  this._node = null;\n};\n\nKeyboard.prototype._fire = function (event) {\n  this._eventBus.fire('keyboard.' + event, {\n    node: this._node,\n    listeners: this._listeners\n  });\n};\n\nKeyboard.prototype._init = function () {\n  var listeners = this._listeners;\n  var editorActions = this._editorActions,\n      config = this._config; // init default listeners\n  // undo\n  // (CTRL|CMD) + Z\n\n  function undo(key, modifiers) {\n    if (isCmd(modifiers) && !isShift(modifiers) && key === 90) {\n      editorActions.trigger('undo');\n      return true;\n    }\n  } // redo\n  // CTRL + Y\n  // CMD + SHIFT + Z\n\n\n  function redo(key, modifiers) {\n    if (isCmd(modifiers) && (key === 89 || key === 90 && isShift(modifiers))) {\n      editorActions.trigger('redo');\n      return true;\n    }\n  } // copy\n  // CTRL/CMD + C\n\n\n  function copy(key, modifiers) {\n    if (isCmd(modifiers) && key === 67) {\n      editorActions.trigger('copy');\n      return true;\n    }\n  } // paste\n  // CTRL/CMD + V\n\n\n  function paste(key, modifiers) {\n    if (isCmd(modifiers) && key === 86) {\n      editorActions.trigger('paste');\n      return true;\n    }\n  }\n  /**\n   * zoom in one step\n   * CTRL + +\n   *\n   * 107 = numpad plus\n   * 187 = regular plus\n   * 171 = regular plus in Firefox (german keyboard layout)\n   *  61 = regular plus in Firefox (US keyboard layout)\n   */\n\n\n  function zoomIn(key, modifiers) {\n    if ((key === 107 || key === 187 || key === 171 || key === 61) && isCmd(modifiers)) {\n      editorActions.trigger('stepZoom', {\n        value: 1\n      });\n      return true;\n    }\n  }\n  /**\n   * zoom out one step\n   * CTRL + -\n   *\n   * 109 = numpad minus\n   * 189 = regular minus\n   * 173 = regular minus in Firefox (US and german keyboard layout)\n   */\n\n\n  function zoomOut(key, modifiers) {\n    if ((key === 109 || key === 189 || key === 173) && isCmd(modifiers)) {\n      editorActions.trigger('stepZoom', {\n        value: -1\n      });\n      return true;\n    }\n  }\n  /**\n   * zoom to the default level\n   * CTRL + 0\n   *\n   * 96 = numpad zero\n   * 48 = regular zero\n   */\n\n\n  function zoomDefault(key, modifiers) {\n    if ((key === 96 || key === 48) && isCmd(modifiers)) {\n      editorActions.trigger('zoom', {\n        value: 1\n      });\n      return true;\n    }\n  } // delete selected element\n  // DEL\n\n\n  function removeSelection(key, modifiers) {\n    if (key === 46) {\n      editorActions.trigger('removeSelection');\n      return true;\n    }\n  } // move canvas left\n  // left arrow\n  //\n  // 37 = Left\n  // 38 = Up\n  // 39 = Right\n  // 40 = Down\n\n\n  function moveCanvas(key, modifiers) {\n    if ([37, 38, 39, 40].indexOf(key) >= 0) {\n      var opts = {\n        invertY: config.invertY,\n        speed: config.speed || 50\n      };\n\n      switch (key) {\n        case 37:\n          // Left\n          opts.direction = 'left';\n          break;\n\n        case 38:\n          // Up\n          opts.direction = 'up';\n          break;\n\n        case 39:\n          // Right\n          opts.direction = 'right';\n          break;\n\n        case 40:\n          // Down\n          opts.direction = 'down';\n          break;\n      }\n\n      editorActions.trigger('moveCanvas', opts);\n      return true;\n    }\n  }\n\n  listeners.push(undo);\n  listeners.push(redo);\n  listeners.push(copy);\n  listeners.push(paste);\n  listeners.push(removeSelection);\n  listeners.push(zoomIn);\n  listeners.push(zoomOut);\n  listeners.push(zoomDefault);\n  listeners.push(moveCanvas);\n};\n/**\n * Add a listener function that is notified with (key, modifiers) whenever\n * the keyboard is bound and the user presses a key.\n *\n * @param {Function} listenerFn\n */\n\n\nKeyboard.prototype.addListener = function (listenerFn) {\n  this._listeners.push(listenerFn);\n};\n\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\n\nfunction hasModifier(modifiers) {\n  return modifiers.ctrlKey || modifiers.metaKey || modifiers.shiftKey || modifiers.altKey;\n}\n\nfunction isCmd(modifiers) {\n  // ensure we don't react to AltGr\n  // (mapped to CTRL + ALT)\n  if (modifiers.altKey) {\n    return false;\n  }\n\n  return modifiers.ctrlKey || modifiers.metaKey;\n}\n\nfunction isShift(modifiers) {\n  return modifiers.shiftKey;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/keyboard/Keyboard.js"],"names":["event","domEvent","matches","domMatches","Keyboard","config","eventBus","editorActions","self","_config","_eventBus","_editorActions","_listeners","_keyHandler","i","l","target","listeners","code","keyCode","charCode","contentEditable","preventDefault","stopPropagation","on","_fire","unbind","bindTo","bind","_init","$inject","prototype","node","_node","getBinding","fire","undo","key","modifiers","isCmd","isShift","trigger","redo","copy","paste","zoomIn","value","zoomOut","zoomDefault","removeSelection","moveCanvas","indexOf","opts","invertY","speed","direction","push","addListener","listenerFn","hasModifier","ctrlKey","metaKey","shiftKey","altKey"],"mappings":"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","sourcesContent":["import {\n  event as domEvent,\n  matches as domMatches\n} from 'min-dom';\n\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain the fields (node, listeners).\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n * @param {EditorActions} editorActions\n */\nexport default function Keyboard(config, eventBus, editorActions) {\n  var self = this;\n\n  this._config = config || {};\n  this._eventBus = eventBus;\n  this._editorActions = editorActions;\n\n  this._listeners = [];\n\n  // our key handler is a singleton that passes\n  // (keycode, modifiers) to each listener.\n  //\n  // listeners must indicate that they handled a key event\n  // by returning true. This stops the event propagation.\n  //\n  this._keyHandler = function(event) {\n\n    var i, l,\n        target = event.target,\n        listeners = self._listeners,\n        code = event.keyCode || event.charCode || -1;\n\n    if (target && (domMatches(target, 'input, textarea') || target.contentEditable === 'true')) {\n      return;\n    }\n\n    for (i = 0; (l = listeners[i]); i++) {\n      if (l(code, event)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n  };\n\n  // properly clean dom registrations\n  eventBus.on('diagram.destroy', function() {\n    self._fire('destroy');\n\n    self.unbind();\n    self._listeners = null;\n  });\n\n  eventBus.on('diagram.init', function() {\n    self._fire('init');\n  });\n\n  eventBus.on('attach', function() {\n    if (config && config.bindTo) {\n      self.bind(config.bindTo);\n    }\n  });\n\n  eventBus.on('detach', function() {\n    self.unbind();\n  });\n\n  this._init();\n}\n\nKeyboard.$inject = [\n  'config.keyboard',\n  'eventBus',\n  'editorActions'\n];\n\n\nKeyboard.prototype.bind = function(node) {\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n\n  this._node = node;\n\n  // bind key events\n  domEvent.bind(node, 'keydown', this._keyHandler, true);\n\n  this._fire('bind');\n};\n\nKeyboard.prototype.getBinding = function() {\n  return this._node;\n};\n\nKeyboard.prototype.unbind = function() {\n  var node = this._node;\n\n  if (node) {\n    this._fire('unbind');\n\n    // unbind key events\n    domEvent.unbind(node, 'keydown', this._keyHandler, true);\n  }\n\n  this._node = null;\n};\n\nKeyboard.prototype._fire = function(event) {\n  this._eventBus.fire('keyboard.' + event, { node: this._node, listeners: this._listeners });\n};\n\nKeyboard.prototype._init = function() {\n\n  var listeners = this._listeners;\n\n  var editorActions = this._editorActions,\n      config = this._config;\n\n  // init default listeners\n\n  // undo\n  // (CTRL|CMD) + Z\n  function undo(key, modifiers) {\n\n    if (isCmd(modifiers) && !isShift(modifiers) && key === 90) {\n      editorActions.trigger('undo');\n\n      return true;\n    }\n  }\n\n  // redo\n  // CTRL + Y\n  // CMD + SHIFT + Z\n  function redo(key, modifiers) {\n\n    if (isCmd(modifiers) && (key === 89 || (key === 90 && isShift(modifiers)))) {\n      editorActions.trigger('redo');\n\n      return true;\n    }\n  }\n\n  // copy\n  // CTRL/CMD + C\n  function copy(key, modifiers) {\n\n    if (isCmd(modifiers) && (key === 67)) {\n      editorActions.trigger('copy');\n\n      return true;\n    }\n  }\n\n  // paste\n  // CTRL/CMD + V\n  function paste(key, modifiers) {\n\n    if (isCmd(modifiers) && (key === 86)) {\n      editorActions.trigger('paste');\n\n      return true;\n    }\n  }\n\n  /**\n   * zoom in one step\n   * CTRL + +\n   *\n   * 107 = numpad plus\n   * 187 = regular plus\n   * 171 = regular plus in Firefox (german keyboard layout)\n   *  61 = regular plus in Firefox (US keyboard layout)\n   */\n  function zoomIn(key, modifiers) {\n\n    if ((key === 107 || key === 187 || key === 171 || key === 61) && isCmd(modifiers)) {\n      editorActions.trigger('stepZoom', { value: 1 });\n\n      return true;\n    }\n  }\n\n  /**\n   * zoom out one step\n   * CTRL + -\n   *\n   * 109 = numpad minus\n   * 189 = regular minus\n   * 173 = regular minus in Firefox (US and german keyboard layout)\n   */\n  function zoomOut(key, modifiers) {\n\n    if ((key === 109 || key === 189 || key === 173) && isCmd(modifiers)) {\n      editorActions.trigger('stepZoom', { value: -1 });\n\n      return true;\n    }\n  }\n\n  /**\n   * zoom to the default level\n   * CTRL + 0\n   *\n   * 96 = numpad zero\n   * 48 = regular zero\n   */\n  function zoomDefault(key, modifiers) {\n\n    if ((key === 96 || key === 48) && isCmd(modifiers)) {\n      editorActions.trigger('zoom', { value: 1 });\n\n      return true;\n    }\n  }\n\n  // delete selected element\n  // DEL\n  function removeSelection(key, modifiers) {\n\n    if (key === 46) {\n      editorActions.trigger('removeSelection');\n\n      return true;\n    }\n  }\n\n  // move canvas left\n  // left arrow\n  //\n  // 37 = Left\n  // 38 = Up\n  // 39 = Right\n  // 40 = Down\n  function moveCanvas(key, modifiers) {\n\n    if ([37, 38, 39, 40].indexOf(key) >= 0) {\n\n      var opts = {\n        invertY: config.invertY,\n        speed: (config.speed || 50)\n      };\n\n      switch (key) {\n      case 37: // Left\n        opts.direction = 'left';\n        break;\n      case 38: // Up\n        opts.direction = 'up';\n        break;\n      case 39: // Right\n        opts.direction = 'right';\n        break;\n      case 40: // Down\n        opts.direction = 'down';\n        break;\n      }\n\n      editorActions.trigger('moveCanvas', opts);\n\n      return true;\n    }\n  }\n\n  listeners.push(undo);\n  listeners.push(redo);\n  listeners.push(copy);\n  listeners.push(paste);\n  listeners.push(removeSelection);\n  listeners.push(zoomIn);\n  listeners.push(zoomOut);\n  listeners.push(zoomDefault);\n  listeners.push(moveCanvas);\n};\n\n\n/**\n * Add a listener function that is notified with (key, modifiers) whenever\n * the keyboard is bound and the user presses a key.\n *\n * @param {Function} listenerFn\n */\nKeyboard.prototype.addListener = function(listenerFn) {\n  this._listeners.push(listenerFn);\n};\n\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\n\n\nfunction hasModifier(modifiers) {\n  return (modifiers.ctrlKey || modifiers.metaKey || modifiers.shiftKey || modifiers.altKey);\n}\n\nfunction isCmd(modifiers) {\n  // ensure we don't react to AltGr\n  // (mapped to CTRL + ALT)\n  if (modifiers.altKey) {\n    return false;\n  }\n\n  return modifiers.ctrlKey || modifiers.metaKey;\n}\n\nfunction isShift(modifiers) {\n  return modifiers.shiftKey;\n}\n"]},"metadata":{},"sourceType":"module"}