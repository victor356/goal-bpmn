{"ast":null,"code":"import { roundPoint } from '../layout/LayoutUtil';\nimport { center, delta } from './PositionUtil';\n/**\n * Calculates the absolute point relative to the new element's position\n *\n * @param {point} point [absolute]\n * @param {bounds} oldBounds\n * @param {bounds} newBounds\n *\n * @return {point} point [absolute]\n */\n\nexport function getNewAttachPoint(point, oldBounds, newBounds) {\n  var oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      oldDelta = delta(point, oldCenter);\n  var newDelta = {\n    x: oldDelta.x * (newBounds.width / oldBounds.width),\n    y: oldDelta.y * (newBounds.height / oldBounds.height)\n  };\n  return roundPoint({\n    x: newCenter.x + newDelta.x,\n    y: newCenter.y + newDelta.y\n  });\n}\n/**\n * Calculates the shape's delta relative to a new position\n * of a certain element's bounds\n *\n * @param {djs.model.Shape} point [absolute]\n * @param {bounds} oldBounds\n * @param {bounds} newBounds\n *\n * @return {delta} delta\n */\n\nexport function getNewAttachShapeDelta(shape, oldBounds, newBounds) {\n  var shapeCenter = center(shape),\n      oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      shapeDelta = delta(shape, shapeCenter),\n      oldCenterDelta = delta(shapeCenter, oldCenter);\n  var newCenterDelta = {\n    x: oldCenterDelta.x * (newBounds.width / oldBounds.width),\n    y: oldCenterDelta.y * (newBounds.height / oldBounds.height)\n  };\n  var newShapeCenter = {\n    x: newCenter.x + newCenterDelta.x,\n    y: newCenter.y + newCenterDelta.y\n  };\n  return roundPoint({\n    x: newShapeCenter.x + shapeDelta.x - shape.x,\n    y: newShapeCenter.y + shapeDelta.y - shape.y\n  });\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/util/AttachUtil.js"],"names":["roundPoint","center","delta","getNewAttachPoint","point","oldBounds","newBounds","oldCenter","newCenter","oldDelta","newDelta","x","width","y","height","getNewAttachShapeDelta","shape","shapeCenter","shapeDelta","oldCenterDelta","newCenterDelta","newShapeCenter"],"mappings":"AAAA,SACEA,UADF,QAEO,sBAFP;AAIA,SACEC,MADF,EAEEC,KAFF,QAGO,gBAHP;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,SAAlC,EAA6CC,SAA7C,EAAwD;AAC7D,MAAIC,SAAS,GAAGN,MAAM,CAACI,SAAD,CAAtB;AAAA,MACIG,SAAS,GAAGP,MAAM,CAACK,SAAD,CADtB;AAAA,MAEIG,QAAQ,GAAGP,KAAK,CAACE,KAAD,EAAQG,SAAR,CAFpB;AAIA,MAAIG,QAAQ,GAAG;AACbC,IAAAA,CAAC,EAAEF,QAAQ,CAACE,CAAT,IAAcL,SAAS,CAACM,KAAV,GAAkBP,SAAS,CAACO,KAA1C,CADU;AAEbC,IAAAA,CAAC,EAAEJ,QAAQ,CAACI,CAAT,IAAcP,SAAS,CAACQ,MAAV,GAAmBT,SAAS,CAACS,MAA3C;AAFU,GAAf;AAKA,SAAOd,UAAU,CAAC;AAChBW,IAAAA,CAAC,EAAEH,SAAS,CAACG,CAAV,GAAcD,QAAQ,CAACC,CADV;AAEhBE,IAAAA,CAAC,EAAEL,SAAS,CAACK,CAAV,GAAcH,QAAQ,CAACG;AAFV,GAAD,CAAjB;AAID;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,sBAAT,CAAgCC,KAAhC,EAAuCX,SAAvC,EAAkDC,SAAlD,EAA6D;AAClE,MAAIW,WAAW,GAAGhB,MAAM,CAACe,KAAD,CAAxB;AAAA,MACIT,SAAS,GAAGN,MAAM,CAACI,SAAD,CADtB;AAAA,MAEIG,SAAS,GAAGP,MAAM,CAACK,SAAD,CAFtB;AAAA,MAGIY,UAAU,GAAGhB,KAAK,CAACc,KAAD,EAAQC,WAAR,CAHtB;AAAA,MAIIE,cAAc,GAAGjB,KAAK,CAACe,WAAD,EAAcV,SAAd,CAJ1B;AAMA,MAAIa,cAAc,GAAG;AACnBT,IAAAA,CAAC,EAAEQ,cAAc,CAACR,CAAf,IAAoBL,SAAS,CAACM,KAAV,GAAkBP,SAAS,CAACO,KAAhD,CADgB;AAEnBC,IAAAA,CAAC,EAAEM,cAAc,CAACN,CAAf,IAAoBP,SAAS,CAACQ,MAAV,GAAmBT,SAAS,CAACS,MAAjD;AAFgB,GAArB;AAKA,MAAIO,cAAc,GAAG;AACnBV,IAAAA,CAAC,EAAEH,SAAS,CAACG,CAAV,GAAcS,cAAc,CAACT,CADb;AAEnBE,IAAAA,CAAC,EAAEL,SAAS,CAACK,CAAV,GAAcO,cAAc,CAACP;AAFb,GAArB;AAKA,SAAOb,UAAU,CAAC;AAChBW,IAAAA,CAAC,EAAEU,cAAc,CAACV,CAAf,GAAmBO,UAAU,CAACP,CAA9B,GAAkCK,KAAK,CAACL,CAD3B;AAEhBE,IAAAA,CAAC,EAAEQ,cAAc,CAACR,CAAf,GAAmBK,UAAU,CAACL,CAA9B,GAAkCG,KAAK,CAACH;AAF3B,GAAD,CAAjB;AAID","sourcesContent":["import {\n  roundPoint\n} from '../layout/LayoutUtil';\n\nimport {\n  center,\n  delta\n} from './PositionUtil';\n\n\n/**\n * Calculates the absolute point relative to the new element's position\n *\n * @param {point} point [absolute]\n * @param {bounds} oldBounds\n * @param {bounds} newBounds\n *\n * @return {point} point [absolute]\n */\nexport function getNewAttachPoint(point, oldBounds, newBounds) {\n  var oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      oldDelta = delta(point, oldCenter);\n\n  var newDelta = {\n    x: oldDelta.x * (newBounds.width / oldBounds.width),\n    y: oldDelta.y * (newBounds.height / oldBounds.height)\n  };\n\n  return roundPoint({\n    x: newCenter.x + newDelta.x,\n    y: newCenter.y + newDelta.y\n  });\n}\n\n\n/**\n * Calculates the shape's delta relative to a new position\n * of a certain element's bounds\n *\n * @param {djs.model.Shape} point [absolute]\n * @param {bounds} oldBounds\n * @param {bounds} newBounds\n *\n * @return {delta} delta\n */\nexport function getNewAttachShapeDelta(shape, oldBounds, newBounds) {\n  var shapeCenter = center(shape),\n      oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      shapeDelta = delta(shape, shapeCenter),\n      oldCenterDelta = delta(shapeCenter, oldCenter);\n\n  var newCenterDelta = {\n    x: oldCenterDelta.x * (newBounds.width / oldBounds.width),\n    y: oldCenterDelta.y * (newBounds.height / oldBounds.height)\n  };\n\n  var newShapeCenter = {\n    x: newCenter.x + newCenterDelta.x,\n    y: newCenter.y + newCenterDelta.y\n  };\n\n  return roundPoint({\n    x: newShapeCenter.x + shapeDelta.x - shape.x,\n    y: newShapeCenter.y + shapeDelta.y - shape.y\n  });\n}"]},"metadata":{},"sourceType":"module"}