{"ast":null,"code":"import { getBusinessObject } from '../../../util/ModelUtil';\nimport { isExpanded } from '../../../util/DiUtil';\n/**\n * Returns true, if an element is from a different type\n * than a target definition. Takes into account the type,\n * event definition type and triggeredByEvent property.\n *\n * @param {djs.model.Base} element\n *\n * @return {Boolean}\n */\n\nexport function isDifferentType(element) {\n  return function (entry) {\n    var target = entry.target;\n    var businessObject = getBusinessObject(element),\n        eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];\n    var isTypeEqual = businessObject.$type === target.type;\n    var isEventDefinitionEqual = (eventDefinition && eventDefinition.$type) === target.eventDefinitionType;\n    var isTriggeredByEventEqual = businessObject.triggeredByEvent === target.triggeredByEvent;\n    var isExpandedEqual = target.isExpanded === undefined || target.isExpanded === isExpanded(businessObject);\n    return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;\n  };\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/popup-menu/util/TypeUtil.js"],"names":["getBusinessObject","isExpanded","isDifferentType","element","entry","target","businessObject","eventDefinition","eventDefinitions","isTypeEqual","$type","type","isEventDefinitionEqual","eventDefinitionType","isTriggeredByEventEqual","triggeredByEvent","isExpandedEqual","undefined"],"mappings":"AAAA,SACEA,iBADF,QAEO,yBAFP;AAIA,SACEC,UADF,QAEO,sBAFP;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAEvC,SAAO,UAASC,KAAT,EAAgB;AACrB,QAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AAEA,QAAIC,cAAc,GAAGN,iBAAiB,CAACG,OAAD,CAAtC;AAAA,QACII,eAAe,GAAGD,cAAc,CAACE,gBAAf,IAAmCF,cAAc,CAACE,gBAAf,CAAgC,CAAhC,CADzD;AAGA,QAAIC,WAAW,GAAGH,cAAc,CAACI,KAAf,KAAyBL,MAAM,CAACM,IAAlD;AAEA,QAAIC,sBAAsB,GACxB,CAACL,eAAe,IAAIA,eAAe,CAACG,KAApC,MAA+CL,MAAM,CAACQ,mBADxD;AAIA,QAAIC,uBAAuB,GACzBR,cAAc,CAACS,gBAAf,KAAoCV,MAAM,CAACU,gBAD7C;AAIA,QAAIC,eAAe,GACjBX,MAAM,CAACJ,UAAP,KAAsBgB,SAAtB,IACAZ,MAAM,CAACJ,UAAP,KAAsBA,UAAU,CAACK,cAAD,CAFlC;AAKA,WAAO,CAACG,WAAD,IAAgB,CAACG,sBAAjB,IAA2C,CAACE,uBAA5C,IAAuE,CAACE,eAA/E;AACD,GAtBD;AAuBD","sourcesContent":["import {\n  getBusinessObject\n} from '../../../util/ModelUtil';\n\nimport {\n  isExpanded\n} from '../../../util/DiUtil';\n\n\n/**\n * Returns true, if an element is from a different type\n * than a target definition. Takes into account the type,\n * event definition type and triggeredByEvent property.\n *\n * @param {djs.model.Base} element\n *\n * @return {Boolean}\n */\nexport function isDifferentType(element) {\n\n  return function(entry) {\n    var target = entry.target;\n\n    var businessObject = getBusinessObject(element),\n        eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];\n\n    var isTypeEqual = businessObject.$type === target.type;\n\n    var isEventDefinitionEqual = (\n      (eventDefinition && eventDefinition.$type) === target.eventDefinitionType\n    );\n\n    var isTriggeredByEventEqual = (\n      businessObject.triggeredByEvent === target.triggeredByEvent\n    );\n\n    var isExpandedEqual = (\n      target.isExpanded === undefined ||\n      target.isExpanded === isExpanded(businessObject)\n    );\n\n    return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;\n  };\n}"]},"metadata":{},"sourceType":"module"}