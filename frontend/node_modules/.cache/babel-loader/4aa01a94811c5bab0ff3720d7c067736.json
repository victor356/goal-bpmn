{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { event as domEvent, closest as domClosest } from 'min-dom';\nimport Hammer from 'hammerjs';\nimport { toPoint } from '../../util/Event';\nvar MIN_ZOOM = 0.2,\n    MAX_ZOOM = 4;\nvar mouseEvents = ['mousedown', 'mouseup', 'mouseover', 'mouseout', 'click', 'dblclick'];\n\nfunction log() {// console.log.apply(console, arguments);\n}\n\nfunction get(service, injector) {\n  return injector.get(service, false);\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n\n  if (typeof event.stopImmediatePropagation === 'function') {\n    event.stopImmediatePropagation();\n  }\n}\n\nfunction createTouchRecognizer(node) {\n  function stopMouse(event) {\n    forEach(mouseEvents, function (e) {\n      domEvent.bind(node, e, stopEvent, true);\n    });\n  }\n\n  function allowMouse(event) {\n    setTimeout(function () {\n      forEach(mouseEvents, function (e) {\n        domEvent.unbind(node, e, stopEvent, true);\n      });\n    }, 500);\n  }\n\n  domEvent.bind(node, 'touchstart', stopMouse, true);\n  domEvent.bind(node, 'touchend', allowMouse, true);\n  domEvent.bind(node, 'touchcancel', allowMouse, true); // A touch event recognizer that handles\n  // touch events only (we know, we can already handle\n  // mouse events out of the box)\n\n  var recognizer = new Hammer.Manager(node, {\n    inputClass: Hammer.TouchInput,\n    recognizers: []\n  });\n  var tap = new Hammer.Tap();\n  var pan = new Hammer.Pan({\n    threshold: 10\n  });\n  var press = new Hammer.Press();\n  var pinch = new Hammer.Pinch();\n  var doubleTap = new Hammer.Tap({\n    event: 'doubletap',\n    taps: 2\n  });\n  pinch.requireFailure(pan);\n  pinch.requireFailure(press);\n  recognizer.add([pan, press, pinch, doubleTap, tap]);\n\n  recognizer.reset = function (force) {\n    var recognizers = this.recognizers,\n        session = this.session;\n\n    if (session.stopped) {\n      return;\n    }\n\n    log('recognizer', 'stop');\n    recognizer.stop(force);\n    setTimeout(function () {\n      var i, r;\n      log('recognizer', 'reset');\n\n      for (i = 0; r = recognizers[i]; i++) {\n        r.reset();\n        r.state = 8; // FAILED STATE\n      }\n\n      session.curRecognizer = null;\n    }, 0);\n  };\n\n  recognizer.on('hammer.input', function (event) {\n    if (event.srcEvent.defaultPrevented) {\n      recognizer.reset(true);\n    }\n  });\n  return recognizer;\n}\n/**\n * A plugin that provides touch events for elements.\n *\n * @param {EventBus} eventBus\n * @param {InteractionEvents} interactionEvents\n */\n\n\nexport default function TouchInteractionEvents(injector, canvas, eventBus, elementRegistry, interactionEvents) {\n  // optional integrations\n  var dragging = get('dragging', injector),\n      move = get('move', injector),\n      contextPad = get('contextPad', injector),\n      palette = get('palette', injector); // the touch recognizer\n\n  var recognizer;\n\n  function handler(type) {\n    return function (event) {\n      log('element', type, event);\n      interactionEvents.fire(type, event);\n    };\n  }\n\n  function getGfx(target) {\n    var node = domClosest(target, 'svg, .djs-element', true);\n    return node;\n  }\n\n  function initEvents(svg) {\n    // touch recognizer\n    recognizer = createTouchRecognizer(svg);\n    recognizer.on('doubletap', handler('element.dblclick'));\n    recognizer.on('tap', handler('element.click'));\n\n    function startGrabCanvas(event) {\n      log('canvas', 'grab start');\n      var lx = 0,\n          ly = 0;\n\n      function update(e) {\n        var dx = e.deltaX - lx,\n            dy = e.deltaY - ly;\n        canvas.scroll({\n          dx: dx,\n          dy: dy\n        });\n        lx = e.deltaX;\n        ly = e.deltaY;\n      }\n\n      function end(e) {\n        recognizer.off('panmove', update);\n        recognizer.off('panend', end);\n        recognizer.off('pancancel', end);\n        log('canvas', 'grab end');\n      }\n\n      recognizer.on('panmove', update);\n      recognizer.on('panend', end);\n      recognizer.on('pancancel', end);\n    }\n\n    function startGrab(event) {\n      var gfx = getGfx(event.target),\n          element = gfx && elementRegistry.get(gfx); // recognizer\n\n      if (move && canvas.getRootElement() !== element) {\n        log('element', 'move start', element, event, true);\n        return move.start(event, element, true);\n      } else {\n        startGrabCanvas(event);\n      }\n    }\n\n    function startZoom(e) {\n      log('canvas', 'zoom start');\n      var zoom = canvas.zoom(),\n          mid = e.center;\n\n      function update(e) {\n        var ratio = 1 - (1 - e.scale) / 1.50,\n            newZoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, ratio * zoom));\n        canvas.zoom(newZoom, mid);\n        stopEvent(e);\n      }\n\n      function end(e) {\n        recognizer.off('pinchmove', update);\n        recognizer.off('pinchend', end);\n        recognizer.off('pinchcancel', end);\n        recognizer.reset(true);\n        log('canvas', 'zoom end');\n      }\n\n      recognizer.on('pinchmove', update);\n      recognizer.on('pinchend', end);\n      recognizer.on('pinchcancel', end);\n    }\n\n    recognizer.on('panstart', startGrab);\n    recognizer.on('press', startGrab);\n    recognizer.on('pinchstart', startZoom);\n  }\n\n  if (dragging) {\n    // simulate hover during dragging\n    eventBus.on('drag.move', function (event) {\n      var originalEvent = event.originalEvent;\n\n      if (!originalEvent || originalEvent instanceof MouseEvent) {\n        return;\n      }\n\n      var position = toPoint(originalEvent); // this gets really expensive ...\n\n      var node = document.elementFromPoint(position.x, position.y),\n          gfx = getGfx(node),\n          element = gfx && elementRegistry.get(gfx);\n\n      if (element !== event.hover) {\n        if (event.hover) {\n          dragging.out(event);\n        }\n\n        if (element) {\n          dragging.hover({\n            element: element,\n            gfx: gfx\n          });\n          event.hover = element;\n          event.hoverGfx = gfx;\n        }\n      }\n    });\n  }\n\n  if (contextPad) {\n    eventBus.on('contextPad.create', function (event) {\n      var node = event.pad.html; // touch recognizer\n\n      var padRecognizer = createTouchRecognizer(node);\n      padRecognizer.on('panstart', function (event) {\n        log('context-pad', 'panstart', event);\n        contextPad.trigger('dragstart', event, true);\n      });\n      padRecognizer.on('press', function (event) {\n        log('context-pad', 'press', event);\n        contextPad.trigger('dragstart', event, true);\n      });\n      padRecognizer.on('tap', function (event) {\n        log('context-pad', 'tap', event);\n        contextPad.trigger('click', event);\n      });\n    });\n  }\n\n  if (palette) {\n    eventBus.on('palette.create', function (event) {\n      var node = event.container; // touch recognizer\n\n      var padRecognizer = createTouchRecognizer(node);\n      padRecognizer.on('panstart', function (event) {\n        log('palette', 'panstart', event);\n        palette.trigger('dragstart', event, true);\n      });\n      padRecognizer.on('press', function (event) {\n        log('palette', 'press', event);\n        palette.trigger('dragstart', event, true);\n      });\n      padRecognizer.on('tap', function (event) {\n        log('palette', 'tap', event);\n        palette.trigger('click', event);\n      });\n    });\n  }\n\n  eventBus.on('canvas.init', function (event) {\n    initEvents(event.svg);\n  });\n}\nTouchInteractionEvents.$inject = ['injector', 'canvas', 'eventBus', 'elementRegistry', 'interactionEvents', 'touchFix'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/features/touch/TouchInteractionEvents.js"],"names":["forEach","event","domEvent","closest","domClosest","Hammer","toPoint","MIN_ZOOM","MAX_ZOOM","mouseEvents","log","get","service","injector","stopEvent","preventDefault","stopPropagation","stopImmediatePropagation","createTouchRecognizer","node","stopMouse","e","bind","allowMouse","setTimeout","unbind","recognizer","Manager","inputClass","TouchInput","recognizers","tap","Tap","pan","Pan","threshold","press","Press","pinch","Pinch","doubleTap","taps","requireFailure","add","reset","force","session","stopped","stop","i","r","state","curRecognizer","on","srcEvent","defaultPrevented","TouchInteractionEvents","canvas","eventBus","elementRegistry","interactionEvents","dragging","move","contextPad","palette","handler","type","fire","getGfx","target","initEvents","svg","startGrabCanvas","lx","ly","update","dx","deltaX","dy","deltaY","scroll","end","off","startGrab","gfx","element","getRootElement","start","startZoom","zoom","mid","center","ratio","scale","newZoom","Math","max","min","originalEvent","MouseEvent","position","document","elementFromPoint","x","y","hover","out","hoverGfx","pad","html","padRecognizer","trigger","container","$inject"],"mappings":"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","sourcesContent":["import {\n  forEach\n} from 'min-dash';\n\nimport {\n  event as domEvent,\n  closest as domClosest\n} from 'min-dom';\n\nimport Hammer from 'hammerjs';\n\nimport {\n  toPoint\n} from '../../util/Event';\n\nvar MIN_ZOOM = 0.2,\n    MAX_ZOOM = 4;\n\nvar mouseEvents = [\n  'mousedown',\n  'mouseup',\n  'mouseover',\n  'mouseout',\n  'click',\n  'dblclick'\n];\n\nfunction log() {\n  // console.log.apply(console, arguments);\n}\n\nfunction get(service, injector) {\n  return injector.get(service, false);\n}\n\nfunction stopEvent(event) {\n\n  event.preventDefault();\n  event.stopPropagation();\n\n  if (typeof event.stopImmediatePropagation === 'function') {\n    event.stopImmediatePropagation();\n  }\n}\n\n\nfunction createTouchRecognizer(node) {\n\n  function stopMouse(event) {\n\n    forEach(mouseEvents, function(e) {\n      domEvent.bind(node, e, stopEvent, true);\n    });\n  }\n\n  function allowMouse(event) {\n    setTimeout(function() {\n      forEach(mouseEvents, function(e) {\n        domEvent.unbind(node, e, stopEvent, true);\n      });\n    }, 500);\n  }\n\n  domEvent.bind(node, 'touchstart', stopMouse, true);\n  domEvent.bind(node, 'touchend', allowMouse, true);\n  domEvent.bind(node, 'touchcancel', allowMouse, true);\n\n  // A touch event recognizer that handles\n  // touch events only (we know, we can already handle\n  // mouse events out of the box)\n\n  var recognizer = new Hammer.Manager(node, {\n    inputClass: Hammer.TouchInput,\n    recognizers: []\n  });\n\n\n  var tap = new Hammer.Tap();\n  var pan = new Hammer.Pan({ threshold: 10 });\n  var press = new Hammer.Press();\n  var pinch = new Hammer.Pinch();\n\n  var doubleTap = new Hammer.Tap({ event: 'doubletap', taps: 2 });\n\n  pinch.requireFailure(pan);\n  pinch.requireFailure(press);\n\n  recognizer.add([ pan, press, pinch, doubleTap, tap ]);\n\n  recognizer.reset = function(force) {\n    var recognizers = this.recognizers,\n        session = this.session;\n\n    if (session.stopped) {\n      return;\n    }\n\n    log('recognizer', 'stop');\n\n    recognizer.stop(force);\n\n    setTimeout(function() {\n      var i, r;\n\n      log('recognizer', 'reset');\n      for (i = 0; (r = recognizers[i]); i++) {\n        r.reset();\n        r.state = 8; // FAILED STATE\n      }\n\n      session.curRecognizer = null;\n    }, 0);\n  };\n\n  recognizer.on('hammer.input', function(event) {\n    if (event.srcEvent.defaultPrevented) {\n      recognizer.reset(true);\n    }\n  });\n\n  return recognizer;\n}\n\n/**\n * A plugin that provides touch events for elements.\n *\n * @param {EventBus} eventBus\n * @param {InteractionEvents} interactionEvents\n */\nexport default function TouchInteractionEvents(\n    injector, canvas, eventBus,\n    elementRegistry, interactionEvents) {\n\n  // optional integrations\n  var dragging = get('dragging', injector),\n      move = get('move', injector),\n      contextPad = get('contextPad', injector),\n      palette = get('palette', injector);\n\n  // the touch recognizer\n  var recognizer;\n\n  function handler(type) {\n\n    return function(event) {\n      log('element', type, event);\n\n      interactionEvents.fire(type, event);\n    };\n  }\n\n  function getGfx(target) {\n    var node = domClosest(target, 'svg, .djs-element', true);\n    return node;\n  }\n\n  function initEvents(svg) {\n\n    // touch recognizer\n    recognizer = createTouchRecognizer(svg);\n\n    recognizer.on('doubletap', handler('element.dblclick'));\n\n    recognizer.on('tap', handler('element.click'));\n\n    function startGrabCanvas(event) {\n\n      log('canvas', 'grab start');\n\n      var lx = 0, ly = 0;\n\n      function update(e) {\n\n        var dx = e.deltaX - lx,\n            dy = e.deltaY - ly;\n\n        canvas.scroll({ dx: dx, dy: dy });\n\n        lx = e.deltaX;\n        ly = e.deltaY;\n      }\n\n      function end(e) {\n        recognizer.off('panmove', update);\n        recognizer.off('panend', end);\n        recognizer.off('pancancel', end);\n\n        log('canvas', 'grab end');\n      }\n\n      recognizer.on('panmove', update);\n      recognizer.on('panend', end);\n      recognizer.on('pancancel', end);\n    }\n\n    function startGrab(event) {\n\n      var gfx = getGfx(event.target),\n          element = gfx && elementRegistry.get(gfx);\n\n      // recognizer\n      if (move && canvas.getRootElement() !== element) {\n        log('element', 'move start', element, event, true);\n        return move.start(event, element, true);\n      } else {\n        startGrabCanvas(event);\n      }\n    }\n\n    function startZoom(e) {\n\n      log('canvas', 'zoom start');\n\n      var zoom = canvas.zoom(),\n          mid = e.center;\n\n      function update(e) {\n\n        var ratio = 1 - (1 - e.scale) / 1.50,\n            newZoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, ratio * zoom));\n\n        canvas.zoom(newZoom, mid);\n\n        stopEvent(e);\n      }\n\n      function end(e) {\n        recognizer.off('pinchmove', update);\n        recognizer.off('pinchend', end);\n        recognizer.off('pinchcancel', end);\n\n        recognizer.reset(true);\n\n        log('canvas', 'zoom end');\n      }\n\n      recognizer.on('pinchmove', update);\n      recognizer.on('pinchend', end);\n      recognizer.on('pinchcancel', end);\n    }\n\n    recognizer.on('panstart', startGrab);\n    recognizer.on('press', startGrab);\n\n    recognizer.on('pinchstart', startZoom);\n  }\n\n  if (dragging) {\n\n    // simulate hover during dragging\n    eventBus.on('drag.move', function(event) {\n\n      var originalEvent = event.originalEvent;\n\n      if (!originalEvent || originalEvent instanceof MouseEvent) {\n        return;\n      }\n\n      var position = toPoint(originalEvent);\n\n      // this gets really expensive ...\n      var node = document.elementFromPoint(position.x, position.y),\n          gfx = getGfx(node),\n          element = gfx && elementRegistry.get(gfx);\n\n      if (element !== event.hover) {\n        if (event.hover) {\n          dragging.out(event);\n        }\n\n        if (element) {\n          dragging.hover({ element: element, gfx: gfx });\n\n          event.hover = element;\n          event.hoverGfx = gfx;\n        }\n      }\n    });\n  }\n\n  if (contextPad) {\n\n    eventBus.on('contextPad.create', function(event) {\n      var node = event.pad.html;\n\n      // touch recognizer\n      var padRecognizer = createTouchRecognizer(node);\n\n      padRecognizer.on('panstart', function(event) {\n        log('context-pad', 'panstart', event);\n        contextPad.trigger('dragstart', event, true);\n      });\n\n      padRecognizer.on('press', function(event) {\n        log('context-pad', 'press', event);\n        contextPad.trigger('dragstart', event, true);\n      });\n\n      padRecognizer.on('tap', function(event) {\n        log('context-pad', 'tap', event);\n        contextPad.trigger('click', event);\n      });\n    });\n  }\n\n  if (palette) {\n    eventBus.on('palette.create', function(event) {\n      var node = event.container;\n\n      // touch recognizer\n      var padRecognizer = createTouchRecognizer(node);\n\n      padRecognizer.on('panstart', function(event) {\n        log('palette', 'panstart', event);\n        palette.trigger('dragstart', event, true);\n      });\n\n      padRecognizer.on('press', function(event) {\n        log('palette', 'press', event);\n        palette.trigger('dragstart', event, true);\n      });\n\n      padRecognizer.on('tap', function(event) {\n        log('palette', 'tap', event);\n        palette.trigger('click', event);\n      });\n    });\n  }\n\n  eventBus.on('canvas.init', function(event) {\n    initEvents(event.svg);\n  });\n}\n\n\nTouchInteractionEvents.$inject = [\n  'injector',\n  'canvas',\n  'eventBus',\n  'elementRegistry',\n  'interactionEvents',\n  'touchFix'\n];\n"]},"metadata":{},"sourceType":"module"}