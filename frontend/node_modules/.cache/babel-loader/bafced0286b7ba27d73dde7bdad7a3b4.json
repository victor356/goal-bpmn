{"ast":null,"code":"import { isArray } from 'min-dash';\n/**\n * Reconnect connection handler\n */\n\nexport default function ReconnectConnectionHandler() {}\nReconnectConnectionHandler.$inject = [];\n\nReconnectConnectionHandler.prototype.execute = function (context) {\n  var newSource = context.newSource,\n      newTarget = context.newTarget,\n      connection = context.connection,\n      dockingOrPoints = context.dockingOrPoints,\n      oldWaypoints = connection.waypoints,\n      newWaypoints;\n\n  if (!newSource && !newTarget) {\n    throw new Error('newSource or newTarget are required');\n  }\n\n  if (newSource && newTarget) {\n    throw new Error('must specify either newSource or newTarget');\n  }\n\n  context.oldWaypoints = oldWaypoints;\n\n  if (isArray(dockingOrPoints)) {\n    newWaypoints = dockingOrPoints;\n  } else {\n    newWaypoints = oldWaypoints.slice();\n    newWaypoints.splice(newSource ? 0 : -1, 1, dockingOrPoints);\n  }\n\n  if (newSource) {\n    context.oldSource = connection.source;\n    connection.source = newSource;\n  }\n\n  if (newTarget) {\n    context.oldTarget = connection.target;\n    connection.target = newTarget;\n  }\n\n  connection.waypoints = newWaypoints;\n  return connection;\n};\n\nReconnectConnectionHandler.prototype.revert = function (context) {\n  var newSource = context.newSource,\n      newTarget = context.newTarget,\n      connection = context.connection;\n\n  if (newSource) {\n    connection.source = context.oldSource;\n  }\n\n  if (newTarget) {\n    connection.target = context.oldTarget;\n  }\n\n  connection.waypoints = context.oldWaypoints;\n  return connection;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/modeling/cmd/ReconnectConnectionHandler.js"],"names":["isArray","ReconnectConnectionHandler","$inject","prototype","execute","context","newSource","newTarget","connection","dockingOrPoints","oldWaypoints","waypoints","newWaypoints","Error","slice","splice","oldSource","source","oldTarget","target","revert"],"mappings":"AAAA,SAASA,OAAT,QAAwB,UAAxB;AAGA;AACA;AACA;;AACA,eAAe,SAASC,0BAAT,GAAsC,CAAG;AAExDA,0BAA0B,CAACC,OAA3B,GAAqC,EAArC;;AAEAD,0BAA0B,CAACE,SAA3B,CAAqCC,OAArC,GAA+C,UAASC,OAAT,EAAkB;AAE/D,MAAIC,SAAS,GAAGD,OAAO,CAACC,SAAxB;AAAA,MACIC,SAAS,GAAGF,OAAO,CAACE,SADxB;AAAA,MAEIC,UAAU,GAAGH,OAAO,CAACG,UAFzB;AAAA,MAGIC,eAAe,GAAGJ,OAAO,CAACI,eAH9B;AAAA,MAIIC,YAAY,GAAGF,UAAU,CAACG,SAJ9B;AAAA,MAKIC,YALJ;;AAOA,MAAI,CAACN,SAAD,IAAc,CAACC,SAAnB,EAA8B;AAC5B,UAAM,IAAIM,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,MAAIP,SAAS,IAAIC,SAAjB,EAA4B;AAC1B,UAAM,IAAIM,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAEDR,EAAAA,OAAO,CAACK,YAAR,GAAuBA,YAAvB;;AAEA,MAAIV,OAAO,CAACS,eAAD,CAAX,EAA8B;AAC5BG,IAAAA,YAAY,GAAGH,eAAf;AACD,GAFD,MAEO;AACLG,IAAAA,YAAY,GAAGF,YAAY,CAACI,KAAb,EAAf;AAEAF,IAAAA,YAAY,CAACG,MAAb,CAAoBT,SAAS,GAAG,CAAH,GAAO,CAAC,CAArC,EAAwC,CAAxC,EAA2CG,eAA3C;AACD;;AAED,MAAIH,SAAJ,EAAe;AACbD,IAAAA,OAAO,CAACW,SAAR,GAAoBR,UAAU,CAACS,MAA/B;AACAT,IAAAA,UAAU,CAACS,MAAX,GAAoBX,SAApB;AACD;;AAED,MAAIC,SAAJ,EAAe;AACbF,IAAAA,OAAO,CAACa,SAAR,GAAoBV,UAAU,CAACW,MAA/B;AACAX,IAAAA,UAAU,CAACW,MAAX,GAAoBZ,SAApB;AACD;;AAEDC,EAAAA,UAAU,CAACG,SAAX,GAAuBC,YAAvB;AAEA,SAAOJ,UAAP;AACD,CAxCD;;AA0CAP,0BAA0B,CAACE,SAA3B,CAAqCiB,MAArC,GAA8C,UAASf,OAAT,EAAkB;AAE9D,MAAIC,SAAS,GAAGD,OAAO,CAACC,SAAxB;AAAA,MACIC,SAAS,GAAGF,OAAO,CAACE,SADxB;AAAA,MAEIC,UAAU,GAAGH,OAAO,CAACG,UAFzB;;AAIA,MAAIF,SAAJ,EAAe;AACbE,IAAAA,UAAU,CAACS,MAAX,GAAoBZ,OAAO,CAACW,SAA5B;AACD;;AAED,MAAIT,SAAJ,EAAe;AACbC,IAAAA,UAAU,CAACW,MAAX,GAAoBd,OAAO,CAACa,SAA5B;AACD;;AAEDV,EAAAA,UAAU,CAACG,SAAX,GAAuBN,OAAO,CAACK,YAA/B;AAEA,SAAOF,UAAP;AACD,CAjBD","sourcesContent":["import { isArray } from 'min-dash';\n\n\n/**\n * Reconnect connection handler\n */\nexport default function ReconnectConnectionHandler() { }\n\nReconnectConnectionHandler.$inject = [ ];\n\nReconnectConnectionHandler.prototype.execute = function(context) {\n\n  var newSource = context.newSource,\n      newTarget = context.newTarget,\n      connection = context.connection,\n      dockingOrPoints = context.dockingOrPoints,\n      oldWaypoints = connection.waypoints,\n      newWaypoints;\n\n  if (!newSource && !newTarget) {\n    throw new Error('newSource or newTarget are required');\n  }\n\n  if (newSource && newTarget) {\n    throw new Error('must specify either newSource or newTarget');\n  }\n\n  context.oldWaypoints = oldWaypoints;\n\n  if (isArray(dockingOrPoints)) {\n    newWaypoints = dockingOrPoints;\n  } else {\n    newWaypoints = oldWaypoints.slice();\n\n    newWaypoints.splice(newSource ? 0 : -1, 1, dockingOrPoints);\n  }\n\n  if (newSource) {\n    context.oldSource = connection.source;\n    connection.source = newSource;\n  }\n\n  if (newTarget) {\n    context.oldTarget = connection.target;\n    connection.target = newTarget;\n  }\n\n  connection.waypoints = newWaypoints;\n\n  return connection;\n};\n\nReconnectConnectionHandler.prototype.revert = function(context) {\n\n  var newSource = context.newSource,\n      newTarget = context.newTarget,\n      connection = context.connection;\n\n  if (newSource) {\n    connection.source = context.oldSource;\n  }\n\n  if (newTarget) {\n    connection.target = context.oldTarget;\n  }\n\n  connection.waypoints = context.oldWaypoints;\n\n  return connection;\n};"]},"metadata":{},"sourceType":"module"}