{"ast":null,"code":"import BpmnTreeWalker from './BpmnTreeWalker';\n/**\n * Import the definitions into a diagram.\n *\n * Errors and warnings are reported through the specified callback.\n *\n * @param  {Diagram} diagram\n * @param  {ModdleElement} definitions\n * @param  {Function} done the callback, invoked with (err, [ warning ]) once the import is done\n */\n\nexport function importBpmnDiagram(diagram, definitions, done) {\n  var importer, eventBus, translate;\n  var error,\n      warnings = [];\n  /**\n   * Walk the diagram semantically, importing (=drawing)\n   * all elements you encounter.\n   *\n   * @param {ModdleElement} definitions\n   */\n\n  function render(definitions) {\n    var visitor = {\n      root: function (element) {\n        return importer.add(element);\n      },\n      element: function (element, parentShape) {\n        return importer.add(element, parentShape);\n      },\n      error: function (message, context) {\n        warnings.push({\n          message: message,\n          context: context\n        });\n      }\n    };\n    var walker = new BpmnTreeWalker(visitor, translate); // traverse BPMN 2.0 document model,\n    // starting at definitions\n\n    walker.handleDefinitions(definitions);\n  }\n\n  try {\n    importer = diagram.get('bpmnImporter');\n    eventBus = diagram.get('eventBus');\n    translate = diagram.get('translate');\n    eventBus.fire('import.render.start', {\n      definitions: definitions\n    });\n    render(definitions);\n    eventBus.fire('import.render.complete', {\n      error: error,\n      warnings: warnings\n    });\n  } catch (e) {\n    error = e;\n  }\n\n  done(error, warnings);\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/import/Importer.js"],"names":["BpmnTreeWalker","importBpmnDiagram","diagram","definitions","done","importer","eventBus","translate","error","warnings","render","visitor","root","element","add","parentShape","message","context","push","walker","handleDefinitions","get","fire","e"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,WAApC,EAAiDC,IAAjD,EAAuD;AAE5D,MAAIC,QAAJ,EACIC,QADJ,EAEIC,SAFJ;AAIA,MAAIC,KAAJ;AAAA,MACIC,QAAQ,GAAG,EADf;AAGA;AACF;AACA;AACA;AACA;AACA;;AACE,WAASC,MAAT,CAAgBP,WAAhB,EAA6B;AAE3B,QAAIQ,OAAO,GAAG;AAEZC,MAAAA,IAAI,EAAE,UAASC,OAAT,EAAkB;AACtB,eAAOR,QAAQ,CAACS,GAAT,CAAaD,OAAb,CAAP;AACD,OAJW;AAMZA,MAAAA,OAAO,EAAE,UAASA,OAAT,EAAkBE,WAAlB,EAA+B;AACtC,eAAOV,QAAQ,CAACS,GAAT,CAAaD,OAAb,EAAsBE,WAAtB,CAAP;AACD,OARW;AAUZP,MAAAA,KAAK,EAAE,UAASQ,OAAT,EAAkBC,OAAlB,EAA2B;AAChCR,QAAAA,QAAQ,CAACS,IAAT,CAAc;AAAEF,UAAAA,OAAO,EAAEA,OAAX;AAAoBC,UAAAA,OAAO,EAAEA;AAA7B,SAAd;AACD;AAZW,KAAd;AAeA,QAAIE,MAAM,GAAG,IAAInB,cAAJ,CAAmBW,OAAnB,EAA4BJ,SAA5B,CAAb,CAjB2B,CAmB3B;AACA;;AACAY,IAAAA,MAAM,CAACC,iBAAP,CAAyBjB,WAAzB;AACD;;AAED,MAAI;AACFE,IAAAA,QAAQ,GAAGH,OAAO,CAACmB,GAAR,CAAY,cAAZ,CAAX;AACAf,IAAAA,QAAQ,GAAGJ,OAAO,CAACmB,GAAR,CAAY,UAAZ,CAAX;AACAd,IAAAA,SAAS,GAAGL,OAAO,CAACmB,GAAR,CAAY,WAAZ,CAAZ;AAEAf,IAAAA,QAAQ,CAACgB,IAAT,CAAc,qBAAd,EAAqC;AAAEnB,MAAAA,WAAW,EAAEA;AAAf,KAArC;AAEAO,IAAAA,MAAM,CAACP,WAAD,CAAN;AAEAG,IAAAA,QAAQ,CAACgB,IAAT,CAAc,wBAAd,EAAwC;AACtCd,MAAAA,KAAK,EAAEA,KAD+B;AAEtCC,MAAAA,QAAQ,EAAEA;AAF4B,KAAxC;AAID,GAbD,CAaE,OAAOc,CAAP,EAAU;AACVf,IAAAA,KAAK,GAAGe,CAAR;AACD;;AAEDnB,EAAAA,IAAI,CAACI,KAAD,EAAQC,QAAR,CAAJ;AACD","sourcesContent":["import BpmnTreeWalker from './BpmnTreeWalker';\n\n\n/**\n * Import the definitions into a diagram.\n *\n * Errors and warnings are reported through the specified callback.\n *\n * @param  {Diagram} diagram\n * @param  {ModdleElement} definitions\n * @param  {Function} done the callback, invoked with (err, [ warning ]) once the import is done\n */\nexport function importBpmnDiagram(diagram, definitions, done) {\n\n  var importer,\n      eventBus,\n      translate;\n\n  var error,\n      warnings = [];\n\n  /**\n   * Walk the diagram semantically, importing (=drawing)\n   * all elements you encounter.\n   *\n   * @param {ModdleElement} definitions\n   */\n  function render(definitions) {\n\n    var visitor = {\n\n      root: function(element) {\n        return importer.add(element);\n      },\n\n      element: function(element, parentShape) {\n        return importer.add(element, parentShape);\n      },\n\n      error: function(message, context) {\n        warnings.push({ message: message, context: context });\n      }\n    };\n\n    var walker = new BpmnTreeWalker(visitor, translate);\n\n    // traverse BPMN 2.0 document model,\n    // starting at definitions\n    walker.handleDefinitions(definitions);\n  }\n\n  try {\n    importer = diagram.get('bpmnImporter');\n    eventBus = diagram.get('eventBus');\n    translate = diagram.get('translate');\n\n    eventBus.fire('import.render.start', { definitions: definitions });\n\n    render(definitions);\n\n    eventBus.fire('import.render.complete', {\n      error: error,\n      warnings: warnings\n    });\n  } catch (e) {\n    error = e;\n  }\n\n  done(error, warnings);\n}"]},"metadata":{},"sourceType":"module"}