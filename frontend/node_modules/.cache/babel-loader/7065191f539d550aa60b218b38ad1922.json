{"ast":null,"code":"'use strict';\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is,\n    isAny = require('bpmn-js/lib/features/modeling/util/ModelingUtil').isAny,\n    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    domQuery = require('min-dom').query,\n    cmdHelper = require('../../../helper/CmdHelper'),\n    elementHelper = require('../../../helper/ElementHelper'),\n    eventDefinitionHelper = require('../../../helper/EventDefinitionHelper'),\n    script = require('./implementation/Script')('language', 'body', true);\n\nmodule.exports = function (group, element, bpmnFactory, translate) {\n  var bo = getBusinessObject(element);\n\n  if (!bo) {\n    return;\n  }\n\n  var conditionalEventDefinition = eventDefinitionHelper.getConditionalEventDefinition(element);\n\n  if (!(is(element, 'bpmn:SequenceFlow') && isConditionalSource(element.source)) && !conditionalEventDefinition) {\n    return;\n  }\n\n  group.entries.push({\n    id: 'condition',\n    label: translate('Condition'),\n    html: '<div class=\"bpp-row\">' + '<label for=\"cam-condition-type\">' + translate('Condition Type') + '</label>' + '<div class=\"bpp-field-wrapper\">' + '<select id=\"cam-condition-type\" name=\"conditionType\" data-value>' + '<option value=\"expression\">' + translate('Expression') + '</option>' + '<option value=\"script\">' + translate('Script') + '</option>' + '<option value=\"\" selected></option>' + '</select>' + '</div>' + '</div>' + // expression\n    '<div class=\"bpp-row\">' + '<label for=\"cam-condition\" data-show=\"isExpression\">' + translate('Expression') + '</label>' + '<div class=\"bpp-field-wrapper\" data-show=\"isExpression\">' + '<input id=\"cam-condition\" type=\"text\" name=\"condition\" />' + '<button class=\"clear\" data-action=\"clear\" data-show=\"canClear\">' + '<span>X</span>' + '</button>' + '</div>' + '<div data-show=\"isScript\">' + script.template + '</div>' + '</div>',\n    get: function (element, propertyName) {\n      var conditionalEventDefinition = eventDefinitionHelper.getConditionalEventDefinition(element);\n      var conditionExpression = conditionalEventDefinition ? conditionalEventDefinition.condition : bo.conditionExpression;\n      var values = {},\n          conditionType = '';\n\n      if (conditionExpression) {\n        var conditionLanguage = conditionExpression.language;\n\n        if (typeof conditionLanguage !== 'undefined') {\n          conditionType = 'script';\n          values = script.get(element, conditionExpression);\n        } else {\n          conditionType = 'expression';\n          values.condition = conditionExpression.get('body');\n        }\n      }\n\n      values.conditionType = conditionType;\n      return values;\n    },\n    set: function (element, values, containerElement) {\n      var conditionType = values.conditionType;\n      var commands = [];\n      var conditionProps = {\n        body: undefined\n      };\n\n      if (conditionType === 'script') {\n        conditionProps = script.set(element, values, containerElement);\n      } else {\n        var condition = values.condition;\n        conditionProps.body = condition;\n      }\n\n      var conditionOrConditionExpression;\n\n      if (conditionType) {\n        conditionOrConditionExpression = elementHelper.createElement('bpmn:FormalExpression', conditionProps, conditionalEventDefinition || bo, bpmnFactory);\n        var source = element.source; // if default-flow, remove default-property from source\n\n        if (source && source.businessObject.default === bo) {\n          commands.push(cmdHelper.updateProperties(source, {\n            'default': undefined\n          }));\n        }\n      }\n\n      var update = conditionalEventDefinition ? {\n        condition: conditionOrConditionExpression\n      } : {\n        conditionExpression: conditionOrConditionExpression\n      };\n      commands.push(cmdHelper.updateBusinessObject(element, conditionalEventDefinition || bo, update));\n      return commands;\n    },\n    validate: function (element, values) {\n      var validationResult = {};\n\n      if (!values.condition && values.conditionType === 'expression') {\n        validationResult.condition = 'Must provide a value';\n      } else if (values.conditionType === 'script') {\n        validationResult = script.validate(element, values);\n      }\n\n      return validationResult;\n    },\n    isExpression: function (element, inputNode) {\n      var conditionType = domQuery('select[name=conditionType]', inputNode);\n\n      if (conditionType.selectedIndex >= 0) {\n        return conditionType.options[conditionType.selectedIndex].value === 'expression';\n      }\n    },\n    isScript: function (element, inputNode) {\n      var conditionType = domQuery('select[name=conditionType]', inputNode);\n\n      if (conditionType.selectedIndex >= 0) {\n        return conditionType.options[conditionType.selectedIndex].value === 'script';\n      }\n    },\n    clear: function (element, inputNode) {\n      // clear text input\n      domQuery('input[name=condition]', inputNode).value = '';\n      return true;\n    },\n    canClear: function (element, inputNode) {\n      var input = domQuery('input[name=condition]', inputNode);\n      return input.value !== '';\n    },\n    script: script,\n    cssClasses: ['bpp-textfield']\n  });\n}; // utilities //////////////////////////\n\n\nvar CONDITIONAL_SOURCES = ['bpmn:Activity', 'bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:ComplexGateway'];\n\nfunction isConditionalSource(element) {\n  return isAny(element, CONDITIONAL_SOURCES);\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/ConditionalProps.js"],"names":["is","require","isAny","getBusinessObject","domQuery","query","cmdHelper","elementHelper","eventDefinitionHelper","script","module","exports","group","element","bpmnFactory","translate","bo","conditionalEventDefinition","getConditionalEventDefinition","isConditionalSource","source","entries","push","id","label","html","template","get","propertyName","conditionExpression","condition","values","conditionType","conditionLanguage","language","set","containerElement","commands","conditionProps","body","undefined","conditionOrConditionExpression","createElement","businessObject","default","updateProperties","update","updateBusinessObject","validate","validationResult","isExpression","inputNode","selectedIndex","options","value","isScript","clear","canClear","input","cssClasses","CONDITIONAL_SOURCES"],"mappings":"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","sourcesContent":["'use strict';\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is,\n    isAny = require('bpmn-js/lib/features/modeling/util/ModelingUtil').isAny,\n    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    domQuery = require('min-dom').query,\n    cmdHelper = require('../../../helper/CmdHelper'),\n    elementHelper = require('../../../helper/ElementHelper'),\n    eventDefinitionHelper = require('../../../helper/EventDefinitionHelper'),\n    script = require('./implementation/Script')('language', 'body', true);\n\n\nmodule.exports = function(group, element, bpmnFactory, translate) {\n  var bo = getBusinessObject(element);\n\n  if (!bo) {\n    return;\n  }\n\n  var conditionalEventDefinition = eventDefinitionHelper.getConditionalEventDefinition(element);\n\n  if (!(is(element, 'bpmn:SequenceFlow') && isConditionalSource(element.source))\n    && !conditionalEventDefinition) {\n    return;\n  }\n\n  group.entries.push({\n    id: 'condition',\n    label: translate('Condition'),\n    html: '<div class=\"bpp-row\">' +\n              '<label for=\"cam-condition-type\">'+translate('Condition Type')+'</label>' +\n              '<div class=\"bpp-field-wrapper\">' +\n                '<select id=\"cam-condition-type\" name=\"conditionType\" data-value>' +\n                  '<option value=\"expression\">'+translate('Expression')+'</option>' +\n                  '<option value=\"script\">'+translate('Script')+'</option>' +\n                  '<option value=\"\" selected></option>' +\n                '</select>' +\n              '</div>' +\n            '</div>' +\n\n            // expression\n            '<div class=\"bpp-row\">' +\n              '<label for=\"cam-condition\" data-show=\"isExpression\">'+translate('Expression')+'</label>' +\n              '<div class=\"bpp-field-wrapper\" data-show=\"isExpression\">' +\n                '<input id=\"cam-condition\" type=\"text\" name=\"condition\" />' +\n                '<button class=\"clear\" data-action=\"clear\" data-show=\"canClear\">' +\n                  '<span>X</span>' +\n                '</button>' +\n              '</div>' +\n              '<div data-show=\"isScript\">' +\n                script.template +\n              '</div>' +\n            '</div>',\n\n    get: function(element, propertyName) {\n      var conditionalEventDefinition = eventDefinitionHelper.getConditionalEventDefinition(element);\n\n      var conditionExpression = conditionalEventDefinition\n        ? conditionalEventDefinition.condition\n        : bo.conditionExpression;\n\n      var values = {},\n          conditionType = '';\n\n      if (conditionExpression) {\n        var conditionLanguage = conditionExpression.language;\n        if (typeof conditionLanguage !== 'undefined') {\n          conditionType = 'script';\n          values = script.get(element, conditionExpression);\n        } else {\n          conditionType = 'expression';\n          values.condition = conditionExpression.get('body');\n        }\n      }\n\n      values.conditionType = conditionType;\n\n      return values;\n\n    },\n\n    set: function(element, values, containerElement) {\n      var conditionType = values.conditionType;\n      var commands = [];\n\n      var conditionProps = {\n        body: undefined\n      };\n\n      if (conditionType === 'script') {\n        conditionProps = script.set(element, values, containerElement);\n      } else {\n        var condition = values.condition;\n\n        conditionProps.body = condition;\n      }\n\n      var conditionOrConditionExpression;\n\n      if (conditionType) {\n        conditionOrConditionExpression = elementHelper.createElement(\n          'bpmn:FormalExpression',\n          conditionProps,\n          conditionalEventDefinition || bo,\n          bpmnFactory\n        );\n\n        var source = element.source;\n\n        // if default-flow, remove default-property from source\n        if (source && source.businessObject.default === bo) {\n          commands.push(cmdHelper.updateProperties(source, { 'default': undefined }));\n        }\n      }\n\n      var update = conditionalEventDefinition\n        ? { condition: conditionOrConditionExpression }\n        : { conditionExpression: conditionOrConditionExpression };\n\n      commands.push(cmdHelper.updateBusinessObject(element, conditionalEventDefinition || bo, update));\n\n      return commands;\n    },\n\n    validate: function(element, values) {\n      var validationResult = {};\n\n      if (!values.condition && values.conditionType === 'expression') {\n        validationResult.condition = 'Must provide a value';\n      }\n      else if (values.conditionType === 'script') {\n        validationResult = script.validate(element, values);\n      }\n\n      return validationResult;\n    },\n\n    isExpression: function(element, inputNode) {\n      var conditionType = domQuery('select[name=conditionType]', inputNode);\n      if (conditionType.selectedIndex >= 0) {\n        return conditionType.options[conditionType.selectedIndex].value === 'expression';\n      }\n    },\n\n    isScript: function(element, inputNode) {\n      var conditionType = domQuery('select[name=conditionType]', inputNode);\n      if (conditionType.selectedIndex >= 0) {\n        return conditionType.options[conditionType.selectedIndex].value === 'script';\n      }\n    },\n\n    clear: function(element, inputNode) {\n      // clear text input\n      domQuery('input[name=condition]', inputNode).value='';\n\n      return true;\n    },\n\n    canClear: function(element, inputNode) {\n      var input = domQuery('input[name=condition]', inputNode);\n\n      return input.value !== '';\n    },\n\n    script : script,\n\n    cssClasses: [ 'bpp-textfield' ]\n  });\n};\n\n\n// utilities //////////////////////////\n\nvar CONDITIONAL_SOURCES = [\n  'bpmn:Activity',\n  'bpmn:ExclusiveGateway',\n  'bpmn:InclusiveGateway',\n  'bpmn:ComplexGateway'\n];\n\nfunction isConditionalSource(element) {\n  return isAny(element, CONDITIONAL_SOURCES);\n}\n"]},"metadata":{},"sourceType":"script"}