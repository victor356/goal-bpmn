{"ast":null,"code":"import { assign, map } from 'min-dash';\nimport { is } from '../util/ModelUtil';\nimport { isLabelExternal, getExternalLabelBounds } from '../util/LabelUtil';\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport { isExpanded } from '../util/DiUtil';\nimport { elementToString } from './Util';\n\nfunction elementData(semantic, attrs) {\n  return assign({\n    id: semantic.id,\n    type: semantic.$type,\n    businessObject: semantic\n  }, attrs);\n}\n\nfunction collectWaypoints(waypoints) {\n  return map(waypoints, function (p) {\n    return {\n      x: p.x,\n      y: p.y\n    };\n  });\n}\n\nfunction notYetDrawn(translate, semantic, refSemantic, property) {\n  return new Error(translate('element {element} referenced by {referenced}#{property} not yet drawn', {\n    element: elementToString(refSemantic),\n    referenced: elementToString(semantic),\n    property: property\n  }));\n}\n/**\n * An importer that adds bpmn elements to the canvas\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementFactory} elementFactory\n * @param {ElementRegistry} elementRegistry\n * @param {Function} translate\n * @param {TextRenderer} textRenderer\n */\n\n\nexport default function BpmnImporter(eventBus, canvas, elementFactory, elementRegistry, translate, textRenderer) {\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementFactory = elementFactory;\n  this._elementRegistry = elementRegistry;\n  this._translate = translate;\n  this._textRenderer = textRenderer;\n}\nBpmnImporter.$inject = ['eventBus', 'canvas', 'elementFactory', 'elementRegistry', 'translate', 'textRenderer'];\n/**\n * Add bpmn element (semantic) to the canvas onto the\n * specified parent shape.\n */\n\nBpmnImporter.prototype.add = function (semantic, parentElement) {\n  var di = semantic.di,\n      element,\n      translate = this._translate,\n      hidden;\n  var parentIndex; // ROOT ELEMENT\n  // handle the special case that we deal with a\n  // invisible root element (process or collaboration)\n\n  if (is(di, 'bpmndi:BPMNPlane')) {\n    // add a virtual element (not being drawn)\n    element = this._elementFactory.createRoot(elementData(semantic));\n\n    this._canvas.setRootElement(element);\n  } // SHAPE\n  else if (is(di, 'bpmndi:BPMNShape')) {\n      var collapsed = !isExpanded(semantic);\n      hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n      var bounds = semantic.di.bounds;\n      element = this._elementFactory.createShape(elementData(semantic, {\n        collapsed: collapsed,\n        hidden: hidden,\n        x: Math.round(bounds.x),\n        y: Math.round(bounds.y),\n        width: Math.round(bounds.width),\n        height: Math.round(bounds.height)\n      }));\n\n      if (is(semantic, 'bpmn:BoundaryEvent')) {\n        this._attachBoundary(semantic, element);\n      } // insert lanes behind other flow nodes (cf. #727)\n\n\n      if (is(semantic, 'bpmn:Lane')) {\n        parentIndex = 0;\n      }\n\n      if (is(semantic, 'bpmn:DataStoreReference')) {\n        // check wether data store is inside our outside of its semantic parent\n        if (!isPointInsideBBox(parentElement, getMid(bounds))) {\n          parentElement = this._canvas.getRootElement();\n        }\n      }\n\n      this._canvas.addShape(element, parentElement, parentIndex);\n    } // CONNECTION\n    else if (is(di, 'bpmndi:BPMNEdge')) {\n        var source = this._getSource(semantic),\n            target = this._getTarget(semantic);\n\n        hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n        element = this._elementFactory.createConnection(elementData(semantic, {\n          hidden: hidden,\n          source: source,\n          target: target,\n          waypoints: collectWaypoints(semantic.di.waypoint)\n        }));\n\n        if (is(semantic, 'bpmn:DataAssociation')) {\n          // render always on top; this ensures DataAssociations\n          // are rendered correctly across different \"hacks\" people\n          // love to model such as cross participant / sub process\n          // associations\n          parentElement = null;\n        } // insert sequence flows behind other flow nodes (cf. #727)\n\n\n        if (is(semantic, 'bpmn:SequenceFlow')) {\n          parentIndex = 0;\n        }\n\n        this._canvas.addConnection(element, parentElement, parentIndex);\n      } else {\n        throw new Error(translate('unknown di {di} for element {semantic}', {\n          di: elementToString(di),\n          semantic: elementToString(semantic)\n        }));\n      } // (optional) LABEL\n\n\n  if (isLabelExternal(semantic) && semantic.name) {\n    this.addLabel(semantic, element);\n  }\n\n  this._eventBus.fire('bpmnElement.added', {\n    element: element\n  });\n\n  return element;\n};\n/**\n * Attach the boundary element to the given host\n *\n * @param {ModdleElement} boundarySemantic\n * @param {djs.model.Base} boundaryElement\n */\n\n\nBpmnImporter.prototype._attachBoundary = function (boundarySemantic, boundaryElement) {\n  var translate = this._translate;\n  var hostSemantic = boundarySemantic.attachedToRef;\n\n  if (!hostSemantic) {\n    throw new Error(translate('missing {semantic}#attachedToRef', {\n      semantic: elementToString(boundarySemantic)\n    }));\n  }\n\n  var host = this._elementRegistry.get(hostSemantic.id),\n      attachers = host && host.attachers;\n\n  if (!host) {\n    throw notYetDrawn(translate, boundarySemantic, hostSemantic, 'attachedToRef');\n  } // wire element.host <> host.attachers\n\n\n  boundaryElement.host = host;\n\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n\n  if (attachers.indexOf(boundaryElement) === -1) {\n    attachers.push(boundaryElement);\n  }\n};\n/**\n * add label for an element\n */\n\n\nBpmnImporter.prototype.addLabel = function (semantic, element) {\n  var bounds, text, label;\n  bounds = getExternalLabelBounds(semantic, element);\n  text = semantic.name;\n\n  if (text) {\n    // get corrected bounds from actual layouted text\n    bounds = this._textRenderer.getExternalLabelBounds(bounds, text);\n  }\n\n  label = this._elementFactory.createLabel(elementData(semantic, {\n    id: semantic.id + '_label',\n    labelTarget: element,\n    type: 'label',\n    hidden: element.hidden || !semantic.name,\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  }));\n  return this._canvas.addShape(label, element.parent);\n};\n/**\n * Return the drawn connection end based on the given side.\n *\n * @throws {Error} if the end is not yet drawn\n */\n\n\nBpmnImporter.prototype._getEnd = function (semantic, side) {\n  var element,\n      refSemantic,\n      type = semantic.$type,\n      translate = this._translate;\n  refSemantic = semantic[side + 'Ref']; // handle mysterious isMany DataAssociation#sourceRef\n\n  if (side === 'source' && type === 'bpmn:DataInputAssociation') {\n    refSemantic = refSemantic && refSemantic[0];\n  } // fix source / target for DataInputAssociation / DataOutputAssociation\n\n\n  if (side === 'source' && type === 'bpmn:DataOutputAssociation' || side === 'target' && type === 'bpmn:DataInputAssociation') {\n    refSemantic = semantic.$parent;\n  }\n\n  element = refSemantic && this._getElement(refSemantic);\n\n  if (element) {\n    return element;\n  }\n\n  if (refSemantic) {\n    throw notYetDrawn(translate, semantic, refSemantic, side + 'Ref');\n  } else {\n    throw new Error(translate('{semantic}#{side} Ref not specified', {\n      semantic: elementToString(semantic),\n      side: side\n    }));\n  }\n};\n\nBpmnImporter.prototype._getSource = function (semantic) {\n  return this._getEnd(semantic, 'source');\n};\n\nBpmnImporter.prototype._getTarget = function (semantic) {\n  return this._getEnd(semantic, 'target');\n};\n\nBpmnImporter.prototype._getElement = function (semantic) {\n  return this._elementRegistry.get(semantic.id);\n}; // helpers ////////////////////\n\n\nfunction isPointInsideBBox(bbox, point) {\n  var x = point.x,\n      y = point.y;\n  return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/import/BpmnImporter.js"],"names":["assign","map","is","isLabelExternal","getExternalLabelBounds","getMid","isExpanded","elementToString","elementData","semantic","attrs","id","type","$type","businessObject","collectWaypoints","waypoints","p","x","y","notYetDrawn","translate","refSemantic","property","Error","element","referenced","BpmnImporter","eventBus","canvas","elementFactory","elementRegistry","textRenderer","_eventBus","_canvas","_elementFactory","_elementRegistry","_translate","_textRenderer","$inject","prototype","add","parentElement","di","hidden","parentIndex","createRoot","setRootElement","collapsed","bounds","createShape","Math","round","width","height","_attachBoundary","isPointInsideBBox","getRootElement","addShape","source","_getSource","target","_getTarget","createConnection","waypoint","addConnection","name","addLabel","fire","boundarySemantic","boundaryElement","hostSemantic","attachedToRef","host","get","attachers","indexOf","push","text","label","createLabel","labelTarget","parent","_getEnd","side","$parent","_getElement","bbox","point"],"mappings":"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","sourcesContent":["import {\n  assign,\n  map\n} from 'min-dash';\n\nimport { is } from '../util/ModelUtil';\n\nimport {\n  isLabelExternal,\n  getExternalLabelBounds\n} from '../util/LabelUtil';\n\nimport {\n  getMid\n} from 'diagram-js/lib/layout/LayoutUtil';\n\nimport {\n  isExpanded\n} from '../util/DiUtil';\n\nimport {\n  elementToString\n} from './Util';\n\n\nfunction elementData(semantic, attrs) {\n  return assign({\n    id: semantic.id,\n    type: semantic.$type,\n    businessObject: semantic\n  }, attrs);\n}\n\nfunction collectWaypoints(waypoints) {\n  return map(waypoints, function(p) {\n    return { x: p.x, y: p.y };\n  });\n}\n\nfunction notYetDrawn(translate, semantic, refSemantic, property) {\n  return new Error(translate('element {element} referenced by {referenced}#{property} not yet drawn', {\n    element: elementToString(refSemantic),\n    referenced: elementToString(semantic),\n    property: property\n  }));\n}\n\n\n/**\n * An importer that adds bpmn elements to the canvas\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementFactory} elementFactory\n * @param {ElementRegistry} elementRegistry\n * @param {Function} translate\n * @param {TextRenderer} textRenderer\n */\nexport default function BpmnImporter(\n    eventBus, canvas, elementFactory,\n    elementRegistry, translate, textRenderer) {\n\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementFactory = elementFactory;\n  this._elementRegistry = elementRegistry;\n  this._translate = translate;\n  this._textRenderer = textRenderer;\n}\n\nBpmnImporter.$inject = [\n  'eventBus',\n  'canvas',\n  'elementFactory',\n  'elementRegistry',\n  'translate',\n  'textRenderer'\n];\n\n\n/**\n * Add bpmn element (semantic) to the canvas onto the\n * specified parent shape.\n */\nBpmnImporter.prototype.add = function(semantic, parentElement) {\n\n  var di = semantic.di,\n      element,\n      translate = this._translate,\n      hidden;\n\n  var parentIndex;\n\n  // ROOT ELEMENT\n  // handle the special case that we deal with a\n  // invisible root element (process or collaboration)\n  if (is(di, 'bpmndi:BPMNPlane')) {\n\n    // add a virtual element (not being drawn)\n    element = this._elementFactory.createRoot(elementData(semantic));\n\n    this._canvas.setRootElement(element);\n  }\n\n  // SHAPE\n  else if (is(di, 'bpmndi:BPMNShape')) {\n\n    var collapsed = !isExpanded(semantic);\n    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n\n    var bounds = semantic.di.bounds;\n\n    element = this._elementFactory.createShape(elementData(semantic, {\n      collapsed: collapsed,\n      hidden: hidden,\n      x: Math.round(bounds.x),\n      y: Math.round(bounds.y),\n      width: Math.round(bounds.width),\n      height: Math.round(bounds.height)\n    }));\n\n    if (is(semantic, 'bpmn:BoundaryEvent')) {\n      this._attachBoundary(semantic, element);\n    }\n\n    // insert lanes behind other flow nodes (cf. #727)\n    if (is(semantic, 'bpmn:Lane')) {\n      parentIndex = 0;\n    }\n\n    if (is(semantic, 'bpmn:DataStoreReference')) {\n\n      // check wether data store is inside our outside of its semantic parent\n      if (!isPointInsideBBox(parentElement, getMid(bounds))) {\n        parentElement = this._canvas.getRootElement();\n      }\n    }\n\n    this._canvas.addShape(element, parentElement, parentIndex);\n  }\n\n  // CONNECTION\n  else if (is(di, 'bpmndi:BPMNEdge')) {\n\n    var source = this._getSource(semantic),\n        target = this._getTarget(semantic);\n\n    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n\n    element = this._elementFactory.createConnection(elementData(semantic, {\n      hidden: hidden,\n      source: source,\n      target: target,\n      waypoints: collectWaypoints(semantic.di.waypoint)\n    }));\n\n    if (is(semantic, 'bpmn:DataAssociation')) {\n\n      // render always on top; this ensures DataAssociations\n      // are rendered correctly across different \"hacks\" people\n      // love to model such as cross participant / sub process\n      // associations\n      parentElement = null;\n    }\n\n    // insert sequence flows behind other flow nodes (cf. #727)\n    if (is(semantic, 'bpmn:SequenceFlow')) {\n      parentIndex = 0;\n    }\n\n    this._canvas.addConnection(element, parentElement, parentIndex);\n  } else {\n    throw new Error(translate('unknown di {di} for element {semantic}', {\n      di: elementToString(di),\n      semantic: elementToString(semantic)\n    }));\n  }\n  // (optional) LABEL\n  if (isLabelExternal(semantic) && semantic.name) {\n    this.addLabel(semantic, element);\n  }\n\n\n  this._eventBus.fire('bpmnElement.added', { element: element });\n\n  return element;\n};\n\n\n/**\n * Attach the boundary element to the given host\n *\n * @param {ModdleElement} boundarySemantic\n * @param {djs.model.Base} boundaryElement\n */\nBpmnImporter.prototype._attachBoundary = function(boundarySemantic, boundaryElement) {\n  var translate = this._translate;\n  var hostSemantic = boundarySemantic.attachedToRef;\n\n  if (!hostSemantic) {\n    throw new Error(translate('missing {semantic}#attachedToRef', {\n      semantic: elementToString(boundarySemantic)\n    }));\n  }\n\n  var host = this._elementRegistry.get(hostSemantic.id),\n      attachers = host && host.attachers;\n\n  if (!host) {\n    throw notYetDrawn(translate, boundarySemantic, hostSemantic, 'attachedToRef');\n  }\n\n  // wire element.host <> host.attachers\n  boundaryElement.host = host;\n\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n\n  if (attachers.indexOf(boundaryElement) === -1) {\n    attachers.push(boundaryElement);\n  }\n};\n\n\n/**\n * add label for an element\n */\nBpmnImporter.prototype.addLabel = function(semantic, element) {\n  var bounds,\n      text,\n      label;\n\n  bounds = getExternalLabelBounds(semantic, element);\n\n  text = semantic.name;\n\n  if (text) {\n    // get corrected bounds from actual layouted text\n    bounds = this._textRenderer.getExternalLabelBounds(bounds, text);\n  }\n\n  label = this._elementFactory.createLabel(elementData(semantic, {\n    id: semantic.id + '_label',\n    labelTarget: element,\n    type: 'label',\n    hidden: element.hidden || !semantic.name,\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  }));\n\n  return this._canvas.addShape(label, element.parent);\n};\n\n/**\n * Return the drawn connection end based on the given side.\n *\n * @throws {Error} if the end is not yet drawn\n */\nBpmnImporter.prototype._getEnd = function(semantic, side) {\n\n  var element,\n      refSemantic,\n      type = semantic.$type,\n      translate = this._translate;\n\n  refSemantic = semantic[side + 'Ref'];\n\n  // handle mysterious isMany DataAssociation#sourceRef\n  if (side === 'source' && type === 'bpmn:DataInputAssociation') {\n    refSemantic = refSemantic && refSemantic[0];\n  }\n\n  // fix source / target for DataInputAssociation / DataOutputAssociation\n  if (side === 'source' && type === 'bpmn:DataOutputAssociation' ||\n      side === 'target' && type === 'bpmn:DataInputAssociation') {\n\n    refSemantic = semantic.$parent;\n  }\n\n  element = refSemantic && this._getElement(refSemantic);\n\n  if (element) {\n    return element;\n  }\n\n  if (refSemantic) {\n    throw notYetDrawn(translate, semantic, refSemantic, side + 'Ref');\n  } else {\n    throw new Error(translate('{semantic}#{side} Ref not specified', {\n      semantic: elementToString(semantic),\n      side: side\n    }));\n  }\n};\n\nBpmnImporter.prototype._getSource = function(semantic) {\n  return this._getEnd(semantic, 'source');\n};\n\nBpmnImporter.prototype._getTarget = function(semantic) {\n  return this._getEnd(semantic, 'target');\n};\n\n\nBpmnImporter.prototype._getElement = function(semantic) {\n  return this._elementRegistry.get(semantic.id);\n};\n\n\n// helpers ////////////////////\n\nfunction isPointInsideBBox(bbox, point) {\n  var x = point.x,\n      y = point.y;\n\n  return x >= bbox.x &&\n    x <= bbox.x + bbox.width &&\n    y >= bbox.y &&\n    y <= bbox.y + bbox.height;\n}"]},"metadata":{},"sourceType":"module"}