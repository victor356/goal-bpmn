{"ast":null,"code":"import { assign } from 'min-dash';\nimport TextUtil from 'diagram-js/lib/util/Text';\nvar DEFAULT_FONT_SIZE = 12;\nvar LINE_HEIGHT_RATIO = 1.2;\nvar MIN_TEXT_ANNOTATION_HEIGHT = 30;\nexport default function TextRenderer(config) {\n  var defaultStyle = assign({\n    fontFamily: 'Arial, sans-serif',\n    fontSize: DEFAULT_FONT_SIZE,\n    fontWeight: 'normal',\n    lineHeight: LINE_HEIGHT_RATIO\n  }, config && config.defaultStyle || {});\n  var fontSize = parseInt(defaultStyle.fontSize, 10) - 1;\n  var externalStyle = assign({}, defaultStyle, {\n    fontSize: fontSize\n  }, config && config.externalStyle || {});\n  var textUtil = new TextUtil({\n    style: defaultStyle\n  });\n  /**\n   * Get the new bounds of an externally rendered,\n   * layouted label.\n   *\n   * @param  {Bounds} bounds\n   * @param  {String} text\n   *\n   * @return {Bounds}\n   */\n\n  this.getExternalLabelBounds = function (bounds, text) {\n    var layoutedDimensions = textUtil.getDimensions(text, {\n      box: {\n        width: 90,\n        height: 30,\n        x: bounds.width / 2 + bounds.x,\n        y: bounds.height / 2 + bounds.y\n      },\n      style: externalStyle\n    }); // resize label shape to fit label text\n\n    return {\n      x: Math.round(bounds.x + bounds.width / 2 - layoutedDimensions.width / 2),\n      y: Math.round(bounds.y),\n      width: Math.ceil(layoutedDimensions.width),\n      height: Math.ceil(layoutedDimensions.height)\n    };\n  };\n  /**\n   * Get the new bounds of text annotation.\n   *\n   * @param  {Bounds} bounds\n   * @param  {String} text\n   *\n   * @return {Bounds}\n   */\n\n\n  this.getTextAnnotationBounds = function (bounds, text) {\n    var layoutedDimensions = textUtil.getDimensions(text, {\n      box: bounds,\n      style: defaultStyle,\n      align: 'left-top',\n      padding: 5\n    });\n    return {\n      x: bounds.x,\n      y: bounds.y,\n      width: bounds.width,\n      height: Math.max(MIN_TEXT_ANNOTATION_HEIGHT, Math.round(layoutedDimensions.height))\n    };\n  };\n  /**\n   * Create a layouted text element.\n   *\n   * @param {String} text\n   * @param {Object} [options]\n   *\n   * @return {SVGElement} rendered text\n   */\n\n\n  this.createText = function (text, options) {\n    return textUtil.createText(text, options || {});\n  };\n  /**\n   * Get default text style.\n   */\n\n\n  this.getDefaultStyle = function () {\n    return defaultStyle;\n  };\n  /**\n   * Get the external text style.\n   */\n\n\n  this.getExternalStyle = function () {\n    return externalStyle;\n  };\n}\nTextRenderer.$inject = ['config.textRenderer'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/draw/TextRenderer.js"],"names":["assign","TextUtil","DEFAULT_FONT_SIZE","LINE_HEIGHT_RATIO","MIN_TEXT_ANNOTATION_HEIGHT","TextRenderer","config","defaultStyle","fontFamily","fontSize","fontWeight","lineHeight","parseInt","externalStyle","textUtil","style","getExternalLabelBounds","bounds","text","layoutedDimensions","getDimensions","box","width","height","x","y","Math","round","ceil","getTextAnnotationBounds","align","padding","max","createText","options","getDefaultStyle","getExternalStyle","$inject"],"mappings":"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","sourcesContent":["import { assign } from 'min-dash';\n\nimport TextUtil from 'diagram-js/lib/util/Text';\n\nvar DEFAULT_FONT_SIZE = 12;\nvar LINE_HEIGHT_RATIO = 1.2;\n\nvar MIN_TEXT_ANNOTATION_HEIGHT = 30;\n\n\nexport default function TextRenderer(config) {\n\n  var defaultStyle = assign({\n    fontFamily: 'Arial, sans-serif',\n    fontSize: DEFAULT_FONT_SIZE,\n    fontWeight: 'normal',\n    lineHeight: LINE_HEIGHT_RATIO\n  }, config && config.defaultStyle || {});\n\n  var fontSize = parseInt(defaultStyle.fontSize, 10) - 1;\n\n  var externalStyle = assign({}, defaultStyle, {\n    fontSize: fontSize\n  }, config && config.externalStyle || {});\n\n  var textUtil = new TextUtil({\n    style: defaultStyle\n  });\n\n  /**\n   * Get the new bounds of an externally rendered,\n   * layouted label.\n   *\n   * @param  {Bounds} bounds\n   * @param  {String} text\n   *\n   * @return {Bounds}\n   */\n  this.getExternalLabelBounds = function(bounds, text) {\n\n    var layoutedDimensions = textUtil.getDimensions(text, {\n      box: {\n        width: 90,\n        height: 30,\n        x: bounds.width / 2 + bounds.x,\n        y: bounds.height / 2 + bounds.y\n      },\n      style: externalStyle\n    });\n\n    // resize label shape to fit label text\n    return {\n      x: Math.round(bounds.x + bounds.width / 2 - layoutedDimensions.width / 2),\n      y: Math.round(bounds.y),\n      width: Math.ceil(layoutedDimensions.width),\n      height: Math.ceil(layoutedDimensions.height)\n    };\n\n  };\n\n  /**\n   * Get the new bounds of text annotation.\n   *\n   * @param  {Bounds} bounds\n   * @param  {String} text\n   *\n   * @return {Bounds}\n   */\n  this.getTextAnnotationBounds = function(bounds, text) {\n\n    var layoutedDimensions = textUtil.getDimensions(text, {\n      box: bounds,\n      style: defaultStyle,\n      align: 'left-top',\n      padding: 5\n    });\n\n    return {\n      x: bounds.x,\n      y: bounds.y,\n      width: bounds.width,\n      height: Math.max(MIN_TEXT_ANNOTATION_HEIGHT, Math.round(layoutedDimensions.height))\n    };\n  };\n\n  /**\n   * Create a layouted text element.\n   *\n   * @param {String} text\n   * @param {Object} [options]\n   *\n   * @return {SVGElement} rendered text\n   */\n  this.createText = function(text, options) {\n    return textUtil.createText(text, options || {});\n  };\n\n  /**\n   * Get default text style.\n   */\n  this.getDefaultStyle = function() {\n    return defaultStyle;\n  };\n\n  /**\n   * Get the external text style.\n   */\n  this.getExternalStyle = function() {\n    return externalStyle;\n  };\n\n}\n\nTextRenderer.$inject = [\n  'config.textRenderer'\n];"]},"metadata":{},"sourceType":"module"}