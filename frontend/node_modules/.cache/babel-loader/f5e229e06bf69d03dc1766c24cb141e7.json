{"ast":null,"code":"import { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport lineIntersect from './util/LineIntersect';\n/**\n * Fix broken dockings after DI imports.\n *\n * @param {EventBus} eventBus\n */\n\nexport default function ImportDockingFix(eventBus) {\n  function adjustDocking(startPoint, nextPoint, elementMid) {\n    var elementTop = {\n      x: elementMid.x,\n      y: elementMid.y - 50\n    };\n    var elementLeft = {\n      x: elementMid.x - 50,\n      y: elementMid.y\n    };\n    var verticalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementTop),\n        horizontalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementLeft); // original is horizontal or vertical center cross intersection\n\n    var centerIntersect;\n\n    if (verticalIntersect && horizontalIntersect) {\n      if (getDistance(verticalIntersect, elementMid) > getDistance(horizontalIntersect, elementMid)) {\n        centerIntersect = horizontalIntersect;\n      } else {\n        centerIntersect = verticalIntersect;\n      }\n    } else {\n      centerIntersect = verticalIntersect || horizontalIntersect;\n    }\n\n    startPoint.original = centerIntersect;\n  }\n\n  function fixDockings(connection) {\n    var waypoints = connection.waypoints;\n    adjustDocking(waypoints[0], waypoints[1], getMid(connection.source));\n    adjustDocking(waypoints[waypoints.length - 1], waypoints[waypoints.length - 2], getMid(connection.target));\n  }\n\n  eventBus.on('bpmnElement.added', function (e) {\n    var element = e.element;\n\n    if (element.waypoints) {\n      fixDockings(element);\n    }\n  });\n}\nImportDockingFix.$inject = ['eventBus']; // helpers //////////////////////\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/modeling/behavior/ImportDockingFix.js"],"names":["getMid","lineIntersect","ImportDockingFix","eventBus","adjustDocking","startPoint","nextPoint","elementMid","elementTop","x","y","elementLeft","verticalIntersect","horizontalIntersect","centerIntersect","getDistance","original","fixDockings","connection","waypoints","source","length","target","on","e","element","$inject","p1","p2","Math","sqrt","pow"],"mappings":"AAAA,SACEA,MADF,QAEO,kCAFP;AAIA,OAAOC,aAAP,MAA0B,sBAA1B;AAGA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAEjD,WAASC,aAAT,CAAuBC,UAAvB,EAAmCC,SAAnC,EAA8CC,UAA9C,EAA0D;AAExD,QAAIC,UAAU,GAAG;AACfC,MAAAA,CAAC,EAAEF,UAAU,CAACE,CADC;AAEfC,MAAAA,CAAC,EAAEH,UAAU,CAACG,CAAX,GAAe;AAFH,KAAjB;AAKA,QAAIC,WAAW,GAAG;AAChBF,MAAAA,CAAC,EAAEF,UAAU,CAACE,CAAX,GAAe,EADF;AAEhBC,MAAAA,CAAC,EAAEH,UAAU,CAACG;AAFE,KAAlB;AAKA,QAAIE,iBAAiB,GAAGX,aAAa,CAACI,UAAD,EAAaC,SAAb,EAAwBC,UAAxB,EAAoCC,UAApC,CAArC;AAAA,QACIK,mBAAmB,GAAGZ,aAAa,CAACI,UAAD,EAAaC,SAAb,EAAwBC,UAAxB,EAAoCI,WAApC,CADvC,CAZwD,CAexD;;AACA,QAAIG,eAAJ;;AAEA,QAAIF,iBAAiB,IAAIC,mBAAzB,EAA8C;AAC5C,UAAIE,WAAW,CAACH,iBAAD,EAAoBL,UAApB,CAAX,GAA6CQ,WAAW,CAACF,mBAAD,EAAsBN,UAAtB,CAA5D,EAA+F;AAC7FO,QAAAA,eAAe,GAAGD,mBAAlB;AACD,OAFD,MAEO;AACLC,QAAAA,eAAe,GAAGF,iBAAlB;AACD;AACF,KAND,MAMO;AACLE,MAAAA,eAAe,GAAGF,iBAAiB,IAAIC,mBAAvC;AACD;;AAEDR,IAAAA,UAAU,CAACW,QAAX,GAAsBF,eAAtB;AACD;;AAED,WAASG,WAAT,CAAqBC,UAArB,EAAiC;AAC/B,QAAIC,SAAS,GAAGD,UAAU,CAACC,SAA3B;AAEAf,IAAAA,aAAa,CACXe,SAAS,CAAC,CAAD,CADE,EAEXA,SAAS,CAAC,CAAD,CAFE,EAGXnB,MAAM,CAACkB,UAAU,CAACE,MAAZ,CAHK,CAAb;AAMAhB,IAAAA,aAAa,CACXe,SAAS,CAACA,SAAS,CAACE,MAAV,GAAmB,CAApB,CADE,EAEXF,SAAS,CAACA,SAAS,CAACE,MAAV,GAAmB,CAApB,CAFE,EAGXrB,MAAM,CAACkB,UAAU,CAACI,MAAZ,CAHK,CAAb;AAKD;;AAEDnB,EAAAA,QAAQ,CAACoB,EAAT,CAAY,mBAAZ,EAAiC,UAASC,CAAT,EAAY;AAE3C,QAAIC,OAAO,GAAGD,CAAC,CAACC,OAAhB;;AAEA,QAAIA,OAAO,CAACN,SAAZ,EAAuB;AACrBF,MAAAA,WAAW,CAACQ,OAAD,CAAX;AACD;AACF,GAPD;AAQD;AAEDvB,gBAAgB,CAACwB,OAAjB,GAA2B,CACzB,UADyB,CAA3B,C,CAKA;;AAEA,SAASX,WAAT,CAAqBY,EAArB,EAAyBC,EAAzB,EAA6B;AAC3B,SAAOC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASJ,EAAE,CAAClB,CAAH,GAAOmB,EAAE,CAACnB,CAAnB,EAAsB,CAAtB,IAA2BoB,IAAI,CAACE,GAAL,CAASJ,EAAE,CAACjB,CAAH,GAAOkB,EAAE,CAAClB,CAAnB,EAAsB,CAAtB,CAArC,CAAP;AACD","sourcesContent":["import {\n  getMid\n} from 'diagram-js/lib/layout/LayoutUtil';\n\nimport lineIntersect from './util/LineIntersect';\n\n\n/**\n * Fix broken dockings after DI imports.\n *\n * @param {EventBus} eventBus\n */\nexport default function ImportDockingFix(eventBus) {\n\n  function adjustDocking(startPoint, nextPoint, elementMid) {\n\n    var elementTop = {\n      x: elementMid.x,\n      y: elementMid.y - 50\n    };\n\n    var elementLeft = {\n      x: elementMid.x - 50,\n      y: elementMid.y\n    };\n\n    var verticalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementTop),\n        horizontalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementLeft);\n\n    // original is horizontal or vertical center cross intersection\n    var centerIntersect;\n\n    if (verticalIntersect && horizontalIntersect) {\n      if (getDistance(verticalIntersect, elementMid) > getDistance(horizontalIntersect, elementMid)) {\n        centerIntersect = horizontalIntersect;\n      } else {\n        centerIntersect = verticalIntersect;\n      }\n    } else {\n      centerIntersect = verticalIntersect || horizontalIntersect;\n    }\n\n    startPoint.original = centerIntersect;\n  }\n\n  function fixDockings(connection) {\n    var waypoints = connection.waypoints;\n\n    adjustDocking(\n      waypoints[0],\n      waypoints[1],\n      getMid(connection.source)\n    );\n\n    adjustDocking(\n      waypoints[waypoints.length - 1],\n      waypoints[waypoints.length - 2],\n      getMid(connection.target)\n    );\n  }\n\n  eventBus.on('bpmnElement.added', function(e) {\n\n    var element = e.element;\n\n    if (element.waypoints) {\n      fixDockings(element);\n    }\n  });\n}\n\nImportDockingFix.$inject = [\n  'eventBus'\n];\n\n\n// helpers //////////////////////\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}"]},"metadata":{},"sourceType":"module"}