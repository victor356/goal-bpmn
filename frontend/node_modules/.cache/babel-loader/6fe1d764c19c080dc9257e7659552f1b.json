{"ast":null,"code":"'use strict';\n\nvar domQuery = require('min-dom').query,\n    utils = require('../../../../Utils');\n\nfunction getScriptType(node) {\n  return utils.selectedType('select[name=scriptType]', node.parentElement);\n}\n\nmodule.exports = function (scriptLanguagePropName, scriptValuePropName, isFormatRequired) {\n  return {\n    template: '<div class=\"bpp-row bpp-textfield\">' + '<label for=\"cam-script-format\">Script Format</label>' + '<div class=\"bpp-field-wrapper\">' + '<input id=\"cam-script-format\" type=\"text\" name=\"scriptFormat\" />' + '<button class=\"clear\" data-action=\"script.clearScriptFormat\" data-show=\"script.canClearScriptFormat\">' + '<span>X</span>' + '</button>' + '</div>' + '</div>' + '<div class=\"bpp-row\">' + '<label for=\"cam-script-type\">Script Type</label>' + '<div class=\"bpp-field-wrapper\">' + '<select id=\"cam-script-type\" name=\"scriptType\" data-value>' + '<option value=\"script\" selected>Inline Script</option>' + '<option value=\"scriptResource\">External Resource</option>' + '</select>' + '</div>' + '</div>' + '<div class=\"bpp-row bpp-textfield\">' + '<label for=\"cam-script-resource-val\" data-show=\"script.isScriptResource\">Resource</label>' + '<div class=\"bpp-field-wrapper\" data-show=\"script.isScriptResource\">' + '<input id=\"cam-script-resource-val\" type=\"text\" name=\"scriptResourceValue\" />' + '<button class=\"clear\" data-action=\"script.clearScriptResource\" data-show=\"script.canClearScriptResource\">' + '<span>X</span>' + '</button>' + '</div>' + '</div>' + '<div class=\"bpp-row\">' + '<label for=\"cam-script-val\" data-show=\"script.isScript\">Script</label>' + '<div class=\"bpp-field-wrapper\" data-show=\"script.isScript\">' + '<textarea id=\"cam-script-val\" type=\"text\" name=\"scriptValue\"></textarea>' + '</div>' + '</div>',\n    get: function (element, bo) {\n      var values = {}; // read values from xml:\n\n      var boScriptResource = bo.get('camunda:resource'),\n          boScript = bo.get(scriptValuePropName),\n          boScriptFormat = bo.get(scriptLanguagePropName);\n\n      if (typeof boScriptResource !== 'undefined') {\n        values.scriptResourceValue = boScriptResource;\n        values.scriptType = 'scriptResource';\n      } else {\n        values.scriptValue = boScript;\n        values.scriptType = 'script';\n      }\n\n      values.scriptFormat = boScriptFormat;\n      return values;\n    },\n    set: function (element, values, containerElement) {\n      var scriptFormat = values.scriptFormat,\n          scriptType = values.scriptType,\n          scriptResourceValue = values.scriptResourceValue,\n          scriptValue = values.scriptValue; // init update\n\n      var update = {\n        'camunda:resource': undefined\n      };\n      update[scriptValuePropName] = undefined;\n      update[scriptLanguagePropName] = undefined;\n\n      if (isFormatRequired) {\n        // always set language\n        update[scriptLanguagePropName] = scriptFormat || '';\n      } else // set language only when scriptFormat has a value\n        if (scriptFormat !== '') {\n          update[scriptLanguagePropName] = scriptFormat;\n        } // set either inline script or resource\n\n\n      if ('scriptResource' === scriptType) {\n        update['camunda:resource'] = scriptResourceValue || '';\n      } else {\n        update[scriptValuePropName] = scriptValue || '';\n      }\n\n      return update;\n    },\n    validate: function (element, values) {\n      var validationResult = {};\n\n      if (values.scriptType === 'script' && !values.scriptValue) {\n        validationResult.scriptValue = 'Must provide a value';\n      }\n\n      if (values.scriptType === 'scriptResource' && !values.scriptResourceValue) {\n        validationResult.scriptResourceValue = 'Must provide a value';\n      }\n\n      if (isFormatRequired && (!values.scriptFormat || values.scriptFormat.length === 0)) {\n        validationResult.scriptFormat = 'Must provide a value';\n      }\n\n      return validationResult;\n    },\n    clearScriptFormat: function (element, inputNode, btnNode, scopeNode) {\n      domQuery('input[name=scriptFormat]', scopeNode).value = '';\n      return true;\n    },\n    canClearScriptFormat: function (element, inputNode, btnNode, scopeNode) {\n      var input = domQuery('input[name=scriptFormat]', scopeNode);\n      return input.value !== '';\n    },\n    clearScriptResource: function (element, inputNode, btnNode, scopeNode) {\n      domQuery('input[name=scriptResourceValue]', scopeNode).value = '';\n      return true;\n    },\n    canClearScriptResource: function (element, inputNode, btnNode, scopeNode) {\n      var input = domQuery('input[name=scriptResourceValue]', scopeNode);\n      return input.value !== '';\n    },\n    clearScript: function (element, inputNode, btnNode, scopeNode) {\n      domQuery('textarea[name=scriptValue]', scopeNode).value = '';\n      return true;\n    },\n    canClearScript: function (element, inputNode, btnNode, scopeNode) {\n      var input = domQuery('textarea[name=scriptValue]', scopeNode);\n      return input.value !== '';\n    },\n    isScriptResource: function (element, inputNode, btnNode, scopeNode) {\n      var scriptType = getScriptType(scopeNode);\n      return scriptType === 'scriptResource';\n    },\n    isScript: function (element, inputNode, btnNode, scopeNode) {\n      var scriptType = getScriptType(scopeNode);\n      return scriptType === 'script';\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/implementation/Script.js"],"names":["domQuery","require","query","utils","getScriptType","node","selectedType","parentElement","module","exports","scriptLanguagePropName","scriptValuePropName","isFormatRequired","template","get","element","bo","values","boScriptResource","boScript","boScriptFormat","scriptResourceValue","scriptType","scriptValue","scriptFormat","set","containerElement","update","undefined","validate","validationResult","length","clearScriptFormat","inputNode","btnNode","scopeNode","value","canClearScriptFormat","input","clearScriptResource","canClearScriptResource","clearScript","canClearScript","isScriptResource","isScript"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,KAAlC;AAAA,IAEIC,KAAK,GAAGF,OAAO,CAAC,mBAAD,CAFnB;;AAKA,SAASG,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOF,KAAK,CAACG,YAAN,CAAmB,yBAAnB,EAA8CD,IAAI,CAACE,aAAnD,CAAP;AACD;;AAGDC,MAAM,CAACC,OAAP,GAAiB,UAASC,sBAAT,EAAiCC,mBAAjC,EAAsDC,gBAAtD,EAAwE;AAEvF,SAAO;AACLC,IAAAA,QAAQ,EACR,wCACE,sDADF,GAEE,iCAFF,GAGI,kEAHJ,GAII,uGAJJ,GAKM,gBALN,GAMI,WANJ,GAOE,QAPF,GAQA,QARA,GAUA,uBAVA,GAWE,kDAXF,GAYE,iCAZF,GAaI,4DAbJ,GAcM,wDAdN,GAeM,2DAfN,GAgBI,WAhBJ,GAiBE,QAjBF,GAkBA,QAlBA,GAoBA,qCApBA,GAqBE,2FArBF,GAsBE,qEAtBF,GAuBI,+EAvBJ,GAwBI,2GAxBJ,GAyBM,gBAzBN,GA0BI,WA1BJ,GA2BE,QA3BF,GA4BA,QA5BA,GA8BA,uBA9BA,GA+BE,wEA/BF,GAgCE,6DAhCF,GAiCI,0EAjCJ,GAkCE,QAlCF,GAmCA,QArCK;AAuCLC,IAAAA,GAAG,EAAE,UAASC,OAAT,EAAkBC,EAAlB,EAAsB;AACzB,UAAIC,MAAM,GAAG,EAAb,CADyB,CAGzB;;AACA,UAAIC,gBAAgB,GAAGF,EAAE,CAACF,GAAH,CAAO,kBAAP,CAAvB;AAAA,UACIK,QAAQ,GAAGH,EAAE,CAACF,GAAH,CAAOH,mBAAP,CADf;AAAA,UAEIS,cAAc,GAAGJ,EAAE,CAACF,GAAH,CAAOJ,sBAAP,CAFrB;;AAIA,UAAI,OAAOQ,gBAAP,KAA4B,WAAhC,EAA6C;AAC3CD,QAAAA,MAAM,CAACI,mBAAP,GAA6BH,gBAA7B;AACAD,QAAAA,MAAM,CAACK,UAAP,GAAoB,gBAApB;AACD,OAHD,MAGO;AACLL,QAAAA,MAAM,CAACM,WAAP,GAAqBJ,QAArB;AACAF,QAAAA,MAAM,CAACK,UAAP,GAAoB,QAApB;AACD;;AAEDL,MAAAA,MAAM,CAACO,YAAP,GAAsBJ,cAAtB;AAEA,aAAOH,MAAP;AACD,KA1DI;AA4DLQ,IAAAA,GAAG,EAAE,UAASV,OAAT,EAAkBE,MAAlB,EAA0BS,gBAA1B,EAA4C;AAC/C,UAAIF,YAAY,GAAGP,MAAM,CAACO,YAA1B;AAAA,UACIF,UAAU,GAAGL,MAAM,CAACK,UADxB;AAAA,UAEID,mBAAmB,GAAGJ,MAAM,CAACI,mBAFjC;AAAA,UAGIE,WAAW,GAAGN,MAAM,CAACM,WAHzB,CAD+C,CAM/C;;AACA,UAAII,MAAM,GAAG;AACX,4BAAoBC;AADT,OAAb;AAGAD,MAAAA,MAAM,CAAChB,mBAAD,CAAN,GAA8BiB,SAA9B;AACAD,MAAAA,MAAM,CAACjB,sBAAD,CAAN,GAAiCkB,SAAjC;;AAEA,UAAIhB,gBAAJ,EAAsB;AACpB;AACAe,QAAAA,MAAM,CAACjB,sBAAD,CAAN,GAAiCc,YAAY,IAAI,EAAjD;AACD,OAHD,MAIA;AACA,YAAIA,YAAY,KAAK,EAArB,EAAyB;AACvBG,UAAAA,MAAM,CAACjB,sBAAD,CAAN,GAAiCc,YAAjC;AACD,SApB8C,CAsB/C;;;AACA,UAAI,qBAAqBF,UAAzB,EAAqC;AACnCK,QAAAA,MAAM,CAAC,kBAAD,CAAN,GAA6BN,mBAAmB,IAAI,EAApD;AACD,OAFD,MAEO;AACLM,QAAAA,MAAM,CAAChB,mBAAD,CAAN,GAA8BY,WAAW,IAAI,EAA7C;AACD;;AAED,aAAOI,MAAP;AACD,KA1FI;AA4FLE,IAAAA,QAAQ,EAAE,UAASd,OAAT,EAAkBE,MAAlB,EAA0B;AAClC,UAAIa,gBAAgB,GAAG,EAAvB;;AAEA,UAAIb,MAAM,CAACK,UAAP,KAAsB,QAAtB,IAAkC,CAACL,MAAM,CAACM,WAA9C,EAA2D;AACzDO,QAAAA,gBAAgB,CAACP,WAAjB,GAA+B,sBAA/B;AACD;;AAED,UAAIN,MAAM,CAACK,UAAP,KAAsB,gBAAtB,IAA0C,CAACL,MAAM,CAACI,mBAAtD,EAA2E;AACzES,QAAAA,gBAAgB,CAACT,mBAAjB,GAAuC,sBAAvC;AACD;;AAED,UAAIT,gBAAgB,KAAK,CAACK,MAAM,CAACO,YAAR,IAAwBP,MAAM,CAACO,YAAP,CAAoBO,MAApB,KAA+B,CAA5D,CAApB,EAAoF;AAClFD,QAAAA,gBAAgB,CAACN,YAAjB,GAAgC,sBAAhC;AACD;;AAED,aAAOM,gBAAP;AACD,KA5GI;AA8GLE,IAAAA,iBAAiB,EAAE,UAASjB,OAAT,EAAkBkB,SAAlB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AAClEnC,MAAAA,QAAQ,CAAC,0BAAD,EAA6BmC,SAA7B,CAAR,CAAgDC,KAAhD,GAAsD,EAAtD;AAEA,aAAO,IAAP;AACD,KAlHI;AAoHLC,IAAAA,oBAAoB,EAAE,UAAStB,OAAT,EAAkBkB,SAAlB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AACrE,UAAIG,KAAK,GAAGtC,QAAQ,CAAC,0BAAD,EAA6BmC,SAA7B,CAApB;AAEA,aAAOG,KAAK,CAACF,KAAN,KAAgB,EAAvB;AACD,KAxHI;AA0HLG,IAAAA,mBAAmB,EAAE,UAASxB,OAAT,EAAkBkB,SAAlB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AACpEnC,MAAAA,QAAQ,CAAC,iCAAD,EAAoCmC,SAApC,CAAR,CAAuDC,KAAvD,GAA6D,EAA7D;AAEA,aAAO,IAAP;AACD,KA9HI;AAgILI,IAAAA,sBAAsB,EAAE,UAASzB,OAAT,EAAkBkB,SAAlB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AACvE,UAAIG,KAAK,GAAGtC,QAAQ,CAAC,iCAAD,EAAoCmC,SAApC,CAApB;AAEA,aAAOG,KAAK,CAACF,KAAN,KAAgB,EAAvB;AACD,KApII;AAsILK,IAAAA,WAAW,EAAE,UAAS1B,OAAT,EAAkBkB,SAAlB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AAC5DnC,MAAAA,QAAQ,CAAC,4BAAD,EAA+BmC,SAA/B,CAAR,CAAkDC,KAAlD,GAAwD,EAAxD;AAEA,aAAO,IAAP;AACD,KA1II;AA4ILM,IAAAA,cAAc,EAAE,UAAS3B,OAAT,EAAkBkB,SAAlB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AAC/D,UAAIG,KAAK,GAAGtC,QAAQ,CAAC,4BAAD,EAA+BmC,SAA/B,CAApB;AAEA,aAAOG,KAAK,CAACF,KAAN,KAAgB,EAAvB;AACD,KAhJI;AAkJLO,IAAAA,gBAAgB,EAAE,UAAS5B,OAAT,EAAkBkB,SAAlB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AACjE,UAAIb,UAAU,GAAGlB,aAAa,CAAC+B,SAAD,CAA9B;AACA,aAAOb,UAAU,KAAK,gBAAtB;AACD,KArJI;AAuJLsB,IAAAA,QAAQ,EAAE,UAAS7B,OAAT,EAAkBkB,SAAlB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AACzD,UAAIb,UAAU,GAAGlB,aAAa,CAAC+B,SAAD,CAA9B;AACA,aAAOb,UAAU,KAAK,QAAtB;AACD;AA1JI,GAAP;AA8JD,CAhKD","sourcesContent":["'use strict';\n\nvar domQuery = require('min-dom').query,\n\n    utils = require('../../../../Utils');\n\n\nfunction getScriptType(node) {\n  return utils.selectedType('select[name=scriptType]', node.parentElement);\n}\n\n\nmodule.exports = function(scriptLanguagePropName, scriptValuePropName, isFormatRequired) {\n\n  return {\n    template:\n    '<div class=\"bpp-row bpp-textfield\">' +\n      '<label for=\"cam-script-format\">Script Format</label>' +\n      '<div class=\"bpp-field-wrapper\">' +\n        '<input id=\"cam-script-format\" type=\"text\" name=\"scriptFormat\" />' +\n        '<button class=\"clear\" data-action=\"script.clearScriptFormat\" data-show=\"script.canClearScriptFormat\">' +\n          '<span>X</span>' +\n        '</button>' +\n      '</div>' +\n    '</div>' +\n\n    '<div class=\"bpp-row\">' +\n      '<label for=\"cam-script-type\">Script Type</label>' +\n      '<div class=\"bpp-field-wrapper\">' +\n        '<select id=\"cam-script-type\" name=\"scriptType\" data-value>' +\n          '<option value=\"script\" selected>Inline Script</option>' +\n          '<option value=\"scriptResource\">External Resource</option>' +\n        '</select>' +\n      '</div>' +\n    '</div>' +\n\n    '<div class=\"bpp-row bpp-textfield\">' +\n      '<label for=\"cam-script-resource-val\" data-show=\"script.isScriptResource\">Resource</label>' +\n      '<div class=\"bpp-field-wrapper\" data-show=\"script.isScriptResource\">' +\n        '<input id=\"cam-script-resource-val\" type=\"text\" name=\"scriptResourceValue\" />' +\n        '<button class=\"clear\" data-action=\"script.clearScriptResource\" data-show=\"script.canClearScriptResource\">' +\n          '<span>X</span>' +\n        '</button>' +\n      '</div>' +\n    '</div>' +\n\n    '<div class=\"bpp-row\">' +\n      '<label for=\"cam-script-val\" data-show=\"script.isScript\">Script</label>' +\n      '<div class=\"bpp-field-wrapper\" data-show=\"script.isScript\">' +\n        '<textarea id=\"cam-script-val\" type=\"text\" name=\"scriptValue\"></textarea>' +\n      '</div>'+\n    '</div>',\n\n    get: function(element, bo) {\n      var values = {};\n\n      // read values from xml:\n      var boScriptResource = bo.get('camunda:resource'),\n          boScript = bo.get(scriptValuePropName),\n          boScriptFormat = bo.get(scriptLanguagePropName);\n\n      if (typeof boScriptResource !== 'undefined') {\n        values.scriptResourceValue = boScriptResource;\n        values.scriptType = 'scriptResource';\n      } else {\n        values.scriptValue = boScript;\n        values.scriptType = 'script';\n      }\n\n      values.scriptFormat = boScriptFormat;\n\n      return values;\n    },\n\n    set: function(element, values, containerElement) {\n      var scriptFormat = values.scriptFormat,\n          scriptType = values.scriptType,\n          scriptResourceValue = values.scriptResourceValue,\n          scriptValue = values.scriptValue;\n\n      // init update\n      var update = {\n        'camunda:resource': undefined\n      };\n      update[scriptValuePropName] = undefined;\n      update[scriptLanguagePropName] = undefined;\n\n      if (isFormatRequired) {\n        // always set language\n        update[scriptLanguagePropName] = scriptFormat || '';\n      } else\n      // set language only when scriptFormat has a value\n      if (scriptFormat !== '') {\n        update[scriptLanguagePropName] = scriptFormat;\n      }\n\n      // set either inline script or resource\n      if ('scriptResource' === scriptType) {\n        update['camunda:resource'] = scriptResourceValue || '';\n      } else {\n        update[scriptValuePropName] = scriptValue || '';\n      }\n\n      return update;\n    },\n\n    validate: function(element, values) {\n      var validationResult = {};\n\n      if (values.scriptType === 'script' && !values.scriptValue) {\n        validationResult.scriptValue = 'Must provide a value';\n      }\n\n      if (values.scriptType === 'scriptResource' && !values.scriptResourceValue) {\n        validationResult.scriptResourceValue = 'Must provide a value';\n      }\n\n      if (isFormatRequired && (!values.scriptFormat || values.scriptFormat.length === 0)) {\n        validationResult.scriptFormat = 'Must provide a value';\n      }\n\n      return validationResult;\n    },\n\n    clearScriptFormat: function(element, inputNode, btnNode, scopeNode) {\n      domQuery('input[name=scriptFormat]', scopeNode).value='';\n\n      return true;\n    },\n\n    canClearScriptFormat: function(element, inputNode, btnNode, scopeNode) {\n      var input = domQuery('input[name=scriptFormat]', scopeNode);\n\n      return input.value !== '';\n    },\n\n    clearScriptResource: function(element, inputNode, btnNode, scopeNode) {\n      domQuery('input[name=scriptResourceValue]', scopeNode).value='';\n\n      return true;\n    },\n\n    canClearScriptResource: function(element, inputNode, btnNode, scopeNode) {\n      var input = domQuery('input[name=scriptResourceValue]', scopeNode);\n\n      return input.value !== '';\n    },\n\n    clearScript: function(element, inputNode, btnNode, scopeNode) {\n      domQuery('textarea[name=scriptValue]', scopeNode).value='';\n\n      return true;\n    },\n\n    canClearScript: function(element, inputNode, btnNode, scopeNode) {\n      var input = domQuery('textarea[name=scriptValue]', scopeNode);\n\n      return input.value !== '';\n    },\n\n    isScriptResource: function(element, inputNode, btnNode, scopeNode) {\n      var scriptType = getScriptType(scopeNode);\n      return scriptType === 'scriptResource';\n    },\n\n    isScript: function(element, inputNode, btnNode, scopeNode) {\n      var scriptType = getScriptType(scopeNode);\n      return scriptType === 'script';\n    }\n\n  };\n\n};\n"]},"metadata":{},"sourceType":"script"}