{"ast":null,"code":"'use strict';\n\nvar reduce = require('lodash/transform'),\n    is = require('bpmn-js/lib/util/ModelUtil').is,\n    keys = require('lodash/keys'),\n    forEach = require('lodash/forEach');\n/**\n * A handler that implements a BPMN 2.0 property update\n * for business objects which are not represented in the\n * diagram.\n *\n * This is useful in the context of the properties panel in\n * order to update child elements of elements visible in\n * the diagram.\n *\n * Example: perform an update of a specific event definition\n * of an intermediate event.\n *\n * @class\n * @constructor\n */\n\n\nfunction UpdateBusinessObjectHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\n\nUpdateBusinessObjectHandler.$inject = ['elementRegistry'];\nmodule.exports = UpdateBusinessObjectHandler;\n/**\n * returns the root element\n */\n\nfunction getRoot(businessObject) {\n  var parent = businessObject;\n\n  while (parent.$parent) {\n    parent = parent.$parent;\n  }\n\n  return parent;\n}\n\nfunction getProperties(businessObject, propertyNames) {\n  return reduce(propertyNames, function (result, key) {\n    result[key] = businessObject.get(key);\n    return result;\n  }, {});\n}\n\nfunction setProperties(businessObject, properties) {\n  forEach(properties, function (value, key) {\n    businessObject.set(key, value);\n  });\n} // api /////////////////////////////////////////////\n\n/**\n * Updates a business object with a list of new properties\n *\n * @method  UpdateBusinessObjectHandler#execute\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element the element which has a child business object updated\n * @param {moddle.businessObject} context.businessObject the businessObject to update\n * @param {Object} context.properties a list of properties to set on the businessObject\n *\n * @return {Array<djs.mode.Base>} the updated element\n */\n\n\nUpdateBusinessObjectHandler.prototype.execute = function (context) {\n  var element = context.element,\n      businessObject = context.businessObject,\n      rootElements = getRoot(businessObject).rootElements,\n      referenceType = context.referenceType,\n      referenceProperty = context.referenceProperty,\n      changed = [element]; // this will not change any diagram-js elements\n\n  if (!element) {\n    throw new Error('element required');\n  }\n\n  if (!businessObject) {\n    throw new Error('businessObject required');\n  }\n\n  var properties = context.properties,\n      oldProperties = context.oldProperties || getProperties(businessObject, keys(properties)); // check if there the update needs an external element for reference\n\n  if (typeof referenceType !== 'undefined' && typeof referenceProperty !== 'undefined') {\n    forEach(rootElements, function (rootElement) {\n      if (is(rootElement, referenceType)) {\n        if (rootElement.id === properties[referenceProperty]) {\n          properties[referenceProperty] = rootElement;\n        }\n      }\n    });\n  } // update properties\n\n\n  setProperties(businessObject, properties); // store old values\n\n  context.oldProperties = oldProperties;\n  context.changed = changed; // indicate changed on objects affected by the update\n\n  return changed;\n};\n/**\n * Reverts the update\n *\n * @method  UpdateBusinessObjectHandler#revert\n *\n * @param {Object} context\n *\n * @return {djs.mode.Base} the updated element\n */\n\n\nUpdateBusinessObjectHandler.prototype.revert = function (context) {\n  var oldProperties = context.oldProperties,\n      businessObject = context.businessObject; // update properties\n\n  setProperties(businessObject, oldProperties);\n  return context.changed;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/cmd/UpdateBusinessObjectHandler.js"],"names":["reduce","require","is","keys","forEach","UpdateBusinessObjectHandler","elementRegistry","_elementRegistry","$inject","module","exports","getRoot","businessObject","parent","$parent","getProperties","propertyNames","result","key","get","setProperties","properties","value","set","prototype","execute","context","element","rootElements","referenceType","referenceProperty","changed","Error","oldProperties","rootElement","id","revert"],"mappings":"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","sourcesContent":["'use strict';\n\nvar reduce = require('lodash/transform'),\n    is = require('bpmn-js/lib/util/ModelUtil').is,\n    keys = require('lodash/keys'),\n    forEach = require('lodash/forEach');\n\n/**\n * A handler that implements a BPMN 2.0 property update\n * for business objects which are not represented in the\n * diagram.\n *\n * This is useful in the context of the properties panel in\n * order to update child elements of elements visible in\n * the diagram.\n *\n * Example: perform an update of a specific event definition\n * of an intermediate event.\n *\n * @class\n * @constructor\n */\nfunction UpdateBusinessObjectHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\n\nUpdateBusinessObjectHandler.$inject = [ 'elementRegistry' ];\n\nmodule.exports = UpdateBusinessObjectHandler;\n\n/**\n * returns the root element\n */\nfunction getRoot(businessObject) {\n  var parent = businessObject;\n  while (parent.$parent) {\n    parent = parent.$parent;\n  }\n  return parent;\n}\n\nfunction getProperties(businessObject, propertyNames) {\n  return reduce(propertyNames, function(result, key) {\n    result[key] = businessObject.get(key);\n    return result;\n  }, {});\n}\n\n\nfunction setProperties(businessObject, properties) {\n  forEach(properties, function(value, key) {\n    businessObject.set(key, value);\n  });\n}\n\n\n// api /////////////////////////////////////////////\n\n/**\n * Updates a business object with a list of new properties\n *\n * @method  UpdateBusinessObjectHandler#execute\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element the element which has a child business object updated\n * @param {moddle.businessObject} context.businessObject the businessObject to update\n * @param {Object} context.properties a list of properties to set on the businessObject\n *\n * @return {Array<djs.mode.Base>} the updated element\n */\nUpdateBusinessObjectHandler.prototype.execute = function(context) {\n\n  var element = context.element,\n      businessObject = context.businessObject,\n      rootElements = getRoot(businessObject).rootElements,\n      referenceType = context.referenceType,\n      referenceProperty = context.referenceProperty,\n      changed = [ element ]; // this will not change any diagram-js elements\n\n  if (!element) {\n    throw new Error('element required');\n  }\n\n  if (!businessObject) {\n    throw new Error('businessObject required');\n  }\n\n  var properties = context.properties,\n      oldProperties = context.oldProperties || getProperties(businessObject, keys(properties));\n\n  // check if there the update needs an external element for reference\n  if (typeof referenceType !== 'undefined' && typeof referenceProperty !== 'undefined') {\n    forEach(rootElements, function(rootElement) {\n      if (is(rootElement, referenceType)) {\n        if (rootElement.id === properties[referenceProperty]) {\n          properties[referenceProperty] = rootElement;\n        }\n      }\n    });\n  }\n\n  // update properties\n  setProperties(businessObject, properties);\n\n  // store old values\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n/**\n * Reverts the update\n *\n * @method  UpdateBusinessObjectHandler#revert\n *\n * @param {Object} context\n *\n * @return {djs.mode.Base} the updated element\n */\nUpdateBusinessObjectHandler.prototype.revert = function(context) {\n\n  var oldProperties = context.oldProperties,\n      businessObject = context.businessObject;\n\n  // update properties\n  setProperties(businessObject, oldProperties);\n\n  return context.changed;\n};\n"]},"metadata":{},"sourceType":"script"}