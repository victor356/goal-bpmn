{"ast":null,"code":"import { closest as domClosest } from 'min-dom';\nimport { toPoint } from '../../util/Event';\n\nfunction getGfx(target) {\n  var node = domClosest(target, 'svg, .djs-element', true);\n  return node;\n}\n/**\n * Browsers may swallow the hover event if users are to\n * fast with the mouse.\n *\n * @see http://stackoverflow.com/questions/7448468/why-cant-i-reliably-capture-a-mouseout-event\n *\n * The fix implemented in this component ensure that we\n * have a hover state after a successive drag.move event.\n *\n * @param {EventBus} eventBus\n * @param {Dragging} dragging\n * @param {ElementRegistry} elementRegistry\n */\n\n\nexport default function HoverFix(eventBus, dragging, elementRegistry) {\n  var self = this; // we wait for a specific sequence of events before\n  // emitting a fake drag.hover event.\n  //\n  // Event Sequence:\n  //\n  // drag.start\n  // drag.move\n  // drag.move >> ensure we are hovering\n  //\n\n  eventBus.on('drag.start', function (event) {\n    eventBus.once('drag.move', function () {\n      eventBus.once('drag.move', function (event) {\n        self.ensureHover(event);\n      });\n    });\n  });\n  /**\n   * Make sure we are god damn hovering!\n   *\n   * @param {Event} dragging event\n   */\n\n  this.ensureHover = function (event) {\n    if (event.hover) {\n      return;\n    }\n\n    var originalEvent = event.originalEvent,\n        position,\n        target,\n        element,\n        gfx;\n\n    if (!(originalEvent instanceof MouseEvent)) {\n      return;\n    }\n\n    position = toPoint(originalEvent); // damn expensive operation, ouch!\n\n    target = document.elementFromPoint(position.x, position.y);\n    gfx = getGfx(target);\n\n    if (gfx) {\n      element = elementRegistry.get(gfx);\n      dragging.hover({\n        element: element,\n        gfx: gfx\n      });\n    }\n  };\n}\nHoverFix.$inject = ['eventBus', 'dragging', 'elementRegistry'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/features/dragging/HoverFix.js"],"names":["closest","domClosest","toPoint","getGfx","target","node","HoverFix","eventBus","dragging","elementRegistry","self","on","event","once","ensureHover","hover","originalEvent","position","element","gfx","MouseEvent","document","elementFromPoint","x","y","get","$inject"],"mappings":"AAAA,SACEA,OAAO,IAAIC,UADb,QAEO,SAFP;AAIA,SACEC,OADF,QAEO,kBAFP;;AAIA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACtB,MAAIC,IAAI,GAAGJ,UAAU,CAACG,MAAD,EAAS,mBAAT,EAA8B,IAA9B,CAArB;AACA,SAAOC,IAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,QAAT,CAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCC,eAAtC,EAAuD;AAEpE,MAAIC,IAAI,GAAG,IAAX,CAFoE,CAIpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,EAAAA,QAAQ,CAACI,EAAT,CAAY,YAAZ,EAA0B,UAASC,KAAT,EAAgB;AAExCL,IAAAA,QAAQ,CAACM,IAAT,CAAc,WAAd,EAA2B,YAAW;AAEpCN,MAAAA,QAAQ,CAACM,IAAT,CAAc,WAAd,EAA2B,UAASD,KAAT,EAAgB;AAEzCF,QAAAA,IAAI,CAACI,WAAL,CAAiBF,KAAjB;AACD,OAHD;AAID,KAND;AAOD,GATD;AAWA;AACF;AACA;AACA;AACA;;AACE,OAAKE,WAAL,GAAmB,UAASF,KAAT,EAAgB;AAEjC,QAAIA,KAAK,CAACG,KAAV,EAAiB;AACf;AACD;;AAED,QAAIC,aAAa,GAAGJ,KAAK,CAACI,aAA1B;AAAA,QACIC,QADJ;AAAA,QAEIb,MAFJ;AAAA,QAGIc,OAHJ;AAAA,QAIIC,GAJJ;;AAMA,QAAI,EAAEH,aAAa,YAAYI,UAA3B,CAAJ,EAA4C;AAC1C;AACD;;AAEDH,IAAAA,QAAQ,GAAGf,OAAO,CAACc,aAAD,CAAlB,CAhBiC,CAkBjC;;AACAZ,IAAAA,MAAM,GAAGiB,QAAQ,CAACC,gBAAT,CAA0BL,QAAQ,CAACM,CAAnC,EAAsCN,QAAQ,CAACO,CAA/C,CAAT;AAEAL,IAAAA,GAAG,GAAGhB,MAAM,CAACC,MAAD,CAAZ;;AAEA,QAAIe,GAAJ,EAAS;AACPD,MAAAA,OAAO,GAAGT,eAAe,CAACgB,GAAhB,CAAoBN,GAApB,CAAV;AAEAX,MAAAA,QAAQ,CAACO,KAAT,CAAe;AAAEG,QAAAA,OAAO,EAAEA,OAAX;AAAoBC,QAAAA,GAAG,EAAEA;AAAzB,OAAf;AACD;AACF,GA5BD;AA8BD;AAEDb,QAAQ,CAACoB,OAAT,GAAmB,CACjB,UADiB,EAEjB,UAFiB,EAGjB,iBAHiB,CAAnB","sourcesContent":["import {\n  closest as domClosest\n} from 'min-dom';\n\nimport {\n  toPoint\n} from '../../util/Event';\n\nfunction getGfx(target) {\n  var node = domClosest(target, 'svg, .djs-element', true);\n  return node;\n}\n\n\n/**\n * Browsers may swallow the hover event if users are to\n * fast with the mouse.\n *\n * @see http://stackoverflow.com/questions/7448468/why-cant-i-reliably-capture-a-mouseout-event\n *\n * The fix implemented in this component ensure that we\n * have a hover state after a successive drag.move event.\n *\n * @param {EventBus} eventBus\n * @param {Dragging} dragging\n * @param {ElementRegistry} elementRegistry\n */\nexport default function HoverFix(eventBus, dragging, elementRegistry) {\n\n  var self = this;\n\n  // we wait for a specific sequence of events before\n  // emitting a fake drag.hover event.\n  //\n  // Event Sequence:\n  //\n  // drag.start\n  // drag.move\n  // drag.move >> ensure we are hovering\n  //\n  eventBus.on('drag.start', function(event) {\n\n    eventBus.once('drag.move', function() {\n\n      eventBus.once('drag.move', function(event) {\n\n        self.ensureHover(event);\n      });\n    });\n  });\n\n  /**\n   * Make sure we are god damn hovering!\n   *\n   * @param {Event} dragging event\n   */\n  this.ensureHover = function(event) {\n\n    if (event.hover) {\n      return;\n    }\n\n    var originalEvent = event.originalEvent,\n        position,\n        target,\n        element,\n        gfx;\n\n    if (!(originalEvent instanceof MouseEvent)) {\n      return;\n    }\n\n    position = toPoint(originalEvent);\n\n    // damn expensive operation, ouch!\n    target = document.elementFromPoint(position.x, position.y);\n\n    gfx = getGfx(target);\n\n    if (gfx) {\n      element = elementRegistry.get(gfx);\n\n      dragging.hover({ element: element, gfx: gfx });\n    }\n  };\n\n}\n\nHoverFix.$inject = [\n  'eventBus',\n  'dragging',\n  'elementRegistry'\n];\n"]},"metadata":{},"sourceType":"module"}