{"ast":null,"code":"'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;\n\nvar entryFactory = require('../../../../factory/EntryFactory');\n\nvar elementHelper = require('../../../../helper/ElementHelper'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar domClasses = require('min-dom').classes;\n/**\n * Get a property value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n * @param {string} propertyName\n *\n * @return {any} the property value\n */\n\n\nfunction getProperty(element, propertyName) {\n  var loopCharacteristics = getLoopCharacteristics(element);\n  return loopCharacteristics && loopCharacteristics.get(propertyName);\n}\n/**\n * Get the body of a given expression.\n *\n * @param {ModdleElement<bpmn:FormalExpression>} expression\n *\n * @return {string} the body (value) of the expression\n */\n\n\nfunction getBody(expression) {\n  return expression && expression.get('body');\n}\n/**\n * Get the loop characteristics of an element.\n *\n * @param {djs.model.Base} element\n *\n * @return {ModdleElement<bpmn:MultiInstanceLoopCharacteristics>} the loop characteristics\n */\n\n\nfunction getLoopCharacteristics(element) {\n  var bo = getBusinessObject(element);\n  return bo.loopCharacteristics;\n}\n/**\n * Get the loop cardinality of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the loop cardinality\n */\n\n\nfunction getLoopCardinality(element) {\n  return getProperty(element, 'loopCardinality');\n}\n/**\n * Get the loop cardinality value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {string} the loop cardinality value\n */\n\n\nfunction getLoopCardinalityValue(element) {\n  var loopCardinality = getLoopCardinality(element);\n  return getBody(loopCardinality);\n}\n/**\n * Get the completion condition of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the completion condition\n */\n\n\nfunction getCompletionCondition(element) {\n  return getProperty(element, 'completionCondition');\n}\n/**\n * Get the completion condition value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {string} the completion condition value\n */\n\n\nfunction getCompletionConditionValue(element) {\n  var completionCondition = getCompletionCondition(element);\n  return getBody(completionCondition);\n}\n/**\n * Get the 'camunda:collection' attribute value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {string} the 'camunda:collection' value\n */\n\n\nfunction getCollection(element) {\n  return getProperty(element, 'camunda:collection');\n}\n/**\n * Get the 'camunda:elementVariable' attribute value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {string} the 'camunda:elementVariable' value\n */\n\n\nfunction getElementVariable(element) {\n  return getProperty(element, 'camunda:elementVariable');\n}\n/**\n * Creates 'bpmn:FormalExpression' element.\n *\n * @param {ModdleElement} parent\n * @param {string} body\n * @param {BpmnFactory} bpmnFactory\n *\n * @result {ModdleElement<bpmn:FormalExpression>} a formal expression\n */\n\n\nfunction createFormalExpression(parent, body, bpmnFactory) {\n  return elementHelper.createElement('bpmn:FormalExpression', {\n    body: body\n  }, parent, bpmnFactory);\n}\n/**\n * Updates a specific formal expression of the loop characteristics.\n *\n * @param {djs.model.Base} element\n * @param {string} propertyName\n * @param {string} newValue\n * @param {BpmnFactory} bpmnFactory\n */\n\n\nfunction updateFormalExpression(element, propertyName, newValue, bpmnFactory) {\n  var loopCharacteristics = getLoopCharacteristics(element);\n  var expressionProps = {};\n\n  if (!newValue) {\n    // remove formal expression\n    expressionProps[propertyName] = undefined;\n    return cmdHelper.updateBusinessObject(element, loopCharacteristics, expressionProps);\n  }\n\n  var existingExpression = loopCharacteristics.get(propertyName);\n\n  if (!existingExpression) {\n    // add formal expression\n    expressionProps[propertyName] = createFormalExpression(loopCharacteristics, newValue, bpmnFactory);\n    return cmdHelper.updateBusinessObject(element, loopCharacteristics, expressionProps);\n  } // edit existing formal expression\n\n\n  return cmdHelper.updateBusinessObject(element, existingExpression, {\n    body: newValue\n  });\n}\n\nmodule.exports = function (element, bpmnFactory, translate) {\n  var entries = []; // error message /////////////////////////////////////////////////////////////////\n\n  entries.push({\n    id: 'multiInstance-errorMessage',\n    html: '<div data-show=\"isValid\">' + '<span class=\"bpp-icon-warning\"></span> ' + translate('Must provide either loop cardinality or collection') + '</div>',\n    isValid: function (element, node, notification, scope) {\n      var loopCharacteristics = getLoopCharacteristics(element);\n      var isValid = true;\n\n      if (loopCharacteristics) {\n        var loopCardinality = getLoopCardinalityValue(element);\n        var collection = getCollection(element);\n        isValid = !loopCardinality && !collection;\n      }\n\n      domClasses(node).toggle('bpp-hidden', !isValid);\n      domClasses(notification).toggle('bpp-error-message', isValid);\n      return isValid;\n    }\n  }); // loop cardinality //////////////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textField({\n    id: 'multiInstance-loopCardinality',\n    label: translate('Loop Cardinality'),\n    modelProperty: 'loopCardinality',\n    get: function (element, node) {\n      return {\n        loopCardinality: getLoopCardinalityValue(element)\n      };\n    },\n    set: function (element, values) {\n      return updateFormalExpression(element, 'loopCardinality', values.loopCardinality, bpmnFactory);\n    }\n  })); // collection //////////////////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textField({\n    id: 'multiInstance-collection',\n    label: translate('Collection'),\n    modelProperty: 'collection',\n    get: function (element, node) {\n      return {\n        collection: getCollection(element)\n      };\n    },\n    set: function (element, values) {\n      var loopCharacteristics = getLoopCharacteristics(element);\n      return cmdHelper.updateBusinessObject(element, loopCharacteristics, {\n        'camunda:collection': values.collection || undefined\n      });\n    },\n    validate: function (element, values, node) {\n      var collection = getCollection(element);\n      var elementVariable = getElementVariable(element);\n\n      if (!collection && elementVariable) {\n        return {\n          collection: 'Must provide a value'\n        };\n      }\n    }\n  })); // element variable ////////////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textField({\n    id: 'multiInstance-elementVariable',\n    label: translate('Element Variable'),\n    modelProperty: 'elementVariable',\n    get: function (element, node) {\n      return {\n        elementVariable: getElementVariable(element)\n      };\n    },\n    set: function (element, values) {\n      var loopCharacteristics = getLoopCharacteristics(element);\n      return cmdHelper.updateBusinessObject(element, loopCharacteristics, {\n        'camunda:elementVariable': values.elementVariable || undefined\n      });\n    }\n  })); // Completion Condition //////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textField({\n    id: 'multiInstance-completionCondition',\n    label: translate('Completion Condition'),\n    modelProperty: 'completionCondition',\n    get: function (element) {\n      return {\n        completionCondition: getCompletionConditionValue(element)\n      };\n    },\n    set: function (element, values) {\n      return updateFormalExpression(element, 'completionCondition', values.completionCondition, bpmnFactory);\n    }\n  }));\n  return entries;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/implementation/MultiInstanceLoopCharacteristics.js"],"names":["getBusinessObject","require","entryFactory","elementHelper","cmdHelper","domClasses","classes","getProperty","element","propertyName","loopCharacteristics","getLoopCharacteristics","get","getBody","expression","bo","getLoopCardinality","getLoopCardinalityValue","loopCardinality","getCompletionCondition","getCompletionConditionValue","completionCondition","getCollection","getElementVariable","createFormalExpression","parent","body","bpmnFactory","createElement","updateFormalExpression","newValue","expressionProps","undefined","updateBusinessObject","existingExpression","module","exports","translate","entries","push","id","html","isValid","node","notification","scope","collection","toggle","textField","label","modelProperty","set","values","validate","elementVariable"],"mappings":"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","sourcesContent":["'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;\n\nvar entryFactory = require('../../../../factory/EntryFactory');\n\nvar elementHelper = require('../../../../helper/ElementHelper'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar domClasses = require('min-dom').classes;\n\n/**\n * Get a property value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n * @param {string} propertyName\n *\n * @return {any} the property value\n */\nfunction getProperty(element, propertyName) {\n  var loopCharacteristics = getLoopCharacteristics(element);\n  return loopCharacteristics && loopCharacteristics.get(propertyName);\n}\n\n/**\n * Get the body of a given expression.\n *\n * @param {ModdleElement<bpmn:FormalExpression>} expression\n *\n * @return {string} the body (value) of the expression\n */\nfunction getBody(expression) {\n  return expression && expression.get('body');\n}\n\n\n/**\n * Get the loop characteristics of an element.\n *\n * @param {djs.model.Base} element\n *\n * @return {ModdleElement<bpmn:MultiInstanceLoopCharacteristics>} the loop characteristics\n */\nfunction getLoopCharacteristics(element) {\n  var bo = getBusinessObject(element);\n  return bo.loopCharacteristics;\n}\n\n/**\n * Get the loop cardinality of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the loop cardinality\n */\nfunction getLoopCardinality(element) {\n  return getProperty(element, 'loopCardinality');\n}\n\n/**\n * Get the loop cardinality value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {string} the loop cardinality value\n */\nfunction getLoopCardinalityValue(element) {\n  var loopCardinality = getLoopCardinality(element);\n  return getBody(loopCardinality);\n}\n\n/**\n * Get the completion condition of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the completion condition\n */\nfunction getCompletionCondition(element) {\n  return getProperty(element, 'completionCondition');\n}\n\n/**\n * Get the completion condition value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {string} the completion condition value\n */\nfunction getCompletionConditionValue(element) {\n  var completionCondition = getCompletionCondition(element);\n  return getBody(completionCondition);\n}\n\n/**\n * Get the 'camunda:collection' attribute value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {string} the 'camunda:collection' value\n */\nfunction getCollection(element) {\n  return getProperty(element, 'camunda:collection');\n}\n\n/**\n * Get the 'camunda:elementVariable' attribute value of the loop characteristics.\n *\n * @param {djs.model.Base} element\n *\n * @return {string} the 'camunda:elementVariable' value\n */\nfunction getElementVariable(element) {\n  return getProperty(element, 'camunda:elementVariable');\n}\n\n\n/**\n * Creates 'bpmn:FormalExpression' element.\n *\n * @param {ModdleElement} parent\n * @param {string} body\n * @param {BpmnFactory} bpmnFactory\n *\n * @result {ModdleElement<bpmn:FormalExpression>} a formal expression\n */\nfunction createFormalExpression(parent, body, bpmnFactory) {\n  return elementHelper.createElement('bpmn:FormalExpression', { body: body }, parent, bpmnFactory);\n}\n\n/**\n * Updates a specific formal expression of the loop characteristics.\n *\n * @param {djs.model.Base} element\n * @param {string} propertyName\n * @param {string} newValue\n * @param {BpmnFactory} bpmnFactory\n */\nfunction updateFormalExpression(element, propertyName, newValue, bpmnFactory) {\n  var loopCharacteristics = getLoopCharacteristics(element);\n\n  var expressionProps = {};\n\n  if (!newValue) {\n    // remove formal expression\n    expressionProps[propertyName] = undefined;\n    return cmdHelper.updateBusinessObject(element, loopCharacteristics, expressionProps);\n  }\n\n  var existingExpression = loopCharacteristics.get(propertyName);\n\n  if (!existingExpression) {\n    // add formal expression\n    expressionProps[propertyName] = createFormalExpression(loopCharacteristics, newValue, bpmnFactory);\n    return cmdHelper.updateBusinessObject(element, loopCharacteristics, expressionProps);\n  }\n\n  // edit existing formal expression\n  return cmdHelper.updateBusinessObject(element, existingExpression, {\n    body: newValue\n  });\n}\n\n\nmodule.exports = function(element, bpmnFactory, translate) {\n\n  var entries = [];\n\n  // error message /////////////////////////////////////////////////////////////////\n\n  entries.push({\n    id: 'multiInstance-errorMessage',\n    html: '<div data-show=\"isValid\">' +\n             '<span class=\"bpp-icon-warning\"></span> ' +\n             translate('Must provide either loop cardinality or collection') +\n          '</div>',\n\n    isValid: function(element, node, notification, scope) {\n      var loopCharacteristics = getLoopCharacteristics(element);\n\n      var isValid = true;\n      if (loopCharacteristics) {\n        var loopCardinality = getLoopCardinalityValue(element);\n        var collection = getCollection(element);\n\n        isValid = !loopCardinality && !collection;\n      }\n\n      domClasses(node).toggle('bpp-hidden', !isValid);\n      domClasses(notification).toggle('bpp-error-message', isValid);\n\n      return isValid;\n    }\n  });\n\n  // loop cardinality //////////////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textField({\n    id: 'multiInstance-loopCardinality',\n    label: translate('Loop Cardinality'),\n    modelProperty: 'loopCardinality',\n\n    get: function(element, node) {\n      return {\n        loopCardinality: getLoopCardinalityValue(element)\n      };\n    },\n\n    set: function(element, values) {\n      return updateFormalExpression(element, 'loopCardinality', values.loopCardinality, bpmnFactory);\n    }\n  }));\n\n\n  // collection //////////////////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textField({\n    id: 'multiInstance-collection',\n    label: translate('Collection'),\n    modelProperty: 'collection',\n\n    get: function(element, node) {\n      return {\n        collection: getCollection(element)\n      };\n    },\n\n    set: function(element, values) {\n      var loopCharacteristics = getLoopCharacteristics(element);\n      return cmdHelper.updateBusinessObject(element, loopCharacteristics, {\n        'camunda:collection': values.collection || undefined\n      });\n    },\n\n    validate: function(element, values, node) {\n      var collection = getCollection(element);\n      var elementVariable = getElementVariable(element);\n\n      if (!collection && elementVariable) {\n        return { collection : 'Must provide a value' };\n      }\n    }\n  }));\n\n\n  // element variable ////////////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textField({\n    id: 'multiInstance-elementVariable',\n    label: translate('Element Variable'),\n    modelProperty: 'elementVariable',\n\n    get: function(element, node) {\n      return {\n        elementVariable: getElementVariable(element)\n      };\n    },\n\n    set: function(element, values) {\n      var loopCharacteristics = getLoopCharacteristics(element);\n      return cmdHelper.updateBusinessObject(element, loopCharacteristics, {\n        'camunda:elementVariable': values.elementVariable || undefined\n      });\n    }\n  }));\n\n\n  // Completion Condition //////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textField({\n    id: 'multiInstance-completionCondition',\n    label: translate('Completion Condition'),\n    modelProperty: 'completionCondition',\n\n    get: function(element) {\n      return {\n        completionCondition: getCompletionConditionValue(element)\n      };\n    },\n\n    set: function(element, values) {\n      return updateFormalExpression(element, 'completionCondition', values.completionCondition, bpmnFactory);\n    }\n  }));\n\n  return entries;\n\n};\n"]},"metadata":{},"sourceType":"script"}