{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { delegate as domDelegate, query as domQuery } from 'min-dom';\nimport { isPrimaryButton } from '../../util/Mouse';\nimport { append as svgAppend, attr as svgAttr, create as svgCreate } from 'tiny-svg';\nimport { createLine, updateLine } from '../../util/RenderUtil';\n\nfunction allowAll(e) {\n  return true;\n}\n\nvar LOW_PRIORITY = 500;\n/**\n * A plugin that provides interaction events for diagram elements.\n *\n * It emits the following events:\n *\n *   * element.hover\n *   * element.out\n *   * element.click\n *   * element.dblclick\n *   * element.mousedown\n *   * element.contextmenu\n *\n * Each event is a tuple { element, gfx, originalEvent }.\n *\n * Canceling the event via Event#preventDefault()\n * prevents the original DOM operation.\n *\n * @param {EventBus} eventBus\n */\n\nexport default function InteractionEvents(eventBus, elementRegistry, styles) {\n  var HIT_STYLE = styles.cls('djs-hit', ['no-fill', 'no-border'], {\n    stroke: 'white',\n    strokeWidth: 15\n  });\n  /**\n   * Fire an interaction event.\n   *\n   * @param {String} type local event name, e.g. element.click.\n   * @param {DOMEvent} event native event\n   * @param {djs.model.Base} [element] the diagram element to emit the event on;\n   *                                   defaults to the event target\n   */\n\n  function fire(type, event, element) {\n    if (isIgnored(type, event)) {\n      return;\n    }\n\n    var target, gfx, returnValue;\n\n    if (!element) {\n      target = event.delegateTarget || event.target;\n\n      if (target) {\n        gfx = target;\n        element = elementRegistry.get(gfx);\n      }\n    } else {\n      gfx = elementRegistry.getGraphics(element);\n    }\n\n    if (!gfx || !element) {\n      return;\n    }\n\n    returnValue = eventBus.fire(type, {\n      element: element,\n      gfx: gfx,\n      originalEvent: event\n    });\n\n    if (returnValue === false) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  } // TODO(nikku): document this\n\n\n  var handlers = {};\n\n  function mouseHandler(localEventName) {\n    return handlers[localEventName];\n  }\n\n  function isIgnored(localEventName, event) {\n    var filter = ignoredFilters[localEventName] || isPrimaryButton; // only react on left mouse button interactions\n    // except for interaction events that are enabled\n    // for secundary mouse button\n\n    return !filter(event);\n  }\n\n  var bindings = {\n    mouseover: 'element.hover',\n    mouseout: 'element.out',\n    click: 'element.click',\n    dblclick: 'element.dblclick',\n    mousedown: 'element.mousedown',\n    mouseup: 'element.mouseup',\n    contextmenu: 'element.contextmenu'\n  };\n  var ignoredFilters = {\n    'element.contextmenu': allowAll\n  }; // manual event trigger\n\n  /**\n   * Trigger an interaction event (based on a native dom event)\n   * on the target shape or connection.\n   *\n   * @param {String} eventName the name of the triggered DOM event\n   * @param {MouseEvent} event\n   * @param {djs.model.Base} targetElement\n   */\n\n  function triggerMouseEvent(eventName, event, targetElement) {\n    // i.e. element.mousedown...\n    var localEventName = bindings[eventName];\n\n    if (!localEventName) {\n      throw new Error('unmapped DOM event name <' + eventName + '>');\n    }\n\n    return fire(localEventName, event, targetElement);\n  }\n\n  var elementSelector = 'svg, .djs-element'; // event registration\n\n  function registerEvent(node, event, localEvent, ignoredFilter) {\n    var handler = handlers[localEvent] = function (event) {\n      fire(localEvent, event);\n    };\n\n    if (ignoredFilter) {\n      ignoredFilters[localEvent] = ignoredFilter;\n    }\n\n    handler.$delegate = domDelegate.bind(node, elementSelector, event, handler);\n  }\n\n  function unregisterEvent(node, event, localEvent) {\n    var handler = mouseHandler(localEvent);\n\n    if (!handler) {\n      return;\n    }\n\n    domDelegate.unbind(node, event, handler.$delegate);\n  }\n\n  function registerEvents(svg) {\n    forEach(bindings, function (val, key) {\n      registerEvent(svg, key, val);\n    });\n  }\n\n  function unregisterEvents(svg) {\n    forEach(bindings, function (val, key) {\n      unregisterEvent(svg, key, val);\n    });\n  }\n\n  eventBus.on('canvas.destroy', function (event) {\n    unregisterEvents(event.svg);\n  });\n  eventBus.on('canvas.init', function (event) {\n    registerEvents(event.svg);\n  });\n  eventBus.on(['shape.added', 'connection.added'], function (event) {\n    var element = event.element,\n        gfx = event.gfx,\n        hit;\n\n    if (element.waypoints) {\n      hit = createLine(element.waypoints);\n    } else {\n      hit = svgCreate('rect');\n      svgAttr(hit, {\n        x: 0,\n        y: 0,\n        width: element.width,\n        height: element.height\n      });\n    }\n\n    svgAttr(hit, HIT_STYLE);\n    svgAppend(gfx, hit);\n  }); // Update djs-hit on change.\n  // A low priortity is necessary, because djs-hit of labels has to be updated\n  // after the label bounds have been updated in the renderer.\n\n  eventBus.on('shape.changed', LOW_PRIORITY, function (event) {\n    var element = event.element,\n        gfx = event.gfx,\n        hit = domQuery('.djs-hit', gfx);\n    svgAttr(hit, {\n      width: element.width,\n      height: element.height\n    });\n  });\n  eventBus.on('connection.changed', function (event) {\n    var element = event.element,\n        gfx = event.gfx,\n        hit = domQuery('.djs-hit', gfx);\n    updateLine(hit, element.waypoints);\n  }); // API\n\n  this.fire = fire;\n  this.triggerMouseEvent = triggerMouseEvent;\n  this.mouseHandler = mouseHandler;\n  this.registerEvent = registerEvent;\n  this.unregisterEvent = unregisterEvent;\n}\nInteractionEvents.$inject = ['eventBus', 'elementRegistry', 'styles'];\n/**\n * An event indicating that the mouse hovered over an element\n *\n * @event element.hover\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has left an element\n *\n * @event element.out\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has clicked an element\n *\n * @event element.click\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has double clicked an element\n *\n * @event element.dblclick\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has gone down on an element.\n *\n * @event element.mousedown\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has gone up on an element.\n *\n * @event element.mouseup\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the context menu action is triggered\n * via mouse or touch controls.\n *\n * @event element.contextmenu\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/features/interaction-events/InteractionEvents.js"],"names":["forEach","delegate","domDelegate","query","domQuery","isPrimaryButton","append","svgAppend","attr","svgAttr","create","svgCreate","createLine","updateLine","allowAll","e","LOW_PRIORITY","InteractionEvents","eventBus","elementRegistry","styles","HIT_STYLE","cls","stroke","strokeWidth","fire","type","event","element","isIgnored","target","gfx","returnValue","delegateTarget","get","getGraphics","originalEvent","stopPropagation","preventDefault","handlers","mouseHandler","localEventName","filter","ignoredFilters","bindings","mouseover","mouseout","click","dblclick","mousedown","mouseup","contextmenu","triggerMouseEvent","eventName","targetElement","Error","elementSelector","registerEvent","node","localEvent","ignoredFilter","handler","$delegate","bind","unregisterEvent","unbind","registerEvents","svg","val","key","unregisterEvents","on","hit","waypoints","x","y","width","height","$inject"],"mappings":"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Ab,CAFlB;AAIAlB,IAAAA,UAAU,CAAC2D,GAAD,EAAM5C,OAAO,CAAC6C,SAAd,CAAV;AACD,GAPD,EA/L2E,CAyM3E;;AAEA,OAAKhD,IAAL,GAAYA,IAAZ;AAEA,OAAK2B,iBAAL,GAAyBA,iBAAzB;AAEA,OAAKZ,YAAL,GAAoBA,YAApB;AAEA,OAAKiB,aAAL,GAAqBA,aAArB;AACA,OAAKO,eAAL,GAAuBA,eAAvB;AACD;AAGD/C,iBAAiB,CAAC6D,OAAlB,GAA4B,CAC1B,UAD0B,EAE1B,iBAF0B,EAG1B,QAH0B,CAA5B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\n  forEach\n} from 'min-dash';\n\nimport {\n  delegate as domDelegate,\n  query as domQuery\n} from 'min-dom';\n\nimport { isPrimaryButton } from '../../util/Mouse';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  create as svgCreate\n} from 'tiny-svg';\n\nimport {\n  createLine,\n  updateLine\n} from '../../util/RenderUtil';\n\nfunction allowAll(e) { return true; }\n\nvar LOW_PRIORITY = 500;\n\n/**\n * A plugin that provides interaction events for diagram elements.\n *\n * It emits the following events:\n *\n *   * element.hover\n *   * element.out\n *   * element.click\n *   * element.dblclick\n *   * element.mousedown\n *   * element.contextmenu\n *\n * Each event is a tuple { element, gfx, originalEvent }.\n *\n * Canceling the event via Event#preventDefault()\n * prevents the original DOM operation.\n *\n * @param {EventBus} eventBus\n */\nexport default function InteractionEvents(eventBus, elementRegistry, styles) {\n\n  var HIT_STYLE = styles.cls('djs-hit', [ 'no-fill', 'no-border' ], {\n    stroke: 'white',\n    strokeWidth: 15\n  });\n\n  /**\n   * Fire an interaction event.\n   *\n   * @param {String} type local event name, e.g. element.click.\n   * @param {DOMEvent} event native event\n   * @param {djs.model.Base} [element] the diagram element to emit the event on;\n   *                                   defaults to the event target\n   */\n  function fire(type, event, element) {\n\n    if (isIgnored(type, event)) {\n      return;\n    }\n\n    var target, gfx, returnValue;\n\n    if (!element) {\n      target = event.delegateTarget || event.target;\n\n      if (target) {\n        gfx = target;\n        element = elementRegistry.get(gfx);\n      }\n    } else {\n      gfx = elementRegistry.getGraphics(element);\n    }\n\n    if (!gfx || !element) {\n      return;\n    }\n\n    returnValue = eventBus.fire(type, {\n      element: element,\n      gfx: gfx,\n      originalEvent: event\n    });\n\n    if (returnValue === false) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n\n  // TODO(nikku): document this\n  var handlers = {};\n\n  function mouseHandler(localEventName) {\n    return handlers[localEventName];\n  }\n\n  function isIgnored(localEventName, event) {\n\n    var filter = ignoredFilters[localEventName] || isPrimaryButton;\n\n    // only react on left mouse button interactions\n    // except for interaction events that are enabled\n    // for secundary mouse button\n    return !filter(event);\n  }\n\n  var bindings = {\n    mouseover: 'element.hover',\n    mouseout: 'element.out',\n    click: 'element.click',\n    dblclick: 'element.dblclick',\n    mousedown: 'element.mousedown',\n    mouseup: 'element.mouseup',\n    contextmenu: 'element.contextmenu'\n  };\n\n  var ignoredFilters = {\n    'element.contextmenu': allowAll\n  };\n\n\n  // manual event trigger\n\n  /**\n   * Trigger an interaction event (based on a native dom event)\n   * on the target shape or connection.\n   *\n   * @param {String} eventName the name of the triggered DOM event\n   * @param {MouseEvent} event\n   * @param {djs.model.Base} targetElement\n   */\n  function triggerMouseEvent(eventName, event, targetElement) {\n\n    // i.e. element.mousedown...\n    var localEventName = bindings[eventName];\n\n    if (!localEventName) {\n      throw new Error('unmapped DOM event name <' + eventName + '>');\n    }\n\n    return fire(localEventName, event, targetElement);\n  }\n\n\n  var elementSelector = 'svg, .djs-element';\n\n  // event registration\n\n  function registerEvent(node, event, localEvent, ignoredFilter) {\n\n    var handler = handlers[localEvent] = function(event) {\n      fire(localEvent, event);\n    };\n\n    if (ignoredFilter) {\n      ignoredFilters[localEvent] = ignoredFilter;\n    }\n\n    handler.$delegate = domDelegate.bind(node, elementSelector, event, handler);\n  }\n\n  function unregisterEvent(node, event, localEvent) {\n\n    var handler = mouseHandler(localEvent);\n\n    if (!handler) {\n      return;\n    }\n\n    domDelegate.unbind(node, event, handler.$delegate);\n  }\n\n  function registerEvents(svg) {\n    forEach(bindings, function(val, key) {\n      registerEvent(svg, key, val);\n    });\n  }\n\n  function unregisterEvents(svg) {\n    forEach(bindings, function(val, key) {\n      unregisterEvent(svg, key, val);\n    });\n  }\n\n  eventBus.on('canvas.destroy', function(event) {\n    unregisterEvents(event.svg);\n  });\n\n  eventBus.on('canvas.init', function(event) {\n    registerEvents(event.svg);\n  });\n\n\n  eventBus.on([ 'shape.added', 'connection.added' ], function(event) {\n    var element = event.element,\n        gfx = event.gfx,\n        hit;\n\n    if (element.waypoints) {\n      hit = createLine(element.waypoints);\n    } else {\n      hit = svgCreate('rect');\n      svgAttr(hit, {\n        x: 0,\n        y: 0,\n        width: element.width,\n        height: element.height\n      });\n    }\n\n    svgAttr(hit, HIT_STYLE);\n\n    svgAppend(gfx, hit);\n  });\n\n  // Update djs-hit on change.\n  // A low priortity is necessary, because djs-hit of labels has to be updated\n  // after the label bounds have been updated in the renderer.\n  eventBus.on('shape.changed', LOW_PRIORITY, function(event) {\n\n    var element = event.element,\n        gfx = event.gfx,\n        hit = domQuery('.djs-hit', gfx);\n\n    svgAttr(hit, {\n      width: element.width,\n      height: element.height\n    });\n  });\n\n  eventBus.on('connection.changed', function(event) {\n\n    var element = event.element,\n        gfx = event.gfx,\n        hit = domQuery('.djs-hit', gfx);\n\n    updateLine(hit, element.waypoints);\n  });\n\n\n  // API\n\n  this.fire = fire;\n\n  this.triggerMouseEvent = triggerMouseEvent;\n\n  this.mouseHandler = mouseHandler;\n\n  this.registerEvent = registerEvent;\n  this.unregisterEvent = unregisterEvent;\n}\n\n\nInteractionEvents.$inject = [\n  'eventBus',\n  'elementRegistry',\n  'styles'\n];\n\n\n/**\n * An event indicating that the mouse hovered over an element\n *\n * @event element.hover\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has left an element\n *\n * @event element.out\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has clicked an element\n *\n * @event element.click\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has double clicked an element\n *\n * @event element.dblclick\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has gone down on an element.\n *\n * @event element.mousedown\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the mouse has gone up on an element.\n *\n * @event element.mouseup\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */\n\n/**\n * An event indicating that the context menu action is triggered\n * via mouse or touch controls.\n *\n * @event element.contextmenu\n *\n * @type {Object}\n * @property {djs.model.Base} element\n * @property {SVGElement} gfx\n * @property {Event} originalEvent\n */"]},"metadata":{},"sourceType":"module"}