{"ast":null,"code":"'use strict';\n\nvar domify = require('min-dom').domify,\n    domQuery = require('min-dom').query,\n    domQueryAll = require('min-dom').queryAll,\n    domRemove = require('min-dom').remove,\n    domClasses = require('min-dom').classes,\n    domClosest = require('min-dom').closest,\n    domAttr = require('min-dom').attr,\n    domDelegate = require('min-dom').delegate,\n    domMatches = require('min-dom').matches;\n\nvar forEach = require('lodash/forEach'),\n    filter = require('lodash/filter'),\n    get = require('lodash/get'),\n    keys = require('lodash/keys'),\n    isEmpty = require('lodash/isEmpty'),\n    isArray = require('lodash/isArray'),\n    xor = require('lodash/xor'),\n    debounce = require('lodash/debounce');\n\nvar updateSelection = require('selection-update');\n\nvar scrollTabs = require('scroll-tabs').default;\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;\n\nvar HIDE_CLASS = 'bpp-hidden';\nvar DEBOUNCE_DELAY = 300;\n\nfunction isToggle(node) {\n  return node.type === 'checkbox' || node.type === 'radio';\n}\n\nfunction isSelect(node) {\n  return node.type === 'select-one';\n}\n\nfunction isContentEditable(node) {\n  return domAttr(node, 'contenteditable');\n}\n\nfunction getPropertyPlaceholders(node) {\n  var selector = 'input[name], textarea[name], [data-value], [contenteditable]';\n  var placeholders = domQueryAll(selector, node);\n\n  if ((!placeholders || !placeholders.length) && domMatches(node, selector)) {\n    placeholders = [node];\n  }\n\n  return placeholders;\n}\n/**\n * Return all active form controls.\n * This excludes the invisible controls unless all is true\n *\n * @param {Element} node\n * @param {Boolean} [all=false]\n */\n\n\nfunction getFormControls(node, all) {\n  var controls = domQueryAll('input[name], textarea[name], select[name], [contenteditable]', node);\n\n  if (!controls || !controls.length) {\n    controls = domMatches(node, 'option') ? [node] : controls;\n  }\n\n  if (!all) {\n    controls = filter(controls, function (node) {\n      return !domClosest(node, '.' + HIDE_CLASS);\n    });\n  }\n\n  return controls;\n}\n\nfunction getFormControlValuesInScope(entryNode) {\n  var values = {};\n  var controlNodes = getFormControls(entryNode);\n  forEach(controlNodes, function (controlNode) {\n    var value = controlNode.value;\n    var name = domAttr(controlNode, 'name') || domAttr(controlNode, 'data-name'); // take toggle state into account for radio / checkboxes\n\n    if (isToggle(controlNode)) {\n      if (controlNode.checked) {\n        if (!domAttr(controlNode, 'value')) {\n          value = true;\n        } else {\n          value = controlNode.value;\n        }\n      } else {\n        value = null;\n      }\n    } else if (isContentEditable(controlNode)) {\n      value = controlNode.innerText;\n    }\n\n    if (value !== null) {\n      // return the actual value\n      // handle serialization in entry provider\n      // (ie. if empty string should be serialized or not)\n      values[name] = value;\n    }\n  });\n  return values;\n}\n/**\n * Extract input values from entry node\n *\n * @param  {DOMElement} entryNode\n * @returns {Object}\n */\n\n\nfunction getFormControlValues(entryNode) {\n  var values;\n  var listContainer = domQuery('[data-list-entry-container]', entryNode);\n\n  if (listContainer) {\n    values = [];\n    var listNodes = listContainer.children || [];\n    forEach(listNodes, function (listNode) {\n      values.push(getFormControlValuesInScope(listNode));\n    });\n  } else {\n    values = getFormControlValuesInScope(entryNode);\n  }\n\n  return values;\n}\n/**\n * Return true if the given form extracted value equals\n * to an old cached version.\n *\n * @param {Object} value\n * @param {Object} oldValue\n * @return {Boolean}\n */\n\n\nfunction valueEqual(value, oldValue) {\n  if (value && !oldValue) {\n    return false;\n  }\n\n  var allKeys = keys(value).concat(keys(oldValue));\n  return allKeys.every(function (key) {\n    return value[key] === oldValue[key];\n  });\n}\n/**\n * Return true if the given form extracted value(s)\n * equal an old cached version.\n *\n * @param {Array<Object>|Object} values\n * @param {Array<Object>|Object} oldValues\n * @return {Boolean}\n */\n\n\nfunction valuesEqual(values, oldValues) {\n  if (isArray(values)) {\n    if (values.length !== oldValues.length) {\n      return false;\n    }\n\n    return values.every(function (v, idx) {\n      return valueEqual(v, oldValues[idx]);\n    });\n  }\n\n  return valueEqual(values, oldValues);\n}\n/**\n * Return a mapping of { id: entry } for all entries in the given groups in the given tabs.\n *\n * @param {Object} tabs\n * @return {Object}\n */\n\n\nfunction extractEntries(tabs) {\n  return keyBy(flattenDeep(map(flattenDeep(map(tabs, 'groups')), 'entries')), 'id');\n}\n/**\n * Return a mapping of { id: group } for all groups in the given tabs.\n *\n * @param {Object} tabs\n * @return {Object}\n */\n\n\nfunction extractGroups(tabs) {\n  return keyBy(flattenDeep(map(tabs, 'groups')), 'id');\n}\n/**\n * A properties panel implementation.\n *\n * To use it provide a `propertiesProvider` component that knows\n * about which properties to display.\n *\n * Properties edit state / visibility can be intercepted\n * via a custom {@link PropertiesActivator}.\n *\n * @class\n * @constructor\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n * @param {PropertiesProvider} propertiesProvider\n * @param {Canvas} canvas\n * @param {CommandStack} commandStack\n */\n\n\nfunction PropertiesPanel(config, eventBus, modeling, propertiesProvider, commandStack, canvas) {\n  this._eventBus = eventBus;\n  this._modeling = modeling;\n  this._commandStack = commandStack;\n  this._canvas = canvas;\n  this._propertiesProvider = propertiesProvider;\n\n  this._init(config);\n}\n\nPropertiesPanel.$inject = ['config.propertiesPanel', 'eventBus', 'modeling', 'propertiesProvider', 'commandStack', 'canvas'];\nmodule.exports = PropertiesPanel;\n\nPropertiesPanel.prototype._init = function (config) {\n  var canvas = this._canvas,\n      eventBus = this._eventBus;\n  var self = this;\n  /**\n   * Select the root element once it is added to the canvas\n   */\n\n  eventBus.on('root.added', function (e) {\n    var element = e.element;\n\n    if (isImplicitRoot(element)) {\n      return;\n    }\n\n    self.update(element);\n  });\n  eventBus.on('selection.changed', function (e) {\n    var newElement = e.newSelection[0];\n    var rootElement = canvas.getRootElement();\n\n    if (isImplicitRoot(rootElement)) {\n      return;\n    }\n\n    self.update(newElement);\n  }); // add / update tab-bar scrolling\n\n  eventBus.on(['propertiesPanel.changed', 'propertiesPanel.resized'], function (event) {\n    var tabBarNode = domQuery('.bpp-properties-tab-bar', self._container);\n\n    if (!tabBarNode) {\n      return;\n    }\n\n    var scroller = scrollTabs.get(tabBarNode);\n\n    if (!scroller) {\n      // we did not initialize yet, do that\n      // now and make sure we select the active\n      // tab on scroll update\n      scroller = scrollTabs(tabBarNode, {\n        selectors: {\n          tabsContainer: '.bpp-properties-tabs-links',\n          tab: '.bpp-properties-tabs-links li',\n          ignore: '.bpp-hidden',\n          active: '.bpp-active'\n        }\n      });\n      scroller.on('scroll', function (newActiveNode, oldActiveNode, direction) {\n        var linkNode = domQuery('[data-tab-target]', newActiveNode);\n        var tabId = domAttr(linkNode, 'data-tab-target');\n        self.activateTab(tabId);\n      });\n    } // react on tab changes and or tabContainer resize\n    // and make sure the active tab is shown completely\n\n\n    scroller.update();\n  });\n  eventBus.on('elements.changed', function (e) {\n    var current = self._current;\n    var element = current && current.element;\n\n    if (element) {\n      if (e.elements.indexOf(element) !== -1) {\n        self.update(element);\n      }\n    }\n  });\n  eventBus.on('elementTemplates.changed', function () {\n    var current = self._current;\n    var element = current && current.element;\n\n    if (element) {\n      self.update(element);\n    }\n  });\n  eventBus.on('diagram.destroy', function () {\n    self.detach();\n  });\n  this._container = domify('<div class=\"bpp-properties-panel\"></div>');\n\n  this._bindListeners(this._container);\n\n  if (config && config.parent) {\n    this.attachTo(config.parent);\n  }\n};\n\nPropertiesPanel.prototype.attachTo = function (parentNode) {\n  if (!parentNode) {\n    throw new Error('parentNode required');\n  } // ensure we detach from the\n  // previous, old parent\n\n\n  this.detach(); // unwrap jQuery if provided\n\n  if (parentNode.get && parentNode.constructor.prototype.jquery) {\n    parentNode = parentNode.get(0);\n  }\n\n  if (typeof parentNode === 'string') {\n    parentNode = domQuery(parentNode);\n  }\n\n  var container = this._container;\n  parentNode.appendChild(container);\n\n  this._emit('attach');\n};\n\nPropertiesPanel.prototype.detach = function () {\n  var container = this._container,\n      parentNode = container.parentNode;\n\n  if (!parentNode) {\n    return;\n  }\n\n  this._emit('detach');\n\n  parentNode.removeChild(container);\n};\n/**\n * Select the given tab within the properties panel.\n *\n * @param {Object|String} tab\n */\n\n\nPropertiesPanel.prototype.activateTab = function (tab) {\n  var tabId = typeof tab === 'string' ? tab : tab.id;\n  var current = this._current;\n  var panelNode = current.panel;\n  var allTabNodes = domQueryAll('.bpp-properties-tab', panelNode),\n      allTabLinkNodes = domQueryAll('.bpp-properties-tab-link', panelNode);\n  forEach(allTabNodes, function (tabNode) {\n    var currentTabId = domAttr(tabNode, 'data-tab');\n    domClasses(tabNode).toggle('bpp-active', tabId === currentTabId);\n  });\n  forEach(allTabLinkNodes, function (tabLinkNode) {\n    var tabLink = domQuery('[data-tab-target]', tabLinkNode),\n        currentTabId = domAttr(tabLink, 'data-tab-target');\n    domClasses(tabLinkNode).toggle('bpp-active', tabId === currentTabId);\n  });\n};\n/**\n * Update the DOM representation of the properties panel\n */\n\n\nPropertiesPanel.prototype.update = function (element) {\n  var current = this._current; // no actual selection change\n\n  var needsCreate = true;\n\n  if (typeof element === 'undefined') {\n    // use RootElement of BPMN diagram to generate properties panel if no element is selected\n    element = this._canvas.getRootElement();\n  }\n\n  var newTabs = this._propertiesProvider.getTabs(element);\n\n  if (current && current.element === element) {\n    // see if we can reuse the existing panel\n    needsCreate = this._entriesChanged(current, newTabs);\n  }\n\n  if (needsCreate) {\n    if (current) {\n      // get active tab from the existing panel before remove it\n      var activeTabNode = domQuery('.bpp-properties-tab.bpp-active', current.panel);\n      var activeTabId;\n\n      if (activeTabNode) {\n        activeTabId = domAttr(activeTabNode, 'data-tab');\n      } // remove old panel\n\n\n      domRemove(current.panel);\n    }\n\n    this._current = this._create(element, newTabs); // activate the saved active tab from the remove panel or the first tab\n\n    activeTabId ? this.activateTab(activeTabId) : this.activateTab(this._current.tabs[0]);\n  }\n\n  if (this._current) {\n    // make sure correct tab contents are visible\n    this._updateActivation(this._current);\n  }\n\n  this._emit('changed');\n};\n/**\n * Returns true if one of two groups has different entries than the other.\n *\n * @param  {Object} current\n * @param  {Object} newTabs\n * @return {Booelan}\n */\n\n\nPropertiesPanel.prototype._entriesChanged = function (current, newTabs) {\n  var oldEntryIds = keys(current.entries),\n      newEntryIds = keys(extractEntries(newTabs));\n  return !isEmpty(xor(oldEntryIds, newEntryIds));\n};\n\nPropertiesPanel.prototype._emit = function (event) {\n  this._eventBus.fire('propertiesPanel.' + event, {\n    panel: this,\n    current: this._current\n  });\n};\n\nPropertiesPanel.prototype._bindListeners = function (container) {\n  var self = this; // handles a change for a given event\n\n  var handleChange = function handleChange(event) {\n    // see if we handle a change inside a [data-entry] element.\n    // if not, drop out\n    var inputNode = event.delegateTarget,\n        entryNode = domClosest(inputNode, '[data-entry]'),\n        entryId,\n        entry; // change from outside a [data-entry] element, simply ignore\n\n    if (!entryNode) {\n      return;\n    }\n\n    entryId = domAttr(entryNode, 'data-entry');\n    entry = self.getEntry(entryId);\n    var values = getFormControlValues(entryNode);\n\n    if (event.type === 'change') {\n      // - if the \"data-on-change\" attribute is present and a value is changed,\n      //   then the associated action is performed.\n      // - if the associated action returns \"true\" then an update to the business\n      //   object is done\n      // - if it does not return \"true\", then only the DOM content is updated\n      var onChangeAction = domAttr(inputNode, 'data-on-change');\n\n      if (onChangeAction) {\n        var isEntryDirty = self.executeAction(entry, entryNode, onChangeAction, event);\n\n        if (!isEntryDirty) {\n          return self.update(self._current.element);\n        }\n      }\n    }\n\n    self.applyChanges(entry, values, entryNode);\n    self.updateState(entry, entryNode);\n  }; // debounce update only elements that are target of key events,\n  // i.e. INPUT and TEXTAREA. SELECTs will trigger an immediate update anyway.\n\n\n  domDelegate.bind(container, 'input, textarea, [contenteditable]', 'input', debounce(handleChange, DEBOUNCE_DELAY));\n  domDelegate.bind(container, 'input, textarea, select, [contenteditable]', 'change', handleChange); // handle key events\n\n  domDelegate.bind(container, 'select', 'keydown', function (e) {\n    // DEL\n    if (e.keyCode === 46) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  });\n  domDelegate.bind(container, '[data-action]', 'click', function onClick(event) {\n    // triggers on all inputs\n    var inputNode = event.delegateTarget,\n        entryNode = domClosest(inputNode, '[data-entry]');\n    var actionId = domAttr(inputNode, 'data-action'),\n        entryId = domAttr(entryNode, 'data-entry');\n    var entry = self.getEntry(entryId);\n    var isEntryDirty = self.executeAction(entry, entryNode, actionId, event);\n\n    if (isEntryDirty) {\n      var values = getFormControlValues(entryNode);\n      self.applyChanges(entry, values, entryNode);\n    }\n\n    self.updateState(entry, entryNode);\n  });\n\n  function handleInput(event, element) {\n    // triggers on all inputs\n    var inputNode = event.delegateTarget;\n    var entryNode = domClosest(inputNode, '[data-entry]'); // only work on data entries\n\n    if (!entryNode) {\n      return;\n    }\n\n    var eventHandlerId = domAttr(inputNode, 'data-blur'),\n        entryId = domAttr(entryNode, 'data-entry');\n    var entry = self.getEntry(entryId);\n    var isEntryDirty = self.executeAction(entry, entryNode, eventHandlerId, event);\n\n    if (isEntryDirty) {\n      var values = getFormControlValues(entryNode);\n      self.applyChanges(entry, values, entryNode);\n    }\n\n    self.updateState(entry, entryNode);\n  }\n\n  domDelegate.bind(container, '[data-blur]', 'blur', handleInput, true); // make tab links interactive\n\n  domDelegate.bind(container, '.bpp-properties-tabs-links [data-tab-target]', 'click', function (event) {\n    event.preventDefault();\n    var delegateTarget = event.delegateTarget;\n    var tabId = domAttr(delegateTarget, 'data-tab-target'); // activate tab on link click\n\n    self.activateTab(tabId);\n  });\n};\n\nPropertiesPanel.prototype.updateState = function (entry, entryNode) {\n  this.updateShow(entry, entryNode);\n  this.updateDisable(entry, entryNode);\n};\n/**\n * Update the visibility of the entry node in the DOM\n */\n\n\nPropertiesPanel.prototype.updateShow = function (entry, node) {\n  var current = this._current;\n\n  if (!current) {\n    return;\n  }\n\n  var showNodes = domQueryAll('[data-show]', node) || [];\n  forEach(showNodes, function (showNode) {\n    var expr = domAttr(showNode, 'data-show');\n    var fn = get(entry, expr);\n\n    if (fn) {\n      var scope = domClosest(showNode, '[data-scope]') || node;\n      var shouldShow = fn(current.element, node, showNode, scope) || false;\n\n      if (shouldShow) {\n        domClasses(showNode).remove(HIDE_CLASS);\n      } else {\n        domClasses(showNode).add(HIDE_CLASS);\n      }\n    }\n  });\n};\n/**\n * Evaluates a given function. If it returns true, then the\n * node is marked as \"disabled\".\n */\n\n\nPropertiesPanel.prototype.updateDisable = function (entry, node) {\n  var current = this._current;\n\n  if (!current) {\n    return;\n  }\n\n  var nodes = domQueryAll('[data-disable]', node) || [];\n  forEach(nodes, function (currentNode) {\n    var expr = domAttr(currentNode, 'data-disable');\n    var fn = get(entry, expr);\n\n    if (fn) {\n      var scope = domClosest(currentNode, '[data-scope]') || node;\n      var shouldDisable = fn(current.element, node, currentNode, scope) || false;\n      domAttr(currentNode, 'disabled', shouldDisable ? '' : null);\n    }\n  });\n};\n\nPropertiesPanel.prototype.executeAction = function (entry, entryNode, actionId, event) {\n  var current = this._current;\n\n  if (!current) {\n    return;\n  }\n\n  var fn = get(entry, actionId);\n\n  if (fn) {\n    var scopeNode = domClosest(event.target, '[data-scope]') || entryNode;\n    return fn.apply(entry, [current.element, entryNode, event, scopeNode]);\n  }\n};\n/**\n * Apply changes to the business object by executing a command\n */\n\n\nPropertiesPanel.prototype.applyChanges = function (entry, values, containerElement) {\n  var element = this._current.element; // ensure we only update the model if we got dirty changes\n\n  if (valuesEqual(values, entry.oldValues)) {\n    return;\n  }\n\n  var command = entry.set(element, values, containerElement);\n  var commandToExecute;\n\n  if (isArray(command)) {\n    if (command.length) {\n      commandToExecute = {\n        cmd: 'properties-panel.multi-command-executor',\n        context: flattenDeep(command)\n      };\n    }\n  } else {\n    commandToExecute = command;\n  }\n\n  if (commandToExecute) {\n    this._commandStack.execute(commandToExecute.cmd, commandToExecute.context || {\n      element: element\n    });\n  } else {\n    this.update(element);\n  }\n};\n/**\n * apply validation errors in the DOM and show or remove an error message near the entry node.\n */\n\n\nPropertiesPanel.prototype.applyValidationErrors = function (validationErrors, entryNode) {\n  var valid = true;\n  var controlNodes = getFormControls(entryNode, true);\n  forEach(controlNodes, function (controlNode) {\n    var name = domAttr(controlNode, 'name') || domAttr(controlNode, 'data-name');\n    var error = validationErrors && validationErrors[name];\n    var errorMessageNode = domQuery('.bpp-error-message', controlNode.parentNode);\n\n    if (error) {\n      valid = false;\n\n      if (!errorMessageNode) {\n        errorMessageNode = domify('<div></div>');\n        domClasses(errorMessageNode).add('bpp-error-message'); // insert errorMessageNode after controlNode\n\n        controlNode.parentNode.insertBefore(errorMessageNode, controlNode.nextSibling);\n      }\n\n      errorMessageNode.innerHTML = error;\n      domClasses(controlNode).add('invalid');\n    } else {\n      domClasses(controlNode).remove('invalid');\n\n      if (errorMessageNode) {\n        controlNode.parentNode.removeChild(errorMessageNode);\n      }\n    }\n  });\n  return valid;\n};\n/**\n * Check if the entry contains valid input\n */\n\n\nPropertiesPanel.prototype.validate = function (entry, values, entryNode) {\n  var self = this;\n  var current = this._current;\n  var valid = true;\n  entryNode = entryNode || domQuery('[data-entry=\"' + entry.id + '\"]', current.panel);\n\n  if (values instanceof Array) {\n    var listContainer = domQuery('[data-list-entry-container]', entryNode),\n        listEntryNodes = listContainer.children || []; // create new elements\n\n    for (var i = 0; i < values.length; i++) {\n      var listValue = values[i];\n\n      if (entry.validateListItem) {\n        var validationErrors = entry.validateListItem(current.element, listValue, entryNode, i),\n            listEntryNode = listEntryNodes[i];\n        valid = self.applyValidationErrors(validationErrors, listEntryNode) && valid;\n      }\n    }\n  } else {\n    if (entry.validate) {\n      this.validationErrors = entry.validate(current.element, values, entryNode);\n      valid = self.applyValidationErrors(this.validationErrors, entryNode) && valid;\n    }\n  }\n\n  return valid;\n};\n\nPropertiesPanel.prototype.getEntry = function (id) {\n  return this._current && this._current.entries[id];\n};\n\nvar flattenDeep = require('lodash/flattenDeep'),\n    keyBy = require('lodash/keyBy'),\n    map = require('lodash/map');\n\nPropertiesPanel.prototype._create = function (element, tabs) {\n  if (!element) {\n    return null;\n  }\n\n  var containerNode = this._container;\n\n  var panelNode = this._createPanel(element, tabs);\n\n  containerNode.appendChild(panelNode);\n  var entries = extractEntries(tabs);\n  var groups = extractGroups(tabs);\n  return {\n    tabs: tabs,\n    groups: groups,\n    entries: entries,\n    element: element,\n    panel: panelNode\n  };\n};\n/**\n * Update variable parts of the entry node on element changes.\n *\n * @param {djs.model.Base} element\n * @param {EntryDescriptor} entry\n * @param {Object} values\n * @param {HTMLElement} entryNode\n * @param {Number} idx\n */\n\n\nPropertiesPanel.prototype._bindTemplate = function (element, entry, values, entryNode, idx) {\n  var eventBus = this._eventBus;\n\n  function isPropertyEditable(entry, propertyName) {\n    return eventBus.fire('propertiesPanel.isPropertyEditable', {\n      entry: entry,\n      propertyName: propertyName,\n      element: element\n    });\n  }\n\n  var inputNodes = getPropertyPlaceholders(entryNode);\n  forEach(inputNodes, function (node) {\n    var name, newValue, editable; // we deal with an input element\n\n    if ('value' in node || isContentEditable(node) === 'true') {\n      name = domAttr(node, 'name') || domAttr(node, 'data-name');\n      newValue = values[name];\n      editable = isPropertyEditable(entry, name);\n\n      if (editable && entry.editable) {\n        editable = entry.editable(element, entryNode, node, name, newValue, idx);\n      }\n\n      domAttr(node, 'readonly', editable ? null : '');\n      domAttr(node, 'disabled', editable ? null : ''); // take full control over setting the value\n      // and possibly updating the input in entry#setControlValue\n\n      if (entry.setControlValue) {\n        entry.setControlValue(element, entryNode, node, name, newValue, idx);\n      } else if (isToggle(node)) {\n        setToggleValue(node, newValue);\n      } else if (isSelect(node)) {\n        setSelectValue(node, newValue);\n      } else {\n        setInputValue(node, newValue);\n      }\n    } // we deal with some non-editable html element\n    else {\n        name = domAttr(node, 'data-value');\n        newValue = values[name];\n\n        if (entry.setControlValue) {\n          entry.setControlValue(element, entryNode, node, name, newValue, idx);\n        } else {\n          setTextValue(node, newValue);\n        }\n      }\n  });\n}; // TODO(nikku): WTF freaking name? Change / clarify.\n\n\nPropertiesPanel.prototype._updateActivation = function (current) {\n  var self = this;\n  var eventBus = this._eventBus;\n  var element = current.element;\n\n  function isEntryVisible(entry) {\n    return eventBus.fire('propertiesPanel.isEntryVisible', {\n      entry: entry,\n      element: element\n    });\n  }\n\n  function isGroupVisible(group, element, groupNode) {\n    if (typeof group.enabled === 'function') {\n      return group.enabled(element, groupNode);\n    } else {\n      return true;\n    }\n  }\n\n  function isTabVisible(tab, element) {\n    if (typeof tab.enabled === 'function') {\n      return tab.enabled(element);\n    } else {\n      return true;\n    }\n  }\n\n  function toggleVisible(node, visible) {\n    domClasses(node).toggle(HIDE_CLASS, !visible);\n  } // check whether the active tab is visible\n  // if not: set the first tab as active tab\n\n\n  function checkActiveTabVisibility(node, visible) {\n    var isActive = domClasses(node).has('bpp-active');\n\n    if (!visible && isActive) {\n      self.activateTab(current.tabs[0]);\n    }\n  }\n\n  function updateLabel(element, selector, text) {\n    var labelNode = domQuery(selector, element);\n\n    if (!labelNode) {\n      return;\n    }\n\n    labelNode.textContent = text;\n  }\n\n  var panelNode = current.panel;\n  forEach(current.tabs, function (tab) {\n    var tabNode = domQuery('[data-tab=' + tab.id + ']', panelNode);\n    var tabLinkNode = domQuery('[data-tab-target=' + tab.id + ']', panelNode).parentNode;\n    var tabVisible = false;\n    forEach(tab.groups, function (group) {\n      var groupVisible = false;\n      var groupNode = domQuery('[data-group=' + group.id + ']', tabNode);\n      forEach(group.entries, function (entry) {\n        var entryNode = domQuery('[data-entry=\"' + entry.id + '\"]', groupNode);\n        var entryVisible = isEntryVisible(entry);\n        groupVisible = groupVisible || entryVisible;\n        toggleVisible(entryNode, entryVisible);\n        var values = 'get' in entry ? entry.get(element, entryNode) : {};\n\n        if (values instanceof Array) {\n          var listEntryContainer = domQuery('[data-list-entry-container]', entryNode);\n          var existingElements = listEntryContainer.children || [];\n\n          for (var i = 0; i < values.length; i++) {\n            var listValue = values[i];\n            var listItemNode = existingElements[i];\n\n            if (!listItemNode) {\n              listItemNode = domify(entry.createListEntryTemplate(listValue, i, listEntryContainer));\n              listEntryContainer.appendChild(listItemNode);\n            }\n\n            domAttr(listItemNode, 'data-index', i);\n\n            self._bindTemplate(element, entry, listValue, listItemNode, i);\n          }\n\n          var entriesToRemove = existingElements.length - values.length;\n\n          for (var j = 0; j < entriesToRemove; j++) {\n            // remove orphaned element\n            listEntryContainer.removeChild(listEntryContainer.lastChild);\n          }\n        } else {\n          self._bindTemplate(element, entry, values, entryNode);\n        } // update conditionally visible elements\n\n\n        self.updateState(entry, entryNode);\n        self.validate(entry, values, entryNode); // remember initial state for later dirty checking\n\n        entry.oldValues = getFormControlValues(entryNode);\n      });\n\n      if (typeof group.label === 'function') {\n        updateLabel(groupNode, '.group-label', group.label(element, groupNode));\n      }\n\n      groupVisible = groupVisible && isGroupVisible(group, element, groupNode);\n      tabVisible = tabVisible || groupVisible;\n      toggleVisible(groupNode, groupVisible);\n    });\n    tabVisible = tabVisible && isTabVisible(tab, element);\n    toggleVisible(tabNode, tabVisible);\n    toggleVisible(tabLinkNode, tabVisible);\n    checkActiveTabVisibility(tabNode, tabVisible);\n  }); // inject elements id into header\n\n  updateLabel(panelNode, '[data-label-id]', getBusinessObject(element).id || '');\n};\n\nPropertiesPanel.prototype._createPanel = function (element, tabs) {\n  var self = this;\n  var panelNode = domify('<div class=\"bpp-properties\"></div>'),\n      headerNode = domify('<div class=\"bpp-properties-header\">' + '<div class=\"label\" data-label-id></div>' + '<div class=\"search\">' + '<input type=\"search\" placeholder=\"Search for property\" />' + '<button><span>Search</span></button>' + '</div>' + '</div>'),\n      tabBarNode = domify('<div class=\"bpp-properties-tab-bar\"></div>'),\n      tabLinksNode = domify('<ul class=\"bpp-properties-tabs-links\"></ul>'),\n      tabContainerNode = domify('<div class=\"bpp-properties-tabs-container\"></div>');\n  panelNode.appendChild(headerNode);\n  forEach(tabs, function (tab, tabIndex) {\n    if (!tab.id) {\n      throw new Error('tab must have an id');\n    }\n\n    var tabNode = domify('<div class=\"bpp-properties-tab\" data-tab=\"' + tab.id + '\"></div>'),\n        tabLinkNode = domify('<li class=\"bpp-properties-tab-link\">' + '<a href data-tab-target=\"' + tab.id + '\">' + tab.label + '</a>' + '</li>');\n    var groups = tab.groups;\n    forEach(groups, function (group) {\n      if (!group.id) {\n        throw new Error('group must have an id');\n      }\n\n      var groupNode = domify('<div class=\"bpp-properties-group\" data-group=\"' + group.id + '\">' + '<span class=\"group-toggle\"></span>' + '<span class=\"group-label\">' + group.label + '</span>' + '</div>'); // TODO(nre): use event delegation to handle that...\n\n      groupNode.querySelector('.group-toggle').addEventListener('click', function (evt) {\n        domClasses(groupNode).toggle('group-closed');\n        evt.preventDefault();\n        evt.stopPropagation();\n      });\n      groupNode.addEventListener('click', function (evt) {\n        if (!evt.defaultPrevented && domClasses(groupNode).has('group-closed')) {\n          domClasses(groupNode).remove('group-closed');\n        }\n      });\n      forEach(group.entries, function (entry) {\n        if (!entry.id) {\n          throw new Error('entry must have an id');\n        }\n\n        var html = entry.html;\n\n        if (typeof html === 'string') {\n          html = domify(html);\n        } // unwrap jquery\n\n\n        if (html.get && html.constructor.prototype.jquery) {\n          html = html.get(0);\n        }\n\n        var entryNode = domify('<div class=\"bpp-properties-entry\" data-entry=\"' + entry.id + '\"></div>');\n        forEach(entry.cssClasses || [], function (cssClass) {\n          domClasses(entryNode).add(cssClass);\n        });\n        entryNode.appendChild(html);\n        groupNode.appendChild(entryNode); // update conditionally visible elements\n\n        self.updateState(entry, entryNode);\n      });\n      tabNode.appendChild(groupNode);\n    });\n    tabLinksNode.appendChild(tabLinkNode);\n    tabContainerNode.appendChild(tabNode);\n  });\n  tabBarNode.appendChild(tabLinksNode);\n  panelNode.appendChild(tabBarNode);\n  panelNode.appendChild(tabContainerNode);\n  return panelNode;\n};\n\nfunction setInputValue(node, value) {\n  var contentEditable = isContentEditable(node);\n  var oldValue = contentEditable ? node.innerText : node.value;\n  var selection; // prevents input fields from having the value 'undefined'\n\n  if (value === undefined) {\n    value = '';\n  }\n\n  if (oldValue === value) {\n    return;\n  } // update selection on undo/redo\n\n\n  if (document.activeElement === node) {\n    selection = updateSelection(getSelection(node), oldValue, value);\n  }\n\n  if (contentEditable) {\n    node.innerText = value;\n  } else {\n    node.value = value;\n  }\n\n  if (selection) {\n    setSelection(node, selection);\n  }\n}\n\nfunction setSelectValue(node, value) {\n  if (value !== undefined) {\n    node.value = value;\n  }\n}\n\nfunction setToggleValue(node, value) {\n  var nodeValue = node.value;\n  node.checked = value === nodeValue || !domAttr(node, 'value') && value;\n}\n\nfunction setTextValue(node, value) {\n  node.textContent = value;\n}\n\nfunction getSelection(node) {\n  return isContentEditable(node) ? getContentEditableSelection(node) : {\n    start: node.selectionStart,\n    end: node.selectionEnd\n  };\n}\n\nfunction getContentEditableSelection(node) {\n  var selection = window.getSelection();\n  var focusNode = selection.focusNode,\n      focusOffset = selection.focusOffset,\n      anchorOffset = selection.anchorOffset;\n\n  if (!focusNode) {\n    throw new Error('not selected');\n  } // verify we have selection on the current element\n\n\n  if (!node.contains(focusNode)) {\n    throw new Error('not selected');\n  }\n\n  return {\n    start: Math.min(focusOffset, anchorOffset),\n    end: Math.max(focusOffset, anchorOffset)\n  };\n}\n\nfunction setSelection(node, selection) {\n  if (isContentEditable(node)) {\n    setContentEditableSelection(node, selection);\n  } else {\n    node.selectionStart = selection.start;\n    node.selectionEnd = selection.end;\n  }\n}\n\nfunction setContentEditableSelection(node, selection) {\n  var focusNode, domRange, domSelection;\n  focusNode = node.firstChild || node, domRange = document.createRange();\n  domRange.setStart(focusNode, selection.start);\n  domRange.setEnd(focusNode, selection.end);\n  domSelection = window.getSelection();\n  domSelection.removeAllRanges();\n  domSelection.addRange(domRange);\n}\n\nfunction isImplicitRoot(element) {\n  return element.id === '__implicitroot';\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/PropertiesPanel.js"],"names":["domify","require","domQuery","query","domQueryAll","queryAll","domRemove","remove","domClasses","classes","domClosest","closest","domAttr","attr","domDelegate","delegate","domMatches","matches","forEach","filter","get","keys","isEmpty","isArray","xor","debounce","updateSelection","scrollTabs","default","getBusinessObject","HIDE_CLASS","DEBOUNCE_DELAY","isToggle","node","type","isSelect","isContentEditable","getPropertyPlaceholders","selector","placeholders","length","getFormControls","all","controls","getFormControlValuesInScope","entryNode","values","controlNodes","controlNode","value","name","checked","innerText","getFormControlValues","listContainer","listNodes","children","listNode","push","valueEqual","oldValue","allKeys","concat","every","key","valuesEqual","oldValues","v","idx","extractEntries","tabs","keyBy","flattenDeep","map","extractGroups","PropertiesPanel","config","eventBus","modeling","propertiesProvider","commandStack","canvas","_eventBus","_modeling","_commandStack","_canvas","_propertiesProvider","_init","$inject","module","exports","prototype","self","on","e","element","isImplicitRoot","update","newElement","newSelection","rootElement","getRootElement","event","tabBarNode","_container","scroller","selectors","tabsContainer","tab","ignore","active","newActiveNode","oldActiveNode","direction","linkNode","tabId","activateTab","current","_current","elements","indexOf","detach","_bindListeners","parent","attachTo","parentNode","Error","constructor","jquery","container","appendChild","_emit","removeChild","id","panelNode","panel","allTabNodes","allTabLinkNodes","tabNode","currentTabId","toggle","tabLinkNode","tabLink","needsCreate","newTabs","getTabs","_entriesChanged","activeTabNode","activeTabId","_create","_updateActivation","oldEntryIds","entries","newEntryIds","fire","handleChange","inputNode","delegateTarget","entryId","entry","getEntry","onChangeAction","isEntryDirty","executeAction","applyChanges","updateState","bind","keyCode","stopPropagation","preventDefault","onClick","actionId","handleInput","eventHandlerId","updateShow","updateDisable","showNodes","showNode","expr","fn","scope","shouldShow","add","nodes","currentNode","shouldDisable","scopeNode","target","apply","containerElement","command","set","commandToExecute","cmd","context","execute","applyValidationErrors","validationErrors","valid","error","errorMessageNode","insertBefore","nextSibling","innerHTML","validate","Array","listEntryNodes","i","listValue","validateListItem","listEntryNode","containerNode","_createPanel","groups","_bindTemplate","isPropertyEditable","propertyName","inputNodes","newValue","editable","setControlValue","setToggleValue","setSelectValue","setInputValue","setTextValue","isEntryVisible","isGroupVisible","group","groupNode","enabled","isTabVisible","toggleVisible","visible","checkActiveTabVisibility","isActive","has","updateLabel","text","labelNode","textContent","tabVisible","groupVisible","entryVisible","listEntryContainer","existingElements","listItemNode","createListEntryTemplate","entriesToRemove","j","lastChild","label","headerNode","tabLinksNode","tabContainerNode","tabIndex","querySelector","addEventListener","evt","defaultPrevented","html","cssClasses","cssClass","contentEditable","selection","undefined","document","activeElement","getSelection","setSelection","nodeValue","getContentEditableSelection","start","selectionStart","end","selectionEnd","window","focusNode","focusOffset","anchorOffset","contains","Math","min","max","setContentEditableSelection","domRange","domSelection","firstChild","createRange","setStart","setEnd","removeAllRanges","addRange"],"mappings":"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","sourcesContent":["'use strict';\n\nvar domify = require('min-dom').domify,\n    domQuery = require('min-dom').query,\n    domQueryAll = require('min-dom').queryAll,\n    domRemove = require('min-dom').remove,\n    domClasses = require('min-dom').classes,\n    domClosest = require('min-dom').closest,\n    domAttr = require('min-dom').attr,\n    domDelegate = require('min-dom').delegate,\n    domMatches = require('min-dom').matches;\n\nvar forEach = require('lodash/forEach'),\n    filter = require('lodash/filter'),\n    get = require('lodash/get'),\n    keys = require('lodash/keys'),\n    isEmpty = require('lodash/isEmpty'),\n    isArray = require('lodash/isArray'),\n    xor = require('lodash/xor'),\n    debounce = require('lodash/debounce');\n\nvar updateSelection = require('selection-update');\n\nvar scrollTabs = require('scroll-tabs').default;\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;\n\nvar HIDE_CLASS = 'bpp-hidden';\nvar DEBOUNCE_DELAY = 300;\n\n\nfunction isToggle(node) {\n  return node.type === 'checkbox' || node.type === 'radio';\n}\n\nfunction isSelect(node) {\n  return node.type === 'select-one';\n}\n\nfunction isContentEditable(node) {\n  return domAttr(node, 'contenteditable');\n}\n\nfunction getPropertyPlaceholders(node) {\n  var selector = 'input[name], textarea[name], [data-value], [contenteditable]';\n  var placeholders = domQueryAll(selector, node);\n  if ((!placeholders || !placeholders.length) && domMatches(node, selector)) {\n    placeholders = [ node ];\n  }\n  return placeholders;\n}\n\n/**\n * Return all active form controls.\n * This excludes the invisible controls unless all is true\n *\n * @param {Element} node\n * @param {Boolean} [all=false]\n */\nfunction getFormControls(node, all) {\n  var controls = domQueryAll('input[name], textarea[name], select[name], [contenteditable]', node);\n\n  if (!controls || !controls.length) {\n    controls = domMatches(node, 'option') ? [ node ] : controls;\n  }\n\n  if (!all) {\n    controls = filter(controls, function(node) {\n      return !domClosest(node, '.' + HIDE_CLASS);\n    });\n  }\n\n  return controls;\n}\n\nfunction getFormControlValuesInScope(entryNode) {\n  var values = {};\n\n  var controlNodes = getFormControls(entryNode);\n\n  forEach(controlNodes, function(controlNode) {\n    var value = controlNode.value;\n\n    var name = domAttr(controlNode, 'name') || domAttr(controlNode, 'data-name');\n\n    // take toggle state into account for radio / checkboxes\n    if (isToggle(controlNode)) {\n      if (controlNode.checked) {\n        if (!domAttr(controlNode, 'value')) {\n          value = true;\n        } else {\n          value = controlNode.value;\n        }\n      } else {\n        value = null;\n      }\n    } else\n    if (isContentEditable(controlNode)) {\n      value = controlNode.innerText;\n    }\n\n    if (value !== null) {\n      // return the actual value\n      // handle serialization in entry provider\n      // (ie. if empty string should be serialized or not)\n      values[name] = value;\n    }\n  });\n\n  return values;\n\n}\n\n/**\n * Extract input values from entry node\n *\n * @param  {DOMElement} entryNode\n * @returns {Object}\n */\nfunction getFormControlValues(entryNode) {\n\n  var values;\n\n  var listContainer = domQuery('[data-list-entry-container]', entryNode);\n  if (listContainer) {\n    values = [];\n    var listNodes = listContainer.children || [];\n    forEach(listNodes, function(listNode) {\n      values.push(getFormControlValuesInScope(listNode));\n    });\n  } else {\n    values = getFormControlValuesInScope(entryNode);\n  }\n\n  return values;\n}\n\n/**\n * Return true if the given form extracted value equals\n * to an old cached version.\n *\n * @param {Object} value\n * @param {Object} oldValue\n * @return {Boolean}\n */\nfunction valueEqual(value, oldValue) {\n\n  if (value && !oldValue) {\n    return false;\n  }\n\n  var allKeys = keys(value).concat(keys(oldValue));\n\n  return allKeys.every(function(key) {\n    return value[key] === oldValue[key];\n  });\n}\n\n/**\n * Return true if the given form extracted value(s)\n * equal an old cached version.\n *\n * @param {Array<Object>|Object} values\n * @param {Array<Object>|Object} oldValues\n * @return {Boolean}\n */\nfunction valuesEqual(values, oldValues) {\n\n  if (isArray(values)) {\n\n    if (values.length !== oldValues.length) {\n      return false;\n    }\n\n    return values.every(function(v, idx) {\n      return valueEqual(v, oldValues[idx]);\n    });\n  }\n\n  return valueEqual(values, oldValues);\n}\n\n/**\n * Return a mapping of { id: entry } for all entries in the given groups in the given tabs.\n *\n * @param {Object} tabs\n * @return {Object}\n */\nfunction extractEntries(tabs) {\n  return keyBy(flattenDeep(map(flattenDeep(map(tabs, 'groups')), 'entries')), 'id');\n}\n\n/**\n * Return a mapping of { id: group } for all groups in the given tabs.\n *\n * @param {Object} tabs\n * @return {Object}\n */\nfunction extractGroups(tabs) {\n  return keyBy(flattenDeep(map(tabs, 'groups')), 'id');\n}\n\n/**\n * A properties panel implementation.\n *\n * To use it provide a `propertiesProvider` component that knows\n * about which properties to display.\n *\n * Properties edit state / visibility can be intercepted\n * via a custom {@link PropertiesActivator}.\n *\n * @class\n * @constructor\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n * @param {PropertiesProvider} propertiesProvider\n * @param {Canvas} canvas\n * @param {CommandStack} commandStack\n */\nfunction PropertiesPanel(config, eventBus, modeling, propertiesProvider, commandStack, canvas) {\n\n  this._eventBus = eventBus;\n  this._modeling = modeling;\n  this._commandStack = commandStack;\n  this._canvas = canvas;\n  this._propertiesProvider = propertiesProvider;\n\n  this._init(config);\n}\n\nPropertiesPanel.$inject = [\n  'config.propertiesPanel',\n  'eventBus',\n  'modeling',\n  'propertiesProvider',\n  'commandStack',\n  'canvas'\n];\n\nmodule.exports = PropertiesPanel;\n\n\nPropertiesPanel.prototype._init = function(config) {\n\n  var canvas = this._canvas,\n      eventBus = this._eventBus;\n\n  var self = this;\n\n  /**\n   * Select the root element once it is added to the canvas\n   */\n  eventBus.on('root.added', function(e) {\n    var element = e.element;\n\n    if (isImplicitRoot(element)) {\n      return;\n    }\n\n    self.update(element);\n  });\n\n  eventBus.on('selection.changed', function(e) {\n    var newElement = e.newSelection[0];\n\n    var rootElement = canvas.getRootElement();\n\n    if (isImplicitRoot(rootElement)) {\n      return;\n    }\n\n    self.update(newElement);\n  });\n\n  // add / update tab-bar scrolling\n  eventBus.on([\n    'propertiesPanel.changed',\n    'propertiesPanel.resized'\n  ], function(event) {\n\n    var tabBarNode = domQuery('.bpp-properties-tab-bar', self._container);\n\n    if (!tabBarNode) {\n      return;\n    }\n\n    var scroller = scrollTabs.get(tabBarNode);\n\n    if (!scroller) {\n\n      // we did not initialize yet, do that\n      // now and make sure we select the active\n      // tab on scroll update\n      scroller = scrollTabs(tabBarNode, {\n        selectors: {\n          tabsContainer: '.bpp-properties-tabs-links',\n          tab: '.bpp-properties-tabs-links li',\n          ignore: '.bpp-hidden',\n          active: '.bpp-active'\n        }\n      });\n\n\n      scroller.on('scroll', function(newActiveNode, oldActiveNode, direction) {\n\n        var linkNode = domQuery('[data-tab-target]', newActiveNode);\n\n        var tabId = domAttr(linkNode, 'data-tab-target');\n\n        self.activateTab(tabId);\n      });\n    }\n\n    // react on tab changes and or tabContainer resize\n    // and make sure the active tab is shown completely\n    scroller.update();\n  });\n\n  eventBus.on('elements.changed', function(e) {\n\n    var current = self._current;\n    var element = current && current.element;\n\n    if (element) {\n      if (e.elements.indexOf(element) !== -1) {\n        self.update(element);\n      }\n    }\n  });\n\n  eventBus.on('elementTemplates.changed', function() {\n    var current = self._current;\n    var element = current && current.element;\n\n    if (element) {\n      self.update(element);\n    }\n  });\n\n  eventBus.on('diagram.destroy', function() {\n    self.detach();\n  });\n\n  this._container = domify('<div class=\"bpp-properties-panel\"></div>');\n\n  this._bindListeners(this._container);\n\n  if (config && config.parent) {\n    this.attachTo(config.parent);\n  }\n};\n\n\nPropertiesPanel.prototype.attachTo = function(parentNode) {\n\n  if (!parentNode) {\n    throw new Error('parentNode required');\n  }\n\n  // ensure we detach from the\n  // previous, old parent\n  this.detach();\n\n  // unwrap jQuery if provided\n  if (parentNode.get && parentNode.constructor.prototype.jquery) {\n    parentNode = parentNode.get(0);\n  }\n\n  if (typeof parentNode === 'string') {\n    parentNode = domQuery(parentNode);\n  }\n\n  var container = this._container;\n\n  parentNode.appendChild(container);\n\n  this._emit('attach');\n};\n\nPropertiesPanel.prototype.detach = function() {\n\n  var container = this._container,\n      parentNode = container.parentNode;\n\n  if (!parentNode) {\n    return;\n  }\n\n  this._emit('detach');\n\n  parentNode.removeChild(container);\n};\n\n\n/**\n * Select the given tab within the properties panel.\n *\n * @param {Object|String} tab\n */\nPropertiesPanel.prototype.activateTab = function(tab) {\n\n  var tabId = typeof tab === 'string' ? tab : tab.id;\n\n  var current = this._current;\n\n  var panelNode = current.panel;\n\n  var allTabNodes = domQueryAll('.bpp-properties-tab', panelNode),\n      allTabLinkNodes = domQueryAll('.bpp-properties-tab-link', panelNode);\n\n  forEach(allTabNodes, function(tabNode) {\n\n    var currentTabId = domAttr(tabNode, 'data-tab');\n\n    domClasses(tabNode).toggle('bpp-active', tabId === currentTabId);\n  });\n\n  forEach(allTabLinkNodes, function(tabLinkNode) {\n\n    var tabLink = domQuery('[data-tab-target]', tabLinkNode),\n        currentTabId = domAttr(tabLink, 'data-tab-target');\n\n    domClasses(tabLinkNode).toggle('bpp-active', tabId === currentTabId);\n  });\n};\n\n/**\n * Update the DOM representation of the properties panel\n */\nPropertiesPanel.prototype.update = function(element) {\n  var current = this._current;\n\n  // no actual selection change\n  var needsCreate = true;\n\n  if (typeof element === 'undefined') {\n\n    // use RootElement of BPMN diagram to generate properties panel if no element is selected\n    element = this._canvas.getRootElement();\n  }\n\n  var newTabs = this._propertiesProvider.getTabs(element);\n\n  if (current && current.element === element) {\n    // see if we can reuse the existing panel\n\n    needsCreate = this._entriesChanged(current, newTabs);\n  }\n\n  if (needsCreate) {\n\n    if (current) {\n\n      // get active tab from the existing panel before remove it\n      var activeTabNode = domQuery('.bpp-properties-tab.bpp-active', current.panel);\n\n      var activeTabId;\n      if (activeTabNode) {\n        activeTabId = domAttr(activeTabNode, 'data-tab');\n      }\n\n      // remove old panel\n      domRemove(current.panel);\n    }\n\n    this._current = this._create(element, newTabs);\n\n    // activate the saved active tab from the remove panel or the first tab\n    (activeTabId) ? this.activateTab(activeTabId) : this.activateTab(this._current.tabs[0]);\n\n  }\n\n  if (this._current) {\n    // make sure correct tab contents are visible\n    this._updateActivation(this._current);\n\n  }\n\n  this._emit('changed');\n};\n\n\n/**\n * Returns true if one of two groups has different entries than the other.\n *\n * @param  {Object} current\n * @param  {Object} newTabs\n * @return {Booelan}\n */\nPropertiesPanel.prototype._entriesChanged = function(current, newTabs) {\n\n  var oldEntryIds = keys(current.entries),\n      newEntryIds = keys(extractEntries(newTabs));\n\n  return !isEmpty(xor(oldEntryIds, newEntryIds));\n};\n\nPropertiesPanel.prototype._emit = function(event) {\n  this._eventBus.fire('propertiesPanel.' + event, { panel: this, current: this._current });\n};\n\nPropertiesPanel.prototype._bindListeners = function(container) {\n\n  var self = this;\n\n  // handles a change for a given event\n  var handleChange = function handleChange(event) {\n\n    // see if we handle a change inside a [data-entry] element.\n    // if not, drop out\n    var inputNode = event.delegateTarget,\n        entryNode = domClosest(inputNode, '[data-entry]'),\n        entryId, entry;\n\n    // change from outside a [data-entry] element, simply ignore\n    if (!entryNode) {\n      return;\n    }\n\n    entryId = domAttr(entryNode, 'data-entry');\n    entry = self.getEntry(entryId);\n\n    var values = getFormControlValues(entryNode);\n\n    if (event.type === 'change') {\n\n      // - if the \"data-on-change\" attribute is present and a value is changed,\n      //   then the associated action is performed.\n      // - if the associated action returns \"true\" then an update to the business\n      //   object is done\n      // - if it does not return \"true\", then only the DOM content is updated\n      var onChangeAction = domAttr(inputNode, 'data-on-change');\n\n      if (onChangeAction) {\n        var isEntryDirty = self.executeAction(entry, entryNode, onChangeAction, event);\n\n        if (!isEntryDirty) {\n          return self.update(self._current.element);\n        }\n      }\n    }\n    self.applyChanges(entry, values, entryNode);\n    self.updateState(entry, entryNode);\n  };\n\n  // debounce update only elements that are target of key events,\n  // i.e. INPUT and TEXTAREA. SELECTs will trigger an immediate update anyway.\n  domDelegate.bind(container, 'input, textarea, [contenteditable]', 'input', debounce(handleChange, DEBOUNCE_DELAY));\n  domDelegate.bind(container, 'input, textarea, select, [contenteditable]', 'change', handleChange);\n\n  // handle key events\n  domDelegate.bind(container, 'select', 'keydown', function(e) {\n\n    // DEL\n    if (e.keyCode === 46) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  });\n\n  domDelegate.bind(container, '[data-action]', 'click', function onClick(event) {\n\n    // triggers on all inputs\n    var inputNode = event.delegateTarget,\n        entryNode = domClosest(inputNode, '[data-entry]');\n\n    var actionId = domAttr(inputNode, 'data-action'),\n        entryId = domAttr(entryNode, 'data-entry');\n\n    var entry = self.getEntry(entryId);\n\n    var isEntryDirty = self.executeAction(entry, entryNode, actionId, event);\n\n    if (isEntryDirty) {\n      var values = getFormControlValues(entryNode);\n\n      self.applyChanges(entry, values, entryNode);\n    }\n\n    self.updateState(entry, entryNode);\n  });\n\n  function handleInput(event, element) {\n    // triggers on all inputs\n    var inputNode = event.delegateTarget;\n\n    var entryNode = domClosest(inputNode, '[data-entry]');\n\n    // only work on data entries\n    if (!entryNode) {\n      return;\n    }\n\n    var eventHandlerId = domAttr(inputNode, 'data-blur'),\n        entryId = domAttr(entryNode, 'data-entry');\n\n    var entry = self.getEntry(entryId);\n\n    var isEntryDirty = self.executeAction(entry, entryNode, eventHandlerId, event);\n\n    if (isEntryDirty) {\n      var values = getFormControlValues(entryNode);\n\n      self.applyChanges(entry, values, entryNode);\n    }\n\n    self.updateState(entry, entryNode);\n  }\n\n  domDelegate.bind(container, '[data-blur]', 'blur', handleInput, true);\n\n  // make tab links interactive\n  domDelegate.bind(container, '.bpp-properties-tabs-links [data-tab-target]', 'click', function(event) {\n    event.preventDefault();\n\n    var delegateTarget = event.delegateTarget;\n\n    var tabId = domAttr(delegateTarget, 'data-tab-target');\n\n    // activate tab on link click\n    self.activateTab(tabId);\n  });\n\n};\n\nPropertiesPanel.prototype.updateState = function(entry, entryNode) {\n  this.updateShow(entry, entryNode);\n  this.updateDisable(entry, entryNode);\n};\n\n/**\n * Update the visibility of the entry node in the DOM\n */\nPropertiesPanel.prototype.updateShow = function(entry, node) {\n\n  var current = this._current;\n\n  if (!current) {\n    return;\n  }\n\n  var showNodes = domQueryAll('[data-show]', node) || [];\n\n  forEach(showNodes, function(showNode) {\n\n    var expr = domAttr(showNode, 'data-show');\n    var fn = get(entry, expr);\n    if (fn) {\n      var scope = domClosest(showNode, '[data-scope]') || node;\n      var shouldShow = fn(current.element, node, showNode, scope) || false;\n      if (shouldShow) {\n        domClasses(showNode).remove(HIDE_CLASS);\n      } else {\n        domClasses(showNode).add(HIDE_CLASS);\n      }\n    }\n  });\n};\n\n/**\n * Evaluates a given function. If it returns true, then the\n * node is marked as \"disabled\".\n */\nPropertiesPanel.prototype.updateDisable = function(entry, node) {\n  var current = this._current;\n\n  if (!current) {\n    return;\n  }\n\n  var nodes = domQueryAll('[data-disable]', node) || [];\n\n  forEach(nodes, function(currentNode) {\n    var expr = domAttr(currentNode, 'data-disable');\n    var fn = get(entry, expr);\n    if (fn) {\n      var scope = domClosest(currentNode, '[data-scope]') || node;\n      var shouldDisable = fn(current.element, node, currentNode, scope) || false;\n      domAttr(currentNode, 'disabled', shouldDisable ? '' : null);\n    }\n  });\n};\n\nPropertiesPanel.prototype.executeAction = function(entry, entryNode, actionId, event) {\n  var current = this._current;\n\n  if (!current) {\n    return;\n  }\n\n  var fn = get(entry, actionId);\n  if (fn) {\n    var scopeNode = domClosest(event.target, '[data-scope]') || entryNode;\n    return fn.apply(entry, [ current.element, entryNode, event, scopeNode ]);\n  }\n};\n\n/**\n * Apply changes to the business object by executing a command\n */\nPropertiesPanel.prototype.applyChanges = function(entry, values, containerElement) {\n\n  var element = this._current.element;\n\n  // ensure we only update the model if we got dirty changes\n  if (valuesEqual(values, entry.oldValues)) {\n    return;\n  }\n\n  var command = entry.set(element, values, containerElement);\n\n  var commandToExecute;\n\n  if (isArray(command)) {\n    if (command.length) {\n      commandToExecute = {\n        cmd: 'properties-panel.multi-command-executor',\n        context: flattenDeep(command)\n      };\n    }\n  } else {\n    commandToExecute = command;\n  }\n\n  if (commandToExecute) {\n    this._commandStack.execute(commandToExecute.cmd, commandToExecute.context || { element : element });\n  } else {\n    this.update(element);\n  }\n};\n\n\n/**\n * apply validation errors in the DOM and show or remove an error message near the entry node.\n */\nPropertiesPanel.prototype.applyValidationErrors = function(validationErrors, entryNode) {\n\n  var valid = true;\n\n  var controlNodes = getFormControls(entryNode, true);\n\n  forEach(controlNodes, function(controlNode) {\n\n    var name = domAttr(controlNode, 'name') || domAttr(controlNode, 'data-name');\n\n    var error = validationErrors && validationErrors[name];\n\n    var errorMessageNode = domQuery('.bpp-error-message', controlNode.parentNode);\n\n    if (error) {\n      valid = false;\n\n      if (!errorMessageNode) {\n        errorMessageNode = domify('<div></div>');\n\n        domClasses(errorMessageNode).add('bpp-error-message');\n\n        // insert errorMessageNode after controlNode\n        controlNode.parentNode.insertBefore(errorMessageNode, controlNode.nextSibling);\n      }\n\n      errorMessageNode.innerHTML = error;\n\n      domClasses(controlNode).add('invalid');\n    } else {\n      domClasses(controlNode).remove('invalid');\n\n      if (errorMessageNode) {\n        controlNode.parentNode.removeChild(errorMessageNode);\n      }\n    }\n  });\n\n  return valid;\n};\n\n\n/**\n * Check if the entry contains valid input\n */\nPropertiesPanel.prototype.validate = function(entry, values, entryNode) {\n  var self = this;\n\n  var current = this._current;\n\n  var valid = true;\n\n  entryNode = entryNode || domQuery('[data-entry=\"' + entry.id + '\"]', current.panel);\n\n  if (values instanceof Array) {\n    var listContainer = domQuery('[data-list-entry-container]', entryNode),\n        listEntryNodes = listContainer.children || [];\n\n    // create new elements\n    for (var i = 0; i < values.length; i++) {\n      var listValue = values[i];\n\n      if (entry.validateListItem) {\n\n        var validationErrors = entry.validateListItem(current.element, listValue, entryNode, i),\n            listEntryNode = listEntryNodes[i];\n\n        valid = self.applyValidationErrors(validationErrors, listEntryNode) && valid;\n      }\n    }\n  } else {\n    if (entry.validate) {\n      this.validationErrors = entry.validate(current.element, values, entryNode);\n\n      valid = self.applyValidationErrors(this.validationErrors, entryNode) && valid;\n    }\n  }\n\n  return valid;\n};\n\nPropertiesPanel.prototype.getEntry = function(id) {\n  return this._current && this._current.entries[id];\n};\n\nvar flattenDeep = require('lodash/flattenDeep'),\n    keyBy = require('lodash/keyBy'),\n    map = require('lodash/map');\n\nPropertiesPanel.prototype._create = function(element, tabs) {\n\n  if (!element) {\n    return null;\n  }\n\n  var containerNode = this._container;\n\n  var panelNode = this._createPanel(element, tabs);\n\n  containerNode.appendChild(panelNode);\n\n  var entries = extractEntries(tabs);\n  var groups = extractGroups(tabs);\n\n  return {\n    tabs: tabs,\n    groups: groups,\n    entries: entries,\n    element: element,\n    panel: panelNode\n  };\n};\n\n/**\n * Update variable parts of the entry node on element changes.\n *\n * @param {djs.model.Base} element\n * @param {EntryDescriptor} entry\n * @param {Object} values\n * @param {HTMLElement} entryNode\n * @param {Number} idx\n */\nPropertiesPanel.prototype._bindTemplate = function(element, entry, values, entryNode, idx) {\n\n  var eventBus = this._eventBus;\n\n  function isPropertyEditable(entry, propertyName) {\n    return eventBus.fire('propertiesPanel.isPropertyEditable', {\n      entry: entry,\n      propertyName: propertyName,\n      element: element\n    });\n  }\n\n  var inputNodes = getPropertyPlaceholders(entryNode);\n\n  forEach(inputNodes, function(node) {\n\n    var name,\n        newValue,\n        editable;\n\n    // we deal with an input element\n    if ('value' in node || isContentEditable(node) === 'true') {\n      name = domAttr(node, 'name') || domAttr(node, 'data-name');\n      newValue = values[name];\n\n      editable = isPropertyEditable(entry, name);\n      if (editable && entry.editable) {\n        editable = entry.editable(element, entryNode, node, name, newValue, idx);\n      }\n\n      domAttr(node, 'readonly', editable ? null : '');\n      domAttr(node, 'disabled', editable ? null : '');\n\n      // take full control over setting the value\n      // and possibly updating the input in entry#setControlValue\n      if (entry.setControlValue) {\n        entry.setControlValue(element, entryNode, node, name, newValue, idx);\n      } else if (isToggle(node)) {\n        setToggleValue(node, newValue);\n      } else if (isSelect(node)) {\n        setSelectValue(node, newValue);\n      } else {\n        setInputValue(node, newValue);\n      }\n    }\n\n    // we deal with some non-editable html element\n    else {\n      name = domAttr(node, 'data-value');\n      newValue = values[name];\n      if (entry.setControlValue) {\n        entry.setControlValue(element, entryNode, node, name, newValue, idx);\n      } else {\n        setTextValue(node, newValue);\n      }\n    }\n  });\n};\n\n// TODO(nikku): WTF freaking name? Change / clarify.\nPropertiesPanel.prototype._updateActivation = function(current) {\n  var self = this;\n\n  var eventBus = this._eventBus;\n\n  var element = current.element;\n\n  function isEntryVisible(entry) {\n    return eventBus.fire('propertiesPanel.isEntryVisible', {\n      entry: entry,\n      element: element\n    });\n  }\n\n  function isGroupVisible(group, element, groupNode) {\n    if (typeof group.enabled === 'function') {\n      return group.enabled(element, groupNode);\n    } else {\n      return true;\n    }\n  }\n\n  function isTabVisible(tab, element) {\n    if (typeof tab.enabled === 'function') {\n      return tab.enabled(element);\n    } else {\n      return true;\n    }\n  }\n\n  function toggleVisible(node, visible) {\n    domClasses(node).toggle(HIDE_CLASS, !visible);\n  }\n\n  // check whether the active tab is visible\n  // if not: set the first tab as active tab\n  function checkActiveTabVisibility(node, visible) {\n    var isActive = domClasses(node).has('bpp-active');\n    if (!visible && isActive) {\n      self.activateTab(current.tabs[0]);\n    }\n  }\n\n  function updateLabel(element, selector, text) {\n    var labelNode = domQuery(selector, element);\n\n    if (!labelNode) {\n      return;\n    }\n\n    labelNode.textContent = text;\n  }\n\n  var panelNode = current.panel;\n\n  forEach(current.tabs, function(tab) {\n\n    var tabNode = domQuery('[data-tab=' + tab.id + ']', panelNode);\n    var tabLinkNode = domQuery('[data-tab-target=' + tab.id + ']', panelNode).parentNode;\n\n    var tabVisible = false;\n\n    forEach(tab.groups, function(group) {\n\n      var groupVisible = false;\n\n      var groupNode = domQuery('[data-group=' + group.id + ']', tabNode);\n\n      forEach(group.entries, function(entry) {\n\n        var entryNode = domQuery('[data-entry=\"' + entry.id + '\"]', groupNode);\n\n        var entryVisible = isEntryVisible(entry);\n\n        groupVisible = groupVisible || entryVisible;\n\n        toggleVisible(entryNode, entryVisible);\n\n        var values = 'get' in entry ? entry.get(element, entryNode) : {};\n\n        if (values instanceof Array) {\n          var listEntryContainer = domQuery('[data-list-entry-container]', entryNode);\n          var existingElements = listEntryContainer.children || [];\n\n          for (var i = 0; i < values.length; i++) {\n            var listValue = values[i];\n            var listItemNode = existingElements[i];\n            if (!listItemNode) {\n              listItemNode = domify(entry.createListEntryTemplate(listValue, i, listEntryContainer));\n              listEntryContainer.appendChild(listItemNode);\n            }\n            domAttr(listItemNode, 'data-index', i);\n\n            self._bindTemplate(element, entry, listValue, listItemNode, i);\n          }\n\n          var entriesToRemove = existingElements.length - values.length;\n\n          for (var j = 0; j < entriesToRemove; j++) {\n            // remove orphaned element\n            listEntryContainer.removeChild(listEntryContainer.lastChild);\n          }\n\n        } else {\n          self._bindTemplate(element, entry, values, entryNode);\n        }\n\n        // update conditionally visible elements\n        self.updateState(entry, entryNode);\n        self.validate(entry, values, entryNode);\n\n        // remember initial state for later dirty checking\n        entry.oldValues = getFormControlValues(entryNode);\n      });\n\n      if (typeof group.label === 'function') {\n        updateLabel(groupNode, '.group-label', group.label(element, groupNode));\n      }\n\n      groupVisible = groupVisible && isGroupVisible(group, element, groupNode);\n\n      tabVisible = tabVisible || groupVisible;\n\n      toggleVisible(groupNode, groupVisible);\n    });\n\n    tabVisible = tabVisible && isTabVisible(tab, element);\n\n    toggleVisible(tabNode, tabVisible);\n    toggleVisible(tabLinkNode, tabVisible);\n\n    checkActiveTabVisibility(tabNode, tabVisible);\n  });\n\n  // inject elements id into header\n  updateLabel(panelNode, '[data-label-id]', getBusinessObject(element).id || '');\n};\n\nPropertiesPanel.prototype._createPanel = function(element, tabs) {\n  var self = this;\n\n  var panelNode = domify('<div class=\"bpp-properties\"></div>'),\n      headerNode = domify('<div class=\"bpp-properties-header\">' +\n        '<div class=\"label\" data-label-id></div>' +\n        '<div class=\"search\">' +\n          '<input type=\"search\" placeholder=\"Search for property\" />' +\n          '<button><span>Search</span></button>' +\n        '</div>' +\n      '</div>'),\n      tabBarNode = domify('<div class=\"bpp-properties-tab-bar\"></div>'),\n      tabLinksNode = domify('<ul class=\"bpp-properties-tabs-links\"></ul>'),\n      tabContainerNode = domify('<div class=\"bpp-properties-tabs-container\"></div>');\n\n  panelNode.appendChild(headerNode);\n\n  forEach(tabs, function(tab, tabIndex) {\n\n    if (!tab.id) {\n      throw new Error('tab must have an id');\n    }\n\n    var tabNode = domify('<div class=\"bpp-properties-tab\" data-tab=\"' + tab.id + '\"></div>'),\n        tabLinkNode = domify('<li class=\"bpp-properties-tab-link\">' +\n          '<a href data-tab-target=\"' + tab.id + '\">' + tab.label + '</a>' +\n        '</li>');\n\n    var groups = tab.groups;\n\n    forEach(groups, function(group) {\n\n      if (!group.id) {\n        throw new Error('group must have an id');\n      }\n\n      var groupNode = domify('<div class=\"bpp-properties-group\" data-group=\"' + group.id + '\">' +\n          '<span class=\"group-toggle\"></span>' +\n          '<span class=\"group-label\">' + group.label + '</span>' +\n        '</div>');\n\n      // TODO(nre): use event delegation to handle that...\n      groupNode.querySelector('.group-toggle').addEventListener('click', function(evt) {\n        domClasses(groupNode).toggle('group-closed');\n        evt.preventDefault();\n        evt.stopPropagation();\n      });\n      groupNode.addEventListener('click', function(evt) {\n        if (!evt.defaultPrevented && domClasses(groupNode).has('group-closed')) {\n          domClasses(groupNode).remove('group-closed');\n        }\n      });\n\n      forEach(group.entries, function(entry) {\n\n        if (!entry.id) {\n          throw new Error('entry must have an id');\n        }\n\n        var html = entry.html;\n\n        if (typeof html === 'string') {\n          html = domify(html);\n        }\n\n        // unwrap jquery\n        if (html.get && html.constructor.prototype.jquery) {\n          html = html.get(0);\n        }\n\n        var entryNode = domify('<div class=\"bpp-properties-entry\" data-entry=\"' + entry.id + '\"></div>');\n\n        forEach(entry.cssClasses || [], function(cssClass) {\n          domClasses(entryNode).add(cssClass);\n        });\n\n        entryNode.appendChild(html);\n\n        groupNode.appendChild(entryNode);\n\n        // update conditionally visible elements\n        self.updateState(entry, entryNode);\n      });\n\n      tabNode.appendChild(groupNode);\n    });\n\n    tabLinksNode.appendChild(tabLinkNode);\n    tabContainerNode.appendChild(tabNode);\n  });\n\n  tabBarNode.appendChild(tabLinksNode);\n\n  panelNode.appendChild(tabBarNode);\n  panelNode.appendChild(tabContainerNode);\n\n  return panelNode;\n};\n\n\n\nfunction setInputValue(node, value) {\n\n  var contentEditable = isContentEditable(node);\n\n  var oldValue = contentEditable ? node.innerText : node.value;\n\n  var selection;\n\n  // prevents input fields from having the value 'undefined'\n  if (value === undefined) {\n    value = '';\n  }\n\n  if (oldValue === value) {\n    return;\n  }\n\n  // update selection on undo/redo\n  if (document.activeElement === node) {\n    selection = updateSelection(getSelection(node), oldValue, value);\n  }\n\n  if (contentEditable) {\n    node.innerText = value;\n  } else {\n    node.value = value;\n  }\n\n  if (selection) {\n    setSelection(node, selection);\n  }\n}\n\nfunction setSelectValue(node, value) {\n  if (value !== undefined) {\n    node.value = value;\n  }\n}\n\nfunction setToggleValue(node, value) {\n  var nodeValue = node.value;\n\n  node.checked = (value === nodeValue) || (!domAttr(node, 'value') && value);\n}\n\nfunction setTextValue(node, value) {\n  node.textContent = value;\n}\n\nfunction getSelection(node) {\n\n  return isContentEditable(node) ? getContentEditableSelection(node) : {\n    start: node.selectionStart,\n    end: node.selectionEnd\n  };\n}\n\nfunction getContentEditableSelection(node) {\n\n  var selection = window.getSelection();\n\n  var focusNode = selection.focusNode,\n      focusOffset = selection.focusOffset,\n      anchorOffset = selection.anchorOffset;\n\n  if (!focusNode) {\n    throw new Error('not selected');\n  }\n\n  // verify we have selection on the current element\n  if (!node.contains(focusNode)) {\n    throw new Error('not selected');\n  }\n\n  return {\n    start: Math.min(focusOffset, anchorOffset),\n    end: Math.max(focusOffset, anchorOffset)\n  };\n}\n\nfunction setSelection(node, selection) {\n\n  if (isContentEditable(node)) {\n    setContentEditableSelection(node, selection);\n  } else {\n    node.selectionStart = selection.start;\n    node.selectionEnd = selection.end;\n  }\n}\n\nfunction setContentEditableSelection(node, selection) {\n\n  var focusNode,\n      domRange,\n      domSelection;\n\n  focusNode = node.firstChild || node,\n  domRange = document.createRange();\n  domRange.setStart(focusNode, selection.start);\n  domRange.setEnd(focusNode, selection.end);\n\n  domSelection = window.getSelection();\n  domSelection.removeAllRanges();\n  domSelection.addRange(domRange);\n}\n\nfunction isImplicitRoot(element) {\n  return element.id === '__implicitroot';\n}"]},"metadata":{},"sourceType":"script"}