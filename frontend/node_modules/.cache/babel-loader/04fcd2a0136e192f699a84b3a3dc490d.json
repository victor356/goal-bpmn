{"ast":null,"code":"import { add as collectionAdd, remove as collectionRemove } from '../../../util/Collections';\n/**\n * A handler that implements reversible attaching/detaching of shapes.\n */\n\nexport default function UpdateAttachmentHandler(modeling) {\n  this._modeling = modeling;\n}\nUpdateAttachmentHandler.$inject = ['modeling'];\n\nUpdateAttachmentHandler.prototype.execute = function (context) {\n  var shape = context.shape,\n      newHost = context.newHost,\n      oldHost = shape.host; // (0) detach from old host\n\n  context.oldHost = oldHost;\n  context.attacherIdx = removeAttacher(oldHost, shape); // (1) attach to new host\n\n  addAttacher(newHost, shape); // (2) update host\n\n  shape.host = newHost;\n  return shape;\n};\n\nUpdateAttachmentHandler.prototype.revert = function (context) {\n  var shape = context.shape,\n      newHost = context.newHost,\n      oldHost = context.oldHost,\n      attacherIdx = context.attacherIdx; // (2) update host\n\n  shape.host = oldHost; // (1) attach to new host\n\n  removeAttacher(newHost, shape); // (0) detach from old host\n\n  addAttacher(oldHost, shape, attacherIdx);\n  return shape;\n};\n\nfunction removeAttacher(host, attacher) {\n  // remove attacher from host\n  return collectionRemove(host && host.attachers, attacher);\n}\n\nfunction addAttacher(host, attacher, idx) {\n  if (!host) {\n    return;\n  }\n\n  var attachers = host.attachers;\n\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n\n  collectionAdd(attachers, attacher, idx);\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/modeling/cmd/UpdateAttachmentHandler.js"],"names":["add","collectionAdd","remove","collectionRemove","UpdateAttachmentHandler","modeling","_modeling","$inject","prototype","execute","context","shape","newHost","oldHost","host","attacherIdx","removeAttacher","addAttacher","revert","attacher","attachers","idx"],"mappings":"AAAA,SACEA,GAAG,IAAIC,aADT,EAEEC,MAAM,IAAIC,gBAFZ,QAGO,2BAHP;AAKA;AACA;AACA;;AACA,eAAe,SAASC,uBAAT,CAAiCC,QAAjC,EAA2C;AACxD,OAAKC,SAAL,GAAiBD,QAAjB;AACD;AAEDD,uBAAuB,CAACG,OAAxB,GAAkC,CAAE,UAAF,CAAlC;;AAGAH,uBAAuB,CAACI,SAAxB,CAAkCC,OAAlC,GAA4C,UAASC,OAAT,EAAkB;AAC5D,MAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;AAAA,MACIC,OAAO,GAAGF,OAAO,CAACE,OADtB;AAAA,MAEIC,OAAO,GAAGF,KAAK,CAACG,IAFpB,CAD4D,CAK5D;;AACAJ,EAAAA,OAAO,CAACG,OAAR,GAAkBA,OAAlB;AACAH,EAAAA,OAAO,CAACK,WAAR,GAAsBC,cAAc,CAACH,OAAD,EAAUF,KAAV,CAApC,CAP4D,CAS5D;;AACAM,EAAAA,WAAW,CAACL,OAAD,EAAUD,KAAV,CAAX,CAV4D,CAY5D;;AACAA,EAAAA,KAAK,CAACG,IAAN,GAAaF,OAAb;AAEA,SAAOD,KAAP;AACD,CAhBD;;AAkBAP,uBAAuB,CAACI,SAAxB,CAAkCU,MAAlC,GAA2C,UAASR,OAAT,EAAkB;AAC3D,MAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;AAAA,MACIC,OAAO,GAAGF,OAAO,CAACE,OADtB;AAAA,MAEIC,OAAO,GAAGH,OAAO,CAACG,OAFtB;AAAA,MAGIE,WAAW,GAAGL,OAAO,CAACK,WAH1B,CAD2D,CAM3D;;AACAJ,EAAAA,KAAK,CAACG,IAAN,GAAaD,OAAb,CAP2D,CAS3D;;AACAG,EAAAA,cAAc,CAACJ,OAAD,EAAUD,KAAV,CAAd,CAV2D,CAY3D;;AACAM,EAAAA,WAAW,CAACJ,OAAD,EAAUF,KAAV,EAAiBI,WAAjB,CAAX;AAEA,SAAOJ,KAAP;AACD,CAhBD;;AAmBA,SAASK,cAAT,CAAwBF,IAAxB,EAA8BK,QAA9B,EAAwC;AACtC;AACA,SAAOhB,gBAAgB,CAACW,IAAI,IAAIA,IAAI,CAACM,SAAd,EAAyBD,QAAzB,CAAvB;AACD;;AAED,SAASF,WAAT,CAAqBH,IAArB,EAA2BK,QAA3B,EAAqCE,GAArC,EAA0C;AAExC,MAAI,CAACP,IAAL,EAAW;AACT;AACD;;AAED,MAAIM,SAAS,GAAGN,IAAI,CAACM,SAArB;;AAEA,MAAI,CAACA,SAAL,EAAgB;AACdN,IAAAA,IAAI,CAACM,SAAL,GAAiBA,SAAS,GAAG,EAA7B;AACD;;AAEDnB,EAAAA,aAAa,CAACmB,SAAD,EAAYD,QAAZ,EAAsBE,GAAtB,CAAb;AACD","sourcesContent":["import {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../../../util/Collections';\n\n/**\n * A handler that implements reversible attaching/detaching of shapes.\n */\nexport default function UpdateAttachmentHandler(modeling) {\n  this._modeling = modeling;\n}\n\nUpdateAttachmentHandler.$inject = [ 'modeling' ];\n\n\nUpdateAttachmentHandler.prototype.execute = function(context) {\n  var shape = context.shape,\n      newHost = context.newHost,\n      oldHost = shape.host;\n\n  // (0) detach from old host\n  context.oldHost = oldHost;\n  context.attacherIdx = removeAttacher(oldHost, shape);\n\n  // (1) attach to new host\n  addAttacher(newHost, shape);\n\n  // (2) update host\n  shape.host = newHost;\n\n  return shape;\n};\n\nUpdateAttachmentHandler.prototype.revert = function(context) {\n  var shape = context.shape,\n      newHost = context.newHost,\n      oldHost = context.oldHost,\n      attacherIdx = context.attacherIdx;\n\n  // (2) update host\n  shape.host = oldHost;\n\n  // (1) attach to new host\n  removeAttacher(newHost, shape);\n\n  // (0) detach from old host\n  addAttacher(oldHost, shape, attacherIdx);\n\n  return shape;\n};\n\n\nfunction removeAttacher(host, attacher) {\n  // remove attacher from host\n  return collectionRemove(host && host.attachers, attacher);\n}\n\nfunction addAttacher(host, attacher, idx) {\n\n  if (!host) {\n    return;\n  }\n\n  var attachers = host.attachers;\n\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n\n  collectionAdd(attachers, attacher, idx);\n}\n"]},"metadata":{},"sourceType":"module"}