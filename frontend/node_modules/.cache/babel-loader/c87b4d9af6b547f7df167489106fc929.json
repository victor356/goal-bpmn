{"ast":null,"code":"import { bind, forEach } from 'min-dash';\nvar HANDLE_OFFSET = -2,\n    HANDLE_SIZE = 5,\n    HANDLE_HIT_SIZE = 20;\nvar CLS_RESIZER = 'djs-resizer';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, clear as svgClear, create as svgCreate } from 'tiny-svg';\nimport { event as domEvent } from 'min-dom';\nimport { isPrimaryButton } from '../../util/Mouse';\nimport { asTRBL } from '../../layout/LayoutUtil';\nimport { transform } from '../../util/SvgTransformUtil';\n/**\n * This component is responsible for adding resize handles.\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {Selection} selection\n * @param {Resize} resize\n */\n\nexport default function ResizeHandles(eventBus, canvas, selection, resize) {\n  this._resize = resize;\n  this._canvas = canvas;\n  var self = this;\n  eventBus.on('selection.changed', function (e) {\n    var newSelection = e.newSelection; // remove old selection markers\n\n    self.removeResizers(); // add new selection markers ONLY if single selection\n\n    if (newSelection.length === 1) {\n      forEach(newSelection, bind(self.addResizer, self));\n    }\n  });\n  eventBus.on('shape.changed', function (e) {\n    var shape = e.element;\n\n    if (selection.isSelected(shape)) {\n      self.removeResizers();\n      self.addResizer(shape);\n    }\n  });\n}\n\nResizeHandles.prototype.makeDraggable = function (element, gfx, direction) {\n  var resize = this._resize;\n\n  function startResize(event) {\n    // only trigger on left mouse button\n    if (isPrimaryButton(event)) {\n      resize.activate(event, element, direction);\n    }\n  }\n\n  domEvent.bind(gfx, 'mousedown', startResize);\n  domEvent.bind(gfx, 'touchstart', startResize);\n};\n\nResizeHandles.prototype._createResizer = function (element, x, y, rotation, direction) {\n  var resizersParent = this._getResizersParent();\n\n  var group = svgCreate('g');\n  svgClasses(group).add(CLS_RESIZER);\n  svgClasses(group).add(CLS_RESIZER + '-' + element.id);\n  svgClasses(group).add(CLS_RESIZER + '-' + direction);\n  svgAppend(resizersParent, group);\n  var origin = -HANDLE_SIZE + HANDLE_OFFSET; // Create four drag indicators on the outline\n\n  var visual = svgCreate('rect');\n  svgAttr(visual, {\n    x: origin,\n    y: origin,\n    width: HANDLE_SIZE,\n    height: HANDLE_SIZE\n  });\n  svgClasses(visual).add(CLS_RESIZER + '-visual');\n  svgAppend(group, visual);\n  var hit = svgCreate('rect');\n  svgAttr(hit, {\n    x: origin,\n    y: origin,\n    width: HANDLE_HIT_SIZE,\n    height: HANDLE_HIT_SIZE\n  });\n  svgClasses(hit).add(CLS_RESIZER + '-hit');\n  svgAppend(group, hit);\n  transform(group, x, y, rotation);\n  return group;\n};\n\nResizeHandles.prototype.createResizer = function (element, direction) {\n  var resizer;\n  var trbl = asTRBL(element);\n\n  if (direction === 'nw') {\n    resizer = this._createResizer(element, trbl.left, trbl.top, 0, direction);\n  } else if (direction === 'ne') {\n    resizer = this._createResizer(element, trbl.right, trbl.top, 90, direction);\n  } else if (direction === 'se') {\n    resizer = this._createResizer(element, trbl.right, trbl.bottom, 180, direction);\n  } else {\n    resizer = this._createResizer(element, trbl.left, trbl.bottom, 270, direction);\n  }\n\n  this.makeDraggable(element, resizer, direction);\n}; // resize handles implementation ///////////////////////////////\n\n/**\n * Add resizers for a given element.\n *\n * @param {djs.model.Shape} shape\n */\n\n\nResizeHandles.prototype.addResizer = function (shape) {\n  var resize = this._resize;\n\n  if (!resize.canResize({\n    shape: shape\n  })) {\n    return;\n  }\n\n  this.createResizer(shape, 'nw');\n  this.createResizer(shape, 'ne');\n  this.createResizer(shape, 'se');\n  this.createResizer(shape, 'sw');\n};\n/**\n * Remove all resizers\n */\n\n\nResizeHandles.prototype.removeResizers = function () {\n  var resizersParent = this._getResizersParent();\n\n  svgClear(resizersParent);\n};\n\nResizeHandles.prototype._getResizersParent = function () {\n  return this._canvas.getLayer('resizers');\n};\n\nResizeHandles.$inject = ['eventBus', 'canvas', 'selection', 'resize'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/resize/ResizeHandles.js"],"names":["bind","forEach","HANDLE_OFFSET","HANDLE_SIZE","HANDLE_HIT_SIZE","CLS_RESIZER","append","svgAppend","attr","svgAttr","classes","svgClasses","clear","svgClear","create","svgCreate","event","domEvent","isPrimaryButton","asTRBL","transform","ResizeHandles","eventBus","canvas","selection","resize","_resize","_canvas","self","on","e","newSelection","removeResizers","length","addResizer","shape","element","isSelected","prototype","makeDraggable","gfx","direction","startResize","activate","_createResizer","x","y","rotation","resizersParent","_getResizersParent","group","add","id","origin","visual","width","height","hit","createResizer","resizer","trbl","left","top","right","bottom","canResize","getLayer","$inject"],"mappings":"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","sourcesContent":["import {\n  bind,\n  forEach\n} from 'min-dash';\n\nvar HANDLE_OFFSET = -2,\n    HANDLE_SIZE = 5,\n    HANDLE_HIT_SIZE = 20;\n\nvar CLS_RESIZER = 'djs-resizer';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  classes as svgClasses,\n  clear as svgClear,\n  create as svgCreate\n} from 'tiny-svg';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  isPrimaryButton\n} from '../../util/Mouse';\n\nimport {\n  asTRBL\n} from '../../layout/LayoutUtil';\n\nimport {\n  transform\n} from '../../util/SvgTransformUtil';\n\n\n/**\n * This component is responsible for adding resize handles.\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {Selection} selection\n * @param {Resize} resize\n */\nexport default function ResizeHandles(eventBus, canvas, selection, resize) {\n\n  this._resize = resize;\n  this._canvas = canvas;\n\n  var self = this;\n\n  eventBus.on('selection.changed', function(e) {\n    var newSelection = e.newSelection;\n\n    // remove old selection markers\n    self.removeResizers();\n\n    // add new selection markers ONLY if single selection\n    if (newSelection.length === 1) {\n      forEach(newSelection, bind(self.addResizer, self));\n    }\n  });\n\n  eventBus.on('shape.changed', function(e) {\n    var shape = e.element;\n\n    if (selection.isSelected(shape)) {\n      self.removeResizers();\n\n      self.addResizer(shape);\n    }\n  });\n}\n\n\nResizeHandles.prototype.makeDraggable = function(element, gfx, direction) {\n  var resize = this._resize;\n\n  function startResize(event) {\n    // only trigger on left mouse button\n    if (isPrimaryButton(event)) {\n      resize.activate(event, element, direction);\n    }\n  }\n\n  domEvent.bind(gfx, 'mousedown', startResize);\n  domEvent.bind(gfx, 'touchstart', startResize);\n};\n\n\nResizeHandles.prototype._createResizer = function(element, x, y, rotation, direction) {\n  var resizersParent = this._getResizersParent();\n\n  var group = svgCreate('g');\n  svgClasses(group).add(CLS_RESIZER);\n  svgClasses(group).add(CLS_RESIZER + '-' + element.id);\n  svgClasses(group).add(CLS_RESIZER + '-' + direction);\n\n  svgAppend(resizersParent, group);\n\n  var origin = -HANDLE_SIZE + HANDLE_OFFSET;\n\n  // Create four drag indicators on the outline\n  var visual = svgCreate('rect');\n  svgAttr(visual, {\n    x: origin,\n    y: origin,\n    width: HANDLE_SIZE,\n    height: HANDLE_SIZE\n  });\n  svgClasses(visual).add(CLS_RESIZER + '-visual');\n\n  svgAppend(group, visual);\n\n  var hit = svgCreate('rect');\n  svgAttr(hit, {\n    x: origin,\n    y: origin,\n    width: HANDLE_HIT_SIZE,\n    height: HANDLE_HIT_SIZE\n  });\n  svgClasses(hit).add(CLS_RESIZER + '-hit');\n\n  svgAppend(group, hit);\n\n  transform(group, x, y, rotation);\n\n  return group;\n};\n\nResizeHandles.prototype.createResizer = function(element, direction) {\n  var resizer;\n\n  var trbl = asTRBL(element);\n\n  if (direction === 'nw') {\n    resizer = this._createResizer(element, trbl.left, trbl.top, 0, direction);\n  } else if (direction === 'ne') {\n    resizer = this._createResizer(element, trbl.right, trbl.top, 90, direction);\n  } else if (direction === 'se') {\n    resizer = this._createResizer(element, trbl.right, trbl.bottom, 180, direction);\n  } else {\n    resizer = this._createResizer(element, trbl.left, trbl.bottom, 270, direction);\n  }\n\n  this.makeDraggable(element, resizer, direction);\n};\n\n// resize handles implementation ///////////////////////////////\n\n/**\n * Add resizers for a given element.\n *\n * @param {djs.model.Shape} shape\n */\nResizeHandles.prototype.addResizer = function(shape) {\n  var resize = this._resize;\n\n  if (!resize.canResize({ shape: shape })) {\n    return;\n  }\n\n  this.createResizer(shape, 'nw');\n  this.createResizer(shape, 'ne');\n  this.createResizer(shape, 'se');\n  this.createResizer(shape, 'sw');\n};\n\n/**\n * Remove all resizers\n */\nResizeHandles.prototype.removeResizers = function() {\n  var resizersParent = this._getResizersParent();\n\n  svgClear(resizersParent);\n};\n\nResizeHandles.prototype._getResizersParent = function() {\n  return this._canvas.getLayer('resizers');\n};\n\nResizeHandles.$inject = [\n  'eventBus',\n  'canvas',\n  'selection',\n  'resize'\n];\n"]},"metadata":{},"sourceType":"module"}