{"ast":null,"code":"'use strict';\n\nvar assign = require('lodash/assign');\n/**\n * Create an input parameter representing the given\n * binding and value.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\n\n\nfunction createInputParameter(binding, value, bpmnFactory) {\n  var scriptFormat = binding.scriptFormat,\n      parameterValue,\n      parameterDefinition;\n\n  if (scriptFormat) {\n    parameterDefinition = bpmnFactory.create('camunda:Script', {\n      scriptFormat: scriptFormat,\n      value: value\n    });\n  } else {\n    parameterValue = value;\n  }\n\n  return bpmnFactory.create('camunda:InputParameter', {\n    name: binding.name,\n    value: parameterValue,\n    definition: parameterDefinition\n  });\n}\n\nmodule.exports.createInputParameter = createInputParameter;\n/**\n * Create an output parameter representing the given\n * binding and value.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\n\nfunction createOutputParameter(binding, value, bpmnFactory) {\n  var scriptFormat = binding.scriptFormat,\n      parameterValue,\n      parameterDefinition;\n\n  if (scriptFormat) {\n    parameterDefinition = bpmnFactory.create('camunda:Script', {\n      scriptFormat: scriptFormat,\n      value: binding.source\n    });\n  } else {\n    parameterValue = binding.source;\n  }\n\n  return bpmnFactory.create('camunda:OutputParameter', {\n    name: value,\n    value: parameterValue,\n    definition: parameterDefinition\n  });\n}\n\nmodule.exports.createOutputParameter = createOutputParameter;\n/**\n * Create camunda property from the given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\n\nfunction createCamundaProperty(binding, value, bpmnFactory) {\n  return bpmnFactory.create('camunda:Property', {\n    name: binding.name,\n    value: value || ''\n  });\n}\n\nmodule.exports.createCamundaProperty = createCamundaProperty;\n/**\n * Create camunda:in element from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\n\nfunction createCamundaIn(binding, value, bpmnFactory) {\n  var properties = createCamundaInOutAttrs(binding, value);\n  return bpmnFactory.create('camunda:In', properties);\n}\n\nmodule.exports.createCamundaIn = createCamundaIn;\n/**\n * Create camunda:in with businessKey element from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\n\nfunction createCamundaInWithBusinessKey(binding, value, bpmnFactory) {\n  return bpmnFactory.create('camunda:In', {\n    businessKey: value\n  });\n}\n\nmodule.exports.createCamundaInWithBusinessKey = createCamundaInWithBusinessKey;\n/**\n * Create camunda:out element from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\n\nfunction createCamundaOut(binding, value, bpmnFactory) {\n  var properties = createCamundaInOutAttrs(binding, value);\n  return bpmnFactory.create('camunda:Out', properties);\n}\n\nmodule.exports.createCamundaOut = createCamundaOut;\n/**\n * Create camunda:executionListener element containing an inline script from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\n\nfunction createCamundaExecutionListenerScript(binding, value, bpmnFactory) {\n  var scriptFormat = binding.scriptFormat,\n      parameterValue,\n      parameterDefinition;\n\n  if (scriptFormat) {\n    parameterDefinition = bpmnFactory.create('camunda:Script', {\n      scriptFormat: scriptFormat,\n      value: value\n    });\n  } else {\n    parameterValue = value;\n  }\n\n  return bpmnFactory.create('camunda:ExecutionListener', {\n    event: binding.event,\n    value: parameterValue,\n    script: parameterDefinition\n  });\n}\n\nmodule.exports.createCamundaExecutionListenerScript = createCamundaExecutionListenerScript;\n/**\n * Create camunda:field element containing string or expression from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\n\nfunction createCamundaFieldInjection(binding, value, bpmnFactory) {\n  var DEFAULT_PROPS = {\n    'string': undefined,\n    'expression': undefined,\n    'name': undefined\n  };\n  var props = assign({}, DEFAULT_PROPS);\n\n  if (!binding.expression) {\n    props.string = value;\n  } else {\n    props.expression = value;\n  }\n\n  props.name = binding.name;\n  return bpmnFactory.create('camunda:Field', props);\n}\n\nmodule.exports.createCamundaFieldInjection = createCamundaFieldInjection; // helpers ////////////////////////////\n\n/**\n * Create properties for camunda:in and camunda:out types.\n */\n\nfunction createCamundaInOutAttrs(binding, value) {\n  var properties = {}; // camunda:in source(Expression) target\n\n  if (binding.target) {\n    properties.target = binding.target;\n\n    if (binding.expression) {\n      properties.sourceExpression = value;\n    } else {\n      properties.source = value;\n    }\n  } else // camunda:(in|out) variables local\n    if (binding.variables) {\n      properties.variables = 'all';\n\n      if (binding.variables === 'local') {\n        properties.local = true;\n      }\n    } // camunda:out source(Expression) target\n    else {\n        properties.target = value;\n        ['source', 'sourceExpression'].forEach(function (k) {\n          if (binding[k]) {\n            properties[k] = binding[k];\n          }\n        });\n      }\n\n  return properties;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/element-templates/CreateHelper.js"],"names":["assign","require","createInputParameter","binding","value","bpmnFactory","scriptFormat","parameterValue","parameterDefinition","create","name","definition","module","exports","createOutputParameter","source","createCamundaProperty","createCamundaIn","properties","createCamundaInOutAttrs","createCamundaInWithBusinessKey","businessKey","createCamundaOut","createCamundaExecutionListenerScript","event","script","createCamundaFieldInjection","DEFAULT_PROPS","undefined","props","expression","string","target","sourceExpression","variables","local","forEach","k"],"mappings":"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","sourcesContent":["'use strict';\n\nvar assign = require('lodash/assign');\n\n/**\n * Create an input parameter representing the given\n * binding and value.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\nfunction createInputParameter(binding, value, bpmnFactory) {\n  var scriptFormat = binding.scriptFormat,\n      parameterValue,\n      parameterDefinition;\n\n  if (scriptFormat) {\n    parameterDefinition = bpmnFactory.create('camunda:Script', {\n      scriptFormat: scriptFormat,\n      value: value\n    });\n  } else {\n    parameterValue = value;\n  }\n\n  return bpmnFactory.create('camunda:InputParameter', {\n    name: binding.name,\n    value: parameterValue,\n    definition: parameterDefinition\n  });\n}\n\nmodule.exports.createInputParameter = createInputParameter;\n\n\n/**\n * Create an output parameter representing the given\n * binding and value.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\nfunction createOutputParameter(binding, value, bpmnFactory) {\n  var scriptFormat = binding.scriptFormat,\n      parameterValue,\n      parameterDefinition;\n\n  if (scriptFormat) {\n    parameterDefinition = bpmnFactory.create('camunda:Script', {\n      scriptFormat: scriptFormat,\n      value: binding.source\n    });\n  } else {\n    parameterValue = binding.source;\n  }\n\n  return bpmnFactory.create('camunda:OutputParameter', {\n    name: value,\n    value: parameterValue,\n    definition: parameterDefinition\n  });\n}\n\nmodule.exports.createOutputParameter = createOutputParameter;\n\n\n/**\n * Create camunda property from the given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\nfunction createCamundaProperty(binding, value, bpmnFactory) {\n  return bpmnFactory.create('camunda:Property', {\n    name: binding.name,\n    value: value || ''\n  });\n}\n\nmodule.exports.createCamundaProperty = createCamundaProperty;\n\n\n/**\n * Create camunda:in element from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\nfunction createCamundaIn(binding, value, bpmnFactory) {\n\n  var properties = createCamundaInOutAttrs(binding, value);\n\n  return bpmnFactory.create('camunda:In', properties);\n}\n\nmodule.exports.createCamundaIn = createCamundaIn;\n\n\n/**\n * Create camunda:in with businessKey element from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\nfunction createCamundaInWithBusinessKey(binding, value, bpmnFactory) {\n  return bpmnFactory.create('camunda:In', {\n    businessKey: value\n  });\n}\n\nmodule.exports.createCamundaInWithBusinessKey = createCamundaInWithBusinessKey;\n\n\n/**\n * Create camunda:out element from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\nfunction createCamundaOut(binding, value, bpmnFactory) {\n  var properties = createCamundaInOutAttrs(binding, value);\n\n  return bpmnFactory.create('camunda:Out', properties);\n}\n\nmodule.exports.createCamundaOut = createCamundaOut;\n\n\n/**\n * Create camunda:executionListener element containing an inline script from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\nfunction createCamundaExecutionListenerScript(binding, value, bpmnFactory) {\n  var scriptFormat = binding.scriptFormat,\n      parameterValue,\n      parameterDefinition;\n\n  if (scriptFormat) {\n    parameterDefinition = bpmnFactory.create('camunda:Script', {\n      scriptFormat: scriptFormat,\n      value: value\n    });\n  } else {\n    parameterValue = value;\n  }\n\n  return bpmnFactory.create('camunda:ExecutionListener', {\n    event: binding.event,\n    value: parameterValue,\n    script: parameterDefinition\n  });\n}\n\nmodule.exports.createCamundaExecutionListenerScript = createCamundaExecutionListenerScript;\n\n/**\n * Create camunda:field element containing string or expression from given binding.\n *\n * @param {PropertyBinding} binding\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement}\n */\nfunction createCamundaFieldInjection(binding, value, bpmnFactory) {\n  var DEFAULT_PROPS = {\n    'string': undefined,\n    'expression': undefined,\n    'name': undefined\n  };\n\n  var props = assign({}, DEFAULT_PROPS);\n\n  if (!binding.expression) {\n    props.string = value;\n  } else {\n    props.expression = value;\n  }\n  props.name = binding.name;\n\n  return bpmnFactory.create('camunda:Field', props);\n}\nmodule.exports.createCamundaFieldInjection = createCamundaFieldInjection;\n\n\n// helpers ////////////////////////////\n\n/**\n * Create properties for camunda:in and camunda:out types.\n */\nfunction createCamundaInOutAttrs(binding, value) {\n\n  var properties = {};\n\n  // camunda:in source(Expression) target\n  if (binding.target) {\n\n    properties.target = binding.target;\n\n    if (binding.expression) {\n      properties.sourceExpression = value;\n    } else {\n      properties.source = value;\n    }\n  } else\n\n  // camunda:(in|out) variables local\n  if (binding.variables) {\n    properties.variables = 'all';\n\n    if (binding.variables === 'local') {\n      properties.local = true;\n    }\n  }\n\n  // camunda:out source(Expression) target\n  else {\n    properties.target = value;\n\n    [ 'source', 'sourceExpression' ].forEach(function(k) {\n      if (binding[k]) {\n        properties[k] = binding[k];\n      }\n    });\n  }\n\n  return properties;\n}\n"]},"metadata":{},"sourceType":"script"}