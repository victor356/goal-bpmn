{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { closest as domClosest } from 'min-dom';\nvar LOW_PRIORITY = 250;\n/**\n * The tool manager acts as middle-man between the available tool's and the Palette,\n * it takes care of making sure that the correct active state is set.\n *\n * @param  {Object}    eventBus\n * @param  {Object}    dragging\n */\n\nexport default function ToolManager(eventBus, dragging) {\n  this._eventBus = eventBus;\n  this._dragging = dragging;\n  this._tools = [];\n  this._active = null;\n}\nToolManager.$inject = ['eventBus', 'dragging'];\n\nToolManager.prototype.registerTool = function (name, events) {\n  var tools = this._tools;\n\n  if (!events) {\n    throw new Error('A tool has to be registered with it\\'s \"events\"');\n  }\n\n  tools.push(name);\n  this.bindEvents(name, events);\n};\n\nToolManager.prototype.isActive = function (tool) {\n  return tool && this._active === tool;\n};\n\nToolManager.prototype.length = function (tool) {\n  return this._tools.length;\n};\n\nToolManager.prototype.setActive = function (tool) {\n  var eventBus = this._eventBus;\n\n  if (this._active !== tool) {\n    this._active = tool;\n    eventBus.fire('tool-manager.update', {\n      tool: tool\n    });\n  }\n};\n\nToolManager.prototype.bindEvents = function (name, events) {\n  var eventBus = this._eventBus,\n      dragging = this._dragging;\n  var eventsToRegister = [];\n  eventBus.on(events.tool + '.init', function (event) {\n    var context = event.context; // Active tools that want to reactivate themselves must do this explicitly\n\n    if (!context.reactivate && this.isActive(name)) {\n      this.setActive(null);\n      dragging.cancel();\n      return;\n    }\n\n    this.setActive(name);\n  }, this); // Todo[ricardo]: add test cases\n\n  forEach(events, function (event) {\n    eventsToRegister.push(event + '.ended');\n    eventsToRegister.push(event + '.canceled');\n  });\n  eventBus.on(eventsToRegister, LOW_PRIORITY, function (event) {\n    var originalEvent = event.originalEvent; // We defer the de-activation of the tool to the .activate phase,\n    // so we're able to check if we want to toggle off the current\n    // active tool or switch to a new one\n\n    if (!this._active) {\n      return;\n    }\n\n    if (originalEvent && domClosest(originalEvent.target, '.group[data-group=\"tools\"]')) {\n      return;\n    }\n\n    this.setActive(null);\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/features/tool-manager/ToolManager.js"],"names":["forEach","closest","domClosest","LOW_PRIORITY","ToolManager","eventBus","dragging","_eventBus","_dragging","_tools","_active","$inject","prototype","registerTool","name","events","tools","Error","push","bindEvents","isActive","tool","length","setActive","fire","eventsToRegister","on","event","context","reactivate","cancel","originalEvent","target"],"mappings":"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","sourcesContent":["import {\n  forEach\n} from 'min-dash';\n\nimport {\n  closest as domClosest\n} from 'min-dom';\n\nvar LOW_PRIORITY = 250;\n\n/**\n * The tool manager acts as middle-man between the available tool's and the Palette,\n * it takes care of making sure that the correct active state is set.\n *\n * @param  {Object}    eventBus\n * @param  {Object}    dragging\n */\nexport default function ToolManager(eventBus, dragging) {\n  this._eventBus = eventBus;\n  this._dragging = dragging;\n\n  this._tools = [];\n  this._active = null;\n}\n\nToolManager.$inject = [ 'eventBus', 'dragging' ];\n\nToolManager.prototype.registerTool = function(name, events) {\n  var tools = this._tools;\n\n  if (!events) {\n    throw new Error('A tool has to be registered with it\\'s \"events\"');\n  }\n\n  tools.push(name);\n\n  this.bindEvents(name, events);\n};\n\nToolManager.prototype.isActive = function(tool) {\n  return tool && this._active === tool;\n};\n\nToolManager.prototype.length = function(tool) {\n  return this._tools.length;\n};\n\nToolManager.prototype.setActive = function(tool) {\n  var eventBus = this._eventBus;\n\n  if (this._active !== tool) {\n    this._active = tool;\n\n    eventBus.fire('tool-manager.update', { tool: tool });\n  }\n};\n\nToolManager.prototype.bindEvents = function(name, events) {\n  var eventBus = this._eventBus,\n      dragging = this._dragging;\n\n  var eventsToRegister = [];\n\n  eventBus.on(events.tool + '.init', function(event) {\n    var context = event.context;\n\n    // Active tools that want to reactivate themselves must do this explicitly\n    if (!context.reactivate && this.isActive(name)) {\n      this.setActive(null);\n\n      dragging.cancel();\n      return;\n    }\n\n    this.setActive(name);\n\n  }, this);\n\n  // Todo[ricardo]: add test cases\n  forEach(events, function(event) {\n    eventsToRegister.push(event + '.ended');\n    eventsToRegister.push(event + '.canceled');\n  });\n\n  eventBus.on(eventsToRegister, LOW_PRIORITY, function(event) {\n    var originalEvent = event.originalEvent;\n\n    // We defer the de-activation of the tool to the .activate phase,\n    // so we're able to check if we want to toggle off the current\n    // active tool or switch to a new one\n    if (!this._active) {\n      return;\n    }\n\n    if (originalEvent && domClosest(originalEvent.target, '.group[data-group=\"tools\"]')) {\n      return;\n    }\n\n    this.setActive(null);\n  }, this);\n};\n"]},"metadata":{},"sourceType":"module"}