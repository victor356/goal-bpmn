{"ast":null,"code":"import inherits from 'inherits';\nimport Ids from 'ids';\nimport Viewer from './Viewer';\nimport NavigatedViewer from './NavigatedViewer';\nimport KeyboardMoveModule from 'diagram-js/lib/navigation/keyboard-move';\nimport MoveCanvasModule from 'diagram-js/lib/navigation/movecanvas';\nimport TouchModule from 'diagram-js/lib/navigation/touch';\nimport ZoomScrollModule from 'diagram-js/lib/navigation/zoomscroll';\nimport AlignElementsModule from 'diagram-js/lib/features/align-elements';\nimport AutoPlaceModule from './features/auto-place';\nimport AutoResizeModule from './features/auto-resize';\nimport AutoScrollModule from 'diagram-js/lib/features/auto-scroll';\nimport BendpointsModule from 'diagram-js/lib/features/bendpoints';\nimport ContextPadModule from './features/context-pad';\nimport CopyPasteModule from './features/copy-paste';\nimport DistributeElementsModule from './features/distribute-elements';\nimport EditorActionsModule from './features/editor-actions';\nimport KeyboardModule from './features/keyboard';\nimport KeyboardMoveSelectionModule from 'diagram-js/lib/features/keyboard-move-selection';\nimport LabelEditingModule from './features/label-editing';\nimport ModelingModule from './features/modeling';\nimport MoveModule from 'diagram-js/lib/features/move';\nimport PaletteModule from './features/palette';\nimport ReplacePreviewModule from './features/replace-preview';\nimport ResizeModule from 'diagram-js/lib/features/resize';\nimport SnappingModule from './features/snapping';\nimport SearchModule from './features/search';\nvar initialDiagram = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<bpmn:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" ' + 'xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" ' + 'xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" ' + 'targetNamespace=\"http://bpmn.io/schema/bpmn\" ' + 'id=\"Definitions_1\">' + '<bpmn:process id=\"Process_1\" isExecutable=\"false\">' + '<bpmn:startEvent id=\"StartEvent_1\"/>' + '</bpmn:process>' + '<bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">' + '<bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_1\">' + '<bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">' + '<dc:Bounds height=\"36.0\" width=\"36.0\" x=\"173.0\" y=\"102.0\"/>' + '</bpmndi:BPMNShape>' + '</bpmndi:BPMNPlane>' + '</bpmndi:BPMNDiagram>' + '</bpmn:definitions>';\n/**\n * A modeler for BPMN 2.0 diagrams.\n *\n *\n * ## Extending the Modeler\n *\n * In order to extend the viewer pass extension modules to bootstrap via the\n * `additionalModules` option. An extension module is an object that exposes\n * named services.\n *\n * The following example depicts the integration of a simple\n * logging component that integrates with interaction events:\n *\n *\n * ```javascript\n *\n * // logging component\n * function InteractionLogger(eventBus) {\n *   eventBus.on('element.hover', function(event) {\n *     console.log()\n *   })\n * }\n *\n * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\n *\n * // extension module\n * var extensionModule = {\n *   __init__: [ 'interactionLogger' ],\n *   interactionLogger: [ 'type', InteractionLogger ]\n * };\n *\n * // extend the viewer\n * var bpmnModeler = new Modeler({ additionalModules: [ extensionModule ] });\n * bpmnModeler.importXML(...);\n * ```\n *\n *\n * ## Customizing / Replacing Components\n *\n * You can replace individual diagram components by redefining them in override modules.\n * This works for all components, including those defined in the core.\n *\n * Pass in override modules via the `options.additionalModules` flag like this:\n *\n * ```javascript\n * function CustomContextPadProvider(contextPad) {\n *\n *   contextPad.registerProvider(this);\n *\n *   this.getContextPadEntries = function(element) {\n *     // no entries, effectively disable the context pad\n *     return {};\n *   };\n * }\n *\n * CustomContextPadProvider.$inject = [ 'contextPad' ];\n *\n * var overrideModule = {\n *   contextPadProvider: [ 'type', CustomContextPadProvider ]\n * };\n *\n * var bpmnModeler = new Modeler({ additionalModules: [ overrideModule ]});\n * ```\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {String|Number} [options.width] the width of the viewer\n * @param {String|Number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\n\nexport default function Modeler(options) {\n  Viewer.call(this, options); // hook ID collection into the modeler\n\n  this.on('import.parse.complete', function (event) {\n    if (!event.error) {\n      this._collectIds(event.definitions, event.context);\n    }\n  }, this);\n  this.on('diagram.destroy', function () {\n    this.get('moddle').ids.clear();\n  }, this);\n}\ninherits(Modeler, Viewer);\nModeler.Viewer = Viewer;\nModeler.NavigatedViewer = NavigatedViewer;\n/**\n * Create a new diagram to start modeling.\n *\n * @param {Function} [done]\n */\n\nModeler.prototype.createDiagram = function (done) {\n  return this.importXML(initialDiagram, done);\n};\n/**\n * Create a moddle instance, attaching ids to it.\n *\n * @param {Object} options\n */\n\n\nModeler.prototype._createModdle = function (options) {\n  var moddle = Viewer.prototype._createModdle.call(this, options); // attach ids to moddle to be able to track\n  // and validated ids in the BPMN 2.0 XML document\n  // tree\n\n\n  moddle.ids = new Ids([32, 36, 1]);\n  return moddle;\n};\n/**\n * Collect ids processed during parsing of the\n * definitions object.\n *\n * @param {ModdleElement} definitions\n * @param {Context} context\n */\n\n\nModeler.prototype._collectIds = function (definitions, context) {\n  var moddle = definitions.$model,\n      ids = moddle.ids,\n      id; // remove references from previous import\n\n  ids.clear();\n\n  for (id in context.elementsById) {\n    ids.claim(id, context.elementsById[id]);\n  }\n};\n\nModeler.prototype._interactionModules = [// non-modeling components\nKeyboardMoveModule, MoveCanvasModule, TouchModule, ZoomScrollModule];\nModeler.prototype._modelingModules = [// modeling components\nAlignElementsModule, AutoPlaceModule, AutoScrollModule, AutoResizeModule, BendpointsModule, ContextPadModule, CopyPasteModule, DistributeElementsModule, EditorActionsModule, KeyboardModule, KeyboardMoveSelectionModule, LabelEditingModule, ModelingModule, MoveModule, PaletteModule, ReplacePreviewModule, ResizeModule, SnappingModule, SearchModule]; // modules the modeler is composed of\n//\n// - viewer modules\n// - interaction modules\n// - modeling modules\n\nModeler.prototype._modules = [].concat(Modeler.prototype._modules, Modeler.prototype._interactionModules, Modeler.prototype._modelingModules);","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/Modeler.js"],"names":["inherits","Ids","Viewer","NavigatedViewer","KeyboardMoveModule","MoveCanvasModule","TouchModule","ZoomScrollModule","AlignElementsModule","AutoPlaceModule","AutoResizeModule","AutoScrollModule","BendpointsModule","ContextPadModule","CopyPasteModule","DistributeElementsModule","EditorActionsModule","KeyboardModule","KeyboardMoveSelectionModule","LabelEditingModule","ModelingModule","MoveModule","PaletteModule","ReplacePreviewModule","ResizeModule","SnappingModule","SearchModule","initialDiagram","Modeler","options","call","on","event","error","_collectIds","definitions","context","get","ids","clear","prototype","createDiagram","done","importXML","_createModdle","moddle","$model","id","elementsById","claim","_interactionModules","_modelingModules","_modules","concat"],"mappings":"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","sourcesContent":["import inherits from 'inherits';\n\nimport Ids from 'ids';\n\nimport Viewer from './Viewer';\n\nimport NavigatedViewer from './NavigatedViewer';\n\nimport KeyboardMoveModule from 'diagram-js/lib/navigation/keyboard-move';\nimport MoveCanvasModule from 'diagram-js/lib/navigation/movecanvas';\nimport TouchModule from 'diagram-js/lib/navigation/touch';\nimport ZoomScrollModule from 'diagram-js/lib/navigation/zoomscroll';\n\nimport AlignElementsModule from 'diagram-js/lib/features/align-elements';\nimport AutoPlaceModule from './features/auto-place';\nimport AutoResizeModule from './features/auto-resize';\nimport AutoScrollModule from 'diagram-js/lib/features/auto-scroll';\nimport BendpointsModule from 'diagram-js/lib/features/bendpoints';\nimport ContextPadModule from './features/context-pad';\nimport CopyPasteModule from './features/copy-paste';\nimport DistributeElementsModule from './features/distribute-elements';\nimport EditorActionsModule from './features/editor-actions';\nimport KeyboardModule from './features/keyboard';\nimport KeyboardMoveSelectionModule from 'diagram-js/lib/features/keyboard-move-selection';\nimport LabelEditingModule from './features/label-editing';\nimport ModelingModule from './features/modeling';\nimport MoveModule from 'diagram-js/lib/features/move';\nimport PaletteModule from './features/palette';\nimport ReplacePreviewModule from './features/replace-preview';\nimport ResizeModule from 'diagram-js/lib/features/resize';\nimport SnappingModule from './features/snapping';\nimport SearchModule from './features/search';\n\n\nvar initialDiagram =\n  '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +\n  '<bpmn:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' +\n                    'xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" ' +\n                    'xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" ' +\n                    'xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" ' +\n                    'targetNamespace=\"http://bpmn.io/schema/bpmn\" ' +\n                    'id=\"Definitions_1\">' +\n    '<bpmn:process id=\"Process_1\" isExecutable=\"false\">' +\n      '<bpmn:startEvent id=\"StartEvent_1\"/>' +\n    '</bpmn:process>' +\n    '<bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">' +\n      '<bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_1\">' +\n        '<bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">' +\n          '<dc:Bounds height=\"36.0\" width=\"36.0\" x=\"173.0\" y=\"102.0\"/>' +\n        '</bpmndi:BPMNShape>' +\n      '</bpmndi:BPMNPlane>' +\n    '</bpmndi:BPMNDiagram>' +\n  '</bpmn:definitions>';\n\n\n/**\n * A modeler for BPMN 2.0 diagrams.\n *\n *\n * ## Extending the Modeler\n *\n * In order to extend the viewer pass extension modules to bootstrap via the\n * `additionalModules` option. An extension module is an object that exposes\n * named services.\n *\n * The following example depicts the integration of a simple\n * logging component that integrates with interaction events:\n *\n *\n * ```javascript\n *\n * // logging component\n * function InteractionLogger(eventBus) {\n *   eventBus.on('element.hover', function(event) {\n *     console.log()\n *   })\n * }\n *\n * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\n *\n * // extension module\n * var extensionModule = {\n *   __init__: [ 'interactionLogger' ],\n *   interactionLogger: [ 'type', InteractionLogger ]\n * };\n *\n * // extend the viewer\n * var bpmnModeler = new Modeler({ additionalModules: [ extensionModule ] });\n * bpmnModeler.importXML(...);\n * ```\n *\n *\n * ## Customizing / Replacing Components\n *\n * You can replace individual diagram components by redefining them in override modules.\n * This works for all components, including those defined in the core.\n *\n * Pass in override modules via the `options.additionalModules` flag like this:\n *\n * ```javascript\n * function CustomContextPadProvider(contextPad) {\n *\n *   contextPad.registerProvider(this);\n *\n *   this.getContextPadEntries = function(element) {\n *     // no entries, effectively disable the context pad\n *     return {};\n *   };\n * }\n *\n * CustomContextPadProvider.$inject = [ 'contextPad' ];\n *\n * var overrideModule = {\n *   contextPadProvider: [ 'type', CustomContextPadProvider ]\n * };\n *\n * var bpmnModeler = new Modeler({ additionalModules: [ overrideModule ]});\n * ```\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {String|Number} [options.width] the width of the viewer\n * @param {String|Number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\nexport default function Modeler(options) {\n  Viewer.call(this, options);\n\n  // hook ID collection into the modeler\n  this.on('import.parse.complete', function(event) {\n    if (!event.error) {\n      this._collectIds(event.definitions, event.context);\n    }\n  }, this);\n\n  this.on('diagram.destroy', function() {\n    this.get('moddle').ids.clear();\n  }, this);\n}\n\ninherits(Modeler, Viewer);\n\nModeler.Viewer = Viewer;\nModeler.NavigatedViewer = NavigatedViewer;\n\n/**\n * Create a new diagram to start modeling.\n *\n * @param {Function} [done]\n */\nModeler.prototype.createDiagram = function(done) {\n  return this.importXML(initialDiagram, done);\n};\n\n/**\n * Create a moddle instance, attaching ids to it.\n *\n * @param {Object} options\n */\nModeler.prototype._createModdle = function(options) {\n  var moddle = Viewer.prototype._createModdle.call(this, options);\n\n  // attach ids to moddle to be able to track\n  // and validated ids in the BPMN 2.0 XML document\n  // tree\n  moddle.ids = new Ids([ 32, 36, 1 ]);\n\n  return moddle;\n};\n\n/**\n * Collect ids processed during parsing of the\n * definitions object.\n *\n * @param {ModdleElement} definitions\n * @param {Context} context\n */\nModeler.prototype._collectIds = function(definitions, context) {\n\n  var moddle = definitions.$model,\n      ids = moddle.ids,\n      id;\n\n  // remove references from previous import\n  ids.clear();\n\n  for (id in context.elementsById) {\n    ids.claim(id, context.elementsById[id]);\n  }\n};\n\nModeler.prototype._interactionModules = [\n  // non-modeling components\n  KeyboardMoveModule,\n  MoveCanvasModule,\n  TouchModule,\n  ZoomScrollModule\n];\n\nModeler.prototype._modelingModules = [\n  // modeling components\n  AlignElementsModule,\n  AutoPlaceModule,\n  AutoScrollModule,\n  AutoResizeModule,\n  BendpointsModule,\n  ContextPadModule,\n  CopyPasteModule,\n  DistributeElementsModule,\n  EditorActionsModule,\n  KeyboardModule,\n  KeyboardMoveSelectionModule,\n  LabelEditingModule,\n  ModelingModule,\n  MoveModule,\n  PaletteModule,\n  ReplacePreviewModule,\n  ResizeModule,\n  SnappingModule,\n  SearchModule\n];\n\n\n// modules the modeler is composed of\n//\n// - viewer modules\n// - interaction modules\n// - modeling modules\n\nModeler.prototype._modules = [].concat(\n  Modeler.prototype._modules,\n  Modeler.prototype._interactionModules,\n  Modeler.prototype._modelingModules);\n"]},"metadata":{},"sourceType":"module"}