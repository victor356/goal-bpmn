{"ast":null,"code":"import { isArray, forEach } from 'min-dash';\n/**\n * A service that offers the current selection in a diagram.\n * Offers the api to control the selection, too.\n *\n * @class\n *\n * @param {EventBus} eventBus the event bus\n */\n\nexport default function Selection(eventBus) {\n  this._eventBus = eventBus;\n  this._selectedElements = [];\n  var self = this;\n  eventBus.on(['shape.remove', 'connection.remove'], function (e) {\n    var element = e.element;\n    self.deselect(element);\n  });\n  eventBus.on(['diagram.clear'], function (e) {\n    self.select(null);\n  });\n}\nSelection.$inject = ['eventBus'];\n\nSelection.prototype.deselect = function (element) {\n  var selectedElements = this._selectedElements;\n  var idx = selectedElements.indexOf(element);\n\n  if (idx !== -1) {\n    var oldSelection = selectedElements.slice();\n    selectedElements.splice(idx, 1);\n\n    this._eventBus.fire('selection.changed', {\n      oldSelection: oldSelection,\n      newSelection: selectedElements\n    });\n  }\n};\n\nSelection.prototype.get = function () {\n  return this._selectedElements;\n};\n\nSelection.prototype.isSelected = function (element) {\n  return this._selectedElements.indexOf(element) !== -1;\n};\n/**\n * This method selects one or more elements on the diagram.\n *\n * By passing an additional add parameter you can decide whether or not the element(s)\n * should be added to the already existing selection or not.\n *\n * @method Selection#select\n *\n * @param  {Object|Object[]} elements element or array of elements to be selected\n * @param  {boolean} [add] whether the element(s) should be appended to the current selection, defaults to false\n */\n\n\nSelection.prototype.select = function (elements, add) {\n  var selectedElements = this._selectedElements,\n      oldSelection = selectedElements.slice();\n\n  if (!isArray(elements)) {\n    elements = elements ? [elements] : [];\n  } // selection may be cleared by passing an empty array or null\n  // to the method\n\n\n  if (add) {\n    forEach(elements, function (element) {\n      if (selectedElements.indexOf(element) !== -1) {\n        // already selected\n        return;\n      } else {\n        selectedElements.push(element);\n      }\n    });\n  } else {\n    this._selectedElements = selectedElements = elements.slice();\n  }\n\n  this._eventBus.fire('selection.changed', {\n    oldSelection: oldSelection,\n    newSelection: selectedElements\n  });\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/selection/Selection.js"],"names":["isArray","forEach","Selection","eventBus","_eventBus","_selectedElements","self","on","e","element","deselect","select","$inject","prototype","selectedElements","idx","indexOf","oldSelection","slice","splice","fire","newSelection","get","isSelected","elements","add","push"],"mappings":"AAAA,SACEA,OADF,EAEEC,OAFF,QAGO,UAHP;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAE1C,OAAKC,SAAL,GAAiBD,QAAjB;AAEA,OAAKE,iBAAL,GAAyB,EAAzB;AAEA,MAAIC,IAAI,GAAG,IAAX;AAEAH,EAAAA,QAAQ,CAACI,EAAT,CAAY,CAAE,cAAF,EAAkB,mBAAlB,CAAZ,EAAqD,UAASC,CAAT,EAAY;AAC/D,QAAIC,OAAO,GAAGD,CAAC,CAACC,OAAhB;AACAH,IAAAA,IAAI,CAACI,QAAL,CAAcD,OAAd;AACD,GAHD;AAKAN,EAAAA,QAAQ,CAACI,EAAT,CAAY,CAAE,eAAF,CAAZ,EAAiC,UAASC,CAAT,EAAY;AAC3CF,IAAAA,IAAI,CAACK,MAAL,CAAY,IAAZ;AACD,GAFD;AAGD;AAEDT,SAAS,CAACU,OAAV,GAAoB,CAAE,UAAF,CAApB;;AAGAV,SAAS,CAACW,SAAV,CAAoBH,QAApB,GAA+B,UAASD,OAAT,EAAkB;AAC/C,MAAIK,gBAAgB,GAAG,KAAKT,iBAA5B;AAEA,MAAIU,GAAG,GAAGD,gBAAgB,CAACE,OAAjB,CAAyBP,OAAzB,CAAV;;AAEA,MAAIM,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,QAAIE,YAAY,GAAGH,gBAAgB,CAACI,KAAjB,EAAnB;AAEAJ,IAAAA,gBAAgB,CAACK,MAAjB,CAAwBJ,GAAxB,EAA6B,CAA7B;;AAEA,SAAKX,SAAL,CAAegB,IAAf,CAAoB,mBAApB,EAAyC;AAAEH,MAAAA,YAAY,EAAEA,YAAhB;AAA8BI,MAAAA,YAAY,EAAEP;AAA5C,KAAzC;AACD;AACF,CAZD;;AAeAZ,SAAS,CAACW,SAAV,CAAoBS,GAApB,GAA0B,YAAW;AACnC,SAAO,KAAKjB,iBAAZ;AACD,CAFD;;AAIAH,SAAS,CAACW,SAAV,CAAoBU,UAApB,GAAiC,UAASd,OAAT,EAAkB;AACjD,SAAO,KAAKJ,iBAAL,CAAuBW,OAAvB,CAA+BP,OAA/B,MAA4C,CAAC,CAApD;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,SAAS,CAACW,SAAV,CAAoBF,MAApB,GAA6B,UAASa,QAAT,EAAmBC,GAAnB,EAAwB;AACnD,MAAIX,gBAAgB,GAAG,KAAKT,iBAA5B;AAAA,MACIY,YAAY,GAAGH,gBAAgB,CAACI,KAAjB,EADnB;;AAGA,MAAI,CAAClB,OAAO,CAACwB,QAAD,CAAZ,EAAwB;AACtBA,IAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAEA,QAAF,CAAH,GAAkB,EAArC;AACD,GANkD,CAQnD;AACA;;;AACA,MAAIC,GAAJ,EAAS;AACPxB,IAAAA,OAAO,CAACuB,QAAD,EAAW,UAASf,OAAT,EAAkB;AAClC,UAAIK,gBAAgB,CAACE,OAAjB,CAAyBP,OAAzB,MAAsC,CAAC,CAA3C,EAA8C;AAC5C;AACA;AACD,OAHD,MAGO;AACLK,QAAAA,gBAAgB,CAACY,IAAjB,CAAsBjB,OAAtB;AACD;AACF,KAPM,CAAP;AAQD,GATD,MASO;AACL,SAAKJ,iBAAL,GAAyBS,gBAAgB,GAAGU,QAAQ,CAACN,KAAT,EAA5C;AACD;;AAED,OAAKd,SAAL,CAAegB,IAAf,CAAoB,mBAApB,EAAyC;AAAEH,IAAAA,YAAY,EAAEA,YAAhB;AAA8BI,IAAAA,YAAY,EAAEP;AAA5C,GAAzC;AACD,CAxBD","sourcesContent":["import {\n  isArray,\n  forEach\n} from 'min-dash';\n\n\n/**\n * A service that offers the current selection in a diagram.\n * Offers the api to control the selection, too.\n *\n * @class\n *\n * @param {EventBus} eventBus the event bus\n */\nexport default function Selection(eventBus) {\n\n  this._eventBus = eventBus;\n\n  this._selectedElements = [];\n\n  var self = this;\n\n  eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {\n    var element = e.element;\n    self.deselect(element);\n  });\n\n  eventBus.on([ 'diagram.clear' ], function(e) {\n    self.select(null);\n  });\n}\n\nSelection.$inject = [ 'eventBus' ];\n\n\nSelection.prototype.deselect = function(element) {\n  var selectedElements = this._selectedElements;\n\n  var idx = selectedElements.indexOf(element);\n\n  if (idx !== -1) {\n    var oldSelection = selectedElements.slice();\n\n    selectedElements.splice(idx, 1);\n\n    this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });\n  }\n};\n\n\nSelection.prototype.get = function() {\n  return this._selectedElements;\n};\n\nSelection.prototype.isSelected = function(element) {\n  return this._selectedElements.indexOf(element) !== -1;\n};\n\n\n/**\n * This method selects one or more elements on the diagram.\n *\n * By passing an additional add parameter you can decide whether or not the element(s)\n * should be added to the already existing selection or not.\n *\n * @method Selection#select\n *\n * @param  {Object|Object[]} elements element or array of elements to be selected\n * @param  {boolean} [add] whether the element(s) should be appended to the current selection, defaults to false\n */\nSelection.prototype.select = function(elements, add) {\n  var selectedElements = this._selectedElements,\n      oldSelection = selectedElements.slice();\n\n  if (!isArray(elements)) {\n    elements = elements ? [ elements ] : [];\n  }\n\n  // selection may be cleared by passing an empty array or null\n  // to the method\n  if (add) {\n    forEach(elements, function(element) {\n      if (selectedElements.indexOf(element) !== -1) {\n        // already selected\n        return;\n      } else {\n        selectedElements.push(element);\n      }\n    });\n  } else {\n    this._selectedElements = selectedElements = elements.slice();\n  }\n\n  this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });\n};\n"]},"metadata":{},"sourceType":"module"}