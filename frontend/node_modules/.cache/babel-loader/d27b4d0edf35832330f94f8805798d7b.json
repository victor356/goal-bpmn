{"ast":null,"code":"'use strict';\n\nvar forEach = require('lodash/forEach');\n/**\n * A handler that implements a BPMN 2.0 property update\n * for business object lists which are not represented in the\n * diagram.\n *\n * This is useful in the context of the properties panel in\n * order to update child elements of elements visible in\n * the diagram.\n *\n * Example: perform an update of a specific event definition\n * of an intermediate event.\n *\n * @class\n * @constructor\n */\n\n\nfunction UpdateBusinessObjectListHandler(elementRegistry, bpmnFactory) {\n  this._elementRegistry = elementRegistry;\n  this._bpmnFactory = bpmnFactory;\n}\n\nUpdateBusinessObjectListHandler.$inject = ['elementRegistry', 'bpmnFactory'];\nmodule.exports = UpdateBusinessObjectListHandler;\n\nfunction ensureNotNull(prop, name) {\n  if (!prop) {\n    throw new Error(name + 'required');\n  }\n\n  return prop;\n} // api /////////////////////////////////////////////\n\n/**\n * Updates a element under a provided parent.\n */\n\n\nUpdateBusinessObjectListHandler.prototype.execute = function (context) {\n  var currentObject = ensureNotNull(context.currentObject, 'currentObject'),\n      propertyName = ensureNotNull(context.propertyName, 'propertyName'),\n      updatedObjectList = context.updatedObjectList,\n      objectsToRemove = context.objectsToRemove || [],\n      objectsToAdd = context.objectsToAdd || [],\n      changed = [context.element],\n      // this will not change any diagram-js elements\n  referencePropertyName;\n\n  if (context.referencePropertyName) {\n    referencePropertyName = context.referencePropertyName;\n  }\n\n  var objectList = currentObject[propertyName]; // adjust array reference in the parent business object\n\n  context.previousList = currentObject[propertyName];\n\n  if (updatedObjectList) {\n    currentObject[propertyName] = updatedObjectList;\n  } else {\n    var listCopy = []; // remove all objects which should be removed\n\n    forEach(objectList, function (object) {\n      if (objectsToRemove.indexOf(object) == -1) {\n        listCopy.push(object);\n      }\n    }); // add all objects which should be added\n\n    listCopy = listCopy.concat(objectsToAdd); // set property to new list\n\n    if (listCopy.length > 0 || !referencePropertyName) {\n      // as long as there are elements in the list update the list\n      currentObject[propertyName] = listCopy;\n    } else if (referencePropertyName) {\n      // remove the list when it is empty\n      var parentObject = currentObject.$parent;\n      parentObject.set(referencePropertyName, undefined);\n    }\n  }\n\n  context.changed = changed; // indicate changed on objects affected by the update\n\n  return changed;\n};\n/**\n * Reverts the update\n *\n * @method  CreateBusinessObjectListHandler#revert\n *\n * @param {Object} context\n *\n * @return {djs.mode.Base} the updated element\n */\n\n\nUpdateBusinessObjectListHandler.prototype.revert = function (context) {\n  var currentObject = context.currentObject,\n      propertyName = context.propertyName,\n      previousList = context.previousList,\n      parentObject = currentObject.$parent;\n\n  if (context.referencePropertyName) {\n    parentObject.set(context.referencePropertyName, currentObject);\n  } // remove new element\n\n\n  currentObject.set(propertyName, previousList);\n  return context.changed;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/cmd/UpdateBusinessObjectListHandler.js"],"names":["forEach","require","UpdateBusinessObjectListHandler","elementRegistry","bpmnFactory","_elementRegistry","_bpmnFactory","$inject","module","exports","ensureNotNull","prop","name","Error","prototype","execute","context","currentObject","propertyName","updatedObjectList","objectsToRemove","objectsToAdd","changed","element","referencePropertyName","objectList","previousList","listCopy","object","indexOf","push","concat","length","parentObject","$parent","set","undefined","revert"],"mappings":"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","sourcesContent":["'use strict';\n\nvar forEach = require('lodash/forEach');\n\n/**\n * A handler that implements a BPMN 2.0 property update\n * for business object lists which are not represented in the\n * diagram.\n *\n * This is useful in the context of the properties panel in\n * order to update child elements of elements visible in\n * the diagram.\n *\n * Example: perform an update of a specific event definition\n * of an intermediate event.\n *\n * @class\n * @constructor\n */\nfunction UpdateBusinessObjectListHandler(elementRegistry, bpmnFactory) {\n  this._elementRegistry = elementRegistry;\n  this._bpmnFactory = bpmnFactory;\n}\n\nUpdateBusinessObjectListHandler.$inject = [ 'elementRegistry', 'bpmnFactory' ];\n\nmodule.exports = UpdateBusinessObjectListHandler;\n\nfunction ensureNotNull(prop, name) {\n  if (!prop) {\n    throw new Error(name + 'required');\n  }\n  return prop;\n}\n\n// api /////////////////////////////////////////////\n\n/**\n * Updates a element under a provided parent.\n */\nUpdateBusinessObjectListHandler.prototype.execute = function(context) {\n\n  var currentObject = ensureNotNull(context.currentObject, 'currentObject'),\n      propertyName = ensureNotNull(context.propertyName, 'propertyName'),\n      updatedObjectList = context.updatedObjectList,\n      objectsToRemove = context.objectsToRemove || [],\n      objectsToAdd = context.objectsToAdd || [],\n      changed = [ context.element], // this will not change any diagram-js elements\n      referencePropertyName;\n\n  if (context.referencePropertyName) {\n    referencePropertyName = context.referencePropertyName;\n  }\n\n  var objectList = currentObject[propertyName];\n  // adjust array reference in the parent business object\n  context.previousList = currentObject[propertyName];\n\n  if (updatedObjectList) {\n    currentObject[propertyName] = updatedObjectList;\n  } else {\n    var listCopy = [];\n    // remove all objects which should be removed\n    forEach(objectList, function(object) {\n      if (objectsToRemove.indexOf(object) == -1) {\n        listCopy.push(object);\n      }\n    });\n    // add all objects which should be added\n    listCopy = listCopy.concat(objectsToAdd);\n\n    // set property to new list\n    if (listCopy.length > 0 || !referencePropertyName) {\n\n      // as long as there are elements in the list update the list\n      currentObject[propertyName] = listCopy;\n    } else if (referencePropertyName) {\n\n      // remove the list when it is empty\n      var parentObject = currentObject.$parent;\n      parentObject.set(referencePropertyName, undefined);\n    }\n  }\n\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n/**\n * Reverts the update\n *\n * @method  CreateBusinessObjectListHandler#revert\n *\n * @param {Object} context\n *\n * @return {djs.mode.Base} the updated element\n */\nUpdateBusinessObjectListHandler.prototype.revert = function(context) {\n\n  var currentObject = context.currentObject,\n      propertyName = context.propertyName,\n      previousList = context.previousList,\n      parentObject = currentObject.$parent;\n\n  if (context.referencePropertyName) {\n    parentObject.set(context.referencePropertyName, currentObject);\n  }\n\n  // remove new element\n  currentObject.set(propertyName, previousList);\n\n  return context.changed;\n};\n"]},"metadata":{},"sourceType":"script"}