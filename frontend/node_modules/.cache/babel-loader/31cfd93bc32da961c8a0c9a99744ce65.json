{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { add as collectionAdd, remove as collectionRemove } from '../../../util/Collections';\n/**\n * A handler that implements reversible moving of connections.\n *\n * The handler differs from the layout connection handler in a sense\n * that it preserves the connection layout.\n */\n\nexport default function MoveConnectionHandler() {}\n\nMoveConnectionHandler.prototype.execute = function (context) {\n  var connection = context.connection,\n      delta = context.delta;\n  var newParent = context.newParent || connection.parent,\n      newParentIndex = context.newParentIndex,\n      oldParent = connection.parent; // save old parent in context\n\n  context.oldParent = oldParent;\n  context.oldParentIndex = collectionRemove(oldParent.children, connection); // add to new parent at position\n\n  collectionAdd(newParent.children, connection, newParentIndex); // update parent\n\n  connection.parent = newParent; // update waypoint positions\n\n  forEach(connection.waypoints, function (p) {\n    p.x += delta.x;\n    p.y += delta.y;\n\n    if (p.original) {\n      p.original.x += delta.x;\n      p.original.y += delta.y;\n    }\n  });\n  return connection;\n};\n\nMoveConnectionHandler.prototype.revert = function (context) {\n  var connection = context.connection,\n      newParent = connection.parent,\n      oldParent = context.oldParent,\n      oldParentIndex = context.oldParentIndex,\n      delta = context.delta; // remove from newParent\n\n  collectionRemove(newParent.children, connection); // restore previous location in old parent\n\n  collectionAdd(oldParent.children, connection, oldParentIndex); // restore parent\n\n  connection.parent = oldParent; // revert to old waypoint positions\n\n  forEach(connection.waypoints, function (p) {\n    p.x -= delta.x;\n    p.y -= delta.y;\n\n    if (p.original) {\n      p.original.x -= delta.x;\n      p.original.y -= delta.y;\n    }\n  });\n  return connection;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/modeling/cmd/MoveConnectionHandler.js"],"names":["forEach","add","collectionAdd","remove","collectionRemove","MoveConnectionHandler","prototype","execute","context","connection","delta","newParent","parent","newParentIndex","oldParent","oldParentIndex","children","waypoints","p","x","y","original","revert"],"mappings":"AAAA,SAASA,OAAT,QAAwB,UAAxB;AAGA,SACEC,GAAG,IAAIC,aADT,EAEEC,MAAM,IAAIC,gBAFZ,QAGO,2BAHP;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,qBAAT,GAAiC,CAAG;;AAGnDA,qBAAqB,CAACC,SAAtB,CAAgCC,OAAhC,GAA0C,UAASC,OAAT,EAAkB;AAE1D,MAAIC,UAAU,GAAGD,OAAO,CAACC,UAAzB;AAAA,MACIC,KAAK,GAAGF,OAAO,CAACE,KADpB;AAGA,MAAIC,SAAS,GAAGH,OAAO,CAACG,SAAR,IAAqBF,UAAU,CAACG,MAAhD;AAAA,MACIC,cAAc,GAAGL,OAAO,CAACK,cAD7B;AAAA,MAEIC,SAAS,GAAGL,UAAU,CAACG,MAF3B,CAL0D,CAS1D;;AACAJ,EAAAA,OAAO,CAACM,SAAR,GAAoBA,SAApB;AACAN,EAAAA,OAAO,CAACO,cAAR,GAAyBX,gBAAgB,CAACU,SAAS,CAACE,QAAX,EAAqBP,UAArB,CAAzC,CAX0D,CAa1D;;AACAP,EAAAA,aAAa,CAACS,SAAS,CAACK,QAAX,EAAqBP,UAArB,EAAiCI,cAAjC,CAAb,CAd0D,CAgB1D;;AACAJ,EAAAA,UAAU,CAACG,MAAX,GAAoBD,SAApB,CAjB0D,CAmB1D;;AACAX,EAAAA,OAAO,CAACS,UAAU,CAACQ,SAAZ,EAAuB,UAASC,CAAT,EAAY;AACxCA,IAAAA,CAAC,CAACC,CAAF,IAAOT,KAAK,CAACS,CAAb;AACAD,IAAAA,CAAC,CAACE,CAAF,IAAOV,KAAK,CAACU,CAAb;;AAEA,QAAIF,CAAC,CAACG,QAAN,EAAgB;AACdH,MAAAA,CAAC,CAACG,QAAF,CAAWF,CAAX,IAAgBT,KAAK,CAACS,CAAtB;AACAD,MAAAA,CAAC,CAACG,QAAF,CAAWD,CAAX,IAAgBV,KAAK,CAACU,CAAtB;AACD;AACF,GARM,CAAP;AAUA,SAAOX,UAAP;AACD,CA/BD;;AAiCAJ,qBAAqB,CAACC,SAAtB,CAAgCgB,MAAhC,GAAyC,UAASd,OAAT,EAAkB;AAEzD,MAAIC,UAAU,GAAGD,OAAO,CAACC,UAAzB;AAAA,MACIE,SAAS,GAAGF,UAAU,CAACG,MAD3B;AAAA,MAEIE,SAAS,GAAGN,OAAO,CAACM,SAFxB;AAAA,MAGIC,cAAc,GAAGP,OAAO,CAACO,cAH7B;AAAA,MAIIL,KAAK,GAAGF,OAAO,CAACE,KAJpB,CAFyD,CAQzD;;AACAN,EAAAA,gBAAgB,CAACO,SAAS,CAACK,QAAX,EAAqBP,UAArB,CAAhB,CATyD,CAWzD;;AACAP,EAAAA,aAAa,CAACY,SAAS,CAACE,QAAX,EAAqBP,UAArB,EAAiCM,cAAjC,CAAb,CAZyD,CAczD;;AACAN,EAAAA,UAAU,CAACG,MAAX,GAAoBE,SAApB,CAfyD,CAiBzD;;AACAd,EAAAA,OAAO,CAACS,UAAU,CAACQ,SAAZ,EAAuB,UAASC,CAAT,EAAY;AACxCA,IAAAA,CAAC,CAACC,CAAF,IAAOT,KAAK,CAACS,CAAb;AACAD,IAAAA,CAAC,CAACE,CAAF,IAAOV,KAAK,CAACU,CAAb;;AAEA,QAAIF,CAAC,CAACG,QAAN,EAAgB;AACdH,MAAAA,CAAC,CAACG,QAAF,CAAWF,CAAX,IAAgBT,KAAK,CAACS,CAAtB;AACAD,MAAAA,CAAC,CAACG,QAAF,CAAWD,CAAX,IAAgBV,KAAK,CAACU,CAAtB;AACD;AACF,GARM,CAAP;AAUA,SAAOX,UAAP;AACD,CA7BD","sourcesContent":["import { forEach } from 'min-dash';\n\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../../../util/Collections';\n\n\n/**\n * A handler that implements reversible moving of connections.\n *\n * The handler differs from the layout connection handler in a sense\n * that it preserves the connection layout.\n */\nexport default function MoveConnectionHandler() { }\n\n\nMoveConnectionHandler.prototype.execute = function(context) {\n\n  var connection = context.connection,\n      delta = context.delta;\n\n  var newParent = context.newParent || connection.parent,\n      newParentIndex = context.newParentIndex,\n      oldParent = connection.parent;\n\n  // save old parent in context\n  context.oldParent = oldParent;\n  context.oldParentIndex = collectionRemove(oldParent.children, connection);\n\n  // add to new parent at position\n  collectionAdd(newParent.children, connection, newParentIndex);\n\n  // update parent\n  connection.parent = newParent;\n\n  // update waypoint positions\n  forEach(connection.waypoints, function(p) {\n    p.x += delta.x;\n    p.y += delta.y;\n\n    if (p.original) {\n      p.original.x += delta.x;\n      p.original.y += delta.y;\n    }\n  });\n\n  return connection;\n};\n\nMoveConnectionHandler.prototype.revert = function(context) {\n\n  var connection = context.connection,\n      newParent = connection.parent,\n      oldParent = context.oldParent,\n      oldParentIndex = context.oldParentIndex,\n      delta = context.delta;\n\n  // remove from newParent\n  collectionRemove(newParent.children, connection);\n\n  // restore previous location in old parent\n  collectionAdd(oldParent.children, connection, oldParentIndex);\n\n  // restore parent\n  connection.parent = oldParent;\n\n  // revert to old waypoint positions\n  forEach(connection.waypoints, function(p) {\n    p.x -= delta.x;\n    p.y -= delta.y;\n\n    if (p.original) {\n      p.original.x -= delta.x;\n      p.original.y -= delta.y;\n    }\n  });\n\n  return connection;\n};"]},"metadata":{},"sourceType":"module"}