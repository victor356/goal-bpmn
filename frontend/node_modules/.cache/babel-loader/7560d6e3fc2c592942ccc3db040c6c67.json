{"ast":null,"code":"'use strict';\n\nvar textField = require('./TextInputEntryFactory');\n/**\n * This function is a wrapper around TextInputEntryFactory.\n * It adds functionality to cache an invalid value entered in the\n * text input, instead of setting it on the business object.\n */\n\n\nvar validationAwareTextField = function (options, defaultParameters) {\n  var modelProperty = options.modelProperty;\n\n  defaultParameters.get = function (element, node) {\n    var value = this.__lastInvalidValue;\n    delete this.__lastInvalidValue;\n    var properties = {};\n    properties[modelProperty] = value !== undefined ? value : options.getProperty(element, node);\n    return properties;\n  };\n\n  defaultParameters.set = function (element, values, node) {\n    var validationErrors = validate.apply(this, [element, values, node]),\n        propertyValue = values[modelProperty]; // make sure we do not update the id\n\n    if (validationErrors && validationErrors[modelProperty]) {\n      this.__lastInvalidValue = propertyValue;\n      return options.setProperty(element, {}, node);\n    } else {\n      var properties = {};\n      properties[modelProperty] = propertyValue;\n      return options.setProperty(element, properties, node);\n    }\n  };\n\n  var validate = defaultParameters.validate = function (element, values, node) {\n    var value = values[modelProperty] || this.__lastInvalidValue;\n    var property = {};\n    property[modelProperty] = value;\n    return options.validate(element, property, node);\n  };\n\n  return textField(options, defaultParameters);\n};\n\nmodule.exports = validationAwareTextField;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/factory/ValidationAwareTextInput.js"],"names":["textField","require","validationAwareTextField","options","defaultParameters","modelProperty","get","element","node","value","__lastInvalidValue","properties","undefined","getProperty","set","values","validationErrors","validate","apply","propertyValue","setProperty","property","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,yBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,wBAAwB,GAAG,UAASC,OAAT,EAAkBC,iBAAlB,EAAqC;AAElE,MAAIC,aAAa,GAAGF,OAAO,CAACE,aAA5B;;AAEAD,EAAAA,iBAAiB,CAACE,GAAlB,GAAwB,UAASC,OAAT,EAAkBC,IAAlB,EAAwB;AAC9C,QAAIC,KAAK,GAAG,KAAKC,kBAAjB;AAEA,WAAO,KAAKA,kBAAZ;AAEA,QAAIC,UAAU,GAAG,EAAjB;AAEAA,IAAAA,UAAU,CAACN,aAAD,CAAV,GAA4BI,KAAK,KAAKG,SAAV,GAAsBH,KAAtB,GAA8BN,OAAO,CAACU,WAAR,CAAoBN,OAApB,EAA6BC,IAA7B,CAA1D;AAEA,WAAOG,UAAP;AACD,GAVD;;AAYAP,EAAAA,iBAAiB,CAACU,GAAlB,GAAwB,UAASP,OAAT,EAAkBQ,MAAlB,EAA0BP,IAA1B,EAAgC;AACtD,QAAIQ,gBAAgB,GAAGC,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqB,CAAEX,OAAF,EAAWQ,MAAX,EAAmBP,IAAnB,CAArB,CAAvB;AAAA,QACIW,aAAa,GAAGJ,MAAM,CAACV,aAAD,CAD1B,CADsD,CAItD;;AACA,QAAIW,gBAAgB,IAAIA,gBAAgB,CAACX,aAAD,CAAxC,EAAyD;AACvD,WAAKK,kBAAL,GAA0BS,aAA1B;AAEA,aAAOhB,OAAO,CAACiB,WAAR,CAAoBb,OAApB,EAA6B,EAA7B,EAAiCC,IAAjC,CAAP;AACD,KAJD,MAIO;AACL,UAAIG,UAAU,GAAG,EAAjB;AAEAA,MAAAA,UAAU,CAACN,aAAD,CAAV,GAA4Bc,aAA5B;AAEA,aAAOhB,OAAO,CAACiB,WAAR,CAAoBb,OAApB,EAA6BI,UAA7B,EAAyCH,IAAzC,CAAP;AACD;AACF,GAhBD;;AAkBA,MAAIS,QAAQ,GAAGb,iBAAiB,CAACa,QAAlB,GAA6B,UAASV,OAAT,EAAkBQ,MAAlB,EAA0BP,IAA1B,EAAgC;AAC1E,QAAIC,KAAK,GAAGM,MAAM,CAACV,aAAD,CAAN,IAAyB,KAAKK,kBAA1C;AAEA,QAAIW,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAAChB,aAAD,CAAR,GAA0BI,KAA1B;AAEA,WAAON,OAAO,CAACc,QAAR,CAAiBV,OAAjB,EAA0Bc,QAA1B,EAAoCb,IAApC,CAAP;AACD,GAPD;;AASA,SAAOR,SAAS,CAACG,OAAD,EAAUC,iBAAV,CAAhB;AACD,CA5CD;;AA8CAkB,MAAM,CAACC,OAAP,GAAiBrB,wBAAjB","sourcesContent":["'use strict';\n\nvar textField = require('./TextInputEntryFactory');\n\n/**\n * This function is a wrapper around TextInputEntryFactory.\n * It adds functionality to cache an invalid value entered in the\n * text input, instead of setting it on the business object.\n */\nvar validationAwareTextField = function(options, defaultParameters) {\n\n  var modelProperty = options.modelProperty;\n\n  defaultParameters.get = function(element, node) {\n    var value = this.__lastInvalidValue;\n\n    delete this.__lastInvalidValue;\n\n    var properties = {};\n\n    properties[modelProperty] = value !== undefined ? value : options.getProperty(element, node);\n\n    return properties;\n  };\n\n  defaultParameters.set = function(element, values, node) {\n    var validationErrors = validate.apply(this, [ element, values, node ]),\n        propertyValue = values[modelProperty];\n\n    // make sure we do not update the id\n    if (validationErrors && validationErrors[modelProperty]) {\n      this.__lastInvalidValue = propertyValue;\n\n      return options.setProperty(element, {}, node);\n    } else {\n      var properties = {};\n\n      properties[modelProperty] = propertyValue;\n\n      return options.setProperty(element, properties, node);\n    }\n  };\n\n  var validate = defaultParameters.validate = function(element, values, node) {\n    var value = values[modelProperty] || this.__lastInvalidValue;\n\n    var property = {};\n    property[modelProperty] = value;\n\n    return options.validate(element, property, node);\n  };\n\n  return textField(options, defaultParameters);\n};\n\nmodule.exports = validationAwareTextField;\n"]},"metadata":{},"sourceType":"script"}