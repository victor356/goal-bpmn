{"ast":null,"code":"'use strict';\n\nvar extensionElementsHelper = require('../../../../helper/ExtensionElementsHelper'),\n    elementHelper = require('../../../../helper/ElementHelper'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar utils = require('../../../../Utils');\n\nvar entryFactory = require('../../../../factory/EntryFactory');\n\nvar extensionElementsEntry = require('./ExtensionElements');\n\nvar ModelUtil = require('bpmn-js/lib/util/ModelUtil'),\n    getBusinessObject = ModelUtil.getBusinessObject;\n\nvar assign = require('lodash/assign');\n\nvar DEFAULT_PROPS = {\n  'stringValue': undefined,\n  'string': undefined,\n  'expression': undefined\n};\nvar CAMUNDA_FIELD_EXTENSION_ELEMENT = 'camunda:Field';\n\nmodule.exports = function (element, bpmnFactory, translate, options) {\n  options = options || {};\n  var insideListener = !!options.insideListener,\n      idPrefix = options.idPrefix || '',\n      getSelectedListener = options.getSelectedListener,\n      businessObject = options.businessObject || getBusinessObject(element);\n  var entries = [];\n\n  var isSelected = function (element, node) {\n    return getSelectedField(element, node);\n  };\n\n  function getSelectedField(element, node) {\n    var selected = fieldEntry.getSelected(element, node.parentNode);\n\n    if (selected.idx === -1) {\n      return;\n    }\n\n    var fields = getCamundaFields(element, node);\n    return fields[selected.idx];\n  }\n\n  function getCamundaFields(element, node) {\n    if (!insideListener) {\n      return businessObject && extensionElementsHelper.getExtensionElements(businessObject, CAMUNDA_FIELD_EXTENSION_ELEMENT) || [];\n    }\n\n    return getCamundaListenerFields(element, node);\n  }\n\n  function getCamundaListenerFields(element, node) {\n    var selectedListener = getSelectedListener(element, node);\n    return selectedListener && selectedListener.fields || [];\n  }\n\n  function getFieldType(bo) {\n    var fieldType = 'string';\n    var expressionValue = bo && bo.expression;\n    var stringValue = bo && (bo.string || bo.stringValue);\n\n    if (typeof stringValue !== 'undefined') {\n      fieldType = 'string';\n    } else if (typeof expressionValue !== 'undefined') {\n      fieldType = 'expression';\n    }\n\n    return fieldType;\n  }\n\n  var setOptionLabelValue = function () {\n    return function (element, node, option, property, value, idx) {\n      var camundaFields = getCamundaFields(element, node);\n      var field = camundaFields[idx];\n      value = field.name ? field.name : '<empty>';\n      var label = idx + ' : ' + value;\n      option.text = label;\n    };\n  };\n\n  var newElement = function () {\n    return function (element, extensionElements, value, node) {\n      var props = {\n        name: '',\n        string: ''\n      };\n      var newFieldElem;\n\n      if (!insideListener) {\n        newFieldElem = elementHelper.createElement(CAMUNDA_FIELD_EXTENSION_ELEMENT, props, extensionElements, bpmnFactory);\n        return cmdHelper.addElementsTolist(element, extensionElements, 'values', [newFieldElem]);\n      } else {\n        var selectedListener = getSelectedListener(element, node);\n        newFieldElem = elementHelper.createElement(CAMUNDA_FIELD_EXTENSION_ELEMENT, props, selectedListener, bpmnFactory);\n        return cmdHelper.addElementsTolist(element, selectedListener, 'fields', [newFieldElem]);\n      }\n    };\n  };\n\n  var removeElement = function () {\n    return function (element, extensionElements, value, idx, node) {\n      var camundaFields = getCamundaFields(element, node);\n      var field = camundaFields[idx];\n\n      if (field) {\n        if (!insideListener) {\n          return extensionElementsHelper.removeEntry(businessObject, element, field);\n        }\n\n        var selectedListener = getSelectedListener(element, node);\n        return cmdHelper.removeElementsFromList(element, selectedListener, 'fields', null, [field]);\n      }\n    };\n  };\n\n  var fieldEntry = extensionElementsEntry(element, bpmnFactory, {\n    id: idPrefix + 'fields',\n    label: translate('Fields'),\n    modelProperty: 'fieldName',\n    idGeneration: 'false',\n    businessObject: businessObject,\n    createExtensionElement: newElement(),\n    removeExtensionElement: removeElement(),\n    getExtensionElements: function (element, node) {\n      return getCamundaFields(element, node);\n    },\n    setOptionLabelValue: setOptionLabelValue()\n  });\n  entries.push(fieldEntry);\n  entries.push(entryFactory.validationAwareTextField({\n    id: idPrefix + 'field-name',\n    label: translate('Name'),\n    modelProperty: 'fieldName',\n    getProperty: function (element, node) {\n      return (getSelectedField(element, node) || {}).name;\n    },\n    setProperty: function (element, values, node) {\n      var selectedField = getSelectedField(element, node);\n      return cmdHelper.updateBusinessObject(element, selectedField, {\n        name: values.fieldName\n      });\n    },\n    validate: function (element, values, node) {\n      var bo = getSelectedField(element, node);\n      var validation = {};\n\n      if (bo) {\n        var nameValue = values.fieldName;\n\n        if (nameValue) {\n          if (utils.containsSpace(nameValue)) {\n            validation.fieldName = translate('Name must not contain spaces');\n          }\n        } else {\n          validation.fieldName = translate('Parameter must have a name');\n        }\n      }\n\n      return validation;\n    },\n    hidden: function (element, node) {\n      return !isSelected(element, node);\n    }\n  }));\n  var fieldTypeOptions = [{\n    name: translate('String'),\n    value: 'string'\n  }, {\n    name: translate('Expression'),\n    value: 'expression'\n  }];\n  entries.push(entryFactory.selectBox({\n    id: idPrefix + 'field-type',\n    label: translate('Type'),\n    selectOptions: fieldTypeOptions,\n    modelProperty: 'fieldType',\n    get: function (element, node) {\n      var bo = getSelectedField(element, node);\n      var fieldType = getFieldType(bo);\n      return {\n        fieldType: fieldType\n      };\n    },\n    set: function (element, values, node) {\n      var props = assign({}, DEFAULT_PROPS);\n      var fieldType = values.fieldType;\n\n      if (fieldType === 'string') {\n        props.string = '';\n      } else if (fieldType === 'expression') {\n        props.expression = '';\n      }\n\n      return cmdHelper.updateBusinessObject(element, getSelectedField(element, node), props);\n    },\n    hidden: function (element, node) {\n      return !isSelected(element, node);\n    }\n  }));\n  entries.push(entryFactory.textBox({\n    id: idPrefix + 'field-value',\n    label: translate('Value'),\n    modelProperty: 'fieldValue',\n    get: function (element, node) {\n      var bo = getSelectedField(element, node);\n      var fieldType = getFieldType(bo);\n      var fieldValue;\n\n      if (fieldType === 'string') {\n        fieldValue = bo && (bo.string || bo.stringValue);\n      } else if (fieldType === 'expression') {\n        fieldValue = bo && bo.expression;\n      }\n\n      return {\n        fieldValue: fieldValue\n      };\n    },\n    set: function (element, values, node) {\n      var bo = getSelectedField(element, node);\n      var fieldType = getFieldType(bo);\n      var props = assign({}, DEFAULT_PROPS);\n      var fieldValue = values.fieldValue || undefined;\n\n      if (fieldType === 'string') {\n        props.string = fieldValue;\n      } else if (fieldType === 'expression') {\n        props.expression = fieldValue;\n      }\n\n      return cmdHelper.updateBusinessObject(element, bo, props);\n    },\n    validate: function (element, values, node) {\n      var bo = getSelectedField(element, node);\n      var validation = {};\n\n      if (bo) {\n        if (!values.fieldValue) {\n          validation.fieldValue = translate('Must provide a value');\n        }\n      }\n\n      return validation;\n    },\n    show: function (element, node) {\n      return isSelected(element, node);\n    }\n  }));\n  return entries;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/implementation/FieldInjection.js"],"names":["extensionElementsHelper","require","elementHelper","cmdHelper","utils","entryFactory","extensionElementsEntry","ModelUtil","getBusinessObject","assign","DEFAULT_PROPS","undefined","CAMUNDA_FIELD_EXTENSION_ELEMENT","module","exports","element","bpmnFactory","translate","options","insideListener","idPrefix","getSelectedListener","businessObject","entries","isSelected","node","getSelectedField","selected","fieldEntry","getSelected","parentNode","idx","fields","getCamundaFields","getExtensionElements","getCamundaListenerFields","selectedListener","getFieldType","bo","fieldType","expressionValue","expression","stringValue","string","setOptionLabelValue","option","property","value","camundaFields","field","name","label","text","newElement","extensionElements","props","newFieldElem","createElement","addElementsTolist","removeElement","removeEntry","removeElementsFromList","id","modelProperty","idGeneration","createExtensionElement","removeExtensionElement","push","validationAwareTextField","getProperty","setProperty","values","selectedField","updateBusinessObject","fieldName","validate","validation","nameValue","containsSpace","hidden","fieldTypeOptions","selectBox","selectOptions","get","set","textBox","fieldValue","show"],"mappings":"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","sourcesContent":["'use strict';\n\nvar extensionElementsHelper = require('../../../../helper/ExtensionElementsHelper'),\n    elementHelper = require('../../../../helper/ElementHelper'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar utils = require('../../../../Utils');\n\nvar entryFactory = require('../../../../factory/EntryFactory');\n\nvar extensionElementsEntry = require('./ExtensionElements');\n\nvar ModelUtil = require('bpmn-js/lib/util/ModelUtil'),\n    getBusinessObject = ModelUtil.getBusinessObject;\n\nvar assign = require('lodash/assign');\n\n\nvar DEFAULT_PROPS = {\n  'stringValue': undefined,\n  'string': undefined,\n  'expression': undefined\n};\n\nvar CAMUNDA_FIELD_EXTENSION_ELEMENT = 'camunda:Field';\n\nmodule.exports = function(element, bpmnFactory, translate, options) {\n\n  options = options || {};\n\n  var insideListener = !!options.insideListener,\n      idPrefix = options.idPrefix || '',\n      getSelectedListener = options.getSelectedListener,\n      businessObject = options.businessObject || getBusinessObject(element);\n\n  var entries = [];\n\n  var isSelected = function(element, node) {\n    return getSelectedField(element, node);\n  };\n\n  function getSelectedField(element, node) {\n    var selected = fieldEntry.getSelected(element, node.parentNode);\n\n    if (selected.idx === -1) {\n      return;\n    }\n\n    var fields = getCamundaFields(element, node);\n\n    return fields[selected.idx];\n  }\n\n  function getCamundaFields(element, node) {\n    if (!insideListener) {\n      return (\n        businessObject &&\n        extensionElementsHelper.getExtensionElements(businessObject, CAMUNDA_FIELD_EXTENSION_ELEMENT)\n      ) || [];\n    }\n    return getCamundaListenerFields(element, node);\n  }\n\n  function getCamundaListenerFields(element, node) {\n    var selectedListener = getSelectedListener(element, node);\n    return selectedListener && selectedListener.fields || [];\n  }\n\n  function getFieldType(bo) {\n    var fieldType = 'string';\n\n    var expressionValue = bo && bo.expression;\n    var stringValue = bo && (bo.string || bo.stringValue);\n\n    if (typeof stringValue !== 'undefined') {\n      fieldType = 'string';\n    } else if (typeof expressionValue !== 'undefined') {\n      fieldType = 'expression';\n    }\n\n    return fieldType;\n  }\n\n  var setOptionLabelValue = function() {\n    return function(element, node, option, property, value, idx) {\n      var camundaFields = getCamundaFields(element, node);\n      var field = camundaFields[idx];\n\n      value = (field.name) ? field.name : '<empty>';\n\n      var label = idx + ' : ' + value;\n\n      option.text = label;\n    };\n  };\n\n  var newElement = function() {\n    return function(element, extensionElements, value, node) {\n\n      var props = {\n        name: '',\n        string: ''\n      };\n\n      var newFieldElem;\n\n      if (!insideListener) {\n\n        newFieldElem = elementHelper.createElement(CAMUNDA_FIELD_EXTENSION_ELEMENT, props, extensionElements, bpmnFactory);\n        return cmdHelper.addElementsTolist(element, extensionElements, 'values', [ newFieldElem ]);\n\n      } else {\n\n        var selectedListener = getSelectedListener(element, node);\n        newFieldElem = elementHelper.createElement(CAMUNDA_FIELD_EXTENSION_ELEMENT, props, selectedListener, bpmnFactory);\n        return cmdHelper.addElementsTolist(element, selectedListener, 'fields', [ newFieldElem ]);\n\n      }\n\n    };\n  };\n\n  var removeElement = function() {\n    return function(element, extensionElements, value, idx, node) {\n      var camundaFields= getCamundaFields(element, node);\n      var field = camundaFields[idx];\n      if (field) {\n        if (!insideListener) {\n          return extensionElementsHelper.removeEntry(businessObject, element, field);\n        }\n        var selectedListener = getSelectedListener(element, node);\n        return cmdHelper.removeElementsFromList(element, selectedListener, 'fields', null, [ field ]);\n      }\n    };\n  };\n\n\n  var fieldEntry = extensionElementsEntry(element, bpmnFactory, {\n    id : idPrefix + 'fields',\n    label : translate('Fields'),\n    modelProperty: 'fieldName',\n    idGeneration: 'false',\n\n    businessObject: businessObject,\n\n    createExtensionElement: newElement(),\n    removeExtensionElement: removeElement(),\n\n    getExtensionElements: function(element, node) {\n      return getCamundaFields(element, node);\n    },\n\n    setOptionLabelValue: setOptionLabelValue()\n\n  });\n  entries.push(fieldEntry);\n\n\n  entries.push(entryFactory.validationAwareTextField({\n    id: idPrefix + 'field-name',\n    label: translate('Name'),\n    modelProperty: 'fieldName',\n\n    getProperty: function(element, node) {\n      return (getSelectedField(element, node) || {}).name;\n    },\n\n    setProperty: function(element, values, node) {\n      var selectedField = getSelectedField(element, node);\n      return cmdHelper.updateBusinessObject(element, selectedField, { name : values.fieldName });\n    },\n\n    validate: function(element, values, node) {\n      var bo = getSelectedField(element, node);\n\n      var validation = {};\n      if (bo) {\n        var nameValue = values.fieldName;\n\n        if (nameValue) {\n          if (utils.containsSpace(nameValue)) {\n            validation.fieldName = translate('Name must not contain spaces');\n          }\n        } else {\n          validation.fieldName = translate('Parameter must have a name');\n        }\n      }\n\n      return validation;\n    },\n\n    hidden: function(element, node) {\n      return !isSelected(element, node);\n    }\n\n  }));\n\n  var fieldTypeOptions = [\n    {\n      name: translate('String'),\n      value: 'string'\n    },\n    {\n      name: translate('Expression'),\n      value: 'expression'\n    }\n  ];\n\n  entries.push(entryFactory.selectBox({\n    id: idPrefix + 'field-type',\n    label: translate('Type'),\n    selectOptions: fieldTypeOptions,\n    modelProperty: 'fieldType',\n\n    get: function(element, node) {\n      var bo = getSelectedField(element, node);\n\n      var fieldType = getFieldType(bo);\n\n      return {\n        fieldType: fieldType\n      };\n    },\n\n    set: function(element, values, node) {\n      var props = assign({}, DEFAULT_PROPS);\n\n      var fieldType = values.fieldType;\n\n      if (fieldType === 'string') {\n        props.string = '';\n      }\n      else if (fieldType === 'expression') {\n        props.expression = '';\n      }\n\n      return cmdHelper.updateBusinessObject(element, getSelectedField(element, node), props);\n    },\n\n    hidden: function(element, node) {\n      return !isSelected(element, node);\n    }\n\n  }));\n\n\n  entries.push(entryFactory.textBox({\n    id: idPrefix + 'field-value',\n    label: translate('Value'),\n    modelProperty: 'fieldValue',\n\n    get: function(element, node) {\n      var bo = getSelectedField(element, node);\n      var fieldType = getFieldType(bo);\n\n      var fieldValue;\n\n      if (fieldType === 'string') {\n        fieldValue = bo && (bo.string || bo.stringValue);\n      }\n      else if (fieldType === 'expression') {\n        fieldValue = bo && bo.expression;\n      }\n\n      return {\n        fieldValue: fieldValue\n      };\n    },\n\n    set: function(element, values, node) {\n      var bo = getSelectedField(element, node);\n      var fieldType = getFieldType(bo);\n\n      var props = assign({}, DEFAULT_PROPS);\n\n      var fieldValue = values.fieldValue || undefined;\n\n      if (fieldType === 'string') {\n        props.string = fieldValue;\n      }\n      else if (fieldType === 'expression') {\n        props.expression = fieldValue;\n      }\n\n      return cmdHelper.updateBusinessObject(element, bo, props);\n\n    },\n\n    validate: function(element, values, node) {\n      var bo = getSelectedField(element, node);\n\n      var validation = {};\n      if (bo) {\n        if (!values.fieldValue) {\n          validation.fieldValue = translate('Must provide a value');\n        }\n      }\n\n      return validation;\n    },\n\n    show: function(element, node) {\n      return isSelected(element, node);\n    }\n\n  }));\n\n  return entries;\n\n};\n"]},"metadata":{},"sourceType":"script"}