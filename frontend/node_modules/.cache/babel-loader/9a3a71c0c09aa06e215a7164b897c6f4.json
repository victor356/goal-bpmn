{"ast":null,"code":"/**\n * A service that provides rules for certain diagram actions.\n *\n * The default implementation will hook into the {@link CommandStack}\n * to perform the actual rule evaluation. Make sure to provide the\n * `commandStack` service with this module if you plan to use it.\n *\n * Together with this implementation you may use the {@link RuleProvider}\n * to implement your own rule checkers.\n *\n * This module is ment to be easily replaced, thus the tiny foot print.\n *\n * @param {Injector} injector\n */\nexport default function Rules(injector) {\n  this._commandStack = injector.get('commandStack', false);\n}\nRules.$inject = ['injector'];\n/**\n * Returns whether or not a given modeling action can be executed\n * in the specified context.\n *\n * This implementation will respond with allow unless anyone\n * objects.\n *\n * @param {String} action the action to be checked\n * @param {Object} [context] the context to check the action in\n *\n * @return {Boolean} returns true, false or null depending on whether the\n *                   operation is allowed, not allowed or should be ignored.\n */\n\nRules.prototype.allowed = function (action, context) {\n  var allowed = true;\n  var commandStack = this._commandStack;\n\n  if (commandStack) {\n    allowed = commandStack.canExecute(action, context);\n  } // map undefined to true, i.e. no rules\n\n\n  return allowed === undefined ? true : allowed;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/rules/Rules.js"],"names":["Rules","injector","_commandStack","get","$inject","prototype","allowed","action","context","commandStack","canExecute","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,KAAT,CAAeC,QAAf,EAAyB;AACtC,OAAKC,aAAL,GAAqBD,QAAQ,CAACE,GAAT,CAAa,cAAb,EAA6B,KAA7B,CAArB;AACD;AAEDH,KAAK,CAACI,OAAN,GAAgB,CAAE,UAAF,CAAhB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,KAAK,CAACK,SAAN,CAAgBC,OAAhB,GAA0B,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AAClD,MAAIF,OAAO,GAAG,IAAd;AAEA,MAAIG,YAAY,GAAG,KAAKP,aAAxB;;AAEA,MAAIO,YAAJ,EAAkB;AAChBH,IAAAA,OAAO,GAAGG,YAAY,CAACC,UAAb,CAAwBH,MAAxB,EAAgCC,OAAhC,CAAV;AACD,GAPiD,CASlD;;;AACA,SAAOF,OAAO,KAAKK,SAAZ,GAAwB,IAAxB,GAA+BL,OAAtC;AACD,CAXD","sourcesContent":["/**\n * A service that provides rules for certain diagram actions.\n *\n * The default implementation will hook into the {@link CommandStack}\n * to perform the actual rule evaluation. Make sure to provide the\n * `commandStack` service with this module if you plan to use it.\n *\n * Together with this implementation you may use the {@link RuleProvider}\n * to implement your own rule checkers.\n *\n * This module is ment to be easily replaced, thus the tiny foot print.\n *\n * @param {Injector} injector\n */\nexport default function Rules(injector) {\n  this._commandStack = injector.get('commandStack', false);\n}\n\nRules.$inject = [ 'injector' ];\n\n\n/**\n * Returns whether or not a given modeling action can be executed\n * in the specified context.\n *\n * This implementation will respond with allow unless anyone\n * objects.\n *\n * @param {String} action the action to be checked\n * @param {Object} [context] the context to check the action in\n *\n * @return {Boolean} returns true, false or null depending on whether the\n *                   operation is allowed, not allowed or should be ignored.\n */\nRules.prototype.allowed = function(action, context) {\n  var allowed = true;\n\n  var commandStack = this._commandStack;\n\n  if (commandStack) {\n    allowed = commandStack.canExecute(action, context);\n  }\n\n  // map undefined to true, i.e. no rules\n  return allowed === undefined ? true : allowed;\n};"]},"metadata":{},"sourceType":"module"}