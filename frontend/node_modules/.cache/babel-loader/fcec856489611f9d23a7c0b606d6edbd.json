{"ast":null,"code":"/**\n * Returns the length of a vector\n *\n * @param {Vector}\n * @return {Float}\n */\nexport function vectorLength(v) {\n  return Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));\n}\n/**\n * Calculates the angle between a line a the yAxis\n *\n * @param {Array}\n * @return {Float}\n */\n\nexport function getAngle(line) {\n  // return value is between 0, 180 and -180, -0\n  // @janstuemmel: maybe replace return a/b with b/a\n  return Math.atan((line[1].y - line[0].y) / (line[1].x - line[0].x));\n}\n/**\n * Rotates a vector by a given angle\n *\n * @param {Vector}\n * @param {Float} Angle in radians\n * @return {Vector}\n */\n\nexport function rotateVector(vector, angle) {\n  return !angle ? vector : {\n    x: Math.cos(angle) * vector.x - Math.sin(angle) * vector.y,\n    y: Math.sin(angle) * vector.x + Math.cos(angle) * vector.y\n  };\n}\n/**\n * Solves a 2D equation system\n * a + r*b = c, where a,b,c are 2D vectors\n *\n * @param {Vector}\n * @param {Vector}\n * @param {Vector}\n * @return {Float}\n */\n\nfunction solveLambaSystem(a, b, c) {\n  // the 2d system\n  var system = [{\n    n: a[0] - c[0],\n    lambda: b[0]\n  }, {\n    n: a[1] - c[1],\n    lambda: b[1]\n  }]; // solve\n\n  var n = system[0].n * b[0] + system[1].n * b[1],\n      l = system[0].lambda * b[0] + system[1].lambda * b[1];\n  return -n / l;\n}\n/**\n * Position of perpendicular foot\n *\n * @param {Point}\n * @param [ {Point}, {Point} ] line defined throug two points\n * @return {Point} the perpendicular foot position\n */\n\n\nexport function perpendicularFoot(point, line) {\n  var a = line[0],\n      b = line[1]; // relative position of b from a\n\n  var bd = {\n    x: b.x - a.x,\n    y: b.y - a.y\n  }; // solve equation system to the parametrized vectors param real value\n\n  var r = solveLambaSystem([a.x, a.y], [bd.x, bd.y], [point.x, point.y]);\n  return {\n    x: a.x + r * bd.x,\n    y: a.y + r * bd.y\n  };\n}\n/**\n * Calculates the distance between a point and a line\n *\n * @param {Point}\n * @param [ {Point}, {Point} ] line defined throug two points\n * @return {Float} distance\n */\n\nexport function getDistancePointLine(point, line) {\n  var pfPoint = perpendicularFoot(point, line); // distance vector\n\n  var connectionVector = {\n    x: pfPoint.x - point.x,\n    y: pfPoint.y - point.y\n  };\n  return vectorLength(connectionVector);\n}\n/**\n * Calculates the distance between two points\n *\n * @param {Point}\n * @param {Point}\n * @return {Float} distance\n */\n\nexport function getDistancePointPoint(point1, point2) {\n  return vectorLength({\n    x: point1.x - point2.x,\n    y: point1.y - point2.y\n  });\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/features/modeling/behavior/util/GeometricUtil.js"],"names":["vectorLength","v","Math","sqrt","pow","x","y","getAngle","line","atan","rotateVector","vector","angle","cos","sin","solveLambaSystem","a","b","c","system","n","lambda","l","perpendicularFoot","point","bd","r","getDistancePointLine","pfPoint","connectionVector","getDistancePointPoint","point1","point2"],"mappings":"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","sourcesContent":["/**\n * Returns the length of a vector\n *\n * @param {Vector}\n * @return {Float}\n */\nexport function vectorLength(v) {\n  return Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));\n}\n\n\n/**\n * Calculates the angle between a line a the yAxis\n *\n * @param {Array}\n * @return {Float}\n */\nexport function getAngle(line) {\n  // return value is between 0, 180 and -180, -0\n  // @janstuemmel: maybe replace return a/b with b/a\n  return Math.atan((line[1].y - line[0].y) / (line[1].x - line[0].x));\n}\n\n\n/**\n * Rotates a vector by a given angle\n *\n * @param {Vector}\n * @param {Float} Angle in radians\n * @return {Vector}\n */\nexport function rotateVector(vector, angle) {\n  return (!angle) ? vector : {\n    x: Math.cos(angle) * vector.x - Math.sin(angle) * vector.y,\n    y: Math.sin(angle) * vector.x + Math.cos(angle) * vector.y\n  };\n}\n\n\n/**\n * Solves a 2D equation system\n * a + r*b = c, where a,b,c are 2D vectors\n *\n * @param {Vector}\n * @param {Vector}\n * @param {Vector}\n * @return {Float}\n */\nfunction solveLambaSystem(a, b, c) {\n\n  // the 2d system\n  var system = [\n    { n: a[0] - c[0], lambda: b[0] },\n    { n: a[1] - c[1], lambda: b[1] }\n  ];\n\n  // solve\n  var n = system[0].n * b[0] + system[1].n * b[1],\n      l = system[0].lambda * b[0] + system[1].lambda * b[1];\n\n  return -n/l;\n}\n\n\n/**\n * Position of perpendicular foot\n *\n * @param {Point}\n * @param [ {Point}, {Point} ] line defined throug two points\n * @return {Point} the perpendicular foot position\n */\nexport function perpendicularFoot(point, line) {\n\n  var a = line[0], b = line[1];\n\n  // relative position of b from a\n  var bd = { x: b.x - a.x, y: b.y - a.y };\n\n  // solve equation system to the parametrized vectors param real value\n  var r = solveLambaSystem([ a.x, a.y ], [ bd.x, bd.y ], [ point.x, point.y ]);\n\n  return { x: a.x + r*bd.x, y: a.y + r*bd.y };\n}\n\n\n/**\n * Calculates the distance between a point and a line\n *\n * @param {Point}\n * @param [ {Point}, {Point} ] line defined throug two points\n * @return {Float} distance\n */\nexport function getDistancePointLine(point, line) {\n\n  var pfPoint = perpendicularFoot(point, line);\n\n  // distance vector\n  var connectionVector = {\n    x: pfPoint.x - point.x,\n    y: pfPoint.y - point.y\n  };\n\n  return vectorLength(connectionVector);\n}\n\n\n/**\n * Calculates the distance between two points\n *\n * @param {Point}\n * @param {Point}\n * @return {Float} distance\n */\nexport function getDistancePointPoint(point1, point2) {\n\n  return vectorLength({\n    x: point1.x - point2.x,\n    y: point1.y - point2.y\n  });\n}"]},"metadata":{},"sourceType":"module"}