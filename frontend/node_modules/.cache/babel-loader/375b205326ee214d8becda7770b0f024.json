{"ast":null,"code":"'use strict';\n\nvar hat = require('hat');\n/**\n * Create a new id generator / cache instance.\n *\n * You may optionally provide a seed that is used internally.\n *\n * @param {Seed} seed\n */\n\n\nfunction Ids(seed) {\n  if (!(this instanceof Ids)) {\n    return new Ids(seed);\n  }\n\n  seed = seed || [128, 36, 1];\n  this._seed = seed.length ? hat.rack(seed[0], seed[1], seed[2]) : seed;\n}\n\nmodule.exports = Ids;\n/**\n * Generate a next id.\n *\n * @param {Object} [element] element to bind the id to\n *\n * @return {String} id\n */\n\nIds.prototype.next = function (element) {\n  return this._seed(element || true);\n};\n/**\n * Generate a next id with a given prefix.\n *\n * @param {Object} [element] element to bind the id to\n *\n * @return {String} id\n */\n\n\nIds.prototype.nextPrefixed = function (prefix, element) {\n  var id;\n\n  do {\n    id = prefix + this.next(true);\n  } while (this.assigned(id)); // claim {prefix}{random}\n\n\n  this.claim(id, element); // return\n\n  return id;\n};\n/**\n * Manually claim an existing id.\n *\n * @param {String} id\n * @param {String} [element] element the id is claimed by\n */\n\n\nIds.prototype.claim = function (id, element) {\n  this._seed.set(id, element || true);\n};\n/**\n * Returns true if the given id has already been assigned.\n *\n * @param  {String} id\n * @return {Boolean}\n */\n\n\nIds.prototype.assigned = function (id) {\n  return this._seed.get(id) || false;\n};\n/**\n * Unclaim an id.\n *\n * @param  {String} id the id to unclaim\n */\n\n\nIds.prototype.unclaim = function (id) {\n  delete this._seed.hats[id];\n};\n/**\n * Clear all claimed ids.\n */\n\n\nIds.prototype.clear = function () {\n  var hats = this._seed.hats,\n      id;\n\n  for (id in hats) {\n    this.unclaim(id);\n  }\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/ids/index.js"],"names":["hat","require","Ids","seed","_seed","length","rack","module","exports","prototype","next","element","nextPrefixed","prefix","id","assigned","claim","set","get","unclaim","hats","clear"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,GAAT,CAAaC,IAAb,EAAmB;AAEjB,MAAI,EAAE,gBAAgBD,GAAlB,CAAJ,EAA4B;AAC1B,WAAO,IAAIA,GAAJ,CAAQC,IAAR,CAAP;AACD;;AAEDA,EAAAA,IAAI,GAAGA,IAAI,IAAI,CAAE,GAAF,EAAO,EAAP,EAAW,CAAX,CAAf;AACA,OAAKC,KAAL,GAAaD,IAAI,CAACE,MAAL,GAAcL,GAAG,CAACM,IAAJ,CAASH,IAAI,CAAC,CAAD,CAAb,EAAkBA,IAAI,CAAC,CAAD,CAAtB,EAA2BA,IAAI,CAAC,CAAD,CAA/B,CAAd,GAAoDA,IAAjE;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBN,GAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,GAAG,CAACO,SAAJ,CAAcC,IAAd,GAAqB,UAASC,OAAT,EAAkB;AACrC,SAAO,KAAKP,KAAL,CAAWO,OAAO,IAAI,IAAtB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,GAAG,CAACO,SAAJ,CAAcG,YAAd,GAA6B,UAASC,MAAT,EAAiBF,OAAjB,EAA0B;AACrD,MAAIG,EAAJ;;AAEA,KAAG;AACDA,IAAAA,EAAE,GAAGD,MAAM,GAAG,KAAKH,IAAL,CAAU,IAAV,CAAd;AACD,GAFD,QAES,KAAKK,QAAL,CAAcD,EAAd,CAFT,EAHqD,CAOrD;;;AACA,OAAKE,KAAL,CAAWF,EAAX,EAAeH,OAAf,EARqD,CAUrD;;AACA,SAAOG,EAAP;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,GAAG,CAACO,SAAJ,CAAcO,KAAd,GAAsB,UAASF,EAAT,EAAaH,OAAb,EAAsB;AAC1C,OAAKP,KAAL,CAAWa,GAAX,CAAeH,EAAf,EAAmBH,OAAO,IAAI,IAA9B;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAT,GAAG,CAACO,SAAJ,CAAcM,QAAd,GAAyB,UAASD,EAAT,EAAa;AACpC,SAAO,KAAKV,KAAL,CAAWc,GAAX,CAAeJ,EAAf,KAAsB,KAA7B;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAZ,GAAG,CAACO,SAAJ,CAAcU,OAAd,GAAwB,UAASL,EAAT,EAAa;AACnC,SAAO,KAAKV,KAAL,CAAWgB,IAAX,CAAgBN,EAAhB,CAAP;AACD,CAFD;AAKA;AACA;AACA;;;AACAZ,GAAG,CAACO,SAAJ,CAAcY,KAAd,GAAsB,YAAW;AAE/B,MAAID,IAAI,GAAG,KAAKhB,KAAL,CAAWgB,IAAtB;AAAA,MACIN,EADJ;;AAGA,OAAKA,EAAL,IAAWM,IAAX,EAAiB;AACf,SAAKD,OAAL,CAAaL,EAAb;AACD;AACF,CARD","sourcesContent":["'use strict';\n\nvar hat = require('hat');\n\n\n/**\n * Create a new id generator / cache instance.\n *\n * You may optionally provide a seed that is used internally.\n *\n * @param {Seed} seed\n */\nfunction Ids(seed) {\n\n  if (!(this instanceof Ids)) {\n    return new Ids(seed);\n  }\n\n  seed = seed || [ 128, 36, 1 ];\n  this._seed = seed.length ? hat.rack(seed[0], seed[1], seed[2]) : seed;\n}\n\nmodule.exports = Ids;\n\n/**\n * Generate a next id.\n *\n * @param {Object} [element] element to bind the id to\n *\n * @return {String} id\n */\nIds.prototype.next = function(element) {\n  return this._seed(element || true);\n};\n\n/**\n * Generate a next id with a given prefix.\n *\n * @param {Object} [element] element to bind the id to\n *\n * @return {String} id\n */\nIds.prototype.nextPrefixed = function(prefix, element) {\n  var id;\n\n  do {\n    id = prefix + this.next(true);\n  } while (this.assigned(id));\n\n  // claim {prefix}{random}\n  this.claim(id, element);\n\n  // return\n  return id;\n};\n\n/**\n * Manually claim an existing id.\n *\n * @param {String} id\n * @param {String} [element] element the id is claimed by\n */\nIds.prototype.claim = function(id, element) {\n  this._seed.set(id, element || true);\n};\n\n/**\n * Returns true if the given id has already been assigned.\n *\n * @param  {String} id\n * @return {Boolean}\n */\nIds.prototype.assigned = function(id) {\n  return this._seed.get(id) || false;\n};\n\n/**\n * Unclaim an id.\n *\n * @param  {String} id the id to unclaim\n */\nIds.prototype.unclaim = function(id) {\n  delete this._seed.hats[id];\n};\n\n\n/**\n * Clear all claimed ids.\n */\nIds.prototype.clear = function() {\n\n  var hats = this._seed.hats,\n      id;\n\n  for (id in hats) {\n    this.unclaim(id);\n  }\n};"]},"metadata":{},"sourceType":"script"}