{"ast":null,"code":"/**\n * A handler that toggles the collapsed state of an element\n * and the visibility of all its children.\n *\n * @param {Modeling} modeling\n */\nexport default function ToggleShapeCollapseHandler(modeling) {\n  this._modeling = modeling;\n}\nToggleShapeCollapseHandler.$inject = ['modeling'];\n\nToggleShapeCollapseHandler.prototype.execute = function (context) {\n  var shape = context.shape,\n      children = shape.children; // remember previous visibility of children\n\n  context.oldChildrenVisibility = getElementsVisibility(children); // toggle state\n\n  shape.collapsed = !shape.collapsed; // hide/show children\n\n  setHidden(children, shape.collapsed);\n  return [shape].concat(children);\n};\n\nToggleShapeCollapseHandler.prototype.revert = function (context) {\n  var shape = context.shape,\n      oldChildrenVisibility = context.oldChildrenVisibility;\n  var children = shape.children; // set old visability of children\n\n  restoreVisibility(children, oldChildrenVisibility); // retoggle state\n\n  shape.collapsed = !shape.collapsed;\n  return [shape].concat(children);\n}; // helpers //////////////////////\n\n/**\n * Return a map { elementId -> hiddenState}.\n *\n * @param {Array<djs.model.Shape>} elements\n *\n * @return {Object}\n */\n\n\nfunction getElementsVisibility(elements) {\n  var result = {};\n  elements.forEach(function (e) {\n    result[e.id] = e.hidden;\n  });\n  return result;\n}\n\nfunction setHidden(elements, newHidden) {\n  elements.forEach(function (element) {\n    element.hidden = newHidden;\n  });\n}\n\nfunction restoreVisibility(elements, lastState) {\n  elements.forEach(function (e) {\n    e.hidden = lastState[e.id];\n  });\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/modeling/cmd/ToggleShapeCollapseHandler.js"],"names":["ToggleShapeCollapseHandler","modeling","_modeling","$inject","prototype","execute","context","shape","children","oldChildrenVisibility","getElementsVisibility","collapsed","setHidden","concat","revert","restoreVisibility","elements","result","forEach","e","id","hidden","newHidden","element","lastState"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,0BAAT,CAAoCC,QAApC,EAA8C;AAC3D,OAAKC,SAAL,GAAiBD,QAAjB;AACD;AAEDD,0BAA0B,CAACG,OAA3B,GAAqC,CAAE,UAAF,CAArC;;AAGAH,0BAA0B,CAACI,SAA3B,CAAqCC,OAArC,GAA+C,UAASC,OAAT,EAAkB;AAE/D,MAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;AAAA,MACIC,QAAQ,GAAGD,KAAK,CAACC,QADrB,CAF+D,CAK/D;;AACAF,EAAAA,OAAO,CAACG,qBAAR,GAAgCC,qBAAqB,CAACF,QAAD,CAArD,CAN+D,CAQ/D;;AACAD,EAAAA,KAAK,CAACI,SAAN,GAAkB,CAACJ,KAAK,CAACI,SAAzB,CAT+D,CAW/D;;AACAC,EAAAA,SAAS,CAACJ,QAAD,EAAWD,KAAK,CAACI,SAAjB,CAAT;AAEA,SAAO,CAACJ,KAAD,EAAQM,MAAR,CAAeL,QAAf,CAAP;AACD,CAfD;;AAkBAR,0BAA0B,CAACI,SAA3B,CAAqCU,MAArC,GAA8C,UAASR,OAAT,EAAkB;AAE9D,MAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;AAAA,MACIE,qBAAqB,GAAGH,OAAO,CAACG,qBADpC;AAGA,MAAID,QAAQ,GAAGD,KAAK,CAACC,QAArB,CAL8D,CAO9D;;AACAO,EAAAA,iBAAiB,CAACP,QAAD,EAAWC,qBAAX,CAAjB,CAR8D,CAU9D;;AACAF,EAAAA,KAAK,CAACI,SAAN,GAAkB,CAACJ,KAAK,CAACI,SAAzB;AAEA,SAAO,CAACJ,KAAD,EAAQM,MAAR,CAAeL,QAAf,CAAP;AACD,CAdD,C,CAiBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,qBAAT,CAA+BM,QAA/B,EAAyC;AAEvC,MAAIC,MAAM,GAAG,EAAb;AAEAD,EAAAA,QAAQ,CAACE,OAAT,CAAiB,UAASC,CAAT,EAAY;AAC3BF,IAAAA,MAAM,CAACE,CAAC,CAACC,EAAH,CAAN,GAAeD,CAAC,CAACE,MAAjB;AACD,GAFD;AAIA,SAAOJ,MAAP;AACD;;AAGD,SAASL,SAAT,CAAmBI,QAAnB,EAA6BM,SAA7B,EAAwC;AACtCN,EAAAA,QAAQ,CAACE,OAAT,CAAiB,UAASK,OAAT,EAAkB;AACjCA,IAAAA,OAAO,CAACF,MAAR,GAAiBC,SAAjB;AACD,GAFD;AAGD;;AAED,SAASP,iBAAT,CAA2BC,QAA3B,EAAqCQ,SAArC,EAAgD;AAC9CR,EAAAA,QAAQ,CAACE,OAAT,CAAiB,UAASC,CAAT,EAAY;AAC3BA,IAAAA,CAAC,CAACE,MAAF,GAAWG,SAAS,CAACL,CAAC,CAACC,EAAH,CAApB;AACD,GAFD;AAGD","sourcesContent":["/**\n * A handler that toggles the collapsed state of an element\n * and the visibility of all its children.\n *\n * @param {Modeling} modeling\n */\nexport default function ToggleShapeCollapseHandler(modeling) {\n  this._modeling = modeling;\n}\n\nToggleShapeCollapseHandler.$inject = [ 'modeling' ];\n\n\nToggleShapeCollapseHandler.prototype.execute = function(context) {\n\n  var shape = context.shape,\n      children = shape.children;\n\n  // remember previous visibility of children\n  context.oldChildrenVisibility = getElementsVisibility(children);\n\n  // toggle state\n  shape.collapsed = !shape.collapsed;\n\n  // hide/show children\n  setHidden(children, shape.collapsed);\n\n  return [shape].concat(children);\n};\n\n\nToggleShapeCollapseHandler.prototype.revert = function(context) {\n\n  var shape = context.shape,\n      oldChildrenVisibility = context.oldChildrenVisibility;\n\n  var children = shape.children;\n\n  // set old visability of children\n  restoreVisibility(children, oldChildrenVisibility);\n\n  // retoggle state\n  shape.collapsed = !shape.collapsed;\n\n  return [shape].concat(children);\n};\n\n\n// helpers //////////////////////\n\n/**\n * Return a map { elementId -> hiddenState}.\n *\n * @param {Array<djs.model.Shape>} elements\n *\n * @return {Object}\n */\nfunction getElementsVisibility(elements) {\n\n  var result = {};\n\n  elements.forEach(function(e) {\n    result[e.id] = e.hidden;\n  });\n\n  return result;\n}\n\n\nfunction setHidden(elements, newHidden) {\n  elements.forEach(function(element) {\n    element.hidden = newHidden;\n  });\n}\n\nfunction restoreVisibility(elements, lastState) {\n  elements.forEach(function(e) {\n    e.hidden = lastState[e.id];\n  });\n}\n"]},"metadata":{},"sourceType":"module"}