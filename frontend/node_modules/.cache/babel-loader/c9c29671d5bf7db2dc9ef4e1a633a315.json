{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    is = require('bpmn-js/lib/util/ModelUtil').is,\n    getTemplate = require('../Helper').getTemplate,\n    getTemplateId = require('../Helper').getTemplateId;\n\nvar find = require('lodash/find');\n\nvar TEMPLATE_ATTR = require('../Helper').TEMPLATE_ATTR;\n\nfunction isAny(element, types) {\n  return types.reduce(function (result, type) {\n    return result || is(element, type);\n  }, false);\n}\n\nmodule.exports = function (group, element, elementTemplates, translate) {\n  var options = getTemplateOptions(element, elementTemplates);\n\n  if (options.length === 1 && !options[0].isDefault) {\n    return;\n  } // select element template (via dropdown)\n\n\n  group.entries.push(entryFactory.selectBox({\n    id: 'elementTemplate-chooser',\n    label: translate('Element Template'),\n    modelProperty: 'camunda:modelerTemplate',\n    selectOptions: options,\n    set: function (element, properties) {\n      return applyTemplate(element, properties[TEMPLATE_ATTR], elementTemplates);\n    },\n    disabled: function () {\n      var template = getTemplate(element, elementTemplates);\n      return template && isDefaultTemplate(template);\n    }\n  }));\n}; // helpers //////////////////////////////////////\n\n\nfunction applyTemplate(element, newTemplateId, elementTemplates) {\n  // cleanup\n  // clear input output mappings\n  // undo changes to properties defined in template\n  // re-establish\n  // set input output mappings\n  // apply changes to properties as defined in new template\n  var oldTemplate = getTemplate(element, elementTemplates),\n      newTemplate = elementTemplates.get(newTemplateId);\n\n  if (oldTemplate === newTemplate) {\n    return;\n  }\n\n  return {\n    cmd: 'propertiesPanel.camunda.changeTemplate',\n    context: {\n      element: element,\n      oldTemplate: oldTemplate,\n      newTemplate: newTemplate\n    }\n  };\n}\n\nfunction getTemplateOptions(element, elementTemplates) {\n  var currentTemplateId = getTemplateId(element);\n  var emptyOption = {\n    name: '',\n    value: ''\n  };\n  var allOptions = elementTemplates.getAll().reduce(function (templates, t) {\n    if (!isAny(element, t.appliesTo)) {\n      return templates;\n    }\n\n    return templates.concat({\n      name: t.name,\n      value: t.id,\n      isDefault: t.isDefault\n    });\n  }, [emptyOption]);\n  var defaultOption = find(allOptions, function (option) {\n    return isDefaultTemplate(option);\n  });\n  var currentOption = find(allOptions, function (option) {\n    return option.value === currentTemplateId;\n  });\n\n  if (currentTemplateId && !currentOption) {\n    currentOption = unknownTemplate(currentTemplateId);\n    allOptions.push(currentOption);\n  }\n\n  if (!defaultOption) {\n    // return all options, including empty\n    // and optionally unknownTemplate option\n    return allOptions;\n  } // special limited handling for\n  // default options\n\n\n  var options = []; // current template not set\n\n  if (!currentTemplateId) {\n    options.push({\n      name: '',\n      value: ''\n    });\n  } // current template not default\n\n\n  if (currentOption && currentOption !== defaultOption) {\n    options.push(currentOption);\n  }\n\n  options.push(defaultOption); // [ (empty), (current), defaultOption ]\n\n  return options;\n}\n\nfunction unknownTemplate(templateId) {\n  return {\n    name: '[unknown template: ' + templateId + ']',\n    value: templateId\n  };\n}\n\nfunction isDefaultTemplate(elementTemplate) {\n  return elementTemplate.isDefault;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/element-templates/parts/ChooserProps.js"],"names":["entryFactory","require","is","getTemplate","getTemplateId","find","TEMPLATE_ATTR","isAny","element","types","reduce","result","type","module","exports","group","elementTemplates","translate","options","getTemplateOptions","length","isDefault","entries","push","selectBox","id","label","modelProperty","selectOptions","set","properties","applyTemplate","disabled","template","isDefaultTemplate","newTemplateId","oldTemplate","newTemplate","get","cmd","context","currentTemplateId","emptyOption","name","value","allOptions","getAll","templates","t","appliesTo","concat","defaultOption","option","currentOption","unknownTemplate","templateId","elementTemplate"],"mappings":"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","sourcesContent":["'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    is = require('bpmn-js/lib/util/ModelUtil').is,\n    getTemplate = require('../Helper').getTemplate,\n    getTemplateId = require('../Helper').getTemplateId;\n\nvar find = require('lodash/find');\n\nvar TEMPLATE_ATTR = require('../Helper').TEMPLATE_ATTR;\n\nfunction isAny(element, types) {\n  return types.reduce(function(result, type) {\n    return result || is(element, type);\n  }, false);\n}\n\n\nmodule.exports = function(group, element, elementTemplates, translate) {\n\n  var options = getTemplateOptions(element, elementTemplates);\n\n  if (options.length === 1 && !options[0].isDefault) {\n    return;\n  }\n\n  // select element template (via dropdown)\n  group.entries.push(entryFactory.selectBox({\n    id: 'elementTemplate-chooser',\n    label: translate('Element Template'),\n    modelProperty: 'camunda:modelerTemplate',\n    selectOptions: options,\n    set: function(element, properties) {\n      return applyTemplate(element, properties[TEMPLATE_ATTR], elementTemplates);\n    },\n    disabled: function() {\n      var template = getTemplate(element, elementTemplates);\n\n      return template && isDefaultTemplate(template);\n    }\n  }));\n\n};\n\n\n// helpers //////////////////////////////////////\n\nfunction applyTemplate(element, newTemplateId, elementTemplates) {\n\n  // cleanup\n  // clear input output mappings\n  // undo changes to properties defined in template\n\n  // re-establish\n  // set input output mappings\n  // apply changes to properties as defined in new template\n\n  var oldTemplate = getTemplate(element, elementTemplates),\n      newTemplate = elementTemplates.get(newTemplateId);\n\n  if (oldTemplate === newTemplate) {\n    return;\n  }\n\n  return {\n    cmd: 'propertiesPanel.camunda.changeTemplate',\n    context: {\n      element: element,\n      oldTemplate: oldTemplate,\n      newTemplate: newTemplate\n    }\n  };\n}\n\nfunction getTemplateOptions(element, elementTemplates) {\n\n  var currentTemplateId = getTemplateId(element);\n\n  var emptyOption = {\n    name: '',\n    value: ''\n  };\n\n  var allOptions = elementTemplates.getAll().reduce(function(templates, t) {\n    if (!isAny(element, t.appliesTo)) {\n      return templates;\n    }\n\n    return templates.concat({\n      name: t.name,\n      value: t.id,\n      isDefault: t.isDefault\n    });\n  }, [ emptyOption ]);\n\n\n  var defaultOption = find(allOptions, function(option) {\n    return isDefaultTemplate(option);\n  });\n\n  var currentOption = find(allOptions, function(option) {\n    return option.value === currentTemplateId;\n  });\n\n  if (currentTemplateId && !currentOption) {\n    currentOption = unknownTemplate(currentTemplateId);\n\n    allOptions.push(currentOption);\n  }\n\n  if (!defaultOption) {\n\n    // return all options, including empty\n    // and optionally unknownTemplate option\n    return allOptions;\n  }\n\n  // special limited handling for\n  // default options\n\n  var options = [];\n\n  // current template not set\n  if (!currentTemplateId) {\n    options.push({\n      name: '',\n      value: ''\n    });\n  }\n\n  // current template not default\n  if (currentOption && currentOption !== defaultOption) {\n    options.push(currentOption);\n  }\n\n  options.push(defaultOption);\n\n  // [ (empty), (current), defaultOption ]\n  return options;\n}\n\nfunction unknownTemplate(templateId) {\n  return {\n    name: '[unknown template: ' + templateId + ']',\n    value: templateId\n  };\n}\n\nfunction isDefaultTemplate(elementTemplate) {\n  return elementTemplate.isDefault;\n}"]},"metadata":{},"sourceType":"script"}