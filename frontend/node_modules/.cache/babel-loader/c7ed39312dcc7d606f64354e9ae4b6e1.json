{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is,\n    isEventSubProcess = require('bpmn-js/lib/util/DiUtil').isEventSubProcess;\n\nmodule.exports = function (group, element, bpmnFactory, conditionalEventDefinition) {\n  var getValue = function (modelProperty) {\n    return function (element) {\n      var modelPropertyValue = conditionalEventDefinition.get('camunda:' + modelProperty);\n      var value = {};\n      value[modelProperty] = modelPropertyValue;\n      return value;\n    };\n  };\n\n  var setValue = function (modelProperty) {\n    return function (element, values) {\n      var props = {};\n      props['camunda:' + modelProperty] = values[modelProperty] || undefined;\n      return cmdHelper.updateBusinessObject(element, conditionalEventDefinition, props);\n    };\n  };\n\n  group.entries.push(entryFactory.textField({\n    id: 'variableName',\n    label: 'Variable Name',\n    modelProperty: 'variableName',\n    get: getValue('variableName'),\n    set: setValue('variableName')\n  }));\n  var isConditionalStartEvent = is(element, 'bpmn:StartEvent') && !isEventSubProcess(element.parent);\n\n  if (!isConditionalStartEvent) {\n    group.entries.push(entryFactory.textField({\n      id: 'variableEvent',\n      label: 'Variable Event',\n      description: 'Specify more than one variable change event as a comma separated list.',\n      modelProperty: 'variableEvent',\n      get: getValue('variableEvent'),\n      set: setValue('variableEvent')\n    }));\n  }\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/ConditionalEventDefinition.js"],"names":["entryFactory","require","cmdHelper","is","isEventSubProcess","module","exports","group","element","bpmnFactory","conditionalEventDefinition","getValue","modelProperty","modelPropertyValue","get","value","setValue","values","props","undefined","updateBusinessObject","entries","push","textField","id","label","set","isConditionalStartEvent","parent","description"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,kCAAD,CAA1B;AAAA,IACIC,SAAS,GAAGD,OAAO,CAAC,8BAAD,CADvB;;AAGA,IAAIE,EAAE,GAAGF,OAAO,CAAC,4BAAD,CAAP,CAAsCE,EAA/C;AAAA,IACIC,iBAAiB,GAAGH,OAAO,CAAC,yBAAD,CAAP,CAAmCG,iBAD3D;;AAGAC,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgBC,OAAhB,EAAyBC,WAAzB,EAAsCC,0BAAtC,EAAkE;AAEjF,MAAIC,QAAQ,GAAG,UAASC,aAAT,EAAwB;AACrC,WAAO,UAASJ,OAAT,EAAkB;AACvB,UAAIK,kBAAkB,GAAGH,0BAA0B,CAACI,GAA3B,CAA+B,aAAaF,aAA5C,CAAzB;AACA,UAAIG,KAAK,GAAG,EAAZ;AAEAA,MAAAA,KAAK,CAACH,aAAD,CAAL,GAAuBC,kBAAvB;AACA,aAAOE,KAAP;AACD,KAND;AAOD,GARD;;AAUA,MAAIC,QAAQ,GAAG,UAASJ,aAAT,EAAwB;AACrC,WAAO,UAASJ,OAAT,EAAkBS,MAAlB,EAA0B;AAC/B,UAAIC,KAAK,GAAG,EAAZ;AAEAA,MAAAA,KAAK,CAAC,aAAaN,aAAd,CAAL,GAAoCK,MAAM,CAACL,aAAD,CAAN,IAAyBO,SAA7D;AAEA,aAAOjB,SAAS,CAACkB,oBAAV,CAA+BZ,OAA/B,EAAwCE,0BAAxC,EAAoEQ,KAApE,CAAP;AACD,KAND;AAOD,GARD;;AAUAX,EAAAA,KAAK,CAACc,OAAN,CAAcC,IAAd,CAAmBtB,YAAY,CAACuB,SAAb,CAAuB;AACxCC,IAAAA,EAAE,EAAG,cADmC;AAExCC,IAAAA,KAAK,EAAG,eAFgC;AAGxCb,IAAAA,aAAa,EAAG,cAHwB;AAKxCE,IAAAA,GAAG,EAAEH,QAAQ,CAAC,cAAD,CAL2B;AAMxCe,IAAAA,GAAG,EAAEV,QAAQ,CAAC,cAAD;AAN2B,GAAvB,CAAnB;AASA,MAAIW,uBAAuB,GACzBxB,EAAE,CAACK,OAAD,EAAU,iBAAV,CAAF,IAAkC,CAACJ,iBAAiB,CAACI,OAAO,CAACoB,MAAT,CADtD;;AAGA,MAAI,CAACD,uBAAL,EAA8B;AAC5BpB,IAAAA,KAAK,CAACc,OAAN,CAAcC,IAAd,CAAmBtB,YAAY,CAACuB,SAAb,CAAuB;AACxCC,MAAAA,EAAE,EAAG,eADmC;AAExCC,MAAAA,KAAK,EAAG,gBAFgC;AAGxCI,MAAAA,WAAW,EAAE,wEAH2B;AAIxCjB,MAAAA,aAAa,EAAG,eAJwB;AAMxCE,MAAAA,GAAG,EAAEH,QAAQ,CAAC,eAAD,CAN2B;AAOxCe,MAAAA,GAAG,EAAEV,QAAQ,CAAC,eAAD;AAP2B,KAAvB,CAAnB;AASD;AACF,CA7CD","sourcesContent":["'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is,\n    isEventSubProcess = require('bpmn-js/lib/util/DiUtil').isEventSubProcess;\n\nmodule.exports = function(group, element, bpmnFactory, conditionalEventDefinition) {\n\n  var getValue = function(modelProperty) {\n    return function(element) {\n      var modelPropertyValue = conditionalEventDefinition.get('camunda:' + modelProperty);\n      var value = {};\n\n      value[modelProperty] = modelPropertyValue;\n      return value;\n    };\n  };\n\n  var setValue = function(modelProperty) {\n    return function(element, values) {\n      var props = {};\n\n      props['camunda:' + modelProperty] = values[modelProperty] || undefined;\n\n      return cmdHelper.updateBusinessObject(element, conditionalEventDefinition, props);\n    };\n  };\n\n  group.entries.push(entryFactory.textField({\n    id : 'variableName',\n    label : 'Variable Name',\n    modelProperty : 'variableName',\n\n    get: getValue('variableName'),\n    set: setValue('variableName')\n  }));\n\n  var isConditionalStartEvent =\n    is(element, 'bpmn:StartEvent') && !isEventSubProcess(element.parent);\n\n  if (!isConditionalStartEvent) {\n    group.entries.push(entryFactory.textField({\n      id : 'variableEvent',\n      label : 'Variable Event',\n      description: 'Specify more than one variable change event as a comma separated list.',\n      modelProperty : 'variableEvent',\n\n      get: getValue('variableEvent'),\n      set: setValue('variableEvent')\n    }));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}