{"ast":null,"code":"'use strict';\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is,\n    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;\n\nvar extensionElementsEntry = require('./ExtensionElements'),\n    extensionElementsHelper = require('../../../../helper/ExtensionElementsHelper'),\n    cmdHelper = require('../../../../helper/CmdHelper'),\n    elementHelper = require('../../../../helper/ElementHelper'),\n    ImplementationTypeHelper = require('../../../../helper/ImplementationTypeHelper');\n\nfunction getListeners(bo, type) {\n  return bo && extensionElementsHelper.getExtensionElements(bo, type) || [];\n}\n\nvar CAMUNDA_EXECUTION_LISTENER_ELEMENT = 'camunda:ExecutionListener';\nvar CAMUNDA_TASK_LISTENER_ELEMENT = 'camunda:TaskListener';\n\nmodule.exports = function (element, bpmnFactory, options, translate) {\n  var LISTENER_TYPE_LABEL = {\n    class: translate('Java Class'),\n    expression: translate('Expression'),\n    delegateExpression: translate('Delegate Expression'),\n    script: translate('Script')\n  };\n  var bo;\n  var result = {\n    getSelectedListener: getSelectedListener\n  };\n  var entries = result.entries = [];\n  var isSequenceFlow = ImplementationTypeHelper.isSequenceFlow(element);\n\n  function getSelectedListener(element, node) {\n    var selection = executionListenerEntry && executionListenerEntry.getSelected(element, node) || {\n      idx: -1\n    };\n    var listener = getListeners(bo, CAMUNDA_EXECUTION_LISTENER_ELEMENT)[selection.idx];\n\n    if (!listener && taskListenerEntry) {\n      selection = taskListenerEntry.getSelected(element, node);\n      listener = getListeners(bo, CAMUNDA_TASK_LISTENER_ELEMENT)[selection.idx];\n    }\n\n    return listener;\n  }\n\n  var setOptionLabelValue = function (type) {\n    return function (element, node, option, property, value, idx) {\n      var listeners = getListeners(bo, type);\n      var listener = listeners[idx];\n      var listenerType = ImplementationTypeHelper.getImplementationType(listener);\n      var event = listener.get('event') ? listener.get('event') : '<empty>';\n      var label = (event || '*') + ' : ' + (LISTENER_TYPE_LABEL[listenerType] || '');\n      option.text = label;\n    };\n  };\n\n  var newElement = function (element, type, initialEvent) {\n    return function (element, extensionElements, value) {\n      var props = {\n        event: initialEvent,\n        class: ''\n      };\n      var newElem = elementHelper.createElement(type, props, extensionElements, bpmnFactory);\n      return cmdHelper.addElementsTolist(element, extensionElements, 'values', [newElem]);\n    };\n  };\n\n  var removeElement = function (element, type) {\n    return function (element, extensionElements, value, idx) {\n      var listeners = getListeners(bo, type);\n      var listener = listeners[idx];\n\n      if (listener) {\n        return extensionElementsHelper.removeEntry(bo, element, listener);\n      }\n    };\n  }; // Execution Listener\n\n\n  if (is(element, 'bpmn:FlowElement') || is(element, 'bpmn:Process') || is(element, 'bpmn:Participant')) {\n    bo = getBusinessObject(element);\n\n    if (is(element, 'bpmn:Participant')) {\n      element = element.processRef;\n      bo = bo.get('processRef');\n    }\n\n    if (bo) {\n      var executionListenerEntry = extensionElementsEntry(element, bpmnFactory, {\n        id: 'executionListeners',\n        label: translate('Execution Listener'),\n        modelProperty: 'name',\n        idGeneration: 'false',\n        reference: 'processRef',\n        createExtensionElement: newElement(element, CAMUNDA_EXECUTION_LISTENER_ELEMENT, isSequenceFlow ? 'take' : 'start'),\n        removeExtensionElement: removeElement(element, CAMUNDA_EXECUTION_LISTENER_ELEMENT),\n        getExtensionElements: function (element) {\n          return getListeners(bo, CAMUNDA_EXECUTION_LISTENER_ELEMENT);\n        },\n        onSelectionChange: function (element, node, event, scope) {\n          taskListenerEntry && taskListenerEntry.deselect(element, node);\n        },\n        setOptionLabelValue: setOptionLabelValue(CAMUNDA_EXECUTION_LISTENER_ELEMENT)\n      });\n      entries.push(executionListenerEntry);\n    }\n  } // Task Listener\n\n\n  if (is(element, 'bpmn:UserTask')) {\n    bo = getBusinessObject(element);\n    var taskListenerEntry = extensionElementsEntry(element, bpmnFactory, {\n      id: 'taskListeners',\n      label: translate('Task Listener'),\n      modelProperty: 'name',\n      idGeneration: 'false',\n      createExtensionElement: newElement(element, CAMUNDA_TASK_LISTENER_ELEMENT, 'create'),\n      removeExtensionElement: removeElement(element, CAMUNDA_TASK_LISTENER_ELEMENT),\n      getExtensionElements: function (element) {\n        return getListeners(bo, CAMUNDA_TASK_LISTENER_ELEMENT);\n      },\n      onSelectionChange: function (element, node, event, scope) {\n        executionListenerEntry.deselect(element, node);\n      },\n      setOptionLabelValue: setOptionLabelValue(CAMUNDA_TASK_LISTENER_ELEMENT)\n    });\n    entries.push(taskListenerEntry);\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/implementation/Listener.js"],"names":["is","require","getBusinessObject","extensionElementsEntry","extensionElementsHelper","cmdHelper","elementHelper","ImplementationTypeHelper","getListeners","bo","type","getExtensionElements","CAMUNDA_EXECUTION_LISTENER_ELEMENT","CAMUNDA_TASK_LISTENER_ELEMENT","module","exports","element","bpmnFactory","options","translate","LISTENER_TYPE_LABEL","class","expression","delegateExpression","script","result","getSelectedListener","entries","isSequenceFlow","node","selection","executionListenerEntry","getSelected","idx","listener","taskListenerEntry","setOptionLabelValue","option","property","value","listeners","listenerType","getImplementationType","event","get","label","text","newElement","initialEvent","extensionElements","props","newElem","createElement","addElementsTolist","removeElement","removeEntry","processRef","id","modelProperty","idGeneration","reference","createExtensionElement","removeExtensionElement","onSelectionChange","scope","deselect","push"],"mappings":"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","sourcesContent":["'use strict';\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is,\n    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;\n\nvar extensionElementsEntry = require('./ExtensionElements'),\n    extensionElementsHelper = require('../../../../helper/ExtensionElementsHelper'),\n    cmdHelper = require('../../../../helper/CmdHelper'),\n    elementHelper = require('../../../../helper/ElementHelper'),\n    ImplementationTypeHelper = require('../../../../helper/ImplementationTypeHelper');\n\n\nfunction getListeners(bo, type) {\n  return bo && extensionElementsHelper.getExtensionElements(bo, type) || [];\n}\n\nvar CAMUNDA_EXECUTION_LISTENER_ELEMENT = 'camunda:ExecutionListener';\nvar CAMUNDA_TASK_LISTENER_ELEMENT = 'camunda:TaskListener';\n\nmodule.exports = function(element, bpmnFactory, options, translate) {\n\n  var LISTENER_TYPE_LABEL = {\n    class: translate('Java Class'),\n    expression: translate('Expression'),\n    delegateExpression: translate('Delegate Expression'),\n    script: translate('Script')\n  };\n\n  var bo;\n\n  var result = {\n    getSelectedListener: getSelectedListener\n  };\n\n  var entries = result.entries = [];\n\n  var isSequenceFlow = ImplementationTypeHelper.isSequenceFlow(element);\n\n  function getSelectedListener(element, node) {\n    var selection = (executionListenerEntry && executionListenerEntry.getSelected(element, node)) || { idx: -1 };\n\n    var listener = getListeners(bo, CAMUNDA_EXECUTION_LISTENER_ELEMENT)[selection.idx];\n    if (!listener && taskListenerEntry) {\n      selection = taskListenerEntry.getSelected(element, node);\n      listener = getListeners(bo, CAMUNDA_TASK_LISTENER_ELEMENT)[selection.idx];\n    }\n    return listener;\n  }\n\n  var setOptionLabelValue = function(type) {\n    return function(element, node, option, property, value, idx) {\n      var listeners = getListeners(bo, type);\n      var listener = listeners[idx];\n      var listenerType = ImplementationTypeHelper.getImplementationType(listener);\n\n      var event = (listener.get('event')) ? listener.get('event') : '<empty>';\n\n      var label = (event || '*') + ' : ' + (LISTENER_TYPE_LABEL[listenerType] || '');\n\n      option.text = label;\n    };\n  };\n\n  var newElement = function(element, type, initialEvent) {\n    return function(element, extensionElements, value) {\n      var props = {\n        event: initialEvent,\n        class: ''\n      };\n\n      var newElem = elementHelper.createElement(type, props, extensionElements, bpmnFactory);\n\n      return cmdHelper.addElementsTolist(element, extensionElements, 'values', [ newElem ]);\n    };\n  };\n\n  var removeElement = function(element, type) {\n    return function(element, extensionElements, value, idx) {\n      var listeners = getListeners(bo, type);\n      var listener = listeners[idx];\n      if (listener) {\n        return extensionElementsHelper.removeEntry(bo, element, listener);\n      }\n    };\n  };\n\n\n  // Execution Listener\n\n  if (is(element, 'bpmn:FlowElement') || is(element, 'bpmn:Process') || is(element, 'bpmn:Participant')) {\n    bo = getBusinessObject(element);\n    if (is(element, 'bpmn:Participant')) {\n      element = element.processRef;\n      bo = bo.get('processRef');\n    }\n\n    if (bo) {\n\n      var executionListenerEntry = extensionElementsEntry(element, bpmnFactory, {\n        id : 'executionListeners',\n        label : translate('Execution Listener'),\n        modelProperty: 'name',\n        idGeneration: 'false',\n        reference: 'processRef',\n\n        createExtensionElement: newElement(element, CAMUNDA_EXECUTION_LISTENER_ELEMENT, (isSequenceFlow) ? 'take' : 'start'),\n        removeExtensionElement: removeElement(element, CAMUNDA_EXECUTION_LISTENER_ELEMENT),\n\n        getExtensionElements: function(element) {\n          return getListeners(bo, CAMUNDA_EXECUTION_LISTENER_ELEMENT);\n        },\n\n        onSelectionChange: function(element, node, event, scope) {\n          taskListenerEntry && taskListenerEntry.deselect(element, node);\n        },\n\n        setOptionLabelValue: setOptionLabelValue(CAMUNDA_EXECUTION_LISTENER_ELEMENT)\n\n      });\n      entries.push(executionListenerEntry);\n\n    }\n  }\n\n\n  // Task Listener\n\n  if (is(element, 'bpmn:UserTask')) {\n    bo = getBusinessObject(element);\n\n    var taskListenerEntry = extensionElementsEntry(element, bpmnFactory, {\n      id : 'taskListeners',\n      label : translate('Task Listener'),\n      modelProperty: 'name',\n      idGeneration: 'false',\n\n      createExtensionElement: newElement(element, CAMUNDA_TASK_LISTENER_ELEMENT, 'create'),\n      removeExtensionElement: removeElement(element, CAMUNDA_TASK_LISTENER_ELEMENT),\n\n      getExtensionElements: function(element) {\n        return getListeners(bo, CAMUNDA_TASK_LISTENER_ELEMENT);\n      },\n\n      onSelectionChange: function(element, node, event, scope) {\n        executionListenerEntry.deselect(element, node);\n      },\n\n      setOptionLabelValue: setOptionLabelValue(CAMUNDA_TASK_LISTENER_ELEMENT)\n\n    });\n    entries.push(taskListenerEntry);\n  }\n\n  return result;\n\n};\n"]},"metadata":{},"sourceType":"script"}