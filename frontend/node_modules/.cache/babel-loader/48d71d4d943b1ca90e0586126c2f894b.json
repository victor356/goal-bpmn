{"ast":null,"code":"import { getBusinessObject, is } from '../../util/ModelUtil';\nimport { isEventSubProcess, isExpanded } from '../../util/DiUtil';\nimport { isDifferentType } from './util/TypeUtil';\nimport { forEach, filter } from 'min-dash';\nimport * as replaceOptions from '../replace/ReplaceOptions';\n/**\n * This module is an element agnostic replace menu provider for the popup menu.\n */\n\nexport default function ReplaceMenuProvider(popupMenu, modeling, moddle, bpmnReplace, rules, translate) {\n  this._popupMenu = popupMenu;\n  this._modeling = modeling;\n  this._moddle = moddle;\n  this._bpmnReplace = bpmnReplace;\n  this._rules = rules;\n  this._translate = translate;\n  this.register();\n}\nReplaceMenuProvider.$inject = ['popupMenu', 'modeling', 'moddle', 'bpmnReplace', 'rules', 'translate'];\n/**\n * Register replace menu provider in the popup menu\n */\n\nReplaceMenuProvider.prototype.register = function () {\n  this._popupMenu.registerProvider('bpmn-replace', this);\n};\n/**\n * Get all entries from replaceOptions for the given element and apply filters\n * on them. Get for example only elements, which are different from the current one.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\n\n\nReplaceMenuProvider.prototype.getEntries = function (element) {\n  var businessObject = element.businessObject;\n  var rules = this._rules;\n  var entries;\n\n  if (!rules.allowed('shape.replace', {\n    element: element\n  })) {\n    return [];\n  }\n\n  var differentType = isDifferentType(element); // start events outside event sub processes\n\n  if (is(businessObject, 'bpmn:StartEvent') && !isEventSubProcess(businessObject.$parent)) {\n    entries = filter(replaceOptions.START_EVENT, differentType);\n    return this._createEntries(element, entries);\n  } // expanded/collapsed pools\n\n\n  if (is(businessObject, 'bpmn:Participant')) {\n    entries = filter(replaceOptions.PARTICIPANT, function (entry) {\n      return isExpanded(businessObject) !== entry.target.isExpanded;\n    });\n    return this._createEntries(element, entries);\n  } // start events inside event sub processes\n\n\n  if (is(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent)) {\n    entries = filter(replaceOptions.EVENT_SUB_PROCESS_START_EVENT, function (entry) {\n      var target = entry.target;\n      var isInterrupting = target.isInterrupting !== false;\n      var isInterruptingEqual = getBusinessObject(element).isInterrupting === isInterrupting; // filters elements which types and event definition are equal but have have different interrupting types\n\n      return differentType(entry) || !differentType(entry) && !isInterruptingEqual;\n    });\n    return this._createEntries(element, entries);\n  } // end events\n\n\n  if (is(businessObject, 'bpmn:EndEvent')) {\n    entries = filter(replaceOptions.END_EVENT, function (entry) {\n      var target = entry.target; // hide cancel end events outside transactions\n\n      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is(businessObject.$parent, 'bpmn:Transaction')) {\n        return false;\n      }\n\n      return differentType(entry);\n    });\n    return this._createEntries(element, entries);\n  } // boundary events\n\n\n  if (is(businessObject, 'bpmn:BoundaryEvent')) {\n    entries = filter(replaceOptions.BOUNDARY_EVENT, function (entry) {\n      var target = entry.target;\n\n      if (target.eventDefinition == 'bpmn:CancelEventDefinition' && !is(businessObject.attachedToRef, 'bpmn:Transaction')) {\n        return false;\n      }\n\n      var cancelActivity = target.cancelActivity !== false;\n      var isCancelActivityEqual = businessObject.cancelActivity == cancelActivity;\n      return differentType(entry) || !differentType(entry) && !isCancelActivityEqual;\n    });\n    return this._createEntries(element, entries);\n  } // intermediate events\n\n\n  if (is(businessObject, 'bpmn:IntermediateCatchEvent') || is(businessObject, 'bpmn:IntermediateThrowEvent')) {\n    entries = filter(replaceOptions.INTERMEDIATE_EVENT, differentType);\n    return this._createEntries(element, entries);\n  } // gateways\n\n\n  if (is(businessObject, 'bpmn:Gateway')) {\n    entries = filter(replaceOptions.GATEWAY, differentType);\n    return this._createEntries(element, entries);\n  } // transactions\n\n\n  if (is(businessObject, 'bpmn:Transaction')) {\n    entries = filter(replaceOptions.TRANSACTION, differentType);\n    return this._createEntries(element, entries);\n  } // expanded event sub processes\n\n\n  if (isEventSubProcess(businessObject) && isExpanded(businessObject)) {\n    entries = filter(replaceOptions.EVENT_SUB_PROCESS, differentType);\n    return this._createEntries(element, entries);\n  } // expanded sub processes\n\n\n  if (is(businessObject, 'bpmn:SubProcess') && isExpanded(businessObject)) {\n    entries = filter(replaceOptions.SUBPROCESS_EXPANDED, differentType);\n    return this._createEntries(element, entries);\n  } // collapsed ad hoc sub processes\n\n\n  if (is(businessObject, 'bpmn:AdHocSubProcess') && !isExpanded(businessObject)) {\n    entries = filter(replaceOptions.TASK, function (entry) {\n      var target = entry.target;\n      var isTargetSubProcess = target.type === 'bpmn:SubProcess';\n      var isTargetExpanded = target.isExpanded === true;\n      return isDifferentType(element, target) && (!isTargetSubProcess || isTargetExpanded);\n    });\n    return this._createEntries(element, entries);\n  } // sequence flows\n\n\n  if (is(businessObject, 'bpmn:SequenceFlow')) {\n    return this._createSequenceFlowEntries(element, replaceOptions.SEQUENCE_FLOW);\n  } // flow nodes\n\n\n  if (is(businessObject, 'bpmn:FlowNode')) {\n    entries = filter(replaceOptions.TASK, differentType); // collapsed SubProcess can not be replaced with itself\n\n    if (is(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {\n      entries = filter(entries, function (entry) {\n        return entry.label !== 'Sub Process (collapsed)';\n      });\n    }\n\n    return this._createEntries(element, entries);\n  }\n\n  return [];\n};\n/**\n * Get a list of header items for the given element. This includes buttons\n * for multi instance markers and for the ad hoc marker.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\n\n\nReplaceMenuProvider.prototype.getHeaderEntries = function (element) {\n  var headerEntries = [];\n\n  if (is(element, 'bpmn:Activity') && !isEventSubProcess(element)) {\n    headerEntries = headerEntries.concat(this._getLoopEntries(element));\n  }\n\n  if (is(element, 'bpmn:SubProcess') && !is(element, 'bpmn:Transaction') && !isEventSubProcess(element)) {\n    headerEntries.push(this._getAdHocEntry(element));\n  }\n\n  return headerEntries;\n};\n/**\n * Creates an array of menu entry objects for a given element and filters the replaceOptions\n * according to a filter function.\n *\n * @param  {djs.model.Base} element\n * @param  {Object} replaceOptions\n *\n * @return {Array<Object>} a list of menu items\n */\n\n\nReplaceMenuProvider.prototype._createEntries = function (element, replaceOptions) {\n  var menuEntries = [];\n  var self = this;\n  forEach(replaceOptions, function (definition) {\n    var entry = self._createMenuEntry(definition, element);\n\n    menuEntries.push(entry);\n  });\n  return menuEntries;\n};\n/**\n * Creates an array of menu entry objects for a given sequence flow.\n *\n * @param  {djs.model.Base} element\n * @param  {Object} replaceOptions\n\n * @return {Array<Object>} a list of menu items\n */\n\n\nReplaceMenuProvider.prototype._createSequenceFlowEntries = function (element, replaceOptions) {\n  var businessObject = getBusinessObject(element);\n  var menuEntries = [];\n  var modeling = this._modeling,\n      moddle = this._moddle;\n  var self = this;\n  forEach(replaceOptions, function (entry) {\n    switch (entry.actionName) {\n      case 'replace-with-default-flow':\n        if (businessObject.sourceRef.default !== businessObject && (is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') || is(businessObject.sourceRef, 'bpmn:InclusiveGateway') || is(businessObject.sourceRef, 'bpmn:ComplexGateway') || is(businessObject.sourceRef, 'bpmn:Activity'))) {\n          menuEntries.push(self._createMenuEntry(entry, element, function () {\n            modeling.updateProperties(element.source, {\n              default: businessObject\n            });\n          }));\n        }\n\n        break;\n\n      case 'replace-with-conditional-flow':\n        if (!businessObject.conditionExpression && is(businessObject.sourceRef, 'bpmn:Activity')) {\n          menuEntries.push(self._createMenuEntry(entry, element, function () {\n            var conditionExpression = moddle.create('bpmn:FormalExpression', {\n              body: ''\n            });\n            modeling.updateProperties(element, {\n              conditionExpression: conditionExpression\n            });\n          }));\n        }\n\n        break;\n\n      default:\n        // default flows\n        if (is(businessObject.sourceRef, 'bpmn:Activity') && businessObject.conditionExpression) {\n          return menuEntries.push(self._createMenuEntry(entry, element, function () {\n            modeling.updateProperties(element, {\n              conditionExpression: undefined\n            });\n          }));\n        } // conditional flows\n\n\n        if ((is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') || is(businessObject.sourceRef, 'bpmn:InclusiveGateway') || is(businessObject.sourceRef, 'bpmn:ComplexGateway') || is(businessObject.sourceRef, 'bpmn:Activity')) && businessObject.sourceRef.default === businessObject) {\n          return menuEntries.push(self._createMenuEntry(entry, element, function () {\n            modeling.updateProperties(element.source, {\n              default: undefined\n            });\n          }));\n        }\n\n    }\n  });\n  return menuEntries;\n};\n/**\n * Creates and returns a single menu entry item.\n *\n * @param  {Object} definition a single replace options definition object\n * @param  {djs.model.Base} element\n * @param  {Function} [action] an action callback function which gets called when\n *                             the menu entry is being triggered.\n *\n * @return {Object} menu entry item\n */\n\n\nReplaceMenuProvider.prototype._createMenuEntry = function (definition, element, action) {\n  var translate = this._translate;\n  var replaceElement = this._bpmnReplace.replaceElement;\n\n  var replaceAction = function () {\n    return replaceElement(element, definition.target);\n  };\n\n  action = action || replaceAction;\n  var menuEntry = {\n    label: translate(definition.label),\n    className: definition.className,\n    id: definition.actionName,\n    action: action\n  };\n  return menuEntry;\n};\n/**\n * Get a list of menu items containing buttons for multi instance markers\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu items\n */\n\n\nReplaceMenuProvider.prototype._getLoopEntries = function (element) {\n  var self = this;\n  var translate = this._translate;\n\n  function toggleLoopEntry(event, entry) {\n    var loopCharacteristics;\n\n    if (entry.active) {\n      loopCharacteristics = undefined;\n    } else {\n      loopCharacteristics = self._moddle.create(entry.options.loopCharacteristics);\n\n      if (entry.options.isSequential) {\n        loopCharacteristics.isSequential = entry.options.isSequential;\n      }\n    }\n\n    self._modeling.updateProperties(element, {\n      loopCharacteristics: loopCharacteristics\n    });\n  }\n\n  var businessObject = getBusinessObject(element),\n      loopCharacteristics = businessObject.loopCharacteristics;\n  var isSequential, isLoop, isParallel;\n\n  if (loopCharacteristics) {\n    isSequential = loopCharacteristics.isSequential;\n    isLoop = loopCharacteristics.isSequential === undefined;\n    isParallel = loopCharacteristics.isSequential !== undefined && !loopCharacteristics.isSequential;\n  }\n\n  var loopEntries = [{\n    id: 'toggle-parallel-mi',\n    className: 'bpmn-icon-parallel-mi-marker',\n    title: translate('Parallel Multi Instance'),\n    active: isParallel,\n    action: toggleLoopEntry,\n    options: {\n      loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',\n      isSequential: false\n    }\n  }, {\n    id: 'toggle-sequential-mi',\n    className: 'bpmn-icon-sequential-mi-marker',\n    title: translate('Sequential Multi Instance'),\n    active: isSequential,\n    action: toggleLoopEntry,\n    options: {\n      loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',\n      isSequential: true\n    }\n  }, {\n    id: 'toggle-loop',\n    className: 'bpmn-icon-loop-marker',\n    title: translate('Loop'),\n    active: isLoop,\n    action: toggleLoopEntry,\n    options: {\n      loopCharacteristics: 'bpmn:StandardLoopCharacteristics'\n    }\n  }];\n  return loopEntries;\n};\n/**\n * Get the menu items containing a button for the ad hoc marker\n *\n * @param  {djs.model.Base} element\n *\n * @return {Object} a menu item\n */\n\n\nReplaceMenuProvider.prototype._getAdHocEntry = function (element) {\n  var translate = this._translate;\n  var businessObject = getBusinessObject(element);\n  var isAdHoc = is(businessObject, 'bpmn:AdHocSubProcess');\n  var replaceElement = this._bpmnReplace.replaceElement;\n  var adHocEntry = {\n    id: 'toggle-adhoc',\n    className: 'bpmn-icon-ad-hoc-marker',\n    title: translate('Ad-hoc'),\n    active: isAdHoc,\n    action: function (event, entry) {\n      if (isAdHoc) {\n        return replaceElement(element, {\n          type: 'bpmn:SubProcess'\n        });\n      } else {\n        return replaceElement(element, {\n          type: 'bpmn:AdHocSubProcess'\n        });\n      }\n    }\n  };\n  return adHocEntry;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/popup-menu/ReplaceMenuProvider.js"],"names":["getBusinessObject","is","isEventSubProcess","isExpanded","isDifferentType","forEach","filter","replaceOptions","ReplaceMenuProvider","popupMenu","modeling","moddle","bpmnReplace","rules","translate","_popupMenu","_modeling","_moddle","_bpmnReplace","_rules","_translate","register","$inject","prototype","registerProvider","getEntries","element","businessObject","entries","allowed","differentType","$parent","START_EVENT","_createEntries","PARTICIPANT","entry","target","EVENT_SUB_PROCESS_START_EVENT","isInterrupting","isInterruptingEqual","END_EVENT","eventDefinitionType","BOUNDARY_EVENT","eventDefinition","attachedToRef","cancelActivity","isCancelActivityEqual","INTERMEDIATE_EVENT","GATEWAY","TRANSACTION","EVENT_SUB_PROCESS","SUBPROCESS_EXPANDED","TASK","isTargetSubProcess","type","isTargetExpanded","_createSequenceFlowEntries","SEQUENCE_FLOW","label","getHeaderEntries","headerEntries","concat","_getLoopEntries","push","_getAdHocEntry","menuEntries","self","definition","_createMenuEntry","actionName","sourceRef","default","updateProperties","source","conditionExpression","create","body","undefined","action","replaceElement","replaceAction","menuEntry","className","id","toggleLoopEntry","event","loopCharacteristics","active","options","isSequential","isLoop","isParallel","loopEntries","title","isAdHoc","adHocEntry"],"mappings":"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","sourcesContent":["import {\n  getBusinessObject,\n  is\n} from '../../util/ModelUtil';\n\nimport {\n  isEventSubProcess,\n  isExpanded\n} from '../../util/DiUtil';\n\nimport {\n  isDifferentType\n} from './util/TypeUtil';\n\nimport {\n  forEach,\n  filter\n} from 'min-dash';\n\nimport * as replaceOptions from '../replace/ReplaceOptions';\n\n\n/**\n * This module is an element agnostic replace menu provider for the popup menu.\n */\nexport default function ReplaceMenuProvider(\n    popupMenu, modeling, moddle,\n    bpmnReplace, rules, translate) {\n\n  this._popupMenu = popupMenu;\n  this._modeling = modeling;\n  this._moddle = moddle;\n  this._bpmnReplace = bpmnReplace;\n  this._rules = rules;\n  this._translate = translate;\n\n  this.register();\n}\n\nReplaceMenuProvider.$inject = [\n  'popupMenu',\n  'modeling',\n  'moddle',\n  'bpmnReplace',\n  'rules',\n  'translate'\n];\n\n\n/**\n * Register replace menu provider in the popup menu\n */\nReplaceMenuProvider.prototype.register = function() {\n  this._popupMenu.registerProvider('bpmn-replace', this);\n};\n\n\n/**\n * Get all entries from replaceOptions for the given element and apply filters\n * on them. Get for example only elements, which are different from the current one.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\nReplaceMenuProvider.prototype.getEntries = function(element) {\n\n  var businessObject = element.businessObject;\n\n  var rules = this._rules;\n\n  var entries;\n\n  if (!rules.allowed('shape.replace', { element: element })) {\n    return [];\n  }\n\n  var differentType = isDifferentType(element);\n\n  // start events outside event sub processes\n  if (is(businessObject, 'bpmn:StartEvent') && !isEventSubProcess(businessObject.$parent)) {\n\n    entries = filter(replaceOptions.START_EVENT, differentType);\n\n    return this._createEntries(element, entries);\n  }\n\n  // expanded/collapsed pools\n  if (is(businessObject, 'bpmn:Participant')) {\n\n    entries = filter(replaceOptions.PARTICIPANT, function(entry) {\n      return isExpanded(businessObject) !== entry.target.isExpanded;\n    });\n\n    return this._createEntries(element, entries);\n  }\n\n  // start events inside event sub processes\n  if (is(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent)) {\n\n    entries = filter(replaceOptions.EVENT_SUB_PROCESS_START_EVENT, function(entry) {\n\n      var target = entry.target;\n\n      var isInterrupting = target.isInterrupting !== false;\n\n      var isInterruptingEqual = getBusinessObject(element).isInterrupting === isInterrupting;\n\n      // filters elements which types and event definition are equal but have have different interrupting types\n      return differentType(entry) || !differentType(entry) && !isInterruptingEqual;\n\n    });\n\n    return this._createEntries(element, entries);\n  }\n\n  // end events\n  if (is(businessObject, 'bpmn:EndEvent')) {\n\n    entries = filter(replaceOptions.END_EVENT, function(entry) {\n      var target = entry.target;\n\n      // hide cancel end events outside transactions\n      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is(businessObject.$parent, 'bpmn:Transaction')) {\n        return false;\n      }\n\n      return differentType(entry);\n    });\n\n    return this._createEntries(element, entries);\n  }\n\n  // boundary events\n  if (is(businessObject, 'bpmn:BoundaryEvent')) {\n\n    entries = filter(replaceOptions.BOUNDARY_EVENT, function(entry) {\n\n      var target = entry.target;\n\n      if (target.eventDefinition == 'bpmn:CancelEventDefinition' &&\n         !is(businessObject.attachedToRef, 'bpmn:Transaction')) {\n        return false;\n      }\n      var cancelActivity = target.cancelActivity !== false;\n\n      var isCancelActivityEqual = businessObject.cancelActivity == cancelActivity;\n\n      return differentType(entry) || !differentType(entry) && !isCancelActivityEqual;\n    });\n\n    return this._createEntries(element, entries);\n  }\n\n  // intermediate events\n  if (is(businessObject, 'bpmn:IntermediateCatchEvent') ||\n      is(businessObject, 'bpmn:IntermediateThrowEvent')) {\n\n    entries = filter(replaceOptions.INTERMEDIATE_EVENT, differentType);\n\n    return this._createEntries(element, entries);\n  }\n\n  // gateways\n  if (is(businessObject, 'bpmn:Gateway')) {\n\n    entries = filter(replaceOptions.GATEWAY, differentType);\n\n    return this._createEntries(element, entries);\n  }\n\n  // transactions\n  if (is(businessObject, 'bpmn:Transaction')) {\n\n    entries = filter(replaceOptions.TRANSACTION, differentType);\n\n    return this._createEntries(element, entries);\n  }\n\n  // expanded event sub processes\n  if (isEventSubProcess(businessObject) && isExpanded(businessObject)) {\n\n    entries = filter(replaceOptions.EVENT_SUB_PROCESS, differentType);\n\n    return this._createEntries(element, entries);\n  }\n\n  // expanded sub processes\n  if (is(businessObject, 'bpmn:SubProcess') && isExpanded(businessObject)) {\n\n    entries = filter(replaceOptions.SUBPROCESS_EXPANDED, differentType);\n\n    return this._createEntries(element, entries);\n  }\n\n  // collapsed ad hoc sub processes\n  if (is(businessObject, 'bpmn:AdHocSubProcess') && !isExpanded(businessObject)) {\n\n    entries = filter(replaceOptions.TASK, function(entry) {\n\n      var target = entry.target;\n\n      var isTargetSubProcess = target.type === 'bpmn:SubProcess';\n\n      var isTargetExpanded = target.isExpanded === true;\n\n      return isDifferentType(element, target) && (!isTargetSubProcess || isTargetExpanded);\n    });\n\n    return this._createEntries(element, entries);\n  }\n\n  // sequence flows\n  if (is(businessObject, 'bpmn:SequenceFlow')) {\n    return this._createSequenceFlowEntries(element, replaceOptions.SEQUENCE_FLOW);\n  }\n\n  // flow nodes\n  if (is(businessObject, 'bpmn:FlowNode')) {\n    entries = filter(replaceOptions.TASK, differentType);\n\n    // collapsed SubProcess can not be replaced with itself\n    if (is(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {\n      entries = filter(entries, function(entry) {\n        return entry.label !== 'Sub Process (collapsed)';\n      });\n    }\n\n    return this._createEntries(element, entries);\n  }\n\n  return [];\n};\n\n\n/**\n * Get a list of header items for the given element. This includes buttons\n * for multi instance markers and for the ad hoc marker.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\nReplaceMenuProvider.prototype.getHeaderEntries = function(element) {\n\n  var headerEntries = [];\n\n  if (is(element, 'bpmn:Activity') && !isEventSubProcess(element)) {\n    headerEntries = headerEntries.concat(this._getLoopEntries(element));\n  }\n\n  if (is(element, 'bpmn:SubProcess') &&\n      !is(element, 'bpmn:Transaction') &&\n      !isEventSubProcess(element)) {\n    headerEntries.push(this._getAdHocEntry(element));\n  }\n\n  return headerEntries;\n};\n\n\n/**\n * Creates an array of menu entry objects for a given element and filters the replaceOptions\n * according to a filter function.\n *\n * @param  {djs.model.Base} element\n * @param  {Object} replaceOptions\n *\n * @return {Array<Object>} a list of menu items\n */\nReplaceMenuProvider.prototype._createEntries = function(element, replaceOptions) {\n  var menuEntries = [];\n\n  var self = this;\n\n  forEach(replaceOptions, function(definition) {\n    var entry = self._createMenuEntry(definition, element);\n\n    menuEntries.push(entry);\n  });\n\n  return menuEntries;\n};\n\n/**\n * Creates an array of menu entry objects for a given sequence flow.\n *\n * @param  {djs.model.Base} element\n * @param  {Object} replaceOptions\n\n * @return {Array<Object>} a list of menu items\n */\nReplaceMenuProvider.prototype._createSequenceFlowEntries = function(element, replaceOptions) {\n\n  var businessObject = getBusinessObject(element);\n\n  var menuEntries = [];\n\n  var modeling = this._modeling,\n      moddle = this._moddle;\n\n  var self = this;\n\n  forEach(replaceOptions, function(entry) {\n\n    switch (entry.actionName) {\n    case 'replace-with-default-flow':\n      if (businessObject.sourceRef.default !== businessObject &&\n            (is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||\n             is(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||\n             is(businessObject.sourceRef, 'bpmn:ComplexGateway') ||\n             is(businessObject.sourceRef, 'bpmn:Activity'))) {\n\n        menuEntries.push(self._createMenuEntry(entry, element, function() {\n          modeling.updateProperties(element.source, { default: businessObject });\n        }));\n      }\n      break;\n    case 'replace-with-conditional-flow':\n      if (!businessObject.conditionExpression && is(businessObject.sourceRef, 'bpmn:Activity')) {\n\n        menuEntries.push(self._createMenuEntry(entry, element, function() {\n          var conditionExpression = moddle.create('bpmn:FormalExpression', { body: '' });\n\n          modeling.updateProperties(element, { conditionExpression: conditionExpression });\n        }));\n      }\n      break;\n    default:\n      // default flows\n      if (is(businessObject.sourceRef, 'bpmn:Activity') && businessObject.conditionExpression) {\n        return menuEntries.push(self._createMenuEntry(entry, element, function() {\n          modeling.updateProperties(element, { conditionExpression: undefined });\n        }));\n      }\n      // conditional flows\n      if ((is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||\n           is(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||\n           is(businessObject.sourceRef, 'bpmn:ComplexGateway') ||\n           is(businessObject.sourceRef, 'bpmn:Activity')) &&\n           businessObject.sourceRef.default === businessObject) {\n\n        return menuEntries.push(self._createMenuEntry(entry, element, function() {\n          modeling.updateProperties(element.source, { default: undefined });\n        }));\n      }\n    }\n  });\n\n  return menuEntries;\n};\n\n\n/**\n * Creates and returns a single menu entry item.\n *\n * @param  {Object} definition a single replace options definition object\n * @param  {djs.model.Base} element\n * @param  {Function} [action] an action callback function which gets called when\n *                             the menu entry is being triggered.\n *\n * @return {Object} menu entry item\n */\nReplaceMenuProvider.prototype._createMenuEntry = function(definition, element, action) {\n  var translate = this._translate;\n  var replaceElement = this._bpmnReplace.replaceElement;\n\n  var replaceAction = function() {\n    return replaceElement(element, definition.target);\n  };\n\n  action = action || replaceAction;\n\n  var menuEntry = {\n    label: translate(definition.label),\n    className: definition.className,\n    id: definition.actionName,\n    action: action\n  };\n\n  return menuEntry;\n};\n\n/**\n * Get a list of menu items containing buttons for multi instance markers\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu items\n */\nReplaceMenuProvider.prototype._getLoopEntries = function(element) {\n\n  var self = this;\n  var translate = this._translate;\n\n  function toggleLoopEntry(event, entry) {\n    var loopCharacteristics;\n\n    if (entry.active) {\n      loopCharacteristics = undefined;\n    } else {\n      loopCharacteristics = self._moddle.create(entry.options.loopCharacteristics);\n\n      if (entry.options.isSequential) {\n        loopCharacteristics.isSequential = entry.options.isSequential;\n      }\n    }\n    self._modeling.updateProperties(element, { loopCharacteristics: loopCharacteristics });\n  }\n\n  var businessObject = getBusinessObject(element),\n      loopCharacteristics = businessObject.loopCharacteristics;\n\n  var isSequential,\n      isLoop,\n      isParallel;\n\n  if (loopCharacteristics) {\n    isSequential = loopCharacteristics.isSequential;\n    isLoop = loopCharacteristics.isSequential === undefined;\n    isParallel = loopCharacteristics.isSequential !== undefined && !loopCharacteristics.isSequential;\n  }\n\n\n  var loopEntries = [\n    {\n      id: 'toggle-parallel-mi',\n      className: 'bpmn-icon-parallel-mi-marker',\n      title: translate('Parallel Multi Instance'),\n      active: isParallel,\n      action: toggleLoopEntry,\n      options: {\n        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',\n        isSequential: false\n      }\n    },\n    {\n      id: 'toggle-sequential-mi',\n      className: 'bpmn-icon-sequential-mi-marker',\n      title: translate('Sequential Multi Instance'),\n      active: isSequential,\n      action: toggleLoopEntry,\n      options: {\n        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',\n        isSequential: true\n      }\n    },\n    {\n      id: 'toggle-loop',\n      className: 'bpmn-icon-loop-marker',\n      title: translate('Loop'),\n      active: isLoop,\n      action: toggleLoopEntry,\n      options: {\n        loopCharacteristics: 'bpmn:StandardLoopCharacteristics'\n      }\n    }\n  ];\n  return loopEntries;\n};\n\n\n/**\n * Get the menu items containing a button for the ad hoc marker\n *\n * @param  {djs.model.Base} element\n *\n * @return {Object} a menu item\n */\nReplaceMenuProvider.prototype._getAdHocEntry = function(element) {\n  var translate = this._translate;\n  var businessObject = getBusinessObject(element);\n\n  var isAdHoc = is(businessObject, 'bpmn:AdHocSubProcess');\n\n  var replaceElement = this._bpmnReplace.replaceElement;\n\n  var adHocEntry = {\n    id: 'toggle-adhoc',\n    className: 'bpmn-icon-ad-hoc-marker',\n    title: translate('Ad-hoc'),\n    active: isAdHoc,\n    action: function(event, entry) {\n      if (isAdHoc) {\n        return replaceElement(element, { type: 'bpmn:SubProcess' });\n      } else {\n        return replaceElement(element, { type: 'bpmn:AdHocSubProcess' });\n      }\n    }\n  };\n\n  return adHocEntry;\n};\n"]},"metadata":{},"sourceType":"module"}