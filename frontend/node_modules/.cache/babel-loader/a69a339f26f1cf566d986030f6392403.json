{"ast":null,"code":"'use strict';\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar elementHelper = require('../../../../helper/ElementHelper'),\n    inputOutputHelper = require('../../../../helper/InputOutputHelper'),\n    cmdHelper = require('../../../../helper/CmdHelper'),\n    utils = require('../../../../Utils');\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    script = require('./Script')('scriptFormat', 'value', true);\n\nfunction createElement(type, parent, factory, properties) {\n  return elementHelper.createElement(type, properties, parent, factory);\n}\n\nfunction isScript(elem) {\n  return is(elem, 'camunda:Script');\n}\n\nfunction isList(elem) {\n  return is(elem, 'camunda:List');\n}\n\nfunction isMap(elem) {\n  return is(elem, 'camunda:Map');\n}\n\nfunction ensureInputOutputSupported(element, insideConnector) {\n  return inputOutputHelper.isInputOutputSupported(element, insideConnector);\n}\n\nmodule.exports = function (element, bpmnFactory, options, translate) {\n  var typeInfo = {\n    'camunda:Map': {\n      value: 'map',\n      label: translate('Map')\n    },\n    'camunda:List': {\n      value: 'list',\n      label: translate('List')\n    },\n    'camunda:Script': {\n      value: 'script',\n      label: translate('Script')\n    }\n  };\n  options = options || {};\n  var insideConnector = !!options.insideConnector,\n      idPrefix = options.idPrefix || '';\n  var getSelected = options.getSelectedParameter;\n\n  if (!ensureInputOutputSupported(element, insideConnector)) {\n    return [];\n  }\n\n  var entries = [];\n\n  var isSelected = function (element, node) {\n    return getSelected(element, node);\n  }; // parameter name ////////////////////////////////////////////////////////\n\n\n  entries.push(entryFactory.validationAwareTextField({\n    id: idPrefix + 'parameterName',\n    label: 'Name',\n    modelProperty: 'name',\n    getProperty: function (element, node) {\n      return (getSelected(element, node) || {}).name;\n    },\n    setProperty: function (element, values, node) {\n      var param = getSelected(element, node);\n      return cmdHelper.updateBusinessObject(element, param, values);\n    },\n    validate: function (element, values, node) {\n      var bo = getSelected(element, node);\n      var validation = {};\n\n      if (bo) {\n        var nameValue = values.name;\n\n        if (nameValue) {\n          if (utils.containsSpace(nameValue)) {\n            validation.name = 'Name must not contain spaces';\n          }\n        } else {\n          validation.name = 'Parameter must have a name';\n        }\n      }\n\n      return validation;\n    },\n    hidden: function (element, node) {\n      return !isSelected(element, node);\n    }\n  })); // parameter type //////////////////////////////////////////////////////\n\n  var selectOptions = [{\n    value: 'text',\n    name: 'Text'\n  }, {\n    value: 'script',\n    name: 'Script'\n  }, {\n    value: 'list',\n    name: 'List'\n  }, {\n    value: 'map',\n    name: 'Map'\n  }];\n  entries.push(entryFactory.selectBox({\n    id: idPrefix + 'parameterType',\n    label: 'Type',\n    selectOptions: selectOptions,\n    modelProperty: 'parameterType',\n    get: function (element, node) {\n      var bo = getSelected(element, node);\n      var parameterType = 'text';\n\n      if (typeof bo !== 'undefined') {\n        var definition = bo.get('definition');\n\n        if (typeof definition !== 'undefined') {\n          var type = definition.$type;\n          parameterType = typeInfo[type].value;\n        }\n      }\n\n      return {\n        parameterType: parameterType\n      };\n    },\n    set: function (element, values, node) {\n      var bo = getSelected(element, node);\n      var properties = {\n        value: undefined,\n        definition: undefined\n      };\n\n      var createParameterTypeElem = function (type) {\n        return createElement(type, bo, bpmnFactory);\n      };\n\n      var parameterType = values.parameterType;\n\n      if (parameterType === 'script') {\n        properties.definition = createParameterTypeElem('camunda:Script');\n      } else if (parameterType === 'list') {\n        properties.definition = createParameterTypeElem('camunda:List');\n      } else if (parameterType === 'map') {\n        properties.definition = createParameterTypeElem('camunda:Map');\n      }\n\n      return cmdHelper.updateBusinessObject(element, bo, properties);\n    },\n    show: function (element, node) {\n      return isSelected(element, node);\n    }\n  })); // parameter value (type = text) ///////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textBox({\n    id: idPrefix + 'parameterType-text',\n    label: 'Value',\n    modelProperty: 'value',\n    get: function (element, node) {\n      return {\n        value: (getSelected(element, node) || {}).value\n      };\n    },\n    set: function (element, values, node) {\n      var param = getSelected(element, node);\n      values.value = values.value || undefined;\n      return cmdHelper.updateBusinessObject(element, param, values);\n    },\n    show: function (element, node) {\n      var bo = getSelected(element, node);\n      return bo && !bo.definition;\n    }\n  })); // parameter value (type = script) ///////////////////////////////////////////////////////\n\n  entries.push({\n    id: idPrefix + 'parameterType-script',\n    html: '<div data-show=\"isScript\">' + script.template + '</div>',\n    get: function (element, node) {\n      var bo = getSelected(element, node);\n      return bo && isScript(bo.definition) ? script.get(element, bo.definition) : {};\n    },\n    set: function (element, values, node) {\n      var bo = getSelected(element, node);\n      var update = script.set(element, values);\n      return cmdHelper.updateBusinessObject(element, bo.definition, update);\n    },\n    validate: function (element, values, node) {\n      var bo = getSelected(element, node);\n      return bo && isScript(bo.definition) ? script.validate(element, bo.definition) : {};\n    },\n    isScript: function (element, node) {\n      var bo = getSelected(element, node);\n      return bo && isScript(bo.definition);\n    },\n    script: script\n  }); // parameter value (type = list) ///////////////////////////////////////////////////////\n\n  entries.push(entryFactory.table({\n    id: idPrefix + 'parameterType-list',\n    modelProperties: ['value'],\n    labels: ['Value'],\n    getElements: function (element, node) {\n      var bo = getSelected(element, node);\n\n      if (bo && isList(bo.definition)) {\n        return bo.definition.items;\n      }\n\n      return [];\n    },\n    updateElement: function (element, values, node, idx) {\n      var bo = getSelected(element, node);\n      var item = bo.definition.items[idx];\n      return cmdHelper.updateBusinessObject(element, item, values);\n    },\n    addElement: function (element, node) {\n      var bo = getSelected(element, node);\n      var newValue = createElement('camunda:Value', bo.definition, bpmnFactory, {\n        value: undefined\n      });\n      return cmdHelper.addElementsTolist(element, bo.definition, 'items', [newValue]);\n    },\n    removeElement: function (element, node, idx) {\n      var bo = getSelected(element, node);\n      return cmdHelper.removeElementsFromList(element, bo.definition, 'items', null, [bo.definition.items[idx]]);\n    },\n    editable: function (element, node, prop, idx) {\n      var bo = getSelected(element, node);\n      var item = bo.definition.items[idx];\n      return !isMap(item) && !isList(item) && !isScript(item);\n    },\n    setControlValue: function (element, node, input, prop, value, idx) {\n      var bo = getSelected(element, node);\n      var item = bo.definition.items[idx];\n\n      if (!isMap(item) && !isList(item) && !isScript(item)) {\n        input.value = value;\n      } else {\n        input.value = typeInfo[item.$type].label;\n      }\n    },\n    show: function (element, node) {\n      var bo = getSelected(element, node);\n      return bo && bo.definition && isList(bo.definition);\n    }\n  })); // parameter value (type = map) ///////////////////////////////////////////////////////\n\n  entries.push(entryFactory.table({\n    id: idPrefix + 'parameterType-map',\n    modelProperties: ['key', 'value'],\n    labels: ['Key', 'Value'],\n    addLabel: 'Add Entry',\n    getElements: function (element, node) {\n      var bo = getSelected(element, node);\n\n      if (bo && isMap(bo.definition)) {\n        return bo.definition.entries;\n      }\n\n      return [];\n    },\n    updateElement: function (element, values, node, idx) {\n      var bo = getSelected(element, node);\n      var entry = bo.definition.entries[idx];\n\n      if (isMap(entry.definition) || isList(entry.definition) || isScript(entry.definition)) {\n        values = {\n          key: values.key\n        };\n      }\n\n      return cmdHelper.updateBusinessObject(element, entry, values);\n    },\n    addElement: function (element, node) {\n      var bo = getSelected(element, node);\n      var newEntry = createElement('camunda:Entry', bo.definition, bpmnFactory, {\n        key: undefined,\n        value: undefined\n      });\n      return cmdHelper.addElementsTolist(element, bo.definition, 'entries', [newEntry]);\n    },\n    removeElement: function (element, node, idx) {\n      var bo = getSelected(element, node);\n      return cmdHelper.removeElementsFromList(element, bo.definition, 'entries', null, [bo.definition.entries[idx]]);\n    },\n    editable: function (element, node, prop, idx) {\n      var bo = getSelected(element, node);\n      var entry = bo.definition.entries[idx];\n      return prop === 'key' || !isMap(entry.definition) && !isList(entry.definition) && !isScript(entry.definition);\n    },\n    setControlValue: function (element, node, input, prop, value, idx) {\n      var bo = getSelected(element, node);\n      var entry = bo.definition.entries[idx];\n\n      if (prop === 'key' || !isMap(entry.definition) && !isList(entry.definition) && !isScript(entry.definition)) {\n        input.value = value;\n      } else {\n        input.value = typeInfo[entry.definition.$type].label;\n      }\n    },\n    show: function (element, node) {\n      var bo = getSelected(element, node);\n      return bo && bo.definition && isMap(bo.definition);\n    }\n  }));\n  return entries;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/implementation/InputOutputParameter.js"],"names":["is","require","elementHelper","inputOutputHelper","cmdHelper","utils","entryFactory","script","createElement","type","parent","factory","properties","isScript","elem","isList","isMap","ensureInputOutputSupported","element","insideConnector","isInputOutputSupported","module","exports","bpmnFactory","options","translate","typeInfo","value","label","idPrefix","getSelected","getSelectedParameter","entries","isSelected","node","push","validationAwareTextField","id","modelProperty","getProperty","name","setProperty","values","param","updateBusinessObject","validate","bo","validation","nameValue","containsSpace","hidden","selectOptions","selectBox","get","parameterType","definition","$type","set","undefined","createParameterTypeElem","show","textBox","html","template","update","table","modelProperties","labels","getElements","items","updateElement","idx","item","addElement","newValue","addElementsTolist","removeElement","removeElementsFromList","editable","prop","setControlValue","input","addLabel","entry","key","newEntry"],"mappings":"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","sourcesContent":["'use strict';\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar elementHelper = require('../../../../helper/ElementHelper'),\n    inputOutputHelper = require('../../../../helper/InputOutputHelper'),\n    cmdHelper = require('../../../../helper/CmdHelper'),\n    utils = require('../../../../Utils');\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    script = require('./Script')('scriptFormat', 'value', true);\n\n\nfunction createElement(type, parent, factory, properties) {\n  return elementHelper.createElement(type, properties, parent, factory);\n}\n\nfunction isScript(elem) {\n  return is(elem, 'camunda:Script');\n}\n\nfunction isList(elem) {\n  return is(elem, 'camunda:List');\n}\n\nfunction isMap(elem) {\n  return is(elem, 'camunda:Map');\n}\n\nfunction ensureInputOutputSupported(element, insideConnector) {\n  return inputOutputHelper.isInputOutputSupported(element, insideConnector);\n}\n\nmodule.exports = function(element, bpmnFactory, options, translate) {\n\n  var typeInfo = {\n    'camunda:Map': {\n      value: 'map',\n      label: translate('Map')\n    },\n    'camunda:List': {\n      value: 'list',\n      label: translate('List')\n    },\n    'camunda:Script': {\n      value: 'script',\n      label: translate('Script')\n    }\n  };\n\n  options = options || {};\n\n  var insideConnector = !!options.insideConnector,\n      idPrefix = options.idPrefix || '';\n\n  var getSelected = options.getSelectedParameter;\n\n  if (!ensureInputOutputSupported(element, insideConnector)) {\n    return [];\n  }\n\n  var entries = [];\n\n  var isSelected = function(element, node) {\n    return getSelected(element, node);\n  };\n\n\n  // parameter name ////////////////////////////////////////////////////////\n\n  entries.push(entryFactory.validationAwareTextField({\n    id: idPrefix + 'parameterName',\n    label: 'Name',\n    modelProperty: 'name',\n\n    getProperty: function(element, node) {\n      return (getSelected(element, node) || {}).name;\n    },\n\n    setProperty: function(element, values, node) {\n      var param = getSelected(element, node);\n      return cmdHelper.updateBusinessObject(element, param, values);\n    },\n\n    validate: function(element, values, node) {\n      var bo = getSelected(element, node);\n\n      var validation = {};\n      if (bo) {\n        var nameValue = values.name;\n\n        if (nameValue) {\n          if (utils.containsSpace(nameValue)) {\n            validation.name = 'Name must not contain spaces';\n          }\n        } else {\n          validation.name = 'Parameter must have a name';\n        }\n      }\n\n      return validation;\n    },\n\n    hidden: function(element, node) {\n      return !isSelected(element, node);\n    }\n  }));\n\n\n  // parameter type //////////////////////////////////////////////////////\n\n  var selectOptions = [\n    { value: 'text', name: 'Text' },\n    { value: 'script', name: 'Script' },\n    { value: 'list', name: 'List' },\n    { value: 'map', name: 'Map' }\n  ];\n\n  entries.push(entryFactory.selectBox({\n    id : idPrefix + 'parameterType',\n    label: 'Type',\n    selectOptions: selectOptions,\n    modelProperty: 'parameterType',\n\n    get: function(element, node) {\n      var bo = getSelected(element, node);\n\n      var parameterType = 'text';\n\n      if (typeof bo !== 'undefined') {\n        var definition = bo.get('definition');\n        if (typeof definition !== 'undefined') {\n          var type = definition.$type;\n          parameterType = typeInfo[type].value;\n        }\n      }\n\n      return {\n        parameterType: parameterType\n      };\n    },\n\n    set: function(element, values, node) {\n      var bo = getSelected(element, node);\n\n      var properties = {\n        value: undefined,\n        definition: undefined\n      };\n\n      var createParameterTypeElem = function(type) {\n        return createElement(type, bo, bpmnFactory);\n      };\n\n      var parameterType = values.parameterType;\n\n      if (parameterType === 'script') {\n        properties.definition = createParameterTypeElem('camunda:Script');\n      }\n      else if (parameterType === 'list') {\n        properties.definition = createParameterTypeElem('camunda:List');\n      }\n      else if (parameterType === 'map') {\n        properties.definition = createParameterTypeElem('camunda:Map');\n      }\n\n      return cmdHelper.updateBusinessObject(element, bo, properties);\n    },\n\n    show: function(element, node) {\n      return isSelected(element, node);\n    }\n\n  }));\n\n\n  // parameter value (type = text) ///////////////////////////////////////////////////////\n\n  entries.push(entryFactory.textBox({\n    id : idPrefix + 'parameterType-text',\n    label : 'Value',\n    modelProperty: 'value',\n    get: function(element, node) {\n      return {\n        value: (getSelected(element, node) || {}).value\n      };\n    },\n\n    set: function(element, values, node) {\n      var param = getSelected(element, node);\n      values.value = values.value || undefined;\n      return cmdHelper.updateBusinessObject(element, param, values);\n    },\n\n    show: function(element, node) {\n      var bo = getSelected(element, node);\n      return bo && !bo.definition;\n    }\n\n  }));\n\n\n  // parameter value (type = script) ///////////////////////////////////////////////////////\n\n  entries.push({\n    id: idPrefix + 'parameterType-script',\n    html: '<div data-show=\"isScript\">' +\n            script.template +\n          '</div>',\n    get: function(element, node) {\n      var bo = getSelected(element, node);\n      return bo && isScript(bo.definition) ? script.get(element, bo.definition) : {};\n    },\n\n    set: function(element, values, node) {\n      var bo = getSelected(element, node);\n      var update = script.set(element, values);\n      return cmdHelper.updateBusinessObject(element, bo.definition, update);\n    },\n\n    validate: function(element, values, node) {\n      var bo = getSelected(element, node);\n      return bo && isScript(bo.definition) ? script.validate(element, bo.definition) : {};\n    },\n\n    isScript: function(element, node) {\n      var bo = getSelected(element, node);\n      return bo && isScript(bo.definition);\n    },\n\n    script: script\n\n  });\n\n\n  // parameter value (type = list) ///////////////////////////////////////////////////////\n\n  entries.push(entryFactory.table({\n    id: idPrefix + 'parameterType-list',\n    modelProperties: [ 'value' ],\n    labels: [ 'Value' ],\n\n    getElements: function(element, node) {\n      var bo = getSelected(element, node);\n\n      if (bo && isList(bo.definition)) {\n        return bo.definition.items;\n      }\n\n      return [];\n    },\n\n    updateElement: function(element, values, node, idx) {\n      var bo = getSelected(element, node);\n      var item = bo.definition.items[idx];\n      return cmdHelper.updateBusinessObject(element, item, values);\n    },\n\n    addElement: function(element, node) {\n      var bo = getSelected(element, node);\n      var newValue = createElement('camunda:Value', bo.definition, bpmnFactory, { value: undefined });\n      return cmdHelper.addElementsTolist(element, bo.definition, 'items', [ newValue ]);\n    },\n\n    removeElement: function(element, node, idx) {\n      var bo = getSelected(element, node);\n      return cmdHelper.removeElementsFromList(element, bo.definition, 'items', null, [ bo.definition.items[idx] ]);\n    },\n\n    editable: function(element, node, prop, idx) {\n      var bo = getSelected(element, node);\n      var item = bo.definition.items[idx];\n      return !isMap(item) && !isList(item) && !isScript(item);\n    },\n\n    setControlValue: function(element, node, input, prop, value, idx) {\n      var bo = getSelected(element, node);\n      var item = bo.definition.items[idx];\n\n      if (!isMap(item) && !isList(item) && !isScript(item)) {\n        input.value = value;\n      } else {\n        input.value = typeInfo[item.$type].label;\n      }\n    },\n\n    show: function(element, node) {\n      var bo = getSelected(element, node);\n      return bo && bo.definition && isList(bo.definition);\n    }\n\n  }));\n\n\n  // parameter value (type = map) ///////////////////////////////////////////////////////\n\n  entries.push(entryFactory.table({\n    id: idPrefix + 'parameterType-map',\n    modelProperties: [ 'key', 'value' ],\n    labels: [ 'Key', 'Value' ],\n    addLabel: 'Add Entry',\n\n    getElements: function(element, node) {\n      var bo = getSelected(element, node);\n\n      if (bo && isMap(bo.definition)) {\n        return bo.definition.entries;\n      }\n\n      return [];\n    },\n\n    updateElement: function(element, values, node, idx) {\n      var bo = getSelected(element, node);\n      var entry = bo.definition.entries[idx];\n\n      if (isMap(entry.definition) || isList(entry.definition) || isScript(entry.definition)) {\n        values = {\n          key: values.key\n        };\n      }\n\n      return cmdHelper.updateBusinessObject(element, entry, values);\n    },\n\n    addElement: function(element, node) {\n      var bo = getSelected(element, node);\n      var newEntry = createElement('camunda:Entry', bo.definition, bpmnFactory, { key: undefined, value: undefined });\n      return cmdHelper.addElementsTolist(element, bo.definition, 'entries', [ newEntry ]);\n    },\n\n    removeElement: function(element, node, idx) {\n      var bo = getSelected(element, node);\n      return cmdHelper.removeElementsFromList(element, bo.definition, 'entries', null, [ bo.definition.entries[idx] ]);\n    },\n\n    editable: function(element, node, prop, idx) {\n      var bo = getSelected(element, node);\n      var entry = bo.definition.entries[idx];\n      return prop === 'key' || (!isMap(entry.definition) && !isList(entry.definition) && !isScript(entry.definition));\n    },\n\n    setControlValue: function(element, node, input, prop, value, idx) {\n      var bo = getSelected(element, node);\n      var entry = bo.definition.entries[idx];\n\n      if (prop === 'key' || (!isMap(entry.definition) && !isList(entry.definition) && !isScript(entry.definition))) {\n        input.value = value;\n      } else {\n        input.value = typeInfo[entry.definition.$type].label;\n      }\n    },\n\n    show: function(element, node) {\n      var bo = getSelected(element, node);\n      return bo && bo.definition && isMap(bo.definition);\n    }\n\n  }));\n\n  return entries;\n\n};\n"]},"metadata":{},"sourceType":"script"}