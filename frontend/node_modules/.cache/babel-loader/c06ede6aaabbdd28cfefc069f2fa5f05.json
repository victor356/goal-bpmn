{"ast":null,"code":"/**\n * Parses a namespaced attribute name of the form (ns:)localName to an object,\n * given a default prefix to assume in case no explicit namespace is given.\n *\n * @param {String} name\n * @param {String} [defaultPrefix] the default prefix to take, if none is present.\n *\n * @return {Object} the parsed name\n */\nexport function parseName(name, defaultPrefix) {\n  var parts = name.split(/:/),\n      localName,\n      prefix; // no prefix (i.e. only local name)\n\n  if (parts.length === 1) {\n    localName = name;\n    prefix = defaultPrefix;\n  } else // prefix + local name\n    if (parts.length === 2) {\n      localName = parts[1];\n      prefix = parts[0];\n    } else {\n      throw new Error('expected <prefix:localName> or <localName>, got ' + name);\n    }\n\n  name = (prefix ? prefix + ':' : '') + localName;\n  return {\n    name: name,\n    prefix: prefix,\n    localName: localName\n  };\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/moddle/lib/ns.js"],"names":["parseName","name","defaultPrefix","parts","split","localName","prefix","length","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,aAAzB,EAAwC;AAC7C,MAAIC,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAZ;AAAA,MACIC,SADJ;AAAA,MACeC,MADf,CAD6C,CAI7C;;AACA,MAAIH,KAAK,CAACI,MAAN,KAAiB,CAArB,EAAwB;AACtBF,IAAAA,SAAS,GAAGJ,IAAZ;AACAK,IAAAA,MAAM,GAAGJ,aAAT;AACD,GAHD,MAIA;AACA,QAAIC,KAAK,CAACI,MAAN,KAAiB,CAArB,EAAwB;AACtBF,MAAAA,SAAS,GAAGF,KAAK,CAAC,CAAD,CAAjB;AACAG,MAAAA,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAd;AACD,KAHD,MAGO;AACL,YAAM,IAAIK,KAAJ,CAAU,qDAAqDP,IAA/D,CAAN;AACD;;AAEDA,EAAAA,IAAI,GAAG,CAACK,MAAM,GAAGA,MAAM,GAAG,GAAZ,GAAkB,EAAzB,IAA+BD,SAAtC;AAEA,SAAO;AACLJ,IAAAA,IAAI,EAAEA,IADD;AAELK,IAAAA,MAAM,EAAEA,MAFH;AAGLD,IAAAA,SAAS,EAAEA;AAHN,GAAP;AAKD","sourcesContent":["/**\n * Parses a namespaced attribute name of the form (ns:)localName to an object,\n * given a default prefix to assume in case no explicit namespace is given.\n *\n * @param {String} name\n * @param {String} [defaultPrefix] the default prefix to take, if none is present.\n *\n * @return {Object} the parsed name\n */\nexport function parseName(name, defaultPrefix) {\n  var parts = name.split(/:/),\n      localName, prefix;\n\n  // no prefix (i.e. only local name)\n  if (parts.length === 1) {\n    localName = name;\n    prefix = defaultPrefix;\n  } else\n  // prefix + local name\n  if (parts.length === 2) {\n    localName = parts[1];\n    prefix = parts[0];\n  } else {\n    throw new Error('expected <prefix:localName> or <localName>, got ' + name);\n  }\n\n  name = (prefix ? prefix + ':' : '') + localName;\n\n  return {\n    name: name,\n    prefix: prefix,\n    localName: localName\n  };\n}"]},"metadata":{},"sourceType":"module"}