{"ast":null,"code":"import { isFunction, isArray, forEach } from 'min-dash';\nimport { delegate as domDelegate, event as domEvent, attr as domAttr, query as domQuery, classes as domClasses, domify } from 'min-dom';\nvar entrySelector = '.entry';\n/**\n * A context pad that displays element specific, contextual actions next\n * to a diagram element.\n *\n * @param {EventBus} eventBus\n * @param {Overlays} overlays\n */\n\nexport default function ContextPad(eventBus, overlays) {\n  this._providers = [];\n  this._eventBus = eventBus;\n  this._overlays = overlays;\n  this._current = null;\n\n  this._init();\n}\nContextPad.$inject = ['eventBus', 'overlays'];\n/**\n * Registers events needed for interaction with other components\n */\n\nContextPad.prototype._init = function () {\n  var eventBus = this._eventBus;\n  var self = this;\n  eventBus.on('selection.changed', function (e) {\n    var selection = e.newSelection;\n\n    if (selection.length === 1) {\n      self.open(selection[0]);\n    } else {\n      self.close();\n    }\n  });\n  eventBus.on('elements.delete', function (event) {\n    var elements = event.elements;\n    forEach(elements, function (e) {\n      if (self.isOpen(e)) {\n        self.close();\n      }\n    });\n  });\n  eventBus.on('element.changed', function (event) {\n    var element = event.element,\n        current = self._current; // force reopen if element for which we are currently opened changed\n\n    if (current && current.element === element) {\n      self.open(element, true);\n    }\n  });\n};\n/**\n * Register a provider with the context pad\n *\n * @param  {ContextPadProvider} provider\n */\n\n\nContextPad.prototype.registerProvider = function (provider) {\n  this._providers.push(provider);\n};\n/**\n * Returns the context pad entries for a given element\n *\n * @param {djs.element.Base} element\n *\n * @return {Array<ContextPadEntryDescriptor>} list of entries\n */\n\n\nContextPad.prototype.getEntries = function (element) {\n  var entries = {}; // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n\n  forEach(this._providers, function (provider) {\n    var e = provider.getContextPadEntries(element);\n    forEach(e, function (entry, id) {\n      entries[id] = entry;\n    });\n  });\n  return entries;\n};\n/**\n * Trigger an action available on the opened context pad\n *\n * @param  {String} action\n * @param  {Event} event\n * @param  {Boolean} [autoActivate=false]\n */\n\n\nContextPad.prototype.trigger = function (action, event, autoActivate) {\n  var element = this._current.element,\n      entries = this._current.entries,\n      entry,\n      handler,\n      originalEvent,\n      button = event.delegateTarget || event.target;\n\n  if (!button) {\n    return event.preventDefault();\n  }\n\n  entry = entries[domAttr(button, 'data-action')];\n  handler = entry.action;\n  originalEvent = event.originalEvent || event; // simple action (via callback function)\n\n  if (isFunction(handler)) {\n    if (action === 'click') {\n      return handler(originalEvent, element, autoActivate);\n    }\n  } else {\n    if (handler[action]) {\n      return handler[action](originalEvent, element, autoActivate);\n    }\n  } // silence other actions\n\n\n  event.preventDefault();\n};\n/**\n * Open the context pad for the given element\n *\n * @param {djs.model.Base} element\n * @param {Boolean} force if true, force reopening the context pad\n */\n\n\nContextPad.prototype.open = function (element, force) {\n  if (!force && this.isOpen(element)) {\n    return;\n  }\n\n  this.close();\n\n  this._updateAndOpen(element);\n};\n\nContextPad.prototype._updateAndOpen = function (element) {\n  var entries = this.getEntries(element),\n      pad = this.getPad(element),\n      html = pad.html;\n  forEach(entries, function (entry, id) {\n    var grouping = entry.group || 'default',\n        control = domify(entry.html || '<div class=\"entry\" draggable=\"true\"></div>'),\n        container;\n    domAttr(control, 'data-action', id);\n    container = domQuery('[data-group=' + grouping + ']', html);\n\n    if (!container) {\n      container = domify('<div class=\"group\" data-group=\"' + grouping + '\"></div>');\n      html.appendChild(container);\n    }\n\n    container.appendChild(control);\n\n    if (entry.className) {\n      addClasses(control, entry.className);\n    }\n\n    if (entry.title) {\n      domAttr(control, 'title', entry.title);\n    }\n\n    if (entry.imageUrl) {\n      control.appendChild(domify('<img src=\"' + entry.imageUrl + '\">'));\n    }\n  });\n  domClasses(html).add('open');\n  this._current = {\n    element: element,\n    pad: pad,\n    entries: entries\n  };\n\n  this._eventBus.fire('contextPad.open', {\n    current: this._current\n  });\n};\n\nContextPad.prototype.getPad = function (element) {\n  if (this.isOpen()) {\n    return this._current.pad;\n  }\n\n  var self = this;\n  var overlays = this._overlays;\n  var html = domify('<div class=\"djs-context-pad\"></div>');\n  domDelegate.bind(html, entrySelector, 'click', function (event) {\n    self.trigger('click', event);\n  });\n  domDelegate.bind(html, entrySelector, 'dragstart', function (event) {\n    self.trigger('dragstart', event);\n  }); // stop propagation of mouse events\n\n  domEvent.bind(html, 'mousedown', function (event) {\n    event.stopPropagation();\n  });\n  this._overlayId = overlays.add(element, 'context-pad', {\n    position: {\n      right: -9,\n      top: -6\n    },\n    html: html\n  });\n  var pad = overlays.get(this._overlayId);\n\n  this._eventBus.fire('contextPad.create', {\n    element: element,\n    pad: pad\n  });\n\n  return pad;\n};\n/**\n * Close the context pad\n */\n\n\nContextPad.prototype.close = function () {\n  if (!this.isOpen()) {\n    return;\n  }\n\n  this._overlays.remove(this._overlayId);\n\n  this._overlayId = null;\n\n  this._eventBus.fire('contextPad.close', {\n    current: this._current\n  });\n\n  this._current = null;\n};\n/**\n * Check if pad is open. If element is given, will check\n * if pad is opened with given element.\n *\n * @param {Element} element\n * @return {Boolean}\n */\n\n\nContextPad.prototype.isOpen = function (element) {\n  return !!this._current && (!element ? true : this._current.element === element);\n}; // helpers //////////////////////\n\n\nfunction addClasses(element, classNames) {\n  var classes = domClasses(element);\n  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n  actualClassNames.forEach(function (cls) {\n    classes.add(cls);\n  });\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/context-pad/ContextPad.js"],"names":["isFunction","isArray","forEach","delegate","domDelegate","event","domEvent","attr","domAttr","query","domQuery","classes","domClasses","domify","entrySelector","ContextPad","eventBus","overlays","_providers","_eventBus","_overlays","_current","_init","$inject","prototype","self","on","e","selection","newSelection","length","open","close","elements","isOpen","element","current","registerProvider","provider","push","getEntries","entries","getContextPadEntries","entry","id","trigger","action","autoActivate","handler","originalEvent","button","delegateTarget","target","preventDefault","force","_updateAndOpen","pad","getPad","html","grouping","group","control","container","appendChild","className","addClasses","title","imageUrl","add","fire","bind","stopPropagation","_overlayId","position","right","top","get","remove","classNames","actualClassNames","split","cls"],"mappings":"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","sourcesContent":["import {\n  isFunction,\n  isArray,\n  forEach\n} from 'min-dash';\n\nimport {\n  delegate as domDelegate,\n  event as domEvent,\n  attr as domAttr,\n  query as domQuery,\n  classes as domClasses,\n  domify as domify\n} from 'min-dom';\n\nvar entrySelector = '.entry';\n\n\n/**\n * A context pad that displays element specific, contextual actions next\n * to a diagram element.\n *\n * @param {EventBus} eventBus\n * @param {Overlays} overlays\n */\nexport default function ContextPad(eventBus, overlays) {\n\n  this._providers = [];\n\n  this._eventBus = eventBus;\n  this._overlays = overlays;\n\n  this._current = null;\n\n  this._init();\n}\n\nContextPad.$inject = [ 'eventBus', 'overlays' ];\n\n\n/**\n * Registers events needed for interaction with other components\n */\nContextPad.prototype._init = function() {\n\n  var eventBus = this._eventBus;\n\n  var self = this;\n\n  eventBus.on('selection.changed', function(e) {\n\n    var selection = e.newSelection;\n\n    if (selection.length === 1) {\n      self.open(selection[0]);\n    } else {\n      self.close();\n    }\n  });\n\n  eventBus.on('elements.delete', function(event) {\n    var elements = event.elements;\n\n    forEach(elements, function(e) {\n      if (self.isOpen(e)) {\n        self.close();\n      }\n    });\n  });\n\n  eventBus.on('element.changed', function(event) {\n    var element = event.element,\n        current = self._current;\n\n    // force reopen if element for which we are currently opened changed\n    if (current && current.element === element) {\n      self.open(element, true);\n    }\n  });\n};\n\n\n/**\n * Register a provider with the context pad\n *\n * @param  {ContextPadProvider} provider\n */\nContextPad.prototype.registerProvider = function(provider) {\n  this._providers.push(provider);\n};\n\n\n/**\n * Returns the context pad entries for a given element\n *\n * @param {djs.element.Base} element\n *\n * @return {Array<ContextPadEntryDescriptor>} list of entries\n */\nContextPad.prototype.getEntries = function(element) {\n  var entries = {};\n\n  // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n  forEach(this._providers, function(provider) {\n    var e = provider.getContextPadEntries(element);\n\n    forEach(e, function(entry, id) {\n      entries[id] = entry;\n    });\n  });\n\n  return entries;\n};\n\n\n/**\n * Trigger an action available on the opened context pad\n *\n * @param  {String} action\n * @param  {Event} event\n * @param  {Boolean} [autoActivate=false]\n */\nContextPad.prototype.trigger = function(action, event, autoActivate) {\n\n  var element = this._current.element,\n      entries = this._current.entries,\n      entry,\n      handler,\n      originalEvent,\n      button = event.delegateTarget || event.target;\n\n  if (!button) {\n    return event.preventDefault();\n  }\n\n  entry = entries[domAttr(button, 'data-action')];\n  handler = entry.action;\n\n  originalEvent = event.originalEvent || event;\n\n  // simple action (via callback function)\n  if (isFunction(handler)) {\n    if (action === 'click') {\n      return handler(originalEvent, element, autoActivate);\n    }\n  } else {\n    if (handler[action]) {\n      return handler[action](originalEvent, element, autoActivate);\n    }\n  }\n\n  // silence other actions\n  event.preventDefault();\n};\n\n\n/**\n * Open the context pad for the given element\n *\n * @param {djs.model.Base} element\n * @param {Boolean} force if true, force reopening the context pad\n */\nContextPad.prototype.open = function(element, force) {\n  if (!force && this.isOpen(element)) {\n    return;\n  }\n\n  this.close();\n  this._updateAndOpen(element);\n};\n\n\nContextPad.prototype._updateAndOpen = function(element) {\n\n  var entries = this.getEntries(element),\n      pad = this.getPad(element),\n      html = pad.html;\n\n  forEach(entries, function(entry, id) {\n    var grouping = entry.group || 'default',\n        control = domify(entry.html || '<div class=\"entry\" draggable=\"true\"></div>'),\n        container;\n\n    domAttr(control, 'data-action', id);\n\n    container = domQuery('[data-group=' + grouping + ']', html);\n    if (!container) {\n      container = domify('<div class=\"group\" data-group=\"' + grouping + '\"></div>');\n      html.appendChild(container);\n    }\n\n    container.appendChild(control);\n\n    if (entry.className) {\n      addClasses(control, entry.className);\n    }\n\n    if (entry.title) {\n      domAttr(control, 'title', entry.title);\n    }\n\n    if (entry.imageUrl) {\n      control.appendChild(domify('<img src=\"' + entry.imageUrl + '\">'));\n    }\n  });\n\n  domClasses(html).add('open');\n\n  this._current = {\n    element: element,\n    pad: pad,\n    entries: entries\n  };\n\n  this._eventBus.fire('contextPad.open', { current: this._current });\n};\n\n\nContextPad.prototype.getPad = function(element) {\n  if (this.isOpen()) {\n    return this._current.pad;\n  }\n\n  var self = this;\n\n  var overlays = this._overlays;\n\n  var html = domify('<div class=\"djs-context-pad\"></div>');\n\n  domDelegate.bind(html, entrySelector, 'click', function(event) {\n    self.trigger('click', event);\n  });\n\n  domDelegate.bind(html, entrySelector, 'dragstart', function(event) {\n    self.trigger('dragstart', event);\n  });\n\n  // stop propagation of mouse events\n  domEvent.bind(html, 'mousedown', function(event) {\n    event.stopPropagation();\n  });\n\n  this._overlayId = overlays.add(element, 'context-pad', {\n    position: {\n      right: -9,\n      top: -6\n    },\n    html: html\n  });\n\n  var pad = overlays.get(this._overlayId);\n\n  this._eventBus.fire('contextPad.create', { element: element, pad: pad });\n\n  return pad;\n};\n\n\n/**\n * Close the context pad\n */\nContextPad.prototype.close = function() {\n  if (!this.isOpen()) {\n    return;\n  }\n\n  this._overlays.remove(this._overlayId);\n\n  this._overlayId = null;\n\n  this._eventBus.fire('contextPad.close', { current: this._current });\n\n  this._current = null;\n};\n\n/**\n * Check if pad is open. If element is given, will check\n * if pad is opened with given element.\n *\n * @param {Element} element\n * @return {Boolean}\n */\nContextPad.prototype.isOpen = function(element) {\n  return !!this._current && (!element ? true : this._current.element === element);\n};\n\n\n\n\n// helpers //////////////////////\n\nfunction addClasses(element, classNames) {\n\n  var classes = domClasses(element);\n\n  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n  actualClassNames.forEach(function(cls) {\n    classes.add(cls);\n  });\n}"]},"metadata":{},"sourceType":"module"}