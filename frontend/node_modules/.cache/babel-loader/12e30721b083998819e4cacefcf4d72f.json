{"ast":null,"code":"import { forEach, isArray } from 'min-dash';\nvar NOT_REGISTERED_ERROR = 'is not a registered action',\n    IS_REGISTERED_ERROR = 'is already registered';\n/**\n * An interface that provides access to modeling actions by decoupling\n * the one who requests the action to be triggered and the trigger itself.\n *\n * It's possible to add new actions by registering them with ´registerAction´\n * and likewise unregister existing ones with ´unregisterAction´.\n *\n *\n * ## Life-Cycle and configuration\n *\n * The editor actions will wait for diagram initialization before\n * registering default actions _and_ firing an `editorActions.init` event.\n *\n * Interested parties may listen to the `editorActions.init` event with\n * low priority to check, which actions got registered. Other components\n * may use the event to register their own actions via `registerAction`.\n *\n * @param {EventBus} eventBus\n * @param {Injector} injector\n */\n\nexport default function EditorActions(eventBus, injector) {\n  // initialize actions\n  this._actions = {};\n  var self = this;\n  eventBus.on('diagram.init', function () {\n    // all diagram modules got loaded; check which ones\n    // are available and register the respective default actions\n    self._registerDefaultActions(injector); // ask interested parties to register available editor\n    // actions on diagram initialization\n\n\n    eventBus.fire('editorActions.init', {\n      editorActions: self\n    });\n  });\n}\nEditorActions.$inject = ['eventBus', 'injector'];\n/**\n * Register default actions.\n *\n * @param {Injector} injector\n */\n\nEditorActions.prototype._registerDefaultActions = function (injector) {\n  // (1) retrieve optional components to integrate with\n  var commandStack = injector.get('commandStack', false);\n  var modeling = injector.get('modeling', false);\n  var selection = injector.get('selection', false);\n  var zoomScroll = injector.get('zoomScroll', false);\n  var copyPaste = injector.get('copyPaste', false);\n  var canvas = injector.get('canvas', false);\n  var rules = injector.get('rules', false);\n  var mouseTracking = injector.get('mouseTracking', false);\n  var keyboardMove = injector.get('keyboardMove', false);\n  var keyboardMoveSelection = injector.get('keyboardMoveSelection', false); // (2) check components and register actions\n\n  if (commandStack) {\n    this.register('undo', function () {\n      commandStack.undo();\n    });\n    this.register('redo', function () {\n      commandStack.redo();\n    });\n  }\n\n  if (copyPaste && selection) {\n    this.register('copy', function () {\n      var selectedElements = selection.get();\n      copyPaste.copy(selectedElements);\n    });\n  }\n\n  if (mouseTracking && copyPaste) {\n    this.register('paste', function () {\n      var context = mouseTracking.getHoverContext();\n      copyPaste.paste(context);\n    });\n  }\n\n  if (zoomScroll) {\n    this.register('stepZoom', function (opts) {\n      zoomScroll.stepZoom(opts.value);\n    });\n  }\n\n  if (canvas) {\n    this.register('zoom', function (opts) {\n      canvas.zoom(opts.value);\n    });\n  }\n\n  if (modeling && selection && rules) {\n    this.register('removeSelection', function () {\n      var selectedElements = selection.get();\n\n      if (!selectedElements.length) {\n        return;\n      }\n\n      var allowed = rules.allowed('elements.delete', {\n        elements: selectedElements\n      }),\n          removableElements;\n\n      if (allowed === false) {\n        return;\n      } else if (isArray(allowed)) {\n        removableElements = allowed;\n      } else {\n        removableElements = selectedElements;\n      }\n\n      if (removableElements.length) {\n        modeling.removeElements(removableElements.slice());\n      }\n    });\n  }\n\n  if (keyboardMove) {\n    this.register('moveCanvas', function (opts) {\n      keyboardMove.moveCanvas(opts);\n    });\n  }\n\n  if (keyboardMoveSelection) {\n    this.register('moveSelection', function (opts) {\n      keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);\n    });\n  }\n};\n/**\n * Triggers a registered action\n *\n * @param  {String} action\n * @param  {Object} opts\n *\n * @return {Unknown} Returns what the registered listener returns\n */\n\n\nEditorActions.prototype.trigger = function (action, opts) {\n  if (!this._actions[action]) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  return this._actions[action](opts);\n};\n/**\n * Registers a collections of actions.\n * The key of the object will be the name of the action.\n *\n * @example\n * ´´´\n * var actions = {\n *   spaceTool: function() {\n *     spaceTool.activateSelection();\n *   },\n *   lassoTool: function() {\n *     lassoTool.activateSelection();\n *   }\n * ];\n *\n * editorActions.register(actions);\n *\n * editorActions.isRegistered('spaceTool'); // true\n * ´´´\n *\n * @param  {Object} actions\n */\n\n\nEditorActions.prototype.register = function (actions, listener) {\n  var self = this;\n\n  if (typeof actions === 'string') {\n    return this._registerAction(actions, listener);\n  }\n\n  forEach(actions, function (listener, action) {\n    self._registerAction(action, listener);\n  });\n};\n/**\n * Registers a listener to an action key\n *\n * @param  {String} action\n * @param  {Function} listener\n */\n\n\nEditorActions.prototype._registerAction = function (action, listener) {\n  if (this.isRegistered(action)) {\n    throw error(action, IS_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = listener;\n};\n/**\n * Unregister an existing action\n *\n * @param {String} action\n */\n\n\nEditorActions.prototype.unregister = function (action) {\n  if (!this.isRegistered(action)) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = undefined;\n};\n/**\n * Returns the number of actions that are currently registered\n *\n * @return {Number}\n */\n\n\nEditorActions.prototype.getActions = function () {\n  return Object.keys(this._actions);\n};\n/**\n * Checks wether the given action is registered\n *\n * @param {String} action\n *\n * @return {Boolean}\n */\n\n\nEditorActions.prototype.isRegistered = function (action) {\n  return !!this._actions[action];\n};\n\nfunction error(action, message) {\n  return new Error(action + ' ' + message);\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/editor-actions/EditorActions.js"],"names":["forEach","isArray","NOT_REGISTERED_ERROR","IS_REGISTERED_ERROR","EditorActions","eventBus","injector","_actions","self","on","_registerDefaultActions","fire","editorActions","$inject","prototype","commandStack","get","modeling","selection","zoomScroll","copyPaste","canvas","rules","mouseTracking","keyboardMove","keyboardMoveSelection","register","undo","redo","selectedElements","copy","context","getHoverContext","paste","opts","stepZoom","value","zoom","length","allowed","elements","removableElements","removeElements","slice","moveCanvas","moveSelection","direction","accelerated","trigger","action","error","actions","listener","_registerAction","isRegistered","unregister","undefined","getActions","Object","keys","message","Error"],"mappings":"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","sourcesContent":["import {\n  forEach,\n  isArray\n} from 'min-dash';\n\nvar NOT_REGISTERED_ERROR = 'is not a registered action',\n    IS_REGISTERED_ERROR = 'is already registered';\n\n\n/**\n * An interface that provides access to modeling actions by decoupling\n * the one who requests the action to be triggered and the trigger itself.\n *\n * It's possible to add new actions by registering them with ´registerAction´\n * and likewise unregister existing ones with ´unregisterAction´.\n *\n *\n * ## Life-Cycle and configuration\n *\n * The editor actions will wait for diagram initialization before\n * registering default actions _and_ firing an `editorActions.init` event.\n *\n * Interested parties may listen to the `editorActions.init` event with\n * low priority to check, which actions got registered. Other components\n * may use the event to register their own actions via `registerAction`.\n *\n * @param {EventBus} eventBus\n * @param {Injector} injector\n */\nexport default function EditorActions(eventBus, injector) {\n\n  // initialize actions\n  this._actions = {};\n\n  var self = this;\n\n  eventBus.on('diagram.init', function() {\n\n    // all diagram modules got loaded; check which ones\n    // are available and register the respective default actions\n    self._registerDefaultActions(injector);\n\n    // ask interested parties to register available editor\n    // actions on diagram initialization\n    eventBus.fire('editorActions.init', {\n      editorActions: self\n    });\n  });\n\n}\n\nEditorActions.$inject = [\n  'eventBus',\n  'injector'\n];\n\n/**\n * Register default actions.\n *\n * @param {Injector} injector\n */\nEditorActions.prototype._registerDefaultActions = function(injector) {\n\n  // (1) retrieve optional components to integrate with\n\n  var commandStack = injector.get('commandStack', false);\n  var modeling = injector.get('modeling', false);\n  var selection = injector.get('selection', false);\n  var zoomScroll = injector.get('zoomScroll', false);\n  var copyPaste = injector.get('copyPaste', false);\n  var canvas = injector.get('canvas', false);\n  var rules = injector.get('rules', false);\n  var mouseTracking = injector.get('mouseTracking', false);\n  var keyboardMove = injector.get('keyboardMove', false);\n  var keyboardMoveSelection = injector.get('keyboardMoveSelection', false);\n\n  // (2) check components and register actions\n\n  if (commandStack) {\n    this.register('undo', function() {\n      commandStack.undo();\n    });\n\n    this.register('redo', function() {\n      commandStack.redo();\n    });\n  }\n\n  if (copyPaste && selection) {\n    this.register('copy', function() {\n      var selectedElements = selection.get();\n\n      copyPaste.copy(selectedElements);\n    });\n  }\n\n  if (mouseTracking && copyPaste) {\n    this.register('paste', function() {\n      var context = mouseTracking.getHoverContext();\n\n      copyPaste.paste(context);\n    });\n  }\n\n  if (zoomScroll) {\n    this.register('stepZoom', function(opts) {\n      zoomScroll.stepZoom(opts.value);\n    });\n  }\n\n  if (canvas) {\n    this.register('zoom', function(opts) {\n      canvas.zoom(opts.value);\n    });\n  }\n\n  if (modeling && selection && rules) {\n    this.register('removeSelection', function() {\n\n      var selectedElements = selection.get();\n\n      if (!selectedElements.length) {\n        return;\n      }\n\n      var allowed = rules.allowed('elements.delete', { elements: selectedElements }),\n          removableElements;\n\n      if (allowed === false) {\n        return;\n      }\n      else if (isArray(allowed)) {\n        removableElements = allowed;\n      }\n      else {\n        removableElements = selectedElements;\n      }\n\n      if (removableElements.length) {\n        modeling.removeElements(removableElements.slice());\n      }\n    });\n  }\n\n  if (keyboardMove) {\n    this.register('moveCanvas', function(opts) {\n      keyboardMove.moveCanvas(opts);\n    });\n  }\n\n  if (keyboardMoveSelection) {\n    this.register('moveSelection', function(opts) {\n      keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);\n    });\n  }\n\n};\n\n\n/**\n * Triggers a registered action\n *\n * @param  {String} action\n * @param  {Object} opts\n *\n * @return {Unknown} Returns what the registered listener returns\n */\nEditorActions.prototype.trigger = function(action, opts) {\n  if (!this._actions[action]) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  return this._actions[action](opts);\n};\n\n\n/**\n * Registers a collections of actions.\n * The key of the object will be the name of the action.\n *\n * @example\n * ´´´\n * var actions = {\n *   spaceTool: function() {\n *     spaceTool.activateSelection();\n *   },\n *   lassoTool: function() {\n *     lassoTool.activateSelection();\n *   }\n * ];\n *\n * editorActions.register(actions);\n *\n * editorActions.isRegistered('spaceTool'); // true\n * ´´´\n *\n * @param  {Object} actions\n */\nEditorActions.prototype.register = function(actions, listener) {\n  var self = this;\n\n  if (typeof actions === 'string') {\n    return this._registerAction(actions, listener);\n  }\n\n  forEach(actions, function(listener, action) {\n    self._registerAction(action, listener);\n  });\n};\n\n/**\n * Registers a listener to an action key\n *\n * @param  {String} action\n * @param  {Function} listener\n */\nEditorActions.prototype._registerAction = function(action, listener) {\n  if (this.isRegistered(action)) {\n    throw error(action, IS_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = listener;\n};\n\n/**\n * Unregister an existing action\n *\n * @param {String} action\n */\nEditorActions.prototype.unregister = function(action) {\n  if (!this.isRegistered(action)) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = undefined;\n};\n\n/**\n * Returns the number of actions that are currently registered\n *\n * @return {Number}\n */\nEditorActions.prototype.getActions = function() {\n  return Object.keys(this._actions);\n};\n\n/**\n * Checks wether the given action is registered\n *\n * @param {String} action\n *\n * @return {Boolean}\n */\nEditorActions.prototype.isRegistered = function(action) {\n  return !!this._actions[action];\n};\n\n\nfunction error(action, message) {\n  return new Error(action + ' ' + message);\n}\n"]},"metadata":{},"sourceType":"module"}