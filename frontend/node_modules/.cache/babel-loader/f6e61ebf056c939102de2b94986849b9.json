{"ast":null,"code":"/**\n * The code in the <project-logo></project-logo> area\n * must not be changed.\n *\n * @see http://bpmn.io/license for more information.\n */\nimport { assign, find, isFunction, isNumber, omit } from 'min-dash';\nimport { domify, query as domQuery, remove as domRemove } from 'min-dom';\nimport { innerSVG } from 'tiny-svg';\nimport Diagram from 'diagram-js';\nimport BpmnModdle from 'bpmn-moddle';\nimport inherits from 'inherits';\nimport { importBpmnDiagram } from './import/Importer';\nimport CoreModule from './core';\nimport TranslateModule from 'diagram-js/lib/i18n/translate';\nimport SelectionModule from 'diagram-js/lib/features/selection';\nimport OverlaysModule from 'diagram-js/lib/features/overlays';\n\nfunction checkValidationError(err) {\n  // check if we can help the user by indicating wrong BPMN 2.0 xml\n  // (in case he or the exporting tool did not get that right)\n  var pattern = /unparsable content <([^>]+)> detected([\\s\\S]*)$/;\n  var match = pattern.exec(err.message);\n\n  if (match) {\n    err.message = 'unparsable content <' + match[1] + '> detected; ' + 'this may indicate an invalid BPMN 2.0 diagram file' + match[2];\n  }\n\n  return err;\n}\n\nvar DEFAULT_OPTIONS = {\n  width: '100%',\n  height: '100%',\n  position: 'relative'\n};\n/**\n * Ensure the passed argument is a proper unit (defaulting to px)\n */\n\nfunction ensureUnit(val) {\n  return val + (isNumber(val) ? 'px' : '');\n}\n/**\n * Find BPMNDiagram in definitions by ID\n *\n * @param {ModdleElement<Definitions>} definitions\n * @param {String} diagramId\n *\n * @return {ModdleElement<BPMNDiagram>|null}\n */\n\n\nfunction findBPMNDiagram(definitions, diagramId) {\n  if (!diagramId) {\n    return null;\n  }\n\n  return find(definitions.diagrams, function (element) {\n    return element.id === diagramId;\n  }) || null;\n}\n/**\n * A viewer for BPMN 2.0 diagrams.\n *\n * Have a look at {@link NavigatedViewer} or {@link Modeler} for bundles that include\n * additional features.\n *\n *\n * ## Extending the Viewer\n *\n * In order to extend the viewer pass extension modules to bootstrap via the\n * `additionalModules` option. An extension module is an object that exposes\n * named services.\n *\n * The following example depicts the integration of a simple\n * logging component that integrates with interaction events:\n *\n *\n * ```javascript\n *\n * // logging component\n * function InteractionLogger(eventBus) {\n *   eventBus.on('element.hover', function(event) {\n *     console.log()\n *   })\n * }\n *\n * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\n *\n * // extension module\n * var extensionModule = {\n *   __init__: [ 'interactionLogger' ],\n *   interactionLogger: [ 'type', InteractionLogger ]\n * };\n *\n * // extend the viewer\n * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });\n * bpmnViewer.importXML(...);\n * ```\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {String|Number} [options.width] the width of the viewer\n * @param {String|Number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\n\n\nexport default function Viewer(options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  this._moddle = this._createModdle(options);\n  this._container = this._createContainer(options);\n  /* <project-logo> */\n\n  addProjectLogo(this._container);\n  /* </project-logo> */\n\n  this._init(this._container, this._moddle, options);\n}\ninherits(Viewer, Diagram);\n/**\n * Parse and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.parse.start (about to read model from xml)\n *   * import.parse.complete (model read; may have worked or not)\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *   * import.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {String} xml the BPMN 2.0 xml\n * @param {ModdleElement<BPMNDiagram>|String} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n * @param {Function} [done] invoked with (err, warnings=[])\n */\n\nViewer.prototype.importXML = function (xml, bpmnDiagram, done) {\n  if (isFunction(bpmnDiagram)) {\n    done = bpmnDiagram;\n    bpmnDiagram = null;\n  } // done is optional\n\n\n  done = done || function () {};\n\n  var self = this; // hook in pre-parse listeners +\n  // allow xml manipulation\n\n  xml = this._emit('import.parse.start', {\n    xml: xml\n  }) || xml;\n\n  this._moddle.fromXML(xml, 'bpmn:Definitions', function (err, definitions, context) {\n    // hook in post parse listeners +\n    // allow definitions manipulation\n    definitions = self._emit('import.parse.complete', {\n      error: err,\n      definitions: definitions,\n      context: context\n    }) || definitions;\n    var parseWarnings = context.warnings;\n\n    if (err) {\n      err = checkValidationError(err);\n\n      self._emit('import.done', {\n        error: err,\n        warnings: parseWarnings\n      });\n\n      return done(err, parseWarnings);\n    }\n\n    self.importDefinitions(definitions, bpmnDiagram, function (err, importWarnings) {\n      var allWarnings = [].concat(parseWarnings, importWarnings || []);\n\n      self._emit('import.done', {\n        error: err,\n        warnings: allWarnings\n      });\n\n      done(err, allWarnings);\n    });\n  });\n};\n/**\n * Import parsed definitions and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {ModdleElement<Definitions>} definitions parsed BPMN 2.0 definitions\n * @param {ModdleElement<BPMNDiagram>|String} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n * @param {Function} [done] invoked with (err, warnings=[])\n */\n\n\nViewer.prototype.importDefinitions = function (definitions, bpmnDiagram, done) {\n  if (isFunction(bpmnDiagram)) {\n    done = bpmnDiagram;\n    bpmnDiagram = null;\n  } // done is optional\n\n\n  done = done || function () {};\n\n  this._setDefinitions(definitions);\n\n  return this.open(bpmnDiagram, done);\n};\n/**\n * Open diagram of previously imported XML.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During switch the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {String|ModdleElement<BPMNDiagram>} [bpmnDiagramOrId] id or the diagram to open\n * @param {Function} [done] invoked with (err, warnings=[])\n */\n\n\nViewer.prototype.open = function (bpmnDiagramOrId, done) {\n  if (isFunction(bpmnDiagramOrId)) {\n    done = bpmnDiagramOrId;\n    bpmnDiagramOrId = null;\n  }\n\n  var definitions = this._definitions;\n  var bpmnDiagram = bpmnDiagramOrId; // done is optional\n\n  done = done || function () {};\n\n  if (!definitions) {\n    return done(new Error('no XML imported'));\n  }\n\n  if (typeof bpmnDiagramOrId === 'string') {\n    bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);\n\n    if (!bpmnDiagram) {\n      return done(new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found'));\n    }\n  } // clear existing rendered diagram\n  // catch synchronous exceptions during #clear()\n\n\n  try {\n    this.clear();\n  } catch (error) {\n    return done(error);\n  } // perform graphical import\n\n\n  return importBpmnDiagram(this, definitions, bpmnDiagram, done);\n};\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * a BPMN 2.0 XML document.\n *\n * ## Life-Cycle Events\n *\n * During XML saving the viewer will fire life-cycle events:\n *\n *   * saveXML.start (before serialization)\n *   * saveXML.serialized (after xml generation)\n *   * saveXML.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {Object} [options] export options\n * @param {Boolean} [options.format=false] output formated XML\n * @param {Boolean} [options.preamble=true] output preamble\n *\n * @param {Function} done invoked with (err, xml)\n */\n\n\nViewer.prototype.saveXML = function (options, done) {\n  if (!done) {\n    done = options;\n    options = {};\n  }\n\n  var self = this;\n  var definitions = this._definitions;\n\n  if (!definitions) {\n    return done(new Error('no definitions loaded'));\n  } // allow to fiddle around with definitions\n\n\n  definitions = this._emit('saveXML.start', {\n    definitions: definitions\n  }) || definitions;\n\n  this._moddle.toXML(definitions, options, function (err, xml) {\n    try {\n      xml = self._emit('saveXML.serialized', {\n        error: err,\n        xml: xml\n      }) || xml;\n\n      self._emit('saveXML.done', {\n        error: err,\n        xml: xml\n      });\n    } catch (e) {\n      console.error('error in saveXML life-cycle listener', e);\n    }\n\n    done(err, xml);\n  });\n};\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * an SVG image.\n *\n * ## Life-Cycle Events\n *\n * During SVG saving the viewer will fire life-cycle events:\n *\n *   * saveSVG.start (before serialization)\n *   * saveSVG.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {Object} [options]\n * @param {Function} done invoked with (err, svgStr)\n */\n\n\nViewer.prototype.saveSVG = function (options, done) {\n  if (!done) {\n    done = options;\n    options = {};\n  }\n\n  this._emit('saveSVG.start');\n\n  var svg, err;\n\n  try {\n    var canvas = this.get('canvas');\n    var contentNode = canvas.getDefaultLayer(),\n        defsNode = domQuery('defs', canvas._svg);\n    var contents = innerSVG(contentNode),\n        defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';\n    var bbox = contentNode.getBBox();\n    svg = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + '<!-- created with bpmn-js / http://bpmn.io -->\\n' + '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n' + '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'width=\"' + bbox.width + '\" height=\"' + bbox.height + '\" ' + 'viewBox=\"' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '\" version=\"1.1\">' + defs + contents + '</svg>';\n  } catch (e) {\n    err = e;\n  }\n\n  this._emit('saveSVG.done', {\n    error: err,\n    svg: svg\n  });\n\n  done(err, svg);\n};\n/**\n * Get a named diagram service.\n *\n * @example\n *\n * var elementRegistry = viewer.get('elementRegistry');\n * var startEventShape = elementRegistry.get('StartEvent_1');\n *\n * @param {String} name\n *\n * @return {Object} diagram service instance\n *\n * @method Viewer#get\n */\n\n/**\n * Invoke a function in the context of this viewer.\n *\n * @example\n *\n * viewer.invoke(function(elementRegistry) {\n *   var startEventShape = elementRegistry.get('StartEvent_1');\n * });\n *\n * @param {Function} fn to be invoked\n *\n * @return {Object} the functions return value\n *\n * @method Viewer#invoke\n */\n\n\nViewer.prototype._setDefinitions = function (definitions) {\n  this._definitions = definitions;\n};\n\nViewer.prototype.getModules = function () {\n  return this._modules;\n};\n/**\n * Remove all drawn elements from the viewer.\n *\n * After calling this method the viewer can still\n * be reused for opening another diagram.\n *\n * @method Viewer#clear\n */\n\n\nViewer.prototype.clear = function () {\n  // remove businessObject#di binding\n  //\n  // this is necessary, as we establish the bindings\n  // in the BpmnTreeWalker (and assume none are given\n  // on reimport)\n  this.get('elementRegistry').forEach(function (element) {\n    var bo = element.businessObject;\n\n    if (bo && bo.di) {\n      delete bo.di;\n    }\n  }); // remove drawn elements\n\n  Diagram.prototype.clear.call(this);\n};\n/**\n * Destroy the viewer instance and remove all its\n * remainders from the document tree.\n */\n\n\nViewer.prototype.destroy = function () {\n  // diagram destroy\n  Diagram.prototype.destroy.call(this); // dom detach\n\n  domRemove(this._container);\n};\n/**\n * Register an event listener\n *\n * Remove a previously added listener via {@link #off(event, callback)}.\n *\n * @param {String} event\n * @param {Number} [priority]\n * @param {Function} callback\n * @param {Object} [that]\n */\n\n\nViewer.prototype.on = function (event, priority, callback, target) {\n  return this.get('eventBus').on(event, priority, callback, target);\n};\n/**\n * De-register an event listener\n *\n * @param {String} event\n * @param {Function} callback\n */\n\n\nViewer.prototype.off = function (event, callback) {\n  this.get('eventBus').off(event, callback);\n};\n\nViewer.prototype.attachTo = function (parentNode) {\n  if (!parentNode) {\n    throw new Error('parentNode required');\n  } // ensure we detach from the\n  // previous, old parent\n\n\n  this.detach(); // unwrap jQuery if provided\n\n  if (parentNode.get && parentNode.constructor.prototype.jquery) {\n    parentNode = parentNode.get(0);\n  }\n\n  if (typeof parentNode === 'string') {\n    parentNode = domQuery(parentNode);\n  }\n\n  parentNode.appendChild(this._container);\n\n  this._emit('attach', {});\n\n  this.get('canvas').resized();\n};\n\nViewer.prototype.getDefinitions = function () {\n  return this._definitions;\n};\n\nViewer.prototype.detach = function () {\n  var container = this._container,\n      parentNode = container.parentNode;\n\n  if (!parentNode) {\n    return;\n  }\n\n  this._emit('detach', {});\n\n  parentNode.removeChild(container);\n};\n\nViewer.prototype._init = function (container, moddle, options) {\n  var baseModules = options.modules || this.getModules(),\n      additionalModules = options.additionalModules || [],\n      staticModules = [{\n    bpmnjs: ['value', this],\n    moddle: ['value', moddle]\n  }];\n  var diagramModules = [].concat(staticModules, baseModules, additionalModules);\n  var diagramOptions = assign(omit(options, ['additionalModules']), {\n    canvas: assign({}, options.canvas, {\n      container: container\n    }),\n    modules: diagramModules\n  }); // invoke diagram constructor\n\n  Diagram.call(this, diagramOptions);\n\n  if (options && options.container) {\n    this.attachTo(options.container);\n  }\n};\n/**\n * Emit an event on the underlying {@link EventBus}\n *\n * @param  {String} type\n * @param  {Object} event\n *\n * @return {Object} event processing result (if any)\n */\n\n\nViewer.prototype._emit = function (type, event) {\n  return this.get('eventBus').fire(type, event);\n};\n\nViewer.prototype._createContainer = function (options) {\n  var container = domify('<div class=\"bjs-container\"></div>');\n  assign(container.style, {\n    width: ensureUnit(options.width),\n    height: ensureUnit(options.height),\n    position: options.position\n  });\n  return container;\n};\n\nViewer.prototype._createModdle = function (options) {\n  var moddleOptions = assign({}, this._moddleExtensions, options.moddleExtensions);\n  return new BpmnModdle(moddleOptions);\n}; // modules the viewer is composed of\n\n\nViewer.prototype._modules = [CoreModule, TranslateModule, SelectionModule, OverlaysModule]; // default moddle extensions the viewer is composed of\n\nViewer.prototype._moddleExtensions = {};\n/* <project-logo> */\n\nimport { open as openPoweredBy, BPMNIO_IMG } from './util/PoweredByUtil';\nimport { event as domEvent } from 'min-dom';\n/**\n * Adds the project logo to the diagram container as\n * required by the bpmn.io license.\n *\n * @see http://bpmn.io/license\n *\n * @param {Element} container\n */\n\nfunction addProjectLogo(container) {\n  var img = BPMNIO_IMG;\n  var linkMarkup = '<a href=\"http://bpmn.io\" ' + 'target=\"_blank\" ' + 'class=\"bjs-powered-by\" ' + 'title=\"Powered by bpmn.io\" ' + 'style=\"position: absolute; bottom: 15px; right: 15px; z-index: 100\">' + img + '</a>';\n  var linkElement = domify(linkMarkup);\n  container.appendChild(linkElement);\n  domEvent.bind(linkElement, 'click', function (event) {\n    openPoweredBy();\n    event.preventDefault();\n  });\n}\n/* </project-logo> */","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/Viewer.js"],"names":["assign","find","isFunction","isNumber","omit","domify","query","domQuery","remove","domRemove","innerSVG","Diagram","BpmnModdle","inherits","importBpmnDiagram","CoreModule","TranslateModule","SelectionModule","OverlaysModule","checkValidationError","err","pattern","match","exec","message","DEFAULT_OPTIONS","width","height","position","ensureUnit","val","findBPMNDiagram","definitions","diagramId","diagrams","element","id","Viewer","options","_moddle","_createModdle","_container","_createContainer","addProjectLogo","_init","prototype","importXML","xml","bpmnDiagram","done","self","_emit","fromXML","context","error","parseWarnings","warnings","importDefinitions","importWarnings","allWarnings","concat","_setDefinitions","open","bpmnDiagramOrId","_definitions","Error","clear","saveXML","toXML","e","console","saveSVG","svg","canvas","get","contentNode","getDefaultLayer","defsNode","_svg","contents","defs","bbox","getBBox","x","y","getModules","_modules","forEach","bo","businessObject","di","call","destroy","on","event","priority","callback","target","off","attachTo","parentNode","detach","constructor","jquery","appendChild","resized","getDefinitions","container","removeChild","moddle","baseModules","modules","additionalModules","staticModules","bpmnjs","diagramModules","diagramOptions","type","fire","style","moddleOptions","_moddleExtensions","moddleExtensions","openPoweredBy","BPMNIO_IMG","domEvent","img","linkMarkup","linkElement","bind","preventDefault"],"mappings":"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","sourcesContent":["/**\n * The code in the <project-logo></project-logo> area\n * must not be changed.\n *\n * @see http://bpmn.io/license for more information.\n */\nimport {\n  assign,\n  find,\n  isFunction,\n  isNumber,\n  omit\n} from 'min-dash';\n\nimport {\n  domify,\n  query as domQuery,\n  remove as domRemove\n} from 'min-dom';\n\nimport {\n  innerSVG\n} from 'tiny-svg';\n\nimport Diagram from 'diagram-js';\nimport BpmnModdle from 'bpmn-moddle';\n\nimport inherits from 'inherits';\n\nimport {\n  importBpmnDiagram\n} from './import/Importer';\n\nimport CoreModule from './core';\nimport TranslateModule from 'diagram-js/lib/i18n/translate';\nimport SelectionModule from 'diagram-js/lib/features/selection';\nimport OverlaysModule from 'diagram-js/lib/features/overlays';\n\n\nfunction checkValidationError(err) {\n\n  // check if we can help the user by indicating wrong BPMN 2.0 xml\n  // (in case he or the exporting tool did not get that right)\n\n  var pattern = /unparsable content <([^>]+)> detected([\\s\\S]*)$/;\n  var match = pattern.exec(err.message);\n\n  if (match) {\n    err.message =\n      'unparsable content <' + match[1] + '> detected; ' +\n      'this may indicate an invalid BPMN 2.0 diagram file' + match[2];\n  }\n\n  return err;\n}\n\nvar DEFAULT_OPTIONS = {\n  width: '100%',\n  height: '100%',\n  position: 'relative'\n};\n\n\n/**\n * Ensure the passed argument is a proper unit (defaulting to px)\n */\nfunction ensureUnit(val) {\n  return val + (isNumber(val) ? 'px' : '');\n}\n\n\n/**\n * Find BPMNDiagram in definitions by ID\n *\n * @param {ModdleElement<Definitions>} definitions\n * @param {String} diagramId\n *\n * @return {ModdleElement<BPMNDiagram>|null}\n */\nfunction findBPMNDiagram(definitions, diagramId) {\n  if (!diagramId) {\n    return null;\n  }\n\n  return find(definitions.diagrams, function(element) {\n    return element.id === diagramId;\n  }) || null;\n}\n\n/**\n * A viewer for BPMN 2.0 diagrams.\n *\n * Have a look at {@link NavigatedViewer} or {@link Modeler} for bundles that include\n * additional features.\n *\n *\n * ## Extending the Viewer\n *\n * In order to extend the viewer pass extension modules to bootstrap via the\n * `additionalModules` option. An extension module is an object that exposes\n * named services.\n *\n * The following example depicts the integration of a simple\n * logging component that integrates with interaction events:\n *\n *\n * ```javascript\n *\n * // logging component\n * function InteractionLogger(eventBus) {\n *   eventBus.on('element.hover', function(event) {\n *     console.log()\n *   })\n * }\n *\n * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\n *\n * // extension module\n * var extensionModule = {\n *   __init__: [ 'interactionLogger' ],\n *   interactionLogger: [ 'type', InteractionLogger ]\n * };\n *\n * // extend the viewer\n * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });\n * bpmnViewer.importXML(...);\n * ```\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {String|Number} [options.width] the width of the viewer\n * @param {String|Number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\nexport default function Viewer(options) {\n\n  options = assign({}, DEFAULT_OPTIONS, options);\n\n  this._moddle = this._createModdle(options);\n\n  this._container = this._createContainer(options);\n\n  /* <project-logo> */\n\n  addProjectLogo(this._container);\n\n  /* </project-logo> */\n\n  this._init(this._container, this._moddle, options);\n}\n\ninherits(Viewer, Diagram);\n\n\n/**\n * Parse and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.parse.start (about to read model from xml)\n *   * import.parse.complete (model read; may have worked or not)\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *   * import.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {String} xml the BPMN 2.0 xml\n * @param {ModdleElement<BPMNDiagram>|String} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n * @param {Function} [done] invoked with (err, warnings=[])\n */\nViewer.prototype.importXML = function(xml, bpmnDiagram, done) {\n\n  if (isFunction(bpmnDiagram)) {\n    done = bpmnDiagram;\n    bpmnDiagram = null;\n  }\n\n  // done is optional\n  done = done || function() {};\n\n  var self = this;\n\n  // hook in pre-parse listeners +\n  // allow xml manipulation\n  xml = this._emit('import.parse.start', { xml: xml }) || xml;\n\n  this._moddle.fromXML(xml, 'bpmn:Definitions', function(err, definitions, context) {\n\n    // hook in post parse listeners +\n    // allow definitions manipulation\n    definitions = self._emit('import.parse.complete', {\n      error: err,\n      definitions: definitions,\n      context: context\n    }) || definitions;\n\n    var parseWarnings = context.warnings;\n\n    if (err) {\n      err = checkValidationError(err);\n\n      self._emit('import.done', { error: err, warnings: parseWarnings });\n\n      return done(err, parseWarnings);\n    }\n\n    self.importDefinitions(definitions, bpmnDiagram, function(err, importWarnings) {\n      var allWarnings = [].concat(parseWarnings, importWarnings || []);\n\n      self._emit('import.done', { error: err, warnings: allWarnings });\n\n      done(err, allWarnings);\n    });\n  });\n};\n\n/**\n * Import parsed definitions and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {ModdleElement<Definitions>} definitions parsed BPMN 2.0 definitions\n * @param {ModdleElement<BPMNDiagram>|String} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n * @param {Function} [done] invoked with (err, warnings=[])\n */\nViewer.prototype.importDefinitions = function(definitions, bpmnDiagram, done) {\n\n  if (isFunction(bpmnDiagram)) {\n    done = bpmnDiagram;\n    bpmnDiagram = null;\n  }\n\n  // done is optional\n  done = done || function() {};\n\n  this._setDefinitions(definitions);\n\n  return this.open(bpmnDiagram, done);\n};\n\n/**\n * Open diagram of previously imported XML.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During switch the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {String|ModdleElement<BPMNDiagram>} [bpmnDiagramOrId] id or the diagram to open\n * @param {Function} [done] invoked with (err, warnings=[])\n */\nViewer.prototype.open = function(bpmnDiagramOrId, done) {\n\n  if (isFunction(bpmnDiagramOrId)) {\n    done = bpmnDiagramOrId;\n    bpmnDiagramOrId = null;\n  }\n\n  var definitions = this._definitions;\n  var bpmnDiagram = bpmnDiagramOrId;\n\n  // done is optional\n  done = done || function() {};\n\n  if (!definitions) {\n    return done(new Error('no XML imported'));\n  }\n\n  if (typeof bpmnDiagramOrId === 'string') {\n    bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);\n\n    if (!bpmnDiagram) {\n      return done(new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found'));\n    }\n  }\n\n  // clear existing rendered diagram\n  // catch synchronous exceptions during #clear()\n  try {\n    this.clear();\n  } catch (error) {\n    return done(error);\n  }\n\n  // perform graphical import\n  return importBpmnDiagram(this, definitions, bpmnDiagram, done);\n};\n\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * a BPMN 2.0 XML document.\n *\n * ## Life-Cycle Events\n *\n * During XML saving the viewer will fire life-cycle events:\n *\n *   * saveXML.start (before serialization)\n *   * saveXML.serialized (after xml generation)\n *   * saveXML.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {Object} [options] export options\n * @param {Boolean} [options.format=false] output formated XML\n * @param {Boolean} [options.preamble=true] output preamble\n *\n * @param {Function} done invoked with (err, xml)\n */\nViewer.prototype.saveXML = function(options, done) {\n\n  if (!done) {\n    done = options;\n    options = {};\n  }\n\n  var self = this;\n\n  var definitions = this._definitions;\n\n  if (!definitions) {\n    return done(new Error('no definitions loaded'));\n  }\n\n  // allow to fiddle around with definitions\n  definitions = this._emit('saveXML.start', {\n    definitions: definitions\n  }) || definitions;\n\n  this._moddle.toXML(definitions, options, function(err, xml) {\n\n    try {\n      xml = self._emit('saveXML.serialized', {\n        error: err,\n        xml: xml\n      }) || xml;\n\n      self._emit('saveXML.done', {\n        error: err,\n        xml: xml\n      });\n    } catch (e) {\n      console.error('error in saveXML life-cycle listener', e);\n    }\n\n    done(err, xml);\n  });\n};\n\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * an SVG image.\n *\n * ## Life-Cycle Events\n *\n * During SVG saving the viewer will fire life-cycle events:\n *\n *   * saveSVG.start (before serialization)\n *   * saveSVG.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {Object} [options]\n * @param {Function} done invoked with (err, svgStr)\n */\nViewer.prototype.saveSVG = function(options, done) {\n\n  if (!done) {\n    done = options;\n    options = {};\n  }\n\n  this._emit('saveSVG.start');\n\n  var svg, err;\n\n  try {\n    var canvas = this.get('canvas');\n\n    var contentNode = canvas.getDefaultLayer(),\n        defsNode = domQuery('defs', canvas._svg);\n\n    var contents = innerSVG(contentNode),\n        defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';\n\n    var bbox = contentNode.getBBox();\n\n    svg =\n      '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n      '<!-- created with bpmn-js / http://bpmn.io -->\\n' +\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n' +\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' +\n           'width=\"' + bbox.width + '\" height=\"' + bbox.height + '\" ' +\n           'viewBox=\"' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '\" version=\"1.1\">' +\n        defs + contents +\n      '</svg>';\n  } catch (e) {\n    err = e;\n  }\n\n  this._emit('saveSVG.done', {\n    error: err,\n    svg: svg\n  });\n\n  done(err, svg);\n};\n\n/**\n * Get a named diagram service.\n *\n * @example\n *\n * var elementRegistry = viewer.get('elementRegistry');\n * var startEventShape = elementRegistry.get('StartEvent_1');\n *\n * @param {String} name\n *\n * @return {Object} diagram service instance\n *\n * @method Viewer#get\n */\n\n/**\n * Invoke a function in the context of this viewer.\n *\n * @example\n *\n * viewer.invoke(function(elementRegistry) {\n *   var startEventShape = elementRegistry.get('StartEvent_1');\n * });\n *\n * @param {Function} fn to be invoked\n *\n * @return {Object} the functions return value\n *\n * @method Viewer#invoke\n */\n\n\nViewer.prototype._setDefinitions = function(definitions) {\n  this._definitions = definitions;\n};\n\nViewer.prototype.getModules = function() {\n  return this._modules;\n};\n\n/**\n * Remove all drawn elements from the viewer.\n *\n * After calling this method the viewer can still\n * be reused for opening another diagram.\n *\n * @method Viewer#clear\n */\nViewer.prototype.clear = function() {\n\n  // remove businessObject#di binding\n  //\n  // this is necessary, as we establish the bindings\n  // in the BpmnTreeWalker (and assume none are given\n  // on reimport)\n  this.get('elementRegistry').forEach(function(element) {\n    var bo = element.businessObject;\n\n    if (bo && bo.di) {\n      delete bo.di;\n    }\n  });\n\n  // remove drawn elements\n  Diagram.prototype.clear.call(this);\n};\n\n/**\n * Destroy the viewer instance and remove all its\n * remainders from the document tree.\n */\nViewer.prototype.destroy = function() {\n\n  // diagram destroy\n  Diagram.prototype.destroy.call(this);\n\n  // dom detach\n  domRemove(this._container);\n};\n\n/**\n * Register an event listener\n *\n * Remove a previously added listener via {@link #off(event, callback)}.\n *\n * @param {String} event\n * @param {Number} [priority]\n * @param {Function} callback\n * @param {Object} [that]\n */\nViewer.prototype.on = function(event, priority, callback, target) {\n  return this.get('eventBus').on(event, priority, callback, target);\n};\n\n/**\n * De-register an event listener\n *\n * @param {String} event\n * @param {Function} callback\n */\nViewer.prototype.off = function(event, callback) {\n  this.get('eventBus').off(event, callback);\n};\n\nViewer.prototype.attachTo = function(parentNode) {\n\n  if (!parentNode) {\n    throw new Error('parentNode required');\n  }\n\n  // ensure we detach from the\n  // previous, old parent\n  this.detach();\n\n  // unwrap jQuery if provided\n  if (parentNode.get && parentNode.constructor.prototype.jquery) {\n    parentNode = parentNode.get(0);\n  }\n\n  if (typeof parentNode === 'string') {\n    parentNode = domQuery(parentNode);\n  }\n\n  parentNode.appendChild(this._container);\n\n  this._emit('attach', {});\n\n  this.get('canvas').resized();\n};\n\nViewer.prototype.getDefinitions = function() {\n  return this._definitions;\n};\n\nViewer.prototype.detach = function() {\n\n  var container = this._container,\n      parentNode = container.parentNode;\n\n  if (!parentNode) {\n    return;\n  }\n\n  this._emit('detach', {});\n\n  parentNode.removeChild(container);\n};\n\nViewer.prototype._init = function(container, moddle, options) {\n\n  var baseModules = options.modules || this.getModules(),\n      additionalModules = options.additionalModules || [],\n      staticModules = [\n        {\n          bpmnjs: [ 'value', this ],\n          moddle: [ 'value', moddle ]\n        }\n      ];\n\n  var diagramModules = [].concat(staticModules, baseModules, additionalModules);\n\n  var diagramOptions = assign(omit(options, [ 'additionalModules' ]), {\n    canvas: assign({}, options.canvas, { container: container }),\n    modules: diagramModules\n  });\n\n  // invoke diagram constructor\n  Diagram.call(this, diagramOptions);\n\n  if (options && options.container) {\n    this.attachTo(options.container);\n  }\n};\n\n/**\n * Emit an event on the underlying {@link EventBus}\n *\n * @param  {String} type\n * @param  {Object} event\n *\n * @return {Object} event processing result (if any)\n */\nViewer.prototype._emit = function(type, event) {\n  return this.get('eventBus').fire(type, event);\n};\n\nViewer.prototype._createContainer = function(options) {\n\n  var container = domify('<div class=\"bjs-container\"></div>');\n\n  assign(container.style, {\n    width: ensureUnit(options.width),\n    height: ensureUnit(options.height),\n    position: options.position\n  });\n\n  return container;\n};\n\nViewer.prototype._createModdle = function(options) {\n  var moddleOptions = assign({}, this._moddleExtensions, options.moddleExtensions);\n\n  return new BpmnModdle(moddleOptions);\n};\n\n// modules the viewer is composed of\nViewer.prototype._modules = [\n  CoreModule,\n  TranslateModule,\n  SelectionModule,\n  OverlaysModule\n];\n\n// default moddle extensions the viewer is composed of\nViewer.prototype._moddleExtensions = {};\n\n/* <project-logo> */\n\nimport {\n  open as openPoweredBy,\n  BPMNIO_IMG\n} from './util/PoweredByUtil';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\n/**\n * Adds the project logo to the diagram container as\n * required by the bpmn.io license.\n *\n * @see http://bpmn.io/license\n *\n * @param {Element} container\n */\nfunction addProjectLogo(container) {\n  var img = BPMNIO_IMG;\n\n  var linkMarkup =\n    '<a href=\"http://bpmn.io\" ' +\n       'target=\"_blank\" ' +\n       'class=\"bjs-powered-by\" ' +\n       'title=\"Powered by bpmn.io\" ' +\n       'style=\"position: absolute; bottom: 15px; right: 15px; z-index: 100\">' +\n      img +\n    '</a>';\n\n  var linkElement = domify(linkMarkup);\n\n  container.appendChild(linkElement);\n\n  domEvent.bind(linkElement, 'click', function(event) {\n    openPoweredBy();\n\n    event.preventDefault();\n  });\n}\n\n/* </project-logo> */"]},"metadata":{},"sourceType":"module"}