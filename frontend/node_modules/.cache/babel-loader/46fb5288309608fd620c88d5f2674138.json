{"ast":null,"code":"import { assign } from 'min-dash';\nvar round = Math.round;\n/**\n * A handler that implements reversible addition of shapes.\n *\n * @param {canvas} Canvas\n */\n\nexport default function CreateShapeHandler(canvas) {\n  this._canvas = canvas;\n}\nCreateShapeHandler.$inject = ['canvas']; // api //////////////////////\n\n/**\n * Appends a shape to a target shape\n *\n * @param {Object} context\n * @param {djs.model.Base} context.parent the parent object\n * @param {Point} context.position position of the new element\n */\n\nCreateShapeHandler.prototype.execute = function (context) {\n  var shape = context.shape,\n      positionOrBounds = context.position,\n      parent = context.parent,\n      parentIndex = context.parentIndex;\n\n  if (!parent) {\n    throw new Error('parent required');\n  }\n\n  if (!positionOrBounds) {\n    throw new Error('position required');\n  } // (1) add at event center position _or_ at given bounds\n\n\n  if (positionOrBounds.width !== undefined) {\n    assign(shape, positionOrBounds);\n  } else {\n    assign(shape, {\n      x: positionOrBounds.x - round(shape.width / 2),\n      y: positionOrBounds.y - round(shape.height / 2)\n    });\n  } // (2) add to canvas\n\n\n  this._canvas.addShape(shape, parent, parentIndex);\n\n  return shape;\n};\n/**\n * Undo append by removing the shape\n */\n\n\nCreateShapeHandler.prototype.revert = function (context) {\n  // (3) remove form canvas\n  this._canvas.removeShape(context.shape);\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/modeling/cmd/CreateShapeHandler.js"],"names":["assign","round","Math","CreateShapeHandler","canvas","_canvas","$inject","prototype","execute","context","shape","positionOrBounds","position","parent","parentIndex","Error","width","undefined","x","y","height","addShape","revert","removeShape"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AAEA,IAAIC,KAAK,GAAGC,IAAI,CAACD,KAAjB;AAGA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASE,kBAAT,CAA4BC,MAA5B,EAAoC;AACjD,OAAKC,OAAL,GAAeD,MAAf;AACD;AAEDD,kBAAkB,CAACG,OAAnB,GAA6B,CAAE,QAAF,CAA7B,C,CAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,kBAAkB,CAACI,SAAnB,CAA6BC,OAA7B,GAAuC,UAASC,OAAT,EAAkB;AAEvD,MAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;AAAA,MACIC,gBAAgB,GAAGF,OAAO,CAACG,QAD/B;AAAA,MAEIC,MAAM,GAAGJ,OAAO,CAACI,MAFrB;AAAA,MAGIC,WAAW,GAAGL,OAAO,CAACK,WAH1B;;AAKA,MAAI,CAACD,MAAL,EAAa;AACX,UAAM,IAAIE,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,MAAI,CAACJ,gBAAL,EAAuB;AACrB,UAAM,IAAII,KAAJ,CAAU,mBAAV,CAAN;AACD,GAbsD,CAevD;;;AACA,MAAIJ,gBAAgB,CAACK,KAAjB,KAA2BC,SAA/B,EAA0C;AACxCjB,IAAAA,MAAM,CAACU,KAAD,EAAQC,gBAAR,CAAN;AACD,GAFD,MAEO;AACLX,IAAAA,MAAM,CAACU,KAAD,EAAQ;AACZQ,MAAAA,CAAC,EAAEP,gBAAgB,CAACO,CAAjB,GAAqBjB,KAAK,CAACS,KAAK,CAACM,KAAN,GAAc,CAAf,CADjB;AAEZG,MAAAA,CAAC,EAAER,gBAAgB,CAACQ,CAAjB,GAAqBlB,KAAK,CAACS,KAAK,CAACU,MAAN,GAAe,CAAhB;AAFjB,KAAR,CAAN;AAID,GAvBsD,CAyBvD;;;AACA,OAAKf,OAAL,CAAagB,QAAb,CAAsBX,KAAtB,EAA6BG,MAA7B,EAAqCC,WAArC;;AAEA,SAAOJ,KAAP;AACD,CA7BD;AAgCA;AACA;AACA;;;AACAP,kBAAkB,CAACI,SAAnB,CAA6Be,MAA7B,GAAsC,UAASb,OAAT,EAAkB;AAEtD;AACA,OAAKJ,OAAL,CAAakB,WAAb,CAAyBd,OAAO,CAACC,KAAjC;AACD,CAJD","sourcesContent":["import { assign } from 'min-dash';\n\nvar round = Math.round;\n\n\n/**\n * A handler that implements reversible addition of shapes.\n *\n * @param {canvas} Canvas\n */\nexport default function CreateShapeHandler(canvas) {\n  this._canvas = canvas;\n}\n\nCreateShapeHandler.$inject = [ 'canvas' ];\n\n\n// api //////////////////////\n\n\n/**\n * Appends a shape to a target shape\n *\n * @param {Object} context\n * @param {djs.model.Base} context.parent the parent object\n * @param {Point} context.position position of the new element\n */\nCreateShapeHandler.prototype.execute = function(context) {\n\n  var shape = context.shape,\n      positionOrBounds = context.position,\n      parent = context.parent,\n      parentIndex = context.parentIndex;\n\n  if (!parent) {\n    throw new Error('parent required');\n  }\n\n  if (!positionOrBounds) {\n    throw new Error('position required');\n  }\n\n  // (1) add at event center position _or_ at given bounds\n  if (positionOrBounds.width !== undefined) {\n    assign(shape, positionOrBounds);\n  } else {\n    assign(shape, {\n      x: positionOrBounds.x - round(shape.width / 2),\n      y: positionOrBounds.y - round(shape.height / 2)\n    });\n  }\n\n  // (2) add to canvas\n  this._canvas.addShape(shape, parent, parentIndex);\n\n  return shape;\n};\n\n\n/**\n * Undo append by removing the shape\n */\nCreateShapeHandler.prototype.revert = function(context) {\n\n  // (3) remove form canvas\n  this._canvas.removeShape(context.shape);\n};"]},"metadata":{},"sourceType":"module"}