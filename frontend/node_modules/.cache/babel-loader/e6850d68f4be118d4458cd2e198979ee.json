{"ast":null,"code":"import { assign, filter, groupBy } from 'min-dash';\nvar LOW_PRIORITY = 500,\n    MEDIUM_PRIORITY = 1250,\n    HIGH_PRIORITY = 1500;\nimport { getOriginal as getOriginalEvent } from '../../util/Event';\nvar round = Math.round;\n\nfunction mid(element) {\n  return {\n    x: element.x + round(element.width / 2),\n    y: element.y + round(element.height / 2)\n  };\n}\n/**\n * A plugin that makes shapes draggable / droppable.\n *\n * @param {EventBus} eventBus\n * @param {Dragging} dragging\n * @param {Modeling} modeling\n * @param {Selection} selection\n * @param {Rules} rules\n */\n\n\nexport default function MoveEvents(eventBus, dragging, modeling, selection, rules) {\n  // rules\n  function canMove(shapes, delta, position, target) {\n    return rules.allowed('elements.move', {\n      shapes: shapes,\n      delta: delta,\n      position: position,\n      target: target\n    });\n  } // move events\n  // assign a high priority to this handler to setup the environment\n  // others may hook up later, e.g. at default priority and modify\n  // the move environment.\n  //\n  // This sets up the context with\n  //\n  // * shape: the primary shape being moved\n  // * shapes: a list of shapes to be moved\n  // * validatedShapes: a list of shapes that are being checked\n  //                    against the rules before and during move\n  //\n\n\n  eventBus.on('shape.move.start', HIGH_PRIORITY, function (event) {\n    var context = event.context,\n        shape = event.shape,\n        shapes = selection.get().slice(); // move only single shape if the dragged element\n    // is not part of the current selection\n\n    if (shapes.indexOf(shape) === -1) {\n      shapes = [shape];\n    } // ensure we remove nested elements in the collection\n    // and add attachers for a proper dragger\n\n\n    shapes = removeNested(shapes); // attach shapes to drag context\n\n    assign(context, {\n      shapes: shapes,\n      validatedShapes: shapes,\n      shape: shape\n    });\n  }); // assign a high priority to this handler to setup the environment\n  // others may hook up later, e.g. at default priority and modify\n  // the move environment\n  //\n\n  eventBus.on('shape.move.start', MEDIUM_PRIORITY, function (event) {\n    var context = event.context,\n        validatedShapes = context.validatedShapes,\n        canExecute;\n    canExecute = context.canExecute = canMove(validatedShapes); // check if we can move the elements\n\n    if (!canExecute) {\n      return false;\n    }\n  }); // assign a low priority to this handler\n  // to let others modify the move event before we update\n  // the context\n  //\n\n  eventBus.on('shape.move.move', LOW_PRIORITY, function (event) {\n    var context = event.context,\n        validatedShapes = context.validatedShapes,\n        hover = event.hover,\n        delta = {\n      x: event.dx,\n      y: event.dy\n    },\n        position = {\n      x: event.x,\n      y: event.y\n    },\n        canExecute; // check if we can move the elements\n\n    canExecute = canMove(validatedShapes, delta, position, hover);\n    context.delta = delta;\n    context.canExecute = canExecute; // simply ignore move over\n\n    if (canExecute === null) {\n      context.target = null;\n      return;\n    }\n\n    context.target = hover;\n  });\n  eventBus.on('shape.move.end', function (event) {\n    var context = event.context;\n    var delta = context.delta,\n        canExecute = context.canExecute,\n        isAttach = canExecute === 'attach',\n        shapes = context.shapes;\n\n    if (!canExecute) {\n      return false;\n    } // ensure we have actual pixel values deltas\n    // (important when zoom level was > 1 during move)\n\n\n    delta.x = round(delta.x);\n    delta.y = round(delta.y);\n    modeling.moveElements(shapes, delta, context.target, {\n      primaryShape: context.shape,\n      attach: isAttach\n    });\n  }); // move activation\n\n  eventBus.on('element.mousedown', function (event) {\n    var originalEvent = getOriginalEvent(event);\n\n    if (!originalEvent) {\n      throw new Error('must supply DOM mousedown event');\n    }\n\n    return start(originalEvent, event.element);\n  });\n\n  function start(event, element, activate) {\n    // do not move connections or the root element\n    if (element.waypoints || !element.parent) {\n      return;\n    }\n\n    var referencePoint = mid(element);\n    dragging.init(event, referencePoint, 'shape.move', {\n      cursor: 'grabbing',\n      autoActivate: activate,\n      data: {\n        shape: element,\n        context: {}\n      }\n    }); // we've handled the event\n\n    return true;\n  } // API\n\n\n  this.start = start;\n}\nMoveEvents.$inject = ['eventBus', 'dragging', 'modeling', 'selection', 'rules'];\n/**\n * Return a filtered list of elements that do not contain\n * those nested into others.\n *\n * @param  {Array<djs.model.Base>} elements\n *\n * @return {Array<djs.model.Base>} filtered\n */\n\nfunction removeNested(elements) {\n  var ids = groupBy(elements, 'id');\n  return filter(elements, function (element) {\n    while (element = element.parent) {\n      // parent in selection\n      if (ids[element.id]) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/move/Move.js"],"names":["assign","filter","groupBy","LOW_PRIORITY","MEDIUM_PRIORITY","HIGH_PRIORITY","getOriginal","getOriginalEvent","round","Math","mid","element","x","width","y","height","MoveEvents","eventBus","dragging","modeling","selection","rules","canMove","shapes","delta","position","target","allowed","on","event","context","shape","get","slice","indexOf","removeNested","validatedShapes","canExecute","hover","dx","dy","isAttach","moveElements","primaryShape","attach","originalEvent","Error","start","activate","waypoints","parent","referencePoint","init","cursor","autoActivate","data","$inject","elements","ids","id"],"mappings":"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","sourcesContent":["import {\n  assign,\n  filter,\n  groupBy\n} from 'min-dash';\n\nvar LOW_PRIORITY = 500,\n    MEDIUM_PRIORITY = 1250,\n    HIGH_PRIORITY = 1500;\n\nimport { getOriginal as getOriginalEvent } from '../../util/Event';\n\nvar round = Math.round;\n\nfunction mid(element) {\n  return {\n    x: element.x + round(element.width / 2),\n    y: element.y + round(element.height / 2)\n  };\n}\n\n/**\n * A plugin that makes shapes draggable / droppable.\n *\n * @param {EventBus} eventBus\n * @param {Dragging} dragging\n * @param {Modeling} modeling\n * @param {Selection} selection\n * @param {Rules} rules\n */\nexport default function MoveEvents(\n    eventBus, dragging, modeling,\n    selection, rules) {\n\n  // rules\n\n  function canMove(shapes, delta, position, target) {\n\n    return rules.allowed('elements.move', {\n      shapes: shapes,\n      delta: delta,\n      position: position,\n      target: target\n    });\n  }\n\n\n  // move events\n\n  // assign a high priority to this handler to setup the environment\n  // others may hook up later, e.g. at default priority and modify\n  // the move environment.\n  //\n  // This sets up the context with\n  //\n  // * shape: the primary shape being moved\n  // * shapes: a list of shapes to be moved\n  // * validatedShapes: a list of shapes that are being checked\n  //                    against the rules before and during move\n  //\n  eventBus.on('shape.move.start', HIGH_PRIORITY, function(event) {\n\n    var context = event.context,\n        shape = event.shape,\n        shapes = selection.get().slice();\n\n    // move only single shape if the dragged element\n    // is not part of the current selection\n    if (shapes.indexOf(shape) === -1) {\n      shapes = [ shape ];\n    }\n\n    // ensure we remove nested elements in the collection\n    // and add attachers for a proper dragger\n    shapes = removeNested(shapes);\n\n    // attach shapes to drag context\n    assign(context, {\n      shapes: shapes,\n      validatedShapes: shapes,\n      shape: shape\n    });\n  });\n\n\n  // assign a high priority to this handler to setup the environment\n  // others may hook up later, e.g. at default priority and modify\n  // the move environment\n  //\n  eventBus.on('shape.move.start', MEDIUM_PRIORITY, function(event) {\n\n    var context = event.context,\n        validatedShapes = context.validatedShapes,\n        canExecute;\n\n    canExecute = context.canExecute = canMove(validatedShapes);\n\n    // check if we can move the elements\n    if (!canExecute) {\n      return false;\n    }\n  });\n\n  // assign a low priority to this handler\n  // to let others modify the move event before we update\n  // the context\n  //\n  eventBus.on('shape.move.move', LOW_PRIORITY, function(event) {\n\n    var context = event.context,\n        validatedShapes = context.validatedShapes,\n        hover = event.hover,\n        delta = { x: event.dx, y: event.dy },\n        position = { x: event.x, y: event.y },\n        canExecute;\n\n    // check if we can move the elements\n    canExecute = canMove(validatedShapes, delta, position, hover);\n\n    context.delta = delta;\n    context.canExecute = canExecute;\n\n    // simply ignore move over\n    if (canExecute === null) {\n      context.target = null;\n\n      return;\n    }\n\n    context.target = hover;\n  });\n\n  eventBus.on('shape.move.end', function(event) {\n\n    var context = event.context;\n\n    var delta = context.delta,\n        canExecute = context.canExecute,\n        isAttach = canExecute === 'attach',\n        shapes = context.shapes;\n\n    if (!canExecute) {\n      return false;\n    }\n\n    // ensure we have actual pixel values deltas\n    // (important when zoom level was > 1 during move)\n    delta.x = round(delta.x);\n    delta.y = round(delta.y);\n\n    modeling.moveElements(shapes, delta, context.target, {\n      primaryShape: context.shape,\n      attach: isAttach\n    });\n  });\n\n\n  // move activation\n\n  eventBus.on('element.mousedown', function(event) {\n\n    var originalEvent = getOriginalEvent(event);\n\n    if (!originalEvent) {\n      throw new Error('must supply DOM mousedown event');\n    }\n\n    return start(originalEvent, event.element);\n  });\n\n\n  function start(event, element, activate) {\n\n    // do not move connections or the root element\n    if (element.waypoints || !element.parent) {\n      return;\n    }\n\n    var referencePoint = mid(element);\n\n    dragging.init(event, referencePoint, 'shape.move', {\n      cursor: 'grabbing',\n      autoActivate: activate,\n      data: {\n        shape: element,\n        context: {}\n      }\n    });\n\n    // we've handled the event\n    return true;\n  }\n\n  // API\n\n  this.start = start;\n}\n\nMoveEvents.$inject = [\n  'eventBus',\n  'dragging',\n  'modeling',\n  'selection',\n  'rules'\n];\n\n\n/**\n * Return a filtered list of elements that do not contain\n * those nested into others.\n *\n * @param  {Array<djs.model.Base>} elements\n *\n * @return {Array<djs.model.Base>} filtered\n */\nfunction removeNested(elements) {\n\n  var ids = groupBy(elements, 'id');\n\n  return filter(elements, function(element) {\n    while ((element = element.parent)) {\n\n      // parent in selection\n      if (ids[element.id]) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}