{"ast":null,"code":"import { forEach } from 'min-dash';\n/**\n * A handler that align elements in a certain way.\n *\n */\n\nexport default function AlignElements(modeling, canvas) {\n  this._modeling = modeling;\n  this._canvas = canvas;\n}\nAlignElements.$inject = ['modeling', 'canvas'];\n\nAlignElements.prototype.preExecute = function (context) {\n  var modeling = this._modeling;\n  var elements = context.elements,\n      alignment = context.alignment;\n  forEach(elements, function (element) {\n    var delta = {\n      x: 0,\n      y: 0\n    };\n\n    if (alignment.left) {\n      delta.x = alignment.left - element.x;\n    } else if (alignment.right) {\n      delta.x = alignment.right - element.width - element.x;\n    } else if (alignment.center) {\n      delta.x = alignment.center - Math.round(element.width / 2) - element.x;\n    } else if (alignment.top) {\n      delta.y = alignment.top - element.y;\n    } else if (alignment.bottom) {\n      delta.y = alignment.bottom - element.height - element.y;\n    } else if (alignment.middle) {\n      delta.y = alignment.middle - Math.round(element.height / 2) - element.y;\n    }\n\n    modeling.moveElements([element], delta, element.parent);\n  });\n};\n\nAlignElements.prototype.postExecute = function (context) {};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/modeling/cmd/AlignElementsHandler.js"],"names":["forEach","AlignElements","modeling","canvas","_modeling","_canvas","$inject","prototype","preExecute","context","elements","alignment","element","delta","x","y","left","right","width","center","Math","round","top","bottom","height","middle","moveElements","parent","postExecute"],"mappings":"AAAA,SAASA,OAAT,QAAwB,UAAxB;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,MAAjC,EAAyC;AACtD,OAAKC,SAAL,GAAiBF,QAAjB;AACA,OAAKG,OAAL,GAAeF,MAAf;AACD;AAEDF,aAAa,CAACK,OAAd,GAAwB,CAAE,UAAF,EAAc,QAAd,CAAxB;;AAGAL,aAAa,CAACM,SAAd,CAAwBC,UAAxB,GAAqC,UAASC,OAAT,EAAkB;AACrD,MAAIP,QAAQ,GAAG,KAAKE,SAApB;AAEA,MAAIM,QAAQ,GAAGD,OAAO,CAACC,QAAvB;AAAA,MACIC,SAAS,GAAGF,OAAO,CAACE,SADxB;AAIAX,EAAAA,OAAO,CAACU,QAAD,EAAW,UAASE,OAAT,EAAkB;AAClC,QAAIC,KAAK,GAAG;AACVC,MAAAA,CAAC,EAAE,CADO;AAEVC,MAAAA,CAAC,EAAE;AAFO,KAAZ;;AAKA,QAAIJ,SAAS,CAACK,IAAd,EAAoB;AAClBH,MAAAA,KAAK,CAACC,CAAN,GAAUH,SAAS,CAACK,IAAV,GAAiBJ,OAAO,CAACE,CAAnC;AAED,KAHD,MAGO,IAAIH,SAAS,CAACM,KAAd,EAAqB;AAC1BJ,MAAAA,KAAK,CAACC,CAAN,GAAWH,SAAS,CAACM,KAAV,GAAkBL,OAAO,CAACM,KAA3B,GAAoCN,OAAO,CAACE,CAAtD;AAED,KAHM,MAGA,IAAIH,SAAS,CAACQ,MAAd,EAAsB;AAC3BN,MAAAA,KAAK,CAACC,CAAN,GAAWH,SAAS,CAACQ,MAAV,GAAmBC,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACM,KAAR,GAAgB,CAA3B,CAApB,GAAqDN,OAAO,CAACE,CAAvE;AAED,KAHM,MAGA,IAAIH,SAAS,CAACW,GAAd,EAAmB;AACxBT,MAAAA,KAAK,CAACE,CAAN,GAAUJ,SAAS,CAACW,GAAV,GAAgBV,OAAO,CAACG,CAAlC;AAED,KAHM,MAGA,IAAIJ,SAAS,CAACY,MAAd,EAAsB;AAC3BV,MAAAA,KAAK,CAACE,CAAN,GAAWJ,SAAS,CAACY,MAAV,GAAmBX,OAAO,CAACY,MAA5B,GAAsCZ,OAAO,CAACG,CAAxD;AAED,KAHM,MAGA,IAAIJ,SAAS,CAACc,MAAd,EAAsB;AAC3BZ,MAAAA,KAAK,CAACE,CAAN,GAAWJ,SAAS,CAACc,MAAV,GAAmBL,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACY,MAAR,GAAiB,CAA5B,CAApB,GAAsDZ,OAAO,CAACG,CAAxE;AACD;;AAEDb,IAAAA,QAAQ,CAACwB,YAAT,CAAsB,CAAEd,OAAF,CAAtB,EAAmCC,KAAnC,EAA0CD,OAAO,CAACe,MAAlD;AACD,GA1BM,CAAP;AA2BD,CAlCD;;AAoCA1B,aAAa,CAACM,SAAd,CAAwBqB,WAAxB,GAAsC,UAASnB,OAAT,EAAkB,CAEvD,CAFD","sourcesContent":["import { forEach } from 'min-dash';\n\n/**\n * A handler that align elements in a certain way.\n *\n */\nexport default function AlignElements(modeling, canvas) {\n  this._modeling = modeling;\n  this._canvas = canvas;\n}\n\nAlignElements.$inject = [ 'modeling', 'canvas' ];\n\n\nAlignElements.prototype.preExecute = function(context) {\n  var modeling = this._modeling;\n\n  var elements = context.elements,\n      alignment = context.alignment;\n\n\n  forEach(elements, function(element) {\n    var delta = {\n      x: 0,\n      y: 0\n    };\n\n    if (alignment.left) {\n      delta.x = alignment.left - element.x;\n\n    } else if (alignment.right) {\n      delta.x = (alignment.right - element.width) - element.x;\n\n    } else if (alignment.center) {\n      delta.x = (alignment.center - Math.round(element.width / 2)) - element.x;\n\n    } else if (alignment.top) {\n      delta.y = alignment.top - element.y;\n\n    } else if (alignment.bottom) {\n      delta.y = (alignment.bottom - element.height) - element.y;\n\n    } else if (alignment.middle) {\n      delta.y = (alignment.middle - Math.round(element.height / 2)) - element.y;\n    }\n\n    modeling.moveElements([ element ], delta, element.parent);\n  });\n};\n\nAlignElements.prototype.postExecute = function(context) {\n\n};\n"]},"metadata":{},"sourceType":"module"}