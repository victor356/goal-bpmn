{"ast":null,"code":"var MARKER_OK = 'connect-ok',\n    MARKER_NOT_OK = 'connect-not-ok';\n/**\n * @class\n * @constructor\n *\n * @param {EventBus} eventBus\n * @param {Dragging} dragging\n * @param {Connect} connect\n * @param {Canvas} canvas\n * @param {ToolManager} toolManager\n * @param {Rules} rules\n */\n\nexport default function GlobalConnect(eventBus, dragging, connect, canvas, toolManager, rules) {\n  var self = this;\n  this._dragging = dragging;\n  this._rules = rules;\n  toolManager.registerTool('global-connect', {\n    tool: 'global-connect',\n    dragging: 'global-connect.drag'\n  });\n  eventBus.on('global-connect.hover', function (event) {\n    var context = event.context,\n        startTarget = event.hover;\n    var canStartConnect = context.canStartConnect = self.canStartConnect(startTarget); // simply ignore hover\n\n    if (canStartConnect === null) {\n      return;\n    }\n\n    context.startTarget = startTarget;\n    canvas.addMarker(startTarget, canStartConnect ? MARKER_OK : MARKER_NOT_OK);\n  });\n  eventBus.on(['global-connect.out', 'global-connect.cleanup'], function (event) {\n    var startTarget = event.context.startTarget,\n        canStartConnect = event.context.canStartConnect;\n\n    if (startTarget) {\n      canvas.removeMarker(startTarget, canStartConnect ? MARKER_OK : MARKER_NOT_OK);\n    }\n  });\n  eventBus.on(['global-connect.ended'], function (event) {\n    var context = event.context,\n        startTarget = context.startTarget,\n        startPosition = {\n      x: event.x,\n      y: event.y\n    };\n    var canStartConnect = self.canStartConnect(startTarget);\n\n    if (!canStartConnect) {\n      return;\n    }\n\n    eventBus.once('element.out', function () {\n      eventBus.once(['connect.ended', 'connect.canceled'], function () {\n        eventBus.fire('global-connect.drag.ended');\n      });\n      connect.start(null, startTarget, startPosition);\n    });\n    return false;\n  });\n}\nGlobalConnect.$inject = ['eventBus', 'dragging', 'connect', 'canvas', 'toolManager', 'rules'];\n/**\n * Initiates tool activity.\n */\n\nGlobalConnect.prototype.start = function (event) {\n  this._dragging.init(event, 'global-connect', {\n    trapClick: false,\n    data: {\n      context: {}\n    }\n  });\n};\n\nGlobalConnect.prototype.toggle = function () {\n  if (this.isActive()) {\n    this._dragging.cancel();\n  } else {\n    this.start();\n  }\n};\n\nGlobalConnect.prototype.isActive = function () {\n  var context = this._dragging.context();\n\n  return context && /^global-connect/.test(context.prefix);\n};\n/**\n * Check if source shape can initiate connection.\n *\n * @param  {Shape} startTarget\n * @return {Boolean}\n */\n\n\nGlobalConnect.prototype.canStartConnect = function (startTarget) {\n  return this._rules.allowed('connection.start', {\n    source: startTarget\n  });\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/global-connect/GlobalConnect.js"],"names":["MARKER_OK","MARKER_NOT_OK","GlobalConnect","eventBus","dragging","connect","canvas","toolManager","rules","self","_dragging","_rules","registerTool","tool","on","event","context","startTarget","hover","canStartConnect","addMarker","removeMarker","startPosition","x","y","once","fire","start","$inject","prototype","init","trapClick","data","toggle","isActive","cancel","test","prefix","allowed","source"],"mappings":"AAAA,IAAIA,SAAS,GAAG,YAAhB;AAAA,IACIC,aAAa,GAAG,gBADpB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CACXC,QADW,EACDC,QADC,EACSC,OADT,EAEXC,MAFW,EAEHC,WAFG,EAEUC,KAFV,EAEiB;AAE9B,MAAIC,IAAI,GAAG,IAAX;AAEA,OAAKC,SAAL,GAAiBN,QAAjB;AACA,OAAKO,MAAL,GAAcH,KAAd;AAEAD,EAAAA,WAAW,CAACK,YAAZ,CAAyB,gBAAzB,EAA2C;AACzCC,IAAAA,IAAI,EAAE,gBADmC;AAEzCT,IAAAA,QAAQ,EAAE;AAF+B,GAA3C;AAKAD,EAAAA,QAAQ,CAACW,EAAT,CAAY,sBAAZ,EAAoC,UAASC,KAAT,EAAgB;AAClD,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,WAAW,GAAGF,KAAK,CAACG,KADxB;AAGA,QAAIC,eAAe,GAAGH,OAAO,CAACG,eAAR,GAA0BV,IAAI,CAACU,eAAL,CAAqBF,WAArB,CAAhD,CAJkD,CAMlD;;AACA,QAAIE,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACD;;AAEDH,IAAAA,OAAO,CAACC,WAAR,GAAsBA,WAAtB;AAEAX,IAAAA,MAAM,CAACc,SAAP,CAAiBH,WAAjB,EAA8BE,eAAe,GAAGnB,SAAH,GAAeC,aAA5D;AACD,GAdD;AAiBAE,EAAAA,QAAQ,CAACW,EAAT,CAAY,CAAE,oBAAF,EAAwB,wBAAxB,CAAZ,EAAgE,UAASC,KAAT,EAAgB;AAC9E,QAAIE,WAAW,GAAGF,KAAK,CAACC,OAAN,CAAcC,WAAhC;AAAA,QACIE,eAAe,GAAGJ,KAAK,CAACC,OAAN,CAAcG,eADpC;;AAGA,QAAIF,WAAJ,EAAiB;AACfX,MAAAA,MAAM,CAACe,YAAP,CAAoBJ,WAApB,EAAiCE,eAAe,GAAGnB,SAAH,GAAeC,aAA/D;AACD;AACF,GAPD;AAUAE,EAAAA,QAAQ,CAACW,EAAT,CAAY,CAAE,sBAAF,CAAZ,EAAwC,UAASC,KAAT,EAAgB;AACtD,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,WAAW,GAAGD,OAAO,CAACC,WAD1B;AAAA,QAEIK,aAAa,GAAG;AACdC,MAAAA,CAAC,EAAER,KAAK,CAACQ,CADK;AAEdC,MAAAA,CAAC,EAAET,KAAK,CAACS;AAFK,KAFpB;AAOA,QAAIL,eAAe,GAAGV,IAAI,CAACU,eAAL,CAAqBF,WAArB,CAAtB;;AAEA,QAAI,CAACE,eAAL,EAAsB;AACpB;AACD;;AAEDhB,IAAAA,QAAQ,CAACsB,IAAT,CAAc,aAAd,EAA6B,YAAW;AACtCtB,MAAAA,QAAQ,CAACsB,IAAT,CAAc,CAAE,eAAF,EAAmB,kBAAnB,CAAd,EAAuD,YAAW;AAChEtB,QAAAA,QAAQ,CAACuB,IAAT,CAAc,2BAAd;AACD,OAFD;AAIArB,MAAAA,OAAO,CAACsB,KAAR,CAAc,IAAd,EAAoBV,WAApB,EAAiCK,aAAjC;AACD,KAND;AAQA,WAAO,KAAP;AACD,GAvBD;AAwBD;AAEDpB,aAAa,CAAC0B,OAAd,GAAwB,CACtB,UADsB,EAEtB,UAFsB,EAGtB,SAHsB,EAItB,QAJsB,EAKtB,aALsB,EAMtB,OANsB,CAAxB;AASA;AACA;AACA;;AACA1B,aAAa,CAAC2B,SAAd,CAAwBF,KAAxB,GAAgC,UAASZ,KAAT,EAAgB;AAC9C,OAAKL,SAAL,CAAeoB,IAAf,CAAoBf,KAApB,EAA2B,gBAA3B,EAA6C;AAC3CgB,IAAAA,SAAS,EAAE,KADgC;AAE3CC,IAAAA,IAAI,EAAE;AACJhB,MAAAA,OAAO,EAAE;AADL;AAFqC,GAA7C;AAMD,CAPD;;AASAd,aAAa,CAAC2B,SAAd,CAAwBI,MAAxB,GAAiC,YAAW;AAC1C,MAAI,KAAKC,QAAL,EAAJ,EAAqB;AACnB,SAAKxB,SAAL,CAAeyB,MAAf;AACD,GAFD,MAEO;AACL,SAAKR,KAAL;AACD;AACF,CAND;;AAQAzB,aAAa,CAAC2B,SAAd,CAAwBK,QAAxB,GAAmC,YAAW;AAC5C,MAAIlB,OAAO,GAAG,KAAKN,SAAL,CAAeM,OAAf,EAAd;;AAEA,SAAOA,OAAO,IAAI,kBAAkBoB,IAAlB,CAAuBpB,OAAO,CAACqB,MAA/B,CAAlB;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAnC,aAAa,CAAC2B,SAAd,CAAwBV,eAAxB,GAA0C,UAASF,WAAT,EAAsB;AAC9D,SAAO,KAAKN,MAAL,CAAY2B,OAAZ,CAAoB,kBAApB,EAAwC;AAAEC,IAAAA,MAAM,EAAEtB;AAAV,GAAxC,CAAP;AACD,CAFD","sourcesContent":["var MARKER_OK = 'connect-ok',\n    MARKER_NOT_OK = 'connect-not-ok';\n\n/**\n * @class\n * @constructor\n *\n * @param {EventBus} eventBus\n * @param {Dragging} dragging\n * @param {Connect} connect\n * @param {Canvas} canvas\n * @param {ToolManager} toolManager\n * @param {Rules} rules\n */\nexport default function GlobalConnect(\n    eventBus, dragging, connect,\n    canvas, toolManager, rules) {\n\n  var self = this;\n\n  this._dragging = dragging;\n  this._rules = rules;\n\n  toolManager.registerTool('global-connect', {\n    tool: 'global-connect',\n    dragging: 'global-connect.drag'\n  });\n\n  eventBus.on('global-connect.hover', function(event) {\n    var context = event.context,\n        startTarget = event.hover;\n\n    var canStartConnect = context.canStartConnect = self.canStartConnect(startTarget);\n\n    // simply ignore hover\n    if (canStartConnect === null) {\n      return;\n    }\n\n    context.startTarget = startTarget;\n\n    canvas.addMarker(startTarget, canStartConnect ? MARKER_OK : MARKER_NOT_OK);\n  });\n\n\n  eventBus.on([ 'global-connect.out', 'global-connect.cleanup' ], function(event) {\n    var startTarget = event.context.startTarget,\n        canStartConnect = event.context.canStartConnect;\n\n    if (startTarget) {\n      canvas.removeMarker(startTarget, canStartConnect ? MARKER_OK : MARKER_NOT_OK);\n    }\n  });\n\n\n  eventBus.on([ 'global-connect.ended' ], function(event) {\n    var context = event.context,\n        startTarget = context.startTarget,\n        startPosition = {\n          x: event.x,\n          y: event.y\n        };\n\n    var canStartConnect = self.canStartConnect(startTarget);\n\n    if (!canStartConnect) {\n      return;\n    }\n\n    eventBus.once('element.out', function() {\n      eventBus.once([ 'connect.ended', 'connect.canceled' ], function() {\n        eventBus.fire('global-connect.drag.ended');\n      });\n\n      connect.start(null, startTarget, startPosition);\n    });\n\n    return false;\n  });\n}\n\nGlobalConnect.$inject = [\n  'eventBus',\n  'dragging',\n  'connect',\n  'canvas',\n  'toolManager',\n  'rules'\n];\n\n/**\n * Initiates tool activity.\n */\nGlobalConnect.prototype.start = function(event) {\n  this._dragging.init(event, 'global-connect', {\n    trapClick: false,\n    data: {\n      context: {}\n    }\n  });\n};\n\nGlobalConnect.prototype.toggle = function() {\n  if (this.isActive()) {\n    this._dragging.cancel();\n  } else {\n    this.start();\n  }\n};\n\nGlobalConnect.prototype.isActive = function() {\n  var context = this._dragging.context();\n\n  return context && /^global-connect/.test(context.prefix);\n};\n\n/**\n * Check if source shape can initiate connection.\n *\n * @param  {Shape} startTarget\n * @return {Boolean}\n */\nGlobalConnect.prototype.canStartConnect = function(startTarget) {\n  return this._rules.allowed('connection.start', { source: startTarget });\n};\n"]},"metadata":{},"sourceType":"module"}