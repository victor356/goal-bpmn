{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nimport { filter, forEach } from 'min-dash';\n/**\n * BPMN specific boundary event behavior\n */\n\nexport default function BoundaryEventBehavior(eventBus, modeling) {\n  CommandInterceptor.call(this, eventBus);\n\n  function getBoundaryEvents(element) {\n    return filter(element.attachers, function (attacher) {\n      return is(attacher, 'bpmn:BoundaryEvent');\n    });\n  } // remove after connecting to event-based gateway\n\n\n  this.postExecute('connection.create', function (event) {\n    var source = event.context.source,\n        target = event.context.target,\n        boundaryEvents = getBoundaryEvents(target);\n\n    if (is(source, 'bpmn:EventBasedGateway') && is(target, 'bpmn:ReceiveTask') && boundaryEvents.length > 0) {\n      modeling.removeElements(boundaryEvents);\n    }\n  }); // remove after replacing connected gateway with event-based gateway\n\n  this.postExecute('connection.reconnectStart', function (event) {\n    var oldSource = event.context.oldSource,\n        newSource = event.context.newSource;\n\n    if (is(oldSource, 'bpmn:Gateway') && is(newSource, 'bpmn:EventBasedGateway')) {\n      forEach(newSource.outgoing, function (connection) {\n        var target = connection.target,\n            attachedboundaryEvents = getBoundaryEvents(target);\n\n        if (is(target, 'bpmn:ReceiveTask') && attachedboundaryEvents.length > 0) {\n          modeling.removeElements(attachedboundaryEvents);\n        }\n      });\n    }\n  });\n}\nBoundaryEventBehavior.$inject = ['eventBus', 'modeling'];\ninherits(BoundaryEventBehavior, CommandInterceptor);","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/modeling/behavior/BoundaryEventBehavior.js"],"names":["inherits","CommandInterceptor","is","filter","forEach","BoundaryEventBehavior","eventBus","modeling","call","getBoundaryEvents","element","attachers","attacher","postExecute","event","source","context","target","boundaryEvents","length","removeElements","oldSource","newSource","outgoing","connection","attachedboundaryEvents","$inject"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,OAAOC,kBAAP,MAA+B,2CAA/B;AAEA,SAASC,EAAT,QAAmB,yBAAnB;AAEA,SACEC,MADF,EAEEC,OAFF,QAGO,UAHP;AAMA;AACA;AACA;;AACA,eAAe,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,QAAzC,EAAmD;AAEhEN,EAAAA,kBAAkB,CAACO,IAAnB,CAAwB,IAAxB,EAA8BF,QAA9B;;AAEA,WAASG,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,WAAOP,MAAM,CAACO,OAAO,CAACC,SAAT,EAAoB,UAASC,QAAT,EAAmB;AAClD,aAAOV,EAAE,CAACU,QAAD,EAAW,oBAAX,CAAT;AACD,KAFY,CAAb;AAGD,GAR+D,CAUhE;;;AACA,OAAKC,WAAL,CAAiB,mBAAjB,EAAsC,UAASC,KAAT,EAAgB;AACpD,QAAIC,MAAM,GAAGD,KAAK,CAACE,OAAN,CAAcD,MAA3B;AAAA,QACIE,MAAM,GAAGH,KAAK,CAACE,OAAN,CAAcC,MAD3B;AAAA,QAEIC,cAAc,GAAGT,iBAAiB,CAACQ,MAAD,CAFtC;;AAIA,QACEf,EAAE,CAACa,MAAD,EAAS,wBAAT,CAAF,IACAb,EAAE,CAACe,MAAD,EAAS,kBAAT,CADF,IAEAC,cAAc,CAACC,MAAf,GAAwB,CAH1B,EAIE;AACAZ,MAAAA,QAAQ,CAACa,cAAT,CAAwBF,cAAxB;AACD;AAEF,GAbD,EAXgE,CA0BhE;;AACA,OAAKL,WAAL,CAAiB,2BAAjB,EAA8C,UAASC,KAAT,EAAgB;AAC5D,QAAIO,SAAS,GAAGP,KAAK,CAACE,OAAN,CAAcK,SAA9B;AAAA,QACIC,SAAS,GAAGR,KAAK,CAACE,OAAN,CAAcM,SAD9B;;AAGA,QAAIpB,EAAE,CAACmB,SAAD,EAAY,cAAZ,CAAF,IACAnB,EAAE,CAACoB,SAAD,EAAY,wBAAZ,CADN,EAC6C;AAC3ClB,MAAAA,OAAO,CAACkB,SAAS,CAACC,QAAX,EAAqB,UAASC,UAAT,EAAqB;AAC/C,YAAIP,MAAM,GAAGO,UAAU,CAACP,MAAxB;AAAA,YACIQ,sBAAsB,GAAGhB,iBAAiB,CAACQ,MAAD,CAD9C;;AAGA,YAAIf,EAAE,CAACe,MAAD,EAAS,kBAAT,CAAF,IACAQ,sBAAsB,CAACN,MAAvB,GAAgC,CADpC,EACuC;AACrCZ,UAAAA,QAAQ,CAACa,cAAT,CAAwBK,sBAAxB;AACD;AACF,OARM,CAAP;AASD;AACF,GAhBD;AAiBD;AAEDpB,qBAAqB,CAACqB,OAAtB,GAAgC,CAC9B,UAD8B,EAE9B,UAF8B,CAAhC;AAKA1B,QAAQ,CAACK,qBAAD,EAAwBJ,kBAAxB,CAAR","sourcesContent":["import inherits from 'inherits';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { is } from '../../../util/ModelUtil';\n\nimport {\n  filter,\n  forEach\n} from 'min-dash';\n\n\n/**\n * BPMN specific boundary event behavior\n */\nexport default function BoundaryEventBehavior(eventBus, modeling) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  function getBoundaryEvents(element) {\n    return filter(element.attachers, function(attacher) {\n      return is(attacher, 'bpmn:BoundaryEvent');\n    });\n  }\n\n  // remove after connecting to event-based gateway\n  this.postExecute('connection.create', function(event) {\n    var source = event.context.source,\n        target = event.context.target,\n        boundaryEvents = getBoundaryEvents(target);\n\n    if (\n      is(source, 'bpmn:EventBasedGateway') &&\n      is(target, 'bpmn:ReceiveTask') &&\n      boundaryEvents.length > 0\n    ) {\n      modeling.removeElements(boundaryEvents);\n    }\n\n  });\n\n  // remove after replacing connected gateway with event-based gateway\n  this.postExecute('connection.reconnectStart', function(event) {\n    var oldSource = event.context.oldSource,\n        newSource = event.context.newSource;\n\n    if (is(oldSource, 'bpmn:Gateway') &&\n        is(newSource, 'bpmn:EventBasedGateway')) {\n      forEach(newSource.outgoing, function(connection) {\n        var target = connection.target,\n            attachedboundaryEvents = getBoundaryEvents(target);\n\n        if (is(target, 'bpmn:ReceiveTask') &&\n            attachedboundaryEvents.length > 0) {\n          modeling.removeElements(attachedboundaryEvents);\n        }\n      });\n    }\n  });\n}\n\nBoundaryEventBehavior.$inject = [\n  'eventBus',\n  'modeling'\n];\n\ninherits(BoundaryEventBehavior, CommandInterceptor);\n"]},"metadata":{},"sourceType":"module"}