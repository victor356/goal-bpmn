{"ast":null,"code":"'use strict';\n\nvar forEach = require('lodash/forEach');\n\nvar elementHelper = require('../helper/ElementHelper');\n/**\n * A handler that implements a BPMN 2.0 property update\n * for business objects which are not represented in the\n * diagram.\n *\n * This is useful in the context of the properties panel in\n * order to update child elements of elements visible in\n * the diagram.\n *\n * Example: perform an update of a specific event definition\n * of an intermediate event.\n *\n * @class\n * @constructor\n */\n\n\nfunction CreateBusinessObjectListHandler(elementRegistry, bpmnFactory) {\n  this._elementRegistry = elementRegistry;\n  this._bpmnFactory = bpmnFactory;\n}\n\nCreateBusinessObjectListHandler.$inject = ['elementRegistry', 'bpmnFactory'];\nmodule.exports = CreateBusinessObjectListHandler;\n\nfunction ensureNotNull(prop, name) {\n  if (!prop) {\n    throw new Error(name + ' required');\n  }\n\n  return prop;\n}\n\nfunction ensureList(prop, name) {\n  if (!prop || Object.prototype.toString.call(prop) !== '[object Array]') {\n    throw new Error(name + ' needs to be a list');\n  }\n\n  return prop;\n} // api /////////////////////////////////////////////\n\n/**\n * Creates a new element under a provided parent and updates / creates a reference to it in\n * one atomic action.\n *\n * @method  CreateBusinessObjectListHandler#execute\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element which is the context for the reference\n * @param {moddle.referencingObject} context.referencingObject the object which creates the reference\n * @param {String} context.referenceProperty the property of the referencingObject which makes the reference\n * @param {moddle.newObject} context.newObject the new object to add\n * @param {moddle.newObjectContainer} context.newObjectContainer the container for the new object\n *\n * @return {Array<djs.mode.Base>} the updated element\n */\n\n\nCreateBusinessObjectListHandler.prototype.execute = function (context) {\n  var currentObject = ensureNotNull(context.currentObject, 'currentObject'),\n      propertyName = ensureNotNull(context.propertyName, 'propertyName'),\n      newObjects = ensureList(context.newObjects, 'newObjects'),\n      changed = [context.element]; // this will not change any diagram-js elements\n\n  var childObjects = [];\n  var self = this; // create new array of business objects\n\n  forEach(newObjects, function (obj) {\n    var element = elementHelper.createElement(obj.type, obj.properties, currentObject, self._bpmnFactory);\n    childObjects.push(element);\n  });\n  context.childObject = childObjects; // adjust array reference in the parent business object\n\n  context.previousChilds = currentObject[propertyName];\n  currentObject[propertyName] = childObjects;\n  context.changed = changed; // indicate changed on objects affected by the update\n\n  return changed;\n};\n/**\n * Reverts the update\n *\n * @method  CreateBusinessObjectListHandler#revert\n *\n * @param {Object} context\n *\n * @return {djs.mode.Base} the updated element\n */\n\n\nCreateBusinessObjectListHandler.prototype.revert = function (context) {\n  var currentObject = context.currentObject,\n      propertyName = context.propertyName,\n      previousChilds = context.previousChilds; // remove new element\n\n  currentObject.set(propertyName, previousChilds);\n  return context.changed;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/cmd/CreateBusinessObjectListHandler.js"],"names":["forEach","require","elementHelper","CreateBusinessObjectListHandler","elementRegistry","bpmnFactory","_elementRegistry","_bpmnFactory","$inject","module","exports","ensureNotNull","prop","name","Error","ensureList","Object","prototype","toString","call","execute","context","currentObject","propertyName","newObjects","changed","element","childObjects","self","obj","createElement","type","properties","push","childObject","previousChilds","revert","set"],"mappings":"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","sourcesContent":["'use strict';\n\nvar forEach = require('lodash/forEach');\n\nvar elementHelper = require('../helper/ElementHelper');\n\n/**\n * A handler that implements a BPMN 2.0 property update\n * for business objects which are not represented in the\n * diagram.\n *\n * This is useful in the context of the properties panel in\n * order to update child elements of elements visible in\n * the diagram.\n *\n * Example: perform an update of a specific event definition\n * of an intermediate event.\n *\n * @class\n * @constructor\n */\nfunction CreateBusinessObjectListHandler(elementRegistry, bpmnFactory) {\n  this._elementRegistry = elementRegistry;\n  this._bpmnFactory = bpmnFactory;\n}\n\nCreateBusinessObjectListHandler.$inject = [ 'elementRegistry', 'bpmnFactory' ];\n\nmodule.exports = CreateBusinessObjectListHandler;\n\nfunction ensureNotNull(prop, name) {\n  if (!prop) {\n    throw new Error(name + ' required');\n  }\n  return prop;\n\n}\nfunction ensureList(prop, name) {\n  if (!prop || Object.prototype.toString.call(prop) !== '[object Array]') {\n    throw new Error(name + ' needs to be a list');\n  }\n  return prop;\n}\n\n// api /////////////////////////////////////////////\n\n/**\n * Creates a new element under a provided parent and updates / creates a reference to it in\n * one atomic action.\n *\n * @method  CreateBusinessObjectListHandler#execute\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element which is the context for the reference\n * @param {moddle.referencingObject} context.referencingObject the object which creates the reference\n * @param {String} context.referenceProperty the property of the referencingObject which makes the reference\n * @param {moddle.newObject} context.newObject the new object to add\n * @param {moddle.newObjectContainer} context.newObjectContainer the container for the new object\n *\n * @return {Array<djs.mode.Base>} the updated element\n */\nCreateBusinessObjectListHandler.prototype.execute = function(context) {\n\n  var currentObject = ensureNotNull(context.currentObject, 'currentObject'),\n      propertyName = ensureNotNull(context.propertyName, 'propertyName'),\n      newObjects = ensureList(context.newObjects, 'newObjects'),\n      changed = [ context.element ]; // this will not change any diagram-js elements\n\n\n  var childObjects = [];\n  var self = this;\n\n  // create new array of business objects\n  forEach(newObjects, function(obj) {\n    var element = elementHelper.createElement(obj.type, obj.properties, currentObject, self._bpmnFactory);\n\n    childObjects.push(element);\n  });\n  context.childObject = childObjects;\n\n  // adjust array reference in the parent business object\n  context.previousChilds = currentObject[propertyName];\n  currentObject[propertyName] = childObjects;\n\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n/**\n * Reverts the update\n *\n * @method  CreateBusinessObjectListHandler#revert\n *\n * @param {Object} context\n *\n * @return {djs.mode.Base} the updated element\n */\nCreateBusinessObjectListHandler.prototype.revert = function(context) {\n\n  var currentObject = context.currentObject,\n      propertyName = context.propertyName,\n      previousChilds = context.previousChilds;\n\n  // remove new element\n  currentObject.set(propertyName, previousChilds);\n\n  return context.changed;\n};\n"]},"metadata":{},"sourceType":"script"}