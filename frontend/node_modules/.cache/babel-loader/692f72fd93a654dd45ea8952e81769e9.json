{"ast":null,"code":"import { assign } from 'min-dash';\nvar DEFAULT_CONFIG = {\n  moveSpeed: 1,\n  moveSpeedAccelerated: 10\n};\nvar HIGHER_PRIORITY = 1500;\nvar LEFT = 'left';\nvar UP = 'up';\nvar RIGHT = 'right';\nvar DOWN = 'down';\nvar KEY_TO_DIRECTION = {\n  ArrowLeft: LEFT,\n  Left: LEFT,\n  ArrowUp: UP,\n  Up: UP,\n  ArrowRight: RIGHT,\n  Right: RIGHT,\n  ArrowDown: DOWN,\n  Down: DOWN\n};\nvar DIRECTIONS_DELTA = {\n  left: function (speed) {\n    return {\n      x: -speed,\n      y: 0\n    };\n  },\n  up: function (speed) {\n    return {\n      x: 0,\n      y: -speed\n    };\n  },\n  right: function (speed) {\n    return {\n      x: speed,\n      y: 0\n    };\n  },\n  down: function (speed) {\n    return {\n      x: 0,\n      y: speed\n    };\n  }\n};\n/**\n * Enables to move selection with keyboard arrows.\n * Use with Shift for modified speed (default=1, with Shift=10).\n * Pressed Cmd/Ctrl turns the feature off.\n *\n * @param {Object} config\n * @param {Number} [config.moveSpeed=1]\n * @param {Number} [config.moveSpeedAccelerated=10]\n * @param {Keyboard} keyboard\n * @param {Modeling} modeling\n * @param {Selection} selection\n */\n\nexport default function KeyboardMoveSelection(config, keyboard, modeling, selection) {\n  var self = this;\n  this._config = assign({}, DEFAULT_CONFIG, config || {});\n  keyboard.addListener(HIGHER_PRIORITY, function (event) {\n    var keyEvent = event.keyEvent;\n    var direction = KEY_TO_DIRECTION[keyEvent.key];\n\n    if (!direction) {\n      return;\n    }\n\n    if (keyboard.isCmd(keyEvent)) {\n      return;\n    }\n\n    var accelerated = keyboard.isShift(keyEvent);\n    self.moveSelection(direction, accelerated);\n    return true;\n  });\n  /**\n   * Move selected elements in the given direction,\n   * optionally specifying accelerated movement.\n   *\n   * @param {String} direction\n   * @param {Boolean} [accelerated=false]\n   */\n\n  this.moveSelection = function (direction, accelerated) {\n    var selectedElements = selection.get();\n\n    if (!selectedElements.length) {\n      return;\n    }\n\n    var speed = this._config[accelerated ? 'moveSpeedAccelerated' : 'moveSpeed'];\n    var delta = DIRECTIONS_DELTA[direction](speed);\n    modeling.moveElements(selectedElements, delta);\n  };\n}\nKeyboardMoveSelection.$inject = ['config.keyboardMoveSelection', 'keyboard', 'modeling', 'selection'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/keyboard-move-selection/KeyboardMoveSelection.js"],"names":["assign","DEFAULT_CONFIG","moveSpeed","moveSpeedAccelerated","HIGHER_PRIORITY","LEFT","UP","RIGHT","DOWN","KEY_TO_DIRECTION","ArrowLeft","Left","ArrowUp","Up","ArrowRight","Right","ArrowDown","Down","DIRECTIONS_DELTA","left","speed","x","y","up","right","down","KeyboardMoveSelection","config","keyboard","modeling","selection","self","_config","addListener","event","keyEvent","direction","key","isCmd","accelerated","isShift","moveSelection","selectedElements","get","length","delta","moveElements","$inject"],"mappings":"AAAA,SACEA,MADF,QAEO,UAFP;AAKA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,SAAS,EAAE,CADQ;AAEnBC,EAAAA,oBAAoB,EAAE;AAFH,CAArB;AAKA,IAAIC,eAAe,GAAG,IAAtB;AAEA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,KAAK,GAAG,OAAZ;AACA,IAAIC,IAAI,GAAG,MAAX;AAEA,IAAIC,gBAAgB,GAAG;AACrBC,EAAAA,SAAS,EAAEL,IADU;AAErBM,EAAAA,IAAI,EAAEN,IAFe;AAGrBO,EAAAA,OAAO,EAAEN,EAHY;AAIrBO,EAAAA,EAAE,EAAEP,EAJiB;AAKrBQ,EAAAA,UAAU,EAAEP,KALS;AAMrBQ,EAAAA,KAAK,EAAER,KANc;AAOrBS,EAAAA,SAAS,EAAER,IAPU;AAQrBS,EAAAA,IAAI,EAAET;AARe,CAAvB;AAWA,IAAIU,gBAAgB,GAAG;AACrBC,EAAAA,IAAI,EAAE,UAASC,KAAT,EAAgB;AACpB,WAAO;AACLC,MAAAA,CAAC,EAAE,CAACD,KADC;AAELE,MAAAA,CAAC,EAAE;AAFE,KAAP;AAID,GANoB;AAOrBC,EAAAA,EAAE,EAAE,UAASH,KAAT,EAAgB;AAClB,WAAO;AACLC,MAAAA,CAAC,EAAE,CADE;AAELC,MAAAA,CAAC,EAAE,CAACF;AAFC,KAAP;AAID,GAZoB;AAarBI,EAAAA,KAAK,EAAE,UAASJ,KAAT,EAAgB;AACrB,WAAO;AACLC,MAAAA,CAAC,EAAED,KADE;AAELE,MAAAA,CAAC,EAAE;AAFE,KAAP;AAID,GAlBoB;AAmBrBG,EAAAA,IAAI,EAAE,UAASL,KAAT,EAAgB;AACpB,WAAO;AACLC,MAAAA,CAAC,EAAE,CADE;AAELC,MAAAA,CAAC,EAAEF;AAFE,KAAP;AAID;AAxBoB,CAAvB;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASM,qBAAT,CACXC,MADW,EACHC,QADG,EAEXC,QAFW,EAEDC,SAFC,EAGb;AAEA,MAAIC,IAAI,GAAG,IAAX;AAEA,OAAKC,OAAL,GAAehC,MAAM,CAAC,EAAD,EAAKC,cAAL,EAAqB0B,MAAM,IAAI,EAA/B,CAArB;AAEAC,EAAAA,QAAQ,CAACK,WAAT,CAAqB7B,eAArB,EAAsC,UAAS8B,KAAT,EAAgB;AAEpD,QAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAEA,QAAIC,SAAS,GAAG3B,gBAAgB,CAAC0B,QAAQ,CAACE,GAAV,CAAhC;;AAEA,QAAI,CAACD,SAAL,EAAgB;AACd;AACD;;AAED,QAAIR,QAAQ,CAACU,KAAT,CAAeH,QAAf,CAAJ,EAA8B;AAC5B;AACD;;AAED,QAAII,WAAW,GAAGX,QAAQ,CAACY,OAAT,CAAiBL,QAAjB,CAAlB;AAEAJ,IAAAA,IAAI,CAACU,aAAL,CAAmBL,SAAnB,EAA8BG,WAA9B;AAEA,WAAO,IAAP;AACD,GAnBD;AAsBA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKE,aAAL,GAAqB,UAASL,SAAT,EAAoBG,WAApB,EAAiC;AAEpD,QAAIG,gBAAgB,GAAGZ,SAAS,CAACa,GAAV,EAAvB;;AAEA,QAAI,CAACD,gBAAgB,CAACE,MAAtB,EAA8B;AAC5B;AACD;;AAED,QAAIxB,KAAK,GAAG,KAAKY,OAAL,CACVO,WAAW,GACT,sBADS,GAET,WAHQ,CAAZ;AAMA,QAAIM,KAAK,GAAG3B,gBAAgB,CAACkB,SAAD,CAAhB,CAA4BhB,KAA5B,CAAZ;AAEAS,IAAAA,QAAQ,CAACiB,YAAT,CAAsBJ,gBAAtB,EAAwCG,KAAxC;AACD,GAjBD;AAmBD;AAEDnB,qBAAqB,CAACqB,OAAtB,GAAgC,CAC9B,8BAD8B,EAE9B,UAF8B,EAG9B,UAH8B,EAI9B,WAJ8B,CAAhC","sourcesContent":["import {\n  assign\n} from 'min-dash';\n\n\nvar DEFAULT_CONFIG = {\n  moveSpeed: 1,\n  moveSpeedAccelerated: 10\n};\n\nvar HIGHER_PRIORITY = 1500;\n\nvar LEFT = 'left';\nvar UP = 'up';\nvar RIGHT = 'right';\nvar DOWN = 'down';\n\nvar KEY_TO_DIRECTION = {\n  ArrowLeft: LEFT,\n  Left: LEFT,\n  ArrowUp: UP,\n  Up: UP,\n  ArrowRight: RIGHT,\n  Right: RIGHT,\n  ArrowDown: DOWN,\n  Down: DOWN\n};\n\nvar DIRECTIONS_DELTA = {\n  left: function(speed) {\n    return {\n      x: -speed,\n      y: 0\n    };\n  },\n  up: function(speed) {\n    return {\n      x: 0,\n      y: -speed\n    };\n  },\n  right: function(speed) {\n    return {\n      x: speed,\n      y: 0\n    };\n  },\n  down: function(speed) {\n    return {\n      x: 0,\n      y: speed\n    };\n  }\n};\n\n\n/**\n * Enables to move selection with keyboard arrows.\n * Use with Shift for modified speed (default=1, with Shift=10).\n * Pressed Cmd/Ctrl turns the feature off.\n *\n * @param {Object} config\n * @param {Number} [config.moveSpeed=1]\n * @param {Number} [config.moveSpeedAccelerated=10]\n * @param {Keyboard} keyboard\n * @param {Modeling} modeling\n * @param {Selection} selection\n */\nexport default function KeyboardMoveSelection(\n    config, keyboard,\n    modeling, selection\n) {\n\n  var self = this;\n\n  this._config = assign({}, DEFAULT_CONFIG, config || {});\n\n  keyboard.addListener(HIGHER_PRIORITY, function(event) {\n\n    var keyEvent = event.keyEvent;\n\n    var direction = KEY_TO_DIRECTION[keyEvent.key];\n\n    if (!direction) {\n      return;\n    }\n\n    if (keyboard.isCmd(keyEvent)) {\n      return;\n    }\n\n    var accelerated = keyboard.isShift(keyEvent);\n\n    self.moveSelection(direction, accelerated);\n\n    return true;\n  });\n\n\n  /**\n   * Move selected elements in the given direction,\n   * optionally specifying accelerated movement.\n   *\n   * @param {String} direction\n   * @param {Boolean} [accelerated=false]\n   */\n  this.moveSelection = function(direction, accelerated) {\n\n    var selectedElements = selection.get();\n\n    if (!selectedElements.length) {\n      return;\n    }\n\n    var speed = this._config[\n      accelerated ?\n        'moveSpeedAccelerated' :\n        'moveSpeed'\n    ];\n\n    var delta = DIRECTIONS_DELTA[direction](speed);\n\n    modeling.moveElements(selectedElements, delta);\n  };\n\n}\n\nKeyboardMoveSelection.$inject = [\n  'config.keyboardMoveSelection',\n  'keyboard',\n  'modeling',\n  'selection'\n];"]},"metadata":{},"sourceType":"module"}