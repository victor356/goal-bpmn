{"ast":null,"code":"import { isFunction } from 'min-dash';\nimport { event as domEvent, matches as domMatches } from 'min-dom';\nimport { hasModifier, isCmd, isKey, isShift } from './KeyboardUtil';\nvar KEYDOWN_EVENT = 'keyboard.keydown';\nvar DEFAULT_PRIORITY = 1000;\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * For keys pressed down, keyboard fires `keyboard.keydown` event.\n * The event context contains one field which is `KeyboardEvent` event.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain one field which is node.\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n */\n\nexport default function Keyboard(config, eventBus) {\n  var self = this;\n  this._config = config || {};\n  this._eventBus = eventBus;\n  this._keyHandler = this._keyHandler.bind(this); // properly clean dom registrations\n\n  eventBus.on('diagram.destroy', function () {\n    self._fire('destroy');\n\n    self.unbind();\n  });\n  eventBus.on('diagram.init', function () {\n    self._fire('init');\n  });\n  eventBus.on('attach', function () {\n    if (config && config.bindTo) {\n      self.bind(config.bindTo);\n    }\n  });\n  eventBus.on('detach', function () {\n    self.unbind();\n  });\n}\nKeyboard.$inject = ['config.keyboard', 'eventBus'];\n\nKeyboard.prototype._keyHandler = function (event) {\n  var target = event.target,\n      eventBusResult;\n\n  if (isInput(target)) {\n    return;\n  }\n\n  var context = {\n    keyEvent: event\n  };\n  eventBusResult = this._eventBus.fire(KEYDOWN_EVENT, context);\n\n  if (eventBusResult) {\n    event.preventDefault();\n  }\n};\n\nKeyboard.prototype.bind = function (node) {\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n  this._node = node; // bind key events\n\n  domEvent.bind(node, 'keydown', this._keyHandler, true);\n\n  this._fire('bind');\n};\n\nKeyboard.prototype.getBinding = function () {\n  return this._node;\n};\n\nKeyboard.prototype.unbind = function () {\n  var node = this._node;\n\n  if (node) {\n    this._fire('unbind'); // unbind key events\n\n\n    domEvent.unbind(node, 'keydown', this._keyHandler, true);\n  }\n\n  this._node = null;\n};\n\nKeyboard.prototype._fire = function (event) {\n  this._eventBus.fire('keyboard.' + event, {\n    node: this._node\n  });\n};\n/**\n * Add a listener function that is notified with `KeyboardEvent` whenever\n * the keyboard is bound and the user presses a key. If no priority is\n * provided, the default value of 1000 is used.\n *\n * @param {Number} priority\n * @param {Function} listener\n */\n\n\nKeyboard.prototype.addListener = function (priority, listener) {\n  if (isFunction(priority)) {\n    listener = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  this._eventBus.on(KEYDOWN_EVENT, priority, listener);\n};\n\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\nKeyboard.prototype.isKey = isKey; // helpers ///////\n\nfunction isInput(target) {\n  return target && (domMatches(target, 'input, textarea') || target.contentEditable === 'true');\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/keyboard/Keyboard.js"],"names":["isFunction","event","domEvent","matches","domMatches","hasModifier","isCmd","isKey","isShift","KEYDOWN_EVENT","DEFAULT_PRIORITY","Keyboard","config","eventBus","self","_config","_eventBus","_keyHandler","bind","on","_fire","unbind","bindTo","$inject","prototype","target","eventBusResult","isInput","context","keyEvent","fire","preventDefault","node","_node","getBinding","addListener","priority","listener","contentEditable"],"mappings":"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","sourcesContent":["import {\n  isFunction\n} from 'min-dash';\n\nimport {\n  event as domEvent,\n  matches as domMatches\n} from 'min-dom';\n\nimport {\n  hasModifier,\n  isCmd,\n  isKey,\n  isShift\n} from './KeyboardUtil';\n\nvar KEYDOWN_EVENT = 'keyboard.keydown';\n\nvar DEFAULT_PRIORITY = 1000;\n\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * For keys pressed down, keyboard fires `keyboard.keydown` event.\n * The event context contains one field which is `KeyboardEvent` event.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain one field which is node.\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n */\nexport default function Keyboard(config, eventBus) {\n  var self = this;\n\n  this._config = config || {};\n  this._eventBus = eventBus;\n\n  this._keyHandler = this._keyHandler.bind(this);\n\n  // properly clean dom registrations\n  eventBus.on('diagram.destroy', function() {\n    self._fire('destroy');\n\n    self.unbind();\n  });\n\n  eventBus.on('diagram.init', function() {\n    self._fire('init');\n  });\n\n  eventBus.on('attach', function() {\n    if (config && config.bindTo) {\n      self.bind(config.bindTo);\n    }\n  });\n\n  eventBus.on('detach', function() {\n    self.unbind();\n  });\n}\n\nKeyboard.$inject = [\n  'config.keyboard',\n  'eventBus'\n];\n\nKeyboard.prototype._keyHandler = function(event) {\n\n  var target = event.target,\n      eventBusResult;\n\n  if (isInput(target)) {\n    return;\n  }\n\n  var context = {\n    keyEvent: event\n  };\n\n  eventBusResult = this._eventBus.fire(KEYDOWN_EVENT, context);\n\n  if (eventBusResult) {\n    event.preventDefault();\n  }\n};\n\nKeyboard.prototype.bind = function(node) {\n\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n\n  this._node = node;\n\n  // bind key events\n  domEvent.bind(node, 'keydown', this._keyHandler, true);\n\n  this._fire('bind');\n};\n\nKeyboard.prototype.getBinding = function() {\n  return this._node;\n};\n\nKeyboard.prototype.unbind = function() {\n  var node = this._node;\n\n  if (node) {\n    this._fire('unbind');\n\n    // unbind key events\n    domEvent.unbind(node, 'keydown', this._keyHandler, true);\n  }\n\n  this._node = null;\n};\n\nKeyboard.prototype._fire = function(event) {\n  this._eventBus.fire('keyboard.' + event, { node: this._node });\n};\n\n/**\n * Add a listener function that is notified with `KeyboardEvent` whenever\n * the keyboard is bound and the user presses a key. If no priority is\n * provided, the default value of 1000 is used.\n *\n * @param {Number} priority\n * @param {Function} listener\n */\nKeyboard.prototype.addListener = function(priority, listener) {\n  if (isFunction(priority)) {\n    listener = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  this._eventBus.on(KEYDOWN_EVENT, priority, listener);\n};\n\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\nKeyboard.prototype.isKey = isKey;\n\n\n\n// helpers ///////\n\nfunction isInput(target) {\n  return target && (domMatches(target, 'input, textarea') || target.contentEditable === 'true');\n}\n"]},"metadata":{},"sourceType":"module"}