{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { append as svgAppend, attr as svgAttr, clone as svgClone, create as svgCreate } from 'tiny-svg';\n/**\r\n * Adds support for previews of moving/resizing elements.\r\n */\n\nexport default function PreviewSupport(elementRegistry, canvas, styles) {\n  this._elementRegistry = elementRegistry;\n  this._canvas = canvas;\n  this._styles = styles;\n}\nPreviewSupport.$inject = ['elementRegistry', 'canvas', 'styles'];\n/**\r\n * Returns graphics of an element.\r\n *\r\n * @param {djs.model.Base} element\r\n *\r\n * @return {SVGElement}\r\n */\n\nPreviewSupport.prototype.getGfx = function (element) {\n  return this._elementRegistry.getGraphics(element);\n};\n/**\r\n * Adds a move preview of a given shape to a given svg group.\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} group\r\n *\r\n * @return {SVGElement} dragger\r\n */\n\n\nPreviewSupport.prototype.addDragger = function (shape, group) {\n  var gfx = this.getGfx(shape); // clone is not included in tsvg for some reason\n\n  var dragger = svgClone(gfx);\n  var bbox = gfx.getBoundingClientRect(); // remove markers from connections\n\n  if (isConnection(shape)) {\n    removeMarkers(dragger);\n  }\n\n  svgAttr(dragger, this._styles.cls('djs-dragger', [], {\n    x: bbox.top,\n    y: bbox.left\n  }));\n  svgAppend(group, dragger);\n  return dragger;\n};\n/**\r\n * Adds a resize preview of a given shape to a given svg group.\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} group\r\n *\r\n * @return {SVGElement} frame\r\n */\n\n\nPreviewSupport.prototype.addFrame = function (shape, group) {\n  var frame = svgCreate('rect', {\n    class: 'djs-resize-overlay',\n    width: shape.width,\n    height: shape.height,\n    x: shape.x,\n    y: shape.y\n  });\n  svgAppend(group, frame);\n  return frame;\n}; // helpers //////////////////////\n\n/**\r\n * Removes all svg marker references from an SVG.\r\n *\r\n * @param {SVGElement} gfx\r\n */\n\n\nfunction removeMarkers(gfx) {\n  if (gfx.children) {\n    forEach(gfx.children, function (child) {\n      // recursion\n      removeMarkers(child);\n    });\n  }\n\n  gfx.style.markerStart = '';\n  gfx.style.markerEnd = '';\n}\n/**\r\n * Checks if an element is a connection.\r\n */\n\n\nfunction isConnection(element) {\n  return element.waypoints;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/preview-support/PreviewSupport.js"],"names":["forEach","append","svgAppend","attr","svgAttr","clone","svgClone","create","svgCreate","PreviewSupport","elementRegistry","canvas","styles","_elementRegistry","_canvas","_styles","$inject","prototype","getGfx","element","getGraphics","addDragger","shape","group","gfx","dragger","bbox","getBoundingClientRect","isConnection","removeMarkers","cls","x","top","y","left","addFrame","frame","class","width","height","children","child","style","markerStart","markerEnd","waypoints"],"mappings":"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","sourcesContent":["import {\r\n  forEach\r\n} from 'min-dash';\r\n\r\nimport {\r\n  append as svgAppend,\r\n  attr as svgAttr,\r\n  clone as svgClone,\r\n  create as svgCreate\r\n} from 'tiny-svg';\r\n\r\n\r\n/**\r\n * Adds support for previews of moving/resizing elements.\r\n */\r\nexport default function PreviewSupport(elementRegistry, canvas, styles) {\r\n  this._elementRegistry = elementRegistry;\r\n  this._canvas = canvas;\r\n  this._styles = styles;\r\n}\r\n\r\nPreviewSupport.$inject = [\r\n  'elementRegistry',\r\n  'canvas',\r\n  'styles'\r\n];\r\n\r\n\r\n/**\r\n * Returns graphics of an element.\r\n *\r\n * @param {djs.model.Base} element\r\n *\r\n * @return {SVGElement}\r\n */\r\nPreviewSupport.prototype.getGfx = function(element) {\r\n  return this._elementRegistry.getGraphics(element);\r\n};\r\n\r\n/**\r\n * Adds a move preview of a given shape to a given svg group.\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} group\r\n *\r\n * @return {SVGElement} dragger\r\n */\r\nPreviewSupport.prototype.addDragger = function(shape, group) {\r\n  var gfx = this.getGfx(shape);\r\n\r\n  // clone is not included in tsvg for some reason\r\n  var dragger = svgClone(gfx);\r\n  var bbox = gfx.getBoundingClientRect();\r\n\r\n  // remove markers from connections\r\n  if (isConnection(shape)) {\r\n    removeMarkers(dragger);\r\n  }\r\n\r\n  svgAttr(dragger, this._styles.cls('djs-dragger', [], {\r\n    x: bbox.top,\r\n    y: bbox.left\r\n  }));\r\n\r\n  svgAppend(group, dragger);\r\n\r\n  return dragger;\r\n};\r\n\r\n/**\r\n * Adds a resize preview of a given shape to a given svg group.\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} group\r\n *\r\n * @return {SVGElement} frame\r\n */\r\nPreviewSupport.prototype.addFrame = function(shape, group) {\r\n\r\n  var frame = svgCreate('rect', {\r\n    class: 'djs-resize-overlay',\r\n    width:  shape.width,\r\n    height: shape.height,\r\n    x: shape.x,\r\n    y: shape.y\r\n  });\r\n\r\n  svgAppend(group, frame);\r\n\r\n  return frame;\r\n};\r\n\r\n\r\n// helpers //////////////////////\r\n\r\n/**\r\n * Removes all svg marker references from an SVG.\r\n *\r\n * @param {SVGElement} gfx\r\n */\r\nfunction removeMarkers(gfx) {\r\n\r\n  if (gfx.children) {\r\n\r\n    forEach(gfx.children, function(child) {\r\n\r\n      // recursion\r\n      removeMarkers(child);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  gfx.style.markerStart = '';\r\n  gfx.style.markerEnd = '';\r\n\r\n}\r\n\r\n/**\r\n * Checks if an element is a connection.\r\n */\r\nfunction isConnection(element) {\r\n  return element.waypoints;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}