{"ast":null,"code":"import { map, assign, pick } from 'min-dash';\nimport { isAny } from './util/ModelingUtil';\nexport default function BpmnFactory(moddle) {\n  this._model = moddle;\n}\nBpmnFactory.$inject = ['moddle'];\n\nBpmnFactory.prototype._needsId = function (element) {\n  return isAny(element, ['bpmn:RootElement', 'bpmn:FlowElement', 'bpmn:MessageFlow', 'bpmn:DataAssociation', 'bpmn:Artifact', 'bpmn:Participant', 'bpmn:Lane', 'bpmn:LaneSet', 'bpmn:Process', 'bpmn:Collaboration', 'bpmndi:BPMNShape', 'bpmndi:BPMNEdge', 'bpmndi:BPMNDiagram', 'bpmndi:BPMNPlane', 'bpmn:Property']);\n};\n\nBpmnFactory.prototype._ensureId = function (element) {\n  // generate semantic ids for elements\n  // bpmn:SequenceFlow -> SequenceFlow_ID\n  var prefix = (element.$type || '').replace(/^[^:]*:/g, '') + '_';\n\n  if (!element.id && this._needsId(element)) {\n    element.id = this._model.ids.nextPrefixed(prefix, element);\n  }\n};\n\nBpmnFactory.prototype.create = function (type, attrs) {\n  var element = this._model.create(type, attrs || {});\n\n  this._ensureId(element);\n\n  return element;\n};\n\nBpmnFactory.prototype.createDiLabel = function () {\n  return this.create('bpmndi:BPMNLabel', {\n    bounds: this.createDiBounds()\n  });\n};\n\nBpmnFactory.prototype.createDiShape = function (semantic, bounds, attrs) {\n  return this.create('bpmndi:BPMNShape', assign({\n    bpmnElement: semantic,\n    bounds: this.createDiBounds(bounds)\n  }, attrs));\n};\n\nBpmnFactory.prototype.createDiBounds = function (bounds) {\n  return this.create('dc:Bounds', bounds);\n};\n\nBpmnFactory.prototype.createDiWaypoints = function (waypoints) {\n  var self = this;\n  return map(waypoints, function (pos) {\n    return self.createDiWaypoint(pos);\n  });\n};\n\nBpmnFactory.prototype.createDiWaypoint = function (point) {\n  return this.create('dc:Point', pick(point, ['x', 'y']));\n};\n\nBpmnFactory.prototype.createDiEdge = function (semantic, waypoints, attrs) {\n  return this.create('bpmndi:BPMNEdge', assign({\n    bpmnElement: semantic\n  }, attrs));\n};\n\nBpmnFactory.prototype.createDiPlane = function (semantic) {\n  return this.create('bpmndi:BPMNPlane', {\n    bpmnElement: semantic\n  });\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/features/modeling/BpmnFactory.js"],"names":["map","assign","pick","isAny","BpmnFactory","moddle","_model","$inject","prototype","_needsId","element","_ensureId","prefix","$type","replace","id","ids","nextPrefixed","create","type","attrs","createDiLabel","bounds","createDiBounds","createDiShape","semantic","bpmnElement","createDiWaypoints","waypoints","self","pos","createDiWaypoint","point","createDiEdge","createDiPlane"],"mappings":"AAAA,SACEA,GADF,EAEEC,MAFF,EAGEC,IAHF,QAIO,UAJP;AAMA,SACEC,KADF,QAEO,qBAFP;AAKA,eAAe,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC1C,OAAKC,MAAL,GAAcD,MAAd;AACD;AAEDD,WAAW,CAACG,OAAZ,GAAsB,CAAE,QAAF,CAAtB;;AAGAH,WAAW,CAACI,SAAZ,CAAsBC,QAAtB,GAAiC,UAASC,OAAT,EAAkB;AACjD,SAAOP,KAAK,CAACO,OAAD,EAAU,CACpB,kBADoB,EAEpB,kBAFoB,EAGpB,kBAHoB,EAIpB,sBAJoB,EAKpB,eALoB,EAMpB,kBANoB,EAOpB,WAPoB,EAQpB,cARoB,EASpB,cAToB,EAUpB,oBAVoB,EAWpB,kBAXoB,EAYpB,iBAZoB,EAapB,oBAboB,EAcpB,kBAdoB,EAepB,eAfoB,CAAV,CAAZ;AAiBD,CAlBD;;AAoBAN,WAAW,CAACI,SAAZ,CAAsBG,SAAtB,GAAkC,UAASD,OAAT,EAAkB;AAElD;AACA;AACA,MAAIE,MAAM,GAAG,CAACF,OAAO,CAACG,KAAR,IAAiB,EAAlB,EAAsBC,OAAtB,CAA8B,UAA9B,EAA0C,EAA1C,IAAgD,GAA7D;;AAEA,MAAI,CAACJ,OAAO,CAACK,EAAT,IAAe,KAAKN,QAAL,CAAcC,OAAd,CAAnB,EAA2C;AACzCA,IAAAA,OAAO,CAACK,EAAR,GAAa,KAAKT,MAAL,CAAYU,GAAZ,CAAgBC,YAAhB,CAA6BL,MAA7B,EAAqCF,OAArC,CAAb;AACD;AACF,CATD;;AAYAN,WAAW,CAACI,SAAZ,CAAsBU,MAAtB,GAA+B,UAASC,IAAT,EAAeC,KAAf,EAAsB;AACnD,MAAIV,OAAO,GAAG,KAAKJ,MAAL,CAAYY,MAAZ,CAAmBC,IAAnB,EAAyBC,KAAK,IAAI,EAAlC,CAAd;;AAEA,OAAKT,SAAL,CAAeD,OAAf;;AAEA,SAAOA,OAAP;AACD,CAND;;AASAN,WAAW,CAACI,SAAZ,CAAsBa,aAAtB,GAAsC,YAAW;AAC/C,SAAO,KAAKH,MAAL,CAAY,kBAAZ,EAAgC;AACrCI,IAAAA,MAAM,EAAE,KAAKC,cAAL;AAD6B,GAAhC,CAAP;AAGD,CAJD;;AAOAnB,WAAW,CAACI,SAAZ,CAAsBgB,aAAtB,GAAsC,UAASC,QAAT,EAAmBH,MAAnB,EAA2BF,KAA3B,EAAkC;AAEtE,SAAO,KAAKF,MAAL,CAAY,kBAAZ,EAAgCjB,MAAM,CAAC;AAC5CyB,IAAAA,WAAW,EAAED,QAD+B;AAE5CH,IAAAA,MAAM,EAAE,KAAKC,cAAL,CAAoBD,MAApB;AAFoC,GAAD,EAG1CF,KAH0C,CAAtC,CAAP;AAID,CAND;;AASAhB,WAAW,CAACI,SAAZ,CAAsBe,cAAtB,GAAuC,UAASD,MAAT,EAAiB;AACtD,SAAO,KAAKJ,MAAL,CAAY,WAAZ,EAAyBI,MAAzB,CAAP;AACD,CAFD;;AAKAlB,WAAW,CAACI,SAAZ,CAAsBmB,iBAAtB,GAA0C,UAASC,SAAT,EAAoB;AAC5D,MAAIC,IAAI,GAAG,IAAX;AAEA,SAAO7B,GAAG,CAAC4B,SAAD,EAAY,UAASE,GAAT,EAAc;AAClC,WAAOD,IAAI,CAACE,gBAAL,CAAsBD,GAAtB,CAAP;AACD,GAFS,CAAV;AAGD,CAND;;AAQA1B,WAAW,CAACI,SAAZ,CAAsBuB,gBAAtB,GAAyC,UAASC,KAAT,EAAgB;AACvD,SAAO,KAAKd,MAAL,CAAY,UAAZ,EAAwBhB,IAAI,CAAC8B,KAAD,EAAQ,CAAE,GAAF,EAAO,GAAP,CAAR,CAA5B,CAAP;AACD,CAFD;;AAKA5B,WAAW,CAACI,SAAZ,CAAsByB,YAAtB,GAAqC,UAASR,QAAT,EAAmBG,SAAnB,EAA8BR,KAA9B,EAAqC;AACxE,SAAO,KAAKF,MAAL,CAAY,iBAAZ,EAA+BjB,MAAM,CAAC;AAC3CyB,IAAAA,WAAW,EAAED;AAD8B,GAAD,EAEzCL,KAFyC,CAArC,CAAP;AAGD,CAJD;;AAMAhB,WAAW,CAACI,SAAZ,CAAsB0B,aAAtB,GAAsC,UAAST,QAAT,EAAmB;AACvD,SAAO,KAAKP,MAAL,CAAY,kBAAZ,EAAgC;AACrCQ,IAAAA,WAAW,EAAED;AADwB,GAAhC,CAAP;AAGD,CAJD","sourcesContent":["import {\n  map,\n  assign,\n  pick\n} from 'min-dash';\n\nimport {\n  isAny\n} from './util/ModelingUtil';\n\n\nexport default function BpmnFactory(moddle) {\n  this._model = moddle;\n}\n\nBpmnFactory.$inject = [ 'moddle' ];\n\n\nBpmnFactory.prototype._needsId = function(element) {\n  return isAny(element, [\n    'bpmn:RootElement',\n    'bpmn:FlowElement',\n    'bpmn:MessageFlow',\n    'bpmn:DataAssociation',\n    'bpmn:Artifact',\n    'bpmn:Participant',\n    'bpmn:Lane',\n    'bpmn:LaneSet',\n    'bpmn:Process',\n    'bpmn:Collaboration',\n    'bpmndi:BPMNShape',\n    'bpmndi:BPMNEdge',\n    'bpmndi:BPMNDiagram',\n    'bpmndi:BPMNPlane',\n    'bpmn:Property'\n  ]);\n};\n\nBpmnFactory.prototype._ensureId = function(element) {\n\n  // generate semantic ids for elements\n  // bpmn:SequenceFlow -> SequenceFlow_ID\n  var prefix = (element.$type || '').replace(/^[^:]*:/g, '') + '_';\n\n  if (!element.id && this._needsId(element)) {\n    element.id = this._model.ids.nextPrefixed(prefix, element);\n  }\n};\n\n\nBpmnFactory.prototype.create = function(type, attrs) {\n  var element = this._model.create(type, attrs || {});\n\n  this._ensureId(element);\n\n  return element;\n};\n\n\nBpmnFactory.prototype.createDiLabel = function() {\n  return this.create('bpmndi:BPMNLabel', {\n    bounds: this.createDiBounds()\n  });\n};\n\n\nBpmnFactory.prototype.createDiShape = function(semantic, bounds, attrs) {\n\n  return this.create('bpmndi:BPMNShape', assign({\n    bpmnElement: semantic,\n    bounds: this.createDiBounds(bounds)\n  }, attrs));\n};\n\n\nBpmnFactory.prototype.createDiBounds = function(bounds) {\n  return this.create('dc:Bounds', bounds);\n};\n\n\nBpmnFactory.prototype.createDiWaypoints = function(waypoints) {\n  var self = this;\n\n  return map(waypoints, function(pos) {\n    return self.createDiWaypoint(pos);\n  });\n};\n\nBpmnFactory.prototype.createDiWaypoint = function(point) {\n  return this.create('dc:Point', pick(point, [ 'x', 'y' ]));\n};\n\n\nBpmnFactory.prototype.createDiEdge = function(semantic, waypoints, attrs) {\n  return this.create('bpmndi:BPMNEdge', assign({\n    bpmnElement: semantic\n  }, attrs));\n};\n\nBpmnFactory.prototype.createDiPlane = function(semantic) {\n  return this.create('bpmndi:BPMNPlane', {\n    bpmnElement: semantic\n  });\n};"]},"metadata":{},"sourceType":"module"}