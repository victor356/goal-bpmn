{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory');\n\nvar cmdHelper = require('../../../../helper/CmdHelper');\n\nmodule.exports = function (element, bpmnFactory, options, translate) {\n  var getBusinessObject = options.getBusinessObject;\n  var isStartableInTasklistEntry = entryFactory.checkbox({\n    id: 'isStartableInTasklist',\n    label: translate('Startable'),\n    modelProperty: 'isStartableInTasklist',\n    get: function (element, node) {\n      var bo = getBusinessObject(element);\n      var isStartableInTasklist = bo.get('camunda:isStartableInTasklist');\n      return {\n        isStartableInTasklist: isStartableInTasklist ? isStartableInTasklist : ''\n      };\n    },\n    set: function (element, values) {\n      var bo = getBusinessObject(element);\n      return cmdHelper.updateBusinessObject(element, bo, {\n        'camunda:isStartableInTasklist': !!values.isStartableInTasklist\n      });\n    }\n  });\n  return [isStartableInTasklistEntry];\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/implementation/Tasklist.js"],"names":["entryFactory","require","cmdHelper","module","exports","element","bpmnFactory","options","translate","getBusinessObject","isStartableInTasklistEntry","checkbox","id","label","modelProperty","get","node","bo","isStartableInTasklist","set","values","updateBusinessObject"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,kCAAD,CAA1B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,8BAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkBC,WAAlB,EAA+BC,OAA/B,EAAwCC,SAAxC,EAAmD;AAElE,MAAIC,iBAAiB,GAAGF,OAAO,CAACE,iBAAhC;AAEA,MAAIC,0BAA0B,GAAGV,YAAY,CAACW,QAAb,CAAsB;AACrDC,IAAAA,EAAE,EAAE,uBADiD;AAErDC,IAAAA,KAAK,EAAEL,SAAS,CAAC,WAAD,CAFqC;AAGrDM,IAAAA,aAAa,EAAE,uBAHsC;AAKrDC,IAAAA,GAAG,EAAE,UAASV,OAAT,EAAkBW,IAAlB,EAAwB;AAC3B,UAAIC,EAAE,GAAGR,iBAAiB,CAACJ,OAAD,CAA1B;AACA,UAAIa,qBAAqB,GAAGD,EAAE,CAACF,GAAH,CAAO,+BAAP,CAA5B;AAEA,aAAO;AACLG,QAAAA,qBAAqB,EAAEA,qBAAqB,GAAGA,qBAAH,GAA2B;AADlE,OAAP;AAGD,KAZoD;AAcrDC,IAAAA,GAAG,EAAE,UAASd,OAAT,EAAkBe,MAAlB,EAA0B;AAC7B,UAAIH,EAAE,GAAGR,iBAAiB,CAACJ,OAAD,CAA1B;AACA,aAAOH,SAAS,CAACmB,oBAAV,CAA+BhB,OAA/B,EAAwCY,EAAxC,EAA4C;AACjD,yCAAiC,CAAC,CAACG,MAAM,CAACF;AADO,OAA5C,CAAP;AAGD;AAnBoD,GAAtB,CAAjC;AAuBA,SAAO,CACLR,0BADK,CAAP;AAGD,CA9BD","sourcesContent":["'use strict';\r\n\r\nvar entryFactory = require('../../../../factory/EntryFactory');\r\n\r\nvar cmdHelper = require('../../../../helper/CmdHelper');\r\n\r\nmodule.exports = function(element, bpmnFactory, options, translate) {\r\n\r\n  var getBusinessObject = options.getBusinessObject;\r\n\r\n  var isStartableInTasklistEntry = entryFactory.checkbox({\r\n    id: 'isStartableInTasklist',\r\n    label: translate('Startable'),\r\n    modelProperty: 'isStartableInTasklist',\r\n\r\n    get: function(element, node) {\r\n      var bo = getBusinessObject(element);\r\n      var isStartableInTasklist = bo.get('camunda:isStartableInTasklist');\r\n\r\n      return {\r\n        isStartableInTasklist: isStartableInTasklist ? isStartableInTasklist : ''\r\n      };\r\n    },\r\n\r\n    set: function(element, values) {\r\n      var bo = getBusinessObject(element);\r\n      return cmdHelper.updateBusinessObject(element, bo, {\r\n        'camunda:isStartableInTasklist': !!values.isStartableInTasklist\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n  return [\r\n    isStartableInTasklistEntry\r\n  ];\r\n};\r\n"]},"metadata":{},"sourceType":"script"}