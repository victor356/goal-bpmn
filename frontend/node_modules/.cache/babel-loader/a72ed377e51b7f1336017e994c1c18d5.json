{"ast":null,"code":"'use strict';\n\nvar map = require('lodash/map');\n\nvar extensionElementsHelper = require('./ExtensionElementsHelper');\n/**\n * Returns true if the attribute 'camunda:asyncBefore' is set\n * to true.\n *\n * @param  {ModdleElement} bo\n *\n * @return {boolean} a boolean value\n */\n\n\nfunction isAsyncBefore(bo) {\n  return !!(bo.get('camunda:asyncBefore') || bo.get('camunda:async'));\n}\n\nmodule.exports.isAsyncBefore = isAsyncBefore;\n/**\n * Returns true if the attribute 'camunda:asyncAfter' is set\n * to true.\n *\n * @param  {ModdleElement} bo\n *\n * @return {boolean} a boolean value\n */\n\nfunction isAsyncAfter(bo) {\n  return !!bo.get('camunda:asyncAfter');\n}\n\nmodule.exports.isAsyncAfter = isAsyncAfter;\n/**\n * Returns true if the attribute 'camunda:exclusive' is set\n * to true.\n *\n * @param  {ModdleElement} bo\n *\n * @return {boolean} a boolean value\n */\n\nfunction isExclusive(bo) {\n  return !!bo.get('camunda:exclusive');\n}\n\nmodule.exports.isExclusive = isExclusive;\n/**\n * Get first 'camunda:FailedJobRetryTimeCycle' from the business object.\n *\n * @param  {ModdleElement} bo\n *\n * @return {Array<ModdleElement>} a list of 'camunda:FailedJobRetryTimeCycle'\n */\n\nfunction getFailedJobRetryTimeCycle(bo) {\n  return (extensionElementsHelper.getExtensionElements(bo, 'camunda:FailedJobRetryTimeCycle') || [])[0];\n}\n\nmodule.exports.getFailedJobRetryTimeCycle = getFailedJobRetryTimeCycle;\n/**\n * Removes all existing 'camunda:FailedJobRetryTimeCycle' from the business object\n *\n * @param  {ModdleElement} bo\n *\n * @return {Array<ModdleElement>} a list of 'camunda:FailedJobRetryTimeCycle'\n */\n\nfunction removeFailedJobRetryTimeCycle(bo, element) {\n  var retryTimeCycles = extensionElementsHelper.getExtensionElements(bo, 'camunda:FailedJobRetryTimeCycle');\n  return map(retryTimeCycles, function (cycle) {\n    return extensionElementsHelper.removeEntry(bo, element, cycle);\n  });\n}\n\nmodule.exports.removeFailedJobRetryTimeCycle = removeFailedJobRetryTimeCycle;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/helper/AsyncCapableHelper.js"],"names":["map","require","extensionElementsHelper","isAsyncBefore","bo","get","module","exports","isAsyncAfter","isExclusive","getFailedJobRetryTimeCycle","getExtensionElements","removeFailedJobRetryTimeCycle","element","retryTimeCycles","cycle","removeEntry"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAjB;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,2BAAD,CAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,SAAO,CAAC,EAAEA,EAAE,CAACC,GAAH,CAAO,qBAAP,KAAiCD,EAAE,CAACC,GAAH,CAAO,eAAP,CAAnC,CAAR;AACD;;AAEDC,MAAM,CAACC,OAAP,CAAeJ,aAAf,GAA+BA,aAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASK,YAAT,CAAsBJ,EAAtB,EAA0B;AACxB,SAAO,CAAC,CAACA,EAAE,CAACC,GAAH,CAAO,oBAAP,CAAT;AACD;;AAEDC,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BA,YAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBL,EAArB,EAAyB;AACvB,SAAO,CAAC,CAACA,EAAE,CAACC,GAAH,CAAO,mBAAP,CAAT;AACD;;AAEDC,MAAM,CAACC,OAAP,CAAeE,WAAf,GAA6BA,WAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,0BAAT,CAAoCN,EAApC,EAAwC;AACtC,SAAO,CAACF,uBAAuB,CAACS,oBAAxB,CAA6CP,EAA7C,EAAiD,iCAAjD,KAAuF,EAAxF,EAA4F,CAA5F,CAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,CAAeG,0BAAf,GAA4CA,0BAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,6BAAT,CAAuCR,EAAvC,EAA2CS,OAA3C,EAAoD;AAClD,MAAIC,eAAe,GAAGZ,uBAAuB,CAACS,oBAAxB,CAA6CP,EAA7C,EAAiD,iCAAjD,CAAtB;AACA,SAAOJ,GAAG,CAACc,eAAD,EAAkB,UAASC,KAAT,EAAgB;AAC1C,WAAOb,uBAAuB,CAACc,WAAxB,CAAoCZ,EAApC,EAAwCS,OAAxC,EAAiDE,KAAjD,CAAP;AACD,GAFS,CAAV;AAGD;;AAEDT,MAAM,CAACC,OAAP,CAAeK,6BAAf,GAA+CA,6BAA/C","sourcesContent":["'use strict';\n\nvar map = require('lodash/map');\n\nvar extensionElementsHelper = require('./ExtensionElementsHelper');\n\n/**\n * Returns true if the attribute 'camunda:asyncBefore' is set\n * to true.\n *\n * @param  {ModdleElement} bo\n *\n * @return {boolean} a boolean value\n */\nfunction isAsyncBefore(bo) {\n  return !!(bo.get('camunda:asyncBefore') || bo.get('camunda:async'));\n}\n\nmodule.exports.isAsyncBefore = isAsyncBefore;\n\n/**\n * Returns true if the attribute 'camunda:asyncAfter' is set\n * to true.\n *\n * @param  {ModdleElement} bo\n *\n * @return {boolean} a boolean value\n */\nfunction isAsyncAfter(bo) {\n  return !!bo.get('camunda:asyncAfter');\n}\n\nmodule.exports.isAsyncAfter = isAsyncAfter;\n\n/**\n * Returns true if the attribute 'camunda:exclusive' is set\n * to true.\n *\n * @param  {ModdleElement} bo\n *\n * @return {boolean} a boolean value\n */\nfunction isExclusive(bo) {\n  return !!bo.get('camunda:exclusive');\n}\n\nmodule.exports.isExclusive = isExclusive;\n\n/**\n * Get first 'camunda:FailedJobRetryTimeCycle' from the business object.\n *\n * @param  {ModdleElement} bo\n *\n * @return {Array<ModdleElement>} a list of 'camunda:FailedJobRetryTimeCycle'\n */\nfunction getFailedJobRetryTimeCycle(bo) {\n  return (extensionElementsHelper.getExtensionElements(bo, 'camunda:FailedJobRetryTimeCycle') || [])[0];\n}\n\nmodule.exports.getFailedJobRetryTimeCycle = getFailedJobRetryTimeCycle;\n\n/**\n * Removes all existing 'camunda:FailedJobRetryTimeCycle' from the business object\n *\n * @param  {ModdleElement} bo\n *\n * @return {Array<ModdleElement>} a list of 'camunda:FailedJobRetryTimeCycle'\n */\nfunction removeFailedJobRetryTimeCycle(bo, element) {\n  var retryTimeCycles = extensionElementsHelper.getExtensionElements(bo, 'camunda:FailedJobRetryTimeCycle');\n  return map(retryTimeCycles, function(cycle) {\n    return extensionElementsHelper.removeEntry(bo, element, cycle);\n  });\n}\n\nmodule.exports.removeFailedJobRetryTimeCycle = removeFailedJobRetryTimeCycle;"]},"metadata":{},"sourceType":"script"}