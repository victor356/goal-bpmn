{"ast":null,"code":"'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar entryFactory = require('../../../factory/EntryFactory');\n\nvar callable = require('./implementation/Callable');\n\nvar cmdHelper = require('../../../helper/CmdHelper');\n\nvar flattenDeep = require('lodash/flattenDeep');\n\nvar assign = require('lodash/assign');\n\nfunction getCallableType(element) {\n  var bo = getBusinessObject(element);\n  var boCalledElement = bo.get('calledElement'),\n      boCaseRef = bo.get('camunda:caseRef');\n  var callActivityType = '';\n\n  if (typeof boCalledElement !== 'undefined') {\n    callActivityType = 'bpmn';\n  } else if (typeof boCaseRef !== 'undefined') {\n    callActivityType = 'cmmn';\n  }\n\n  return callActivityType;\n}\n\nvar DEFAULT_PROPS = {\n  calledElement: undefined,\n  'camunda:calledElementBinding': 'latest',\n  'camunda:calledElementVersion': undefined,\n  'camunda:calledElementTenantId': undefined,\n  'camunda:variableMappingClass': undefined,\n  'camunda:variableMappingDelegateExpression': undefined,\n  'camunda:caseRef': undefined,\n  'camunda:caseBinding': 'latest',\n  'camunda:caseVersion': undefined,\n  'camunda:caseTenantId': undefined\n};\n\nmodule.exports = function (group, element, bpmnFactory, translate) {\n  if (!is(element, 'camunda:CallActivity')) {\n    return;\n  }\n\n  group.entries.push(entryFactory.selectBox({\n    id: 'callActivity',\n    label: translate('CallActivity Type'),\n    selectOptions: [{\n      name: 'BPMN',\n      value: 'bpmn'\n    }, {\n      name: 'CMMN',\n      value: 'cmmn'\n    }],\n    emptyParameter: true,\n    modelProperty: 'callActivityType',\n    get: function (element, node) {\n      return {\n        callActivityType: getCallableType(element)\n      };\n    },\n    set: function (element, values, node) {\n      var type = values.callActivityType;\n      var props = assign({}, DEFAULT_PROPS);\n\n      if (type === 'bpmn') {\n        props.calledElement = '';\n      } else if (type === 'cmmn') {\n        props['camunda:caseRef'] = '';\n      }\n\n      return cmdHelper.updateProperties(element, props);\n    }\n  }));\n  group.entries.push(callable(element, bpmnFactory, {\n    getCallableType: getCallableType\n  }, translate));\n  group.entries = flattenDeep(group.entries);\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/CallActivityProps.js"],"names":["getBusinessObject","require","is","entryFactory","callable","cmdHelper","flattenDeep","assign","getCallableType","element","bo","boCalledElement","get","boCaseRef","callActivityType","DEFAULT_PROPS","calledElement","undefined","module","exports","group","bpmnFactory","translate","entries","push","selectBox","id","label","selectOptions","name","value","emptyParameter","modelProperty","node","set","values","type","props","updateProperties"],"mappings":"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","sourcesContent":["'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar entryFactory = require('../../../factory/EntryFactory');\n\nvar callable = require('./implementation/Callable');\n\nvar cmdHelper = require('../../../helper/CmdHelper');\n\nvar flattenDeep = require('lodash/flattenDeep');\nvar assign = require('lodash/assign');\n\nfunction getCallableType(element) {\n  var bo = getBusinessObject(element);\n\n  var boCalledElement = bo.get('calledElement'),\n      boCaseRef = bo.get('camunda:caseRef');\n\n  var callActivityType = '';\n  if (typeof boCalledElement !== 'undefined') {\n    callActivityType = 'bpmn';\n  } else\n\n  if (typeof boCaseRef !== 'undefined') {\n    callActivityType = 'cmmn';\n  }\n\n  return callActivityType;\n}\n\nvar DEFAULT_PROPS = {\n  calledElement: undefined,\n  'camunda:calledElementBinding': 'latest',\n  'camunda:calledElementVersion': undefined,\n  'camunda:calledElementTenantId': undefined,\n  'camunda:variableMappingClass' : undefined,\n  'camunda:variableMappingDelegateExpression' : undefined,\n  'camunda:caseRef': undefined,\n  'camunda:caseBinding': 'latest',\n  'camunda:caseVersion': undefined,\n  'camunda:caseTenantId': undefined\n};\n\nmodule.exports = function(group, element, bpmnFactory, translate) {\n\n  if (!is(element, 'camunda:CallActivity')) {\n    return;\n  }\n\n  group.entries.push(entryFactory.selectBox({\n    id : 'callActivity',\n    label: translate('CallActivity Type'),\n    selectOptions: [\n      { name: 'BPMN', value: 'bpmn' },\n      { name: 'CMMN', value: 'cmmn' }\n    ],\n    emptyParameter: true,\n    modelProperty: 'callActivityType',\n\n    get: function(element, node) {\n      return {\n        callActivityType: getCallableType(element)\n      };\n    },\n\n    set: function(element, values, node) {\n      var type = values.callActivityType;\n\n      var props = assign({}, DEFAULT_PROPS);\n\n      if (type === 'bpmn') {\n        props.calledElement = '';\n      }\n      else if (type === 'cmmn') {\n        props['camunda:caseRef'] = '';\n      }\n\n      return cmdHelper.updateProperties(element, props);\n    }\n\n  }));\n\n  group.entries.push(callable(element, bpmnFactory, {\n    getCallableType: getCallableType\n  }, translate));\n\n  group.entries = flattenDeep(group.entries);\n};\n"]},"metadata":{},"sourceType":"script"}