{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { forEach } from 'min-dash';\nimport { isEventSubProcess } from '../../../util/DiUtil';\nimport { is } from '../../../util/ModelUtil';\n/**\n * Defines the behaviour of what happens to the elements inside a container\n * that morphs into another BPMN element\n */\n\nexport default function ReplaceElementBehaviour(eventBus, bpmnReplace, bpmnRules, elementRegistry, selection, modeling) {\n  CommandInterceptor.call(this, eventBus);\n  this._bpmnReplace = bpmnReplace;\n  this._elementRegistry = elementRegistry;\n  this._selection = selection;\n  this._modeling = modeling;\n  this.postExecuted(['elements.move'], 500, function (event) {\n    var context = event.context,\n        target = context.newParent,\n        newHost = context.newHost,\n        elements = [];\n    forEach(context.closure.topLevel, function (topLevelElements) {\n      if (isEventSubProcess(topLevelElements)) {\n        elements = elements.concat(topLevelElements.children);\n      } else {\n        elements = elements.concat(topLevelElements);\n      }\n    }); // Change target to host when the moving element is a `bpmn:BoundaryEvent`\n\n    if (elements.length === 1 && newHost) {\n      target = newHost;\n    }\n\n    var canReplace = bpmnRules.canReplace(elements, target);\n\n    if (canReplace) {\n      this.replaceElements(elements, canReplace.replacements, newHost);\n    }\n  }, this); // update attachments if the host is replaced\n\n  this.postExecute(['shape.replace'], 1500, function (e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape,\n        attachers = oldShape.attachers,\n        canReplace;\n\n    if (attachers && attachers.length) {\n      canReplace = bpmnRules.canReplace(attachers, newShape);\n      this.replaceElements(attachers, canReplace.replacements);\n    }\n  }, this);\n  this.postExecuted(['shape.replace'], 1500, function (e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape;\n    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);\n    modeling.updateProperties(newShape, {\n      id: oldShape.id\n    });\n  });\n}\ninherits(ReplaceElementBehaviour, CommandInterceptor);\n\nReplaceElementBehaviour.prototype.replaceElements = function (elements, newElements, newHost) {\n  var elementRegistry = this._elementRegistry,\n      bpmnReplace = this._bpmnReplace,\n      selection = this._selection,\n      modeling = this._modeling;\n  forEach(newElements, function (replacement) {\n    var newElement = {\n      type: replacement.newElementType\n    };\n    var oldElement = elementRegistry.get(replacement.oldElementId);\n\n    if (newHost && is(oldElement, 'bpmn:BoundaryEvent')) {\n      modeling.updateAttachment(oldElement, null);\n    }\n\n    var idx = elements.indexOf(oldElement);\n    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, {\n      select: false\n    });\n\n    if (newHost && is(elements[idx], 'bpmn:BoundaryEvent')) {\n      modeling.updateAttachment(elements[idx], newHost);\n    }\n  });\n\n  if (newElements) {\n    selection.select(elements);\n  }\n};\n\nReplaceElementBehaviour.$inject = ['eventBus', 'bpmnReplace', 'bpmnRules', 'elementRegistry', 'selection', 'modeling'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/modeling/behavior/ReplaceElementBehaviour.js"],"names":["inherits","CommandInterceptor","forEach","isEventSubProcess","is","ReplaceElementBehaviour","eventBus","bpmnReplace","bpmnRules","elementRegistry","selection","modeling","call","_bpmnReplace","_elementRegistry","_selection","_modeling","postExecuted","event","context","target","newParent","newHost","elements","closure","topLevel","topLevelElements","concat","children","length","canReplace","replaceElements","replacements","postExecute","e","oldShape","newShape","attachers","unclaimId","businessObject","id","updateProperties","prototype","newElements","replacement","newElement","type","newElementType","oldElement","get","oldElementId","updateAttachment","idx","indexOf","replaceElement","select","$inject"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,OAAOC,kBAAP,MAA+B,2CAA/B;AAEA,SACEC,OADF,QAEO,UAFP;AAIA,SACEC,iBADF,QAEO,sBAFP;AAIA,SAASC,EAAT,QAAmB,yBAAnB;AAGA;AACA;AACA;AACA;;AACA,eAAe,SAASC,uBAAT,CACXC,QADW,EACDC,WADC,EACYC,SADZ,EAEXC,eAFW,EAEMC,SAFN,EAEiBC,QAFjB,EAE2B;AAExCV,EAAAA,kBAAkB,CAACW,IAAnB,CAAwB,IAAxB,EAA8BN,QAA9B;AAEA,OAAKO,YAAL,GAAoBN,WAApB;AACA,OAAKO,gBAAL,GAAwBL,eAAxB;AACA,OAAKM,UAAL,GAAkBL,SAAlB;AACA,OAAKM,SAAL,GAAiBL,QAAjB;AAEA,OAAKM,YAAL,CAAkB,CAAE,eAAF,CAAlB,EAAuC,GAAvC,EAA4C,UAASC,KAAT,EAAgB;AAE1D,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,MAAM,GAAGD,OAAO,CAACE,SADrB;AAAA,QAEIC,OAAO,GAAGH,OAAO,CAACG,OAFtB;AAAA,QAGIC,QAAQ,GAAG,EAHf;AAKArB,IAAAA,OAAO,CAACiB,OAAO,CAACK,OAAR,CAAgBC,QAAjB,EAA2B,UAASC,gBAAT,EAA2B;AAC3D,UAAIvB,iBAAiB,CAACuB,gBAAD,CAArB,EAAyC;AACvCH,QAAAA,QAAQ,GAAGA,QAAQ,CAACI,MAAT,CAAgBD,gBAAgB,CAACE,QAAjC,CAAX;AACD,OAFD,MAEO;AACLL,QAAAA,QAAQ,GAAGA,QAAQ,CAACI,MAAT,CAAgBD,gBAAhB,CAAX;AACD;AACF,KANM,CAAP,CAP0D,CAe1D;;AACA,QAAIH,QAAQ,CAACM,MAAT,KAAoB,CAApB,IAAyBP,OAA7B,EAAsC;AACpCF,MAAAA,MAAM,GAAGE,OAAT;AACD;;AAED,QAAIQ,UAAU,GAAGtB,SAAS,CAACsB,UAAV,CAAqBP,QAArB,EAA+BH,MAA/B,CAAjB;;AAEA,QAAIU,UAAJ,EAAgB;AACd,WAAKC,eAAL,CAAqBR,QAArB,EAA+BO,UAAU,CAACE,YAA1C,EAAwDV,OAAxD;AACD;AACF,GAzBD,EAyBG,IAzBH,EATwC,CAoCxC;;AACA,OAAKW,WAAL,CAAiB,CAAE,eAAF,CAAjB,EAAsC,IAAtC,EAA4C,UAASC,CAAT,EAAY;AAEtD,QAAIf,OAAO,GAAGe,CAAC,CAACf,OAAhB;AAAA,QACIgB,QAAQ,GAAGhB,OAAO,CAACgB,QADvB;AAAA,QAEIC,QAAQ,GAAGjB,OAAO,CAACiB,QAFvB;AAAA,QAGIC,SAAS,GAAGF,QAAQ,CAACE,SAHzB;AAAA,QAIIP,UAJJ;;AAMA,QAAIO,SAAS,IAAIA,SAAS,CAACR,MAA3B,EAAmC;AACjCC,MAAAA,UAAU,GAAGtB,SAAS,CAACsB,UAAV,CAAqBO,SAArB,EAAgCD,QAAhC,CAAb;AAEA,WAAKL,eAAL,CAAqBM,SAArB,EAAgCP,UAAU,CAACE,YAA3C;AACD;AAEF,GAdD,EAcG,IAdH;AAgBA,OAAKf,YAAL,CAAkB,CAAE,eAAF,CAAlB,EAAuC,IAAvC,EAA6C,UAASiB,CAAT,EAAY;AACvD,QAAIf,OAAO,GAAGe,CAAC,CAACf,OAAhB;AAAA,QACIgB,QAAQ,GAAGhB,OAAO,CAACgB,QADvB;AAAA,QAEIC,QAAQ,GAAGjB,OAAO,CAACiB,QAFvB;AAIAzB,IAAAA,QAAQ,CAAC2B,SAAT,CAAmBH,QAAQ,CAACI,cAAT,CAAwBC,EAA3C,EAA+CL,QAAQ,CAACI,cAAxD;AACA5B,IAAAA,QAAQ,CAAC8B,gBAAT,CAA0BL,QAA1B,EAAoC;AAAEI,MAAAA,EAAE,EAAEL,QAAQ,CAACK;AAAf,KAApC;AACD,GAPD;AAQD;AAEDxC,QAAQ,CAACK,uBAAD,EAA0BJ,kBAA1B,CAAR;;AAGAI,uBAAuB,CAACqC,SAAxB,CAAkCX,eAAlC,GAAoD,UAASR,QAAT,EAAmBoB,WAAnB,EAAgCrB,OAAhC,EAAyC;AAC3F,MAAIb,eAAe,GAAG,KAAKK,gBAA3B;AAAA,MACIP,WAAW,GAAG,KAAKM,YADvB;AAAA,MAEIH,SAAS,GAAG,KAAKK,UAFrB;AAAA,MAGIJ,QAAQ,GAAG,KAAKK,SAHpB;AAKAd,EAAAA,OAAO,CAACyC,WAAD,EAAc,UAASC,WAAT,EAAsB;AAEzC,QAAIC,UAAU,GAAG;AACfC,MAAAA,IAAI,EAAEF,WAAW,CAACG;AADH,KAAjB;AAIA,QAAIC,UAAU,GAAGvC,eAAe,CAACwC,GAAhB,CAAoBL,WAAW,CAACM,YAAhC,CAAjB;;AAEA,QAAI5B,OAAO,IAAIlB,EAAE,CAAC4C,UAAD,EAAa,oBAAb,CAAjB,EAAqD;AACnDrC,MAAAA,QAAQ,CAACwC,gBAAT,CAA0BH,UAA1B,EAAsC,IAAtC;AACD;;AAED,QAAII,GAAG,GAAG7B,QAAQ,CAAC8B,OAAT,CAAiBL,UAAjB,CAAV;AAEAzB,IAAAA,QAAQ,CAAC6B,GAAD,CAAR,GAAgB7C,WAAW,CAAC+C,cAAZ,CAA2BN,UAA3B,EAAuCH,UAAvC,EAAmD;AAAEU,MAAAA,MAAM,EAAE;AAAV,KAAnD,CAAhB;;AAEA,QAAIjC,OAAO,IAAIlB,EAAE,CAACmB,QAAQ,CAAC6B,GAAD,CAAT,EAAgB,oBAAhB,CAAjB,EAAwD;AACtDzC,MAAAA,QAAQ,CAACwC,gBAAT,CAA0B5B,QAAQ,CAAC6B,GAAD,CAAlC,EAAyC9B,OAAzC;AACD;AACF,GAnBM,CAAP;;AAqBA,MAAIqB,WAAJ,EAAiB;AACfjC,IAAAA,SAAS,CAAC6C,MAAV,CAAiBhC,QAAjB;AACD;AACF,CA9BD;;AAgCAlB,uBAAuB,CAACmD,OAAxB,GAAkC,CAChC,UADgC,EAEhC,aAFgC,EAGhC,WAHgC,EAIhC,iBAJgC,EAKhC,WALgC,EAMhC,UANgC,CAAlC","sourcesContent":["import inherits from 'inherits';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport {\n  forEach\n} from 'min-dash';\n\nimport {\n  isEventSubProcess\n} from '../../../util/DiUtil';\n\nimport { is } from '../../../util/ModelUtil';\n\n\n/**\n * Defines the behaviour of what happens to the elements inside a container\n * that morphs into another BPMN element\n */\nexport default function ReplaceElementBehaviour(\n    eventBus, bpmnReplace, bpmnRules,\n    elementRegistry, selection, modeling) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  this._bpmnReplace = bpmnReplace;\n  this._elementRegistry = elementRegistry;\n  this._selection = selection;\n  this._modeling = modeling;\n\n  this.postExecuted([ 'elements.move' ], 500, function(event) {\n\n    var context = event.context,\n        target = context.newParent,\n        newHost = context.newHost,\n        elements = [];\n\n    forEach(context.closure.topLevel, function(topLevelElements) {\n      if (isEventSubProcess(topLevelElements)) {\n        elements = elements.concat(topLevelElements.children);\n      } else {\n        elements = elements.concat(topLevelElements);\n      }\n    });\n\n    // Change target to host when the moving element is a `bpmn:BoundaryEvent`\n    if (elements.length === 1 && newHost) {\n      target = newHost;\n    }\n\n    var canReplace = bpmnRules.canReplace(elements, target);\n\n    if (canReplace) {\n      this.replaceElements(elements, canReplace.replacements, newHost);\n    }\n  }, this);\n\n  // update attachments if the host is replaced\n  this.postExecute([ 'shape.replace' ], 1500, function(e) {\n\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape,\n        attachers = oldShape.attachers,\n        canReplace;\n\n    if (attachers && attachers.length) {\n      canReplace = bpmnRules.canReplace(attachers, newShape);\n\n      this.replaceElements(attachers, canReplace.replacements);\n    }\n\n  }, this);\n\n  this.postExecuted([ 'shape.replace' ], 1500, function(e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape;\n\n    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);\n    modeling.updateProperties(newShape, { id: oldShape.id });\n  });\n}\n\ninherits(ReplaceElementBehaviour, CommandInterceptor);\n\n\nReplaceElementBehaviour.prototype.replaceElements = function(elements, newElements, newHost) {\n  var elementRegistry = this._elementRegistry,\n      bpmnReplace = this._bpmnReplace,\n      selection = this._selection,\n      modeling = this._modeling;\n\n  forEach(newElements, function(replacement) {\n\n    var newElement = {\n      type: replacement.newElementType\n    };\n\n    var oldElement = elementRegistry.get(replacement.oldElementId);\n\n    if (newHost && is(oldElement, 'bpmn:BoundaryEvent')) {\n      modeling.updateAttachment(oldElement, null);\n    }\n\n    var idx = elements.indexOf(oldElement);\n\n    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, { select: false });\n\n    if (newHost && is(elements[idx], 'bpmn:BoundaryEvent')) {\n      modeling.updateAttachment(elements[idx], newHost);\n    }\n  });\n\n  if (newElements) {\n    selection.select(elements);\n  }\n};\n\nReplaceElementBehaviour.$inject = [\n  'eventBus',\n  'bpmnReplace',\n  'bpmnRules',\n  'elementRegistry',\n  'selection',\n  'modeling'\n];\n"]},"metadata":{},"sourceType":"module"}