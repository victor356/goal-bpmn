{"ast":null,"code":"'use strict';\n\nvar ImplementationTypeHelper = require('../../../helper/ImplementationTypeHelper'),\n    InputOutputHelper = require('../../../helper/InputOutputHelper');\n\nvar entryFactory = require('../../../factory/EntryFactory'),\n    cmdHelper = require('../../../helper/CmdHelper');\n\nfunction getImplementationType(element) {\n  return ImplementationTypeHelper.getImplementationType(element);\n}\n\nfunction getBusinessObject(element) {\n  return ImplementationTypeHelper.getServiceTaskLikeBusinessObject(element);\n}\n\nfunction getConnector(bo) {\n  return InputOutputHelper.getConnector(bo);\n}\n\nfunction isConnector(element) {\n  return getImplementationType(element) === 'connector';\n}\n\nmodule.exports = function (group, element, bpmnFactory, translate) {\n  group.entries.push(entryFactory.textField({\n    id: 'connectorId',\n    label: translate('Connector Id'),\n    modelProperty: 'connectorId',\n    get: function (element, node) {\n      var bo = getBusinessObject(element);\n      var connector = bo && getConnector(bo);\n      var value = connector && connector.get('connectorId');\n      return {\n        connectorId: value\n      };\n    },\n    set: function (element, values, node) {\n      var bo = getBusinessObject(element);\n      var connector = getConnector(bo);\n      return cmdHelper.updateBusinessObject(element, connector, {\n        connectorId: values.connectorId || undefined\n      });\n    },\n    validate: function (element, values, node) {\n      return isConnector(element) && !values.connectorId ? {\n        connectorId: translate('Must provide a value')\n      } : {};\n    },\n    hidden: function (element, node) {\n      return !isConnector(element);\n    }\n  }));\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/ConnectorDetailProps.js"],"names":["ImplementationTypeHelper","require","InputOutputHelper","entryFactory","cmdHelper","getImplementationType","element","getBusinessObject","getServiceTaskLikeBusinessObject","getConnector","bo","isConnector","module","exports","group","bpmnFactory","translate","entries","push","textField","id","label","modelProperty","get","node","connector","value","connectorId","set","values","updateBusinessObject","undefined","validate","hidden"],"mappings":"AAAA;;AAEA,IAAIA,wBAAwB,GAAGC,OAAO,CAAC,0CAAD,CAAtC;AAAA,IACIC,iBAAiB,GAAGD,OAAO,CAAC,mCAAD,CAD/B;;AAGA,IAAIE,YAAY,GAAGF,OAAO,CAAC,+BAAD,CAA1B;AAAA,IACIG,SAAS,GAAGH,OAAO,CAAC,2BAAD,CADvB;;AAGA,SAASI,qBAAT,CAA+BC,OAA/B,EAAwC;AACtC,SAAON,wBAAwB,CAACK,qBAAzB,CAA+CC,OAA/C,CAAP;AACD;;AAED,SAASC,iBAAT,CAA2BD,OAA3B,EAAoC;AAClC,SAAON,wBAAwB,CAACQ,gCAAzB,CAA0DF,OAA1D,CAAP;AACD;;AAED,SAASG,YAAT,CAAsBC,EAAtB,EAA0B;AACxB,SAAOR,iBAAiB,CAACO,YAAlB,CAA+BC,EAA/B,CAAP;AACD;;AAED,SAASC,WAAT,CAAqBL,OAArB,EAA8B;AAC5B,SAAOD,qBAAqB,CAACC,OAAD,CAArB,KAAmC,WAA1C;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgBR,OAAhB,EAAyBS,WAAzB,EAAsCC,SAAtC,EAAiD;AAEhEF,EAAAA,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmBf,YAAY,CAACgB,SAAb,CAAuB;AACxCC,IAAAA,EAAE,EAAE,aADoC;AAExCC,IAAAA,KAAK,EAAEL,SAAS,CAAC,cAAD,CAFwB;AAGxCM,IAAAA,aAAa,EAAE,aAHyB;AAKxCC,IAAAA,GAAG,EAAE,UAASjB,OAAT,EAAkBkB,IAAlB,EAAwB;AAC3B,UAAId,EAAE,GAAGH,iBAAiB,CAACD,OAAD,CAA1B;AACA,UAAImB,SAAS,GAAGf,EAAE,IAAID,YAAY,CAACC,EAAD,CAAlC;AACA,UAAIgB,KAAK,GAAGD,SAAS,IAAIA,SAAS,CAACF,GAAV,CAAc,aAAd,CAAzB;AACA,aAAO;AAAEI,QAAAA,WAAW,EAAED;AAAf,OAAP;AACD,KAVuC;AAYxCE,IAAAA,GAAG,EAAE,UAAStB,OAAT,EAAkBuB,MAAlB,EAA0BL,IAA1B,EAAgC;AACnC,UAAId,EAAE,GAAGH,iBAAiB,CAACD,OAAD,CAA1B;AACA,UAAImB,SAAS,GAAGhB,YAAY,CAACC,EAAD,CAA5B;AACA,aAAON,SAAS,CAAC0B,oBAAV,CAA+BxB,OAA/B,EAAwCmB,SAAxC,EAAmD;AACxDE,QAAAA,WAAW,EAAEE,MAAM,CAACF,WAAP,IAAsBI;AADqB,OAAnD,CAAP;AAGD,KAlBuC;AAoBxCC,IAAAA,QAAQ,EAAE,UAAS1B,OAAT,EAAkBuB,MAAlB,EAA0BL,IAA1B,EAAgC;AACxC,aAAOb,WAAW,CAACL,OAAD,CAAX,IAAwB,CAACuB,MAAM,CAACF,WAAhC,GAA8C;AAAEA,QAAAA,WAAW,EAAEX,SAAS,CAAC,sBAAD;AAAxB,OAA9C,GAAmG,EAA1G;AACD,KAtBuC;AAwBxCiB,IAAAA,MAAM,EAAE,UAAS3B,OAAT,EAAkBkB,IAAlB,EAAwB;AAC9B,aAAO,CAACb,WAAW,CAACL,OAAD,CAAnB;AACD;AA1BuC,GAAvB,CAAnB;AA8BD,CAhCD","sourcesContent":["'use strict';\n\nvar ImplementationTypeHelper = require('../../../helper/ImplementationTypeHelper'),\n    InputOutputHelper = require('../../../helper/InputOutputHelper');\n\nvar entryFactory = require('../../../factory/EntryFactory'),\n    cmdHelper = require('../../../helper/CmdHelper');\n\nfunction getImplementationType(element) {\n  return ImplementationTypeHelper.getImplementationType(element);\n}\n\nfunction getBusinessObject(element) {\n  return ImplementationTypeHelper.getServiceTaskLikeBusinessObject(element);\n}\n\nfunction getConnector(bo) {\n  return InputOutputHelper.getConnector(bo);\n}\n\nfunction isConnector(element) {\n  return getImplementationType(element) === 'connector';\n}\n\nmodule.exports = function(group, element, bpmnFactory, translate) {\n\n  group.entries.push(entryFactory.textField({\n    id: 'connectorId',\n    label: translate('Connector Id'),\n    modelProperty: 'connectorId',\n\n    get: function(element, node) {\n      var bo = getBusinessObject(element);\n      var connector = bo && getConnector(bo);\n      var value = connector && connector.get('connectorId');\n      return { connectorId: value };\n    },\n\n    set: function(element, values, node) {\n      var bo = getBusinessObject(element);\n      var connector = getConnector(bo);\n      return cmdHelper.updateBusinessObject(element, connector, {\n        connectorId: values.connectorId || undefined\n      });\n    },\n\n    validate: function(element, values, node) {\n      return isConnector(element) && !values.connectorId ? { connectorId: translate('Must provide a value') } : {};\n    },\n\n    hidden: function(element, node) {\n      return !isConnector(element);\n    }\n\n  }));\n\n};\n"]},"metadata":{},"sourceType":"script"}