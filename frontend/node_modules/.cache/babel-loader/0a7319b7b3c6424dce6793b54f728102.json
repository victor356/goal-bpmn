{"ast":null,"code":"import { isNumber, assign, forEach, every, debounce, bind, reduce } from 'min-dash';\nimport { add as collectionAdd, remove as collectionRemove } from '../util/Collections';\nimport { getType } from '../util/Elements';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, create as svgCreate, transform as svgTransform } from 'tiny-svg';\nimport { createMatrix } from 'tiny-svg';\n\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\n\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param  {Object} options\n * @return {HTMLElement} the container element\n */\n\n\nfunction createContainer(options) {\n  options = assign({}, {\n    width: '100%',\n    height: '100%'\n  }, options);\n  var container = options.container || document.body; // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n\n  var parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container');\n  assign(parent.style, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n  container.appendChild(parent);\n  return parent;\n}\n\nfunction createGroup(parent, cls, childIndex) {\n  var group = svgCreate('g');\n  svgClasses(group).add(cls);\n  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1; // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n\n  parent.insertBefore(group, parent.childNodes[index] || null);\n  return group;\n}\n\nvar BASE_LAYER = 'base';\nvar REQUIRED_MODEL_ATTRS = {\n  shape: ['x', 'y', 'width', 'height'],\n  connection: ['waypoints']\n};\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\n\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n\n  this._init(config || {});\n}\nCanvas.$inject = ['config.canvas', 'eventBus', 'graphicsFactory', 'elementRegistry'];\n\nCanvas.prototype._init = function (config) {\n  var eventBus = this._eventBus; // Creates a <svg> element that is wrapped into a <div>.\n  // This way we are always able to correctly figure out the size of the svg element\n  // by querying the parent node.\n  //\n  // (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n  //\n  // <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n  //   <svg width=\"100%\" height=\"100%\">\n  //    ...\n  //   </svg>\n  // </div>\n  // html container\n\n  var container = this._container = createContainer(config);\n  var svg = this._svg = svgCreate('svg');\n  svgAttr(svg, {\n    width: '100%',\n    height: '100%'\n  });\n  svgAppend(container, svg);\n  var viewport = this._viewport = createGroup(svg, 'viewport');\n  this._layers = {}; // debounce canvas.viewbox.changed events\n  // for smoother diagram interaction\n\n  if (config.deferUpdate !== false) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n\n  eventBus.on('diagram.init', function () {\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n  }, this); // reset viewbox on shape changes to\n  // recompute the viewbox\n\n  eventBus.on(['shape.added', 'connection.added', 'shape.removed', 'connection.removed', 'elements.changed'], function () {\n    delete this._cachedViewbox;\n  }, this);\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\n\nCanvas.prototype._destroy = function (emit) {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n\n  var parent = this._container.parentNode;\n\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._rootElement;\n  delete this._viewport;\n};\n\nCanvas.prototype._clear = function () {\n  var self = this;\n\n  var allElements = this._elementRegistry.getAll(); // remove all elements\n\n\n  allElements.forEach(function (element) {\n    var type = getType(element);\n\n    if (type === 'root') {\n      self.setRootElement(null, true);\n    } else {\n      self._removeElement(element, type);\n    }\n  }); // force recomputation of view box\n\n  delete this._cachedViewbox;\n};\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @returns {SVGElement}\n */\n\n\nCanvas.prototype.getDefaultLayer = function () {\n  return this.getLayer(BASE_LAYER, 0);\n};\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {String} name\n * @param {Number} index\n *\n * @returns {SVGElement}\n */\n\n\nCanvas.prototype.getLayer = function (name, index) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  } // throw an error if layer creation / retrival is\n  // requested on different index\n\n\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n\n  return layer.group;\n};\n/**\n * Creates a given layer and returns it.\n *\n * @param {String} name\n * @param {Number} [index=0]\n *\n * @return {Object} layer descriptor with { index, group: SVGGroup }\n */\n\n\nCanvas.prototype._createLayer = function (name, index) {\n  if (!index) {\n    index = 0;\n  }\n\n  var childIndex = reduce(this._layers, function (childIndex, layer) {\n    if (index >= layer.index) {\n      childIndex++;\n    }\n\n    return childIndex;\n  }, 0);\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index\n  };\n};\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {DOMNode}\n */\n\n\nCanvas.prototype.getContainer = function () {\n  return this._container;\n}; // markers //////////////////////\n\n\nCanvas.prototype._updateMarker = function (element, marker, add) {\n  var container;\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  } // we need to access all\n\n\n  container = this._elementRegistry._elements[element.id];\n\n  if (!container) {\n    return;\n  }\n\n  forEach([container.gfx, container.secondaryGfx], function (gfx) {\n    if (gfx) {\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        svgClasses(gfx).add(marker);\n      } else {\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {djs.model.Element} element the shape\n   * @property {Object} gfx the graphical representation of the shape\n   * @property {String} marker\n   * @property {Boolean} add true if the marker was added, false if it got removed\n   */\n\n  this._eventBus.fire('element.marker.update', {\n    element: element,\n    gfx: container.gfx,\n    marker: marker,\n    add: !!add\n  });\n};\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n * canvas.addMarker('foo', 'some-marker');\n *\n * var fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n *\n * @param {String|djs.model.Base} element\n * @param {String} marker\n */\n\n\nCanvas.prototype.addMarker = function (element, marker) {\n  this._updateMarker(element, marker, true);\n};\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {String|djs.model.Base} element\n * @param  {String} marker\n */\n\n\nCanvas.prototype.removeMarker = function (element, marker) {\n  this._updateMarker(element, marker, false);\n};\n/**\n * Check the existence of a marker on element.\n *\n * @param  {String|djs.model.Base} element\n * @param  {String} marker\n */\n\n\nCanvas.prototype.hasMarker = function (element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  var gfx = this.getGraphics(element);\n  return svgClasses(gfx).has(marker);\n};\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {String|djs.model.Base} element\n * @param  {String} marker\n */\n\n\nCanvas.prototype.toggleMarker = function (element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\n\nCanvas.prototype.getRootElement = function () {\n  if (!this._rootElement) {\n    this.setRootElement({\n      id: '__implicitroot',\n      children: []\n    });\n  }\n\n  return this._rootElement;\n}; // root element handling //////////////////////\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {Boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\n\n\nCanvas.prototype.setRootElement = function (element, override) {\n  if (element) {\n    this._ensureValid('root', element);\n  }\n\n  var currentRoot = this._rootElement,\n      elementRegistry = this._elementRegistry,\n      eventBus = this._eventBus;\n\n  if (currentRoot) {\n    if (!override) {\n      throw new Error('rootElement already set, need to specify override');\n    } // simulate element remove event sequence\n\n\n    eventBus.fire('root.remove', {\n      element: currentRoot\n    });\n    eventBus.fire('root.removed', {\n      element: currentRoot\n    });\n    elementRegistry.remove(currentRoot);\n  }\n\n  if (element) {\n    var gfx = this.getDefaultLayer(); // resemble element add event sequence\n\n    eventBus.fire('root.add', {\n      element: element\n    });\n    elementRegistry.add(element, gfx, this._svg);\n    eventBus.fire('root.added', {\n      element: element,\n      gfx: gfx\n    });\n  }\n\n  this._rootElement = element;\n  return element;\n}; // add functionality //////////////////////\n\n\nCanvas.prototype._ensureValid = function (type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element with id ' + element.id + ' already exists');\n  }\n\n  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n  var valid = every(requiredAttrs, function (attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n\n  if (!valid) {\n    throw new Error('must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\n\nCanvas.prototype._setParent = function (element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {String} type\n * @param {Object|djs.model.Base} element\n * @param {Object|djs.model.Base} [parent]\n * @param {Number} [parentIndex]\n *\n * @return {Object|djs.model.Base} the added element\n */\n\n\nCanvas.prototype._addElement = function (type, element, parent, parentIndex) {\n  parent = parent || this.getRootElement();\n  var eventBus = this._eventBus,\n      graphicsFactory = this._graphicsFactory;\n\n  this._ensureValid(type, element);\n\n  eventBus.fire(type + '.add', {\n    element: element,\n    parent: parent\n  });\n\n  this._setParent(element, parent, parentIndex); // create graphics\n\n\n  var gfx = graphicsFactory.create(type, element, parentIndex);\n\n  this._elementRegistry.add(element, gfx); // update its visual\n\n\n  graphicsFactory.update(type, element, gfx);\n  eventBus.fire(type + '.added', {\n    element: element,\n    gfx: gfx\n  });\n  return element;\n};\n/**\n * Adds a shape to the canvas\n *\n * @param {Object|djs.model.Shape} shape to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {Number} [parentIndex]\n *\n * @return {djs.model.Shape} the added shape\n */\n\n\nCanvas.prototype.addShape = function (shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n/**\n * Adds a connection to the canvas\n *\n * @param {Object|djs.model.Connection} connection to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {Number} [parentIndex]\n *\n * @return {djs.model.Connection} the added connection\n */\n\n\nCanvas.prototype.addConnection = function (connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n/**\n * Internal remove element\n */\n\n\nCanvas.prototype._removeElement = function (element, type) {\n  var elementRegistry = this._elementRegistry,\n      graphicsFactory = this._graphicsFactory,\n      eventBus = this._eventBus;\n  element = elementRegistry.get(element.id || element);\n\n  if (!element) {\n    // element was removed already\n    return;\n  }\n\n  eventBus.fire(type + '.remove', {\n    element: element\n  });\n  graphicsFactory.remove(element); // unset parent <-> child relationship\n\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n  eventBus.fire(type + '.removed', {\n    element: element\n  });\n  elementRegistry.remove(element);\n  return element;\n};\n/**\n * Removes a shape from the canvas\n *\n * @param {String|djs.model.Shape} shape or shape id to be removed\n *\n * @return {djs.model.Shape} the removed shape\n */\n\n\nCanvas.prototype.removeShape = function (shape) {\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.remove\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.removed\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n  return this._removeElement(shape, 'shape');\n};\n/**\n * Removes a connection from the canvas\n *\n * @param {String|djs.model.Connection} connection or connection id to be removed\n *\n * @return {djs.model.Connection} the removed connection\n */\n\n\nCanvas.prototype.removeConnection = function (connection) {\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.remove\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.removed\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n  return this._removeElement(connection, 'connection');\n};\n/**\n * Return the graphical object underlaying a certain diagram element\n *\n * @param {String|djs.model.Base} element descriptor of the element\n * @param {Boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\n\n\nCanvas.prototype.getGraphics = function (element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\n\n\nCanvas.prototype._changeViewbox = function (changeFn) {\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing'); // perform actual change\n\n\n  changeFn.apply(this); // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n\n  this._cachedViewbox = null; // notify others of the change; this step\n  // may or may not be debounced\n\n  this._viewboxChanged();\n};\n\nCanvas.prototype._viewboxChanged = function () {\n  this._eventBus.fire('canvas.viewbox.changed', {\n    viewbox: this.viewbox()\n  });\n};\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * var zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n *\n * @param  {Object} [box] the new view box to set\n * @param  {Number} box.x the top left X coordinate of the canvas visible in view box\n * @param  {Number} box.y the top left Y coordinate of the canvas visible in view box\n * @param  {Number} box.width the visible width\n * @param  {Number} box.height\n *\n * @return {Object} the current view box\n */\n\n\nCanvas.prototype.viewbox = function (box) {\n  if (box === undefined && this._cachedViewbox) {\n    return this._cachedViewbox;\n  }\n\n  var viewport = this._viewport,\n      innerBox,\n      outerBox = this.getSize(),\n      matrix,\n      transform,\n      scale,\n      x,\n      y;\n\n  if (!box) {\n    // compute the inner box based on the\n    // diagrams default layer. This allows us to exclude\n    // external components, such as overlays\n    innerBox = this.getDefaultLayer().getBBox();\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width,\n        height: innerBox.height,\n        x: innerBox.x,\n        y: innerBox.y\n      },\n      outer: outerBox\n    };\n    return box;\n  } else {\n    this._changeViewbox(function () {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n\n      var matrix = this._svg.createSVGMatrix().scale(scale).translate(-box.x, -box.y);\n\n      svgTransform(viewport, matrix);\n    });\n  }\n\n  return box;\n};\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {Object} [delta] the new scroll to apply.\n *\n * @param {Number} [delta.dx]\n * @param {Number} [delta.dy]\n */\n\n\nCanvas.prototype.scroll = function (delta) {\n  var node = this._viewport;\n  var matrix = node.getCTM();\n\n  if (delta) {\n    this._changeViewbox(function () {\n      delta = assign({\n        dx: 0,\n        dy: 0\n      }, delta || {});\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n      setCTM(node, matrix);\n    });\n  }\n\n  return {\n    x: matrix.e,\n    y: matrix.f\n  };\n};\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming\n * to the specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as\n * the first argument to force recomputation of the current level.\n *\n * @param {String|Number} [newScale] the new zoom level, either a number, i.e. 0.9,\n *                                   or `fit-viewport` to adjust the size to fit the current viewport\n * @param {String|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null\n *\n * @return {Number} the current scale\n */\n\n\nCanvas.prototype.zoom = function (newScale, center) {\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n\n  var outer, matrix;\n\n  this._changeViewbox(function () {\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n\n    matrix = this._setZoom(newScale, center);\n  });\n\n  return round(matrix.a, 1000);\n};\n\nfunction setCTM(node, m) {\n  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\n\nCanvas.prototype._fitViewport = function (center) {\n  var vbox = this.viewbox(),\n      outer = vbox.outer,\n      inner = vbox.inner,\n      newScale,\n      newViewbox; // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 && inner.y >= 0 && inner.x + inner.width <= outer.width && inner.y + inner.height <= outer.height && !center) {\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n\n  this.viewbox(newViewbox);\n  return this.viewbox(false).scale;\n};\n\nCanvas.prototype._setZoom = function (scale, center) {\n  var svg = this._svg,\n      viewport = this._viewport;\n  var matrix = svg.createSVGMatrix();\n  var point = svg.createSVGPoint();\n  var centerPoint, originalPoint, currentMatrix, scaleMatrix, newMatrix;\n  currentMatrix = viewport.getCTM();\n  var currentScale = currentMatrix.a;\n\n  if (center) {\n    centerPoint = assign(point, center); // revert applied viewport transformations\n\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse()); // create scale matrix\n\n    scaleMatrix = matrix.translate(originalPoint.x, originalPoint.y).scale(1 / currentScale * scale).translate(-originalPoint.x, -originalPoint.y);\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n\n  setCTM(this._viewport, newMatrix);\n  return newMatrix;\n};\n/**\n * Returns the size of the canvas\n *\n * @return {Dimensions}\n */\n\n\nCanvas.prototype.getSize = function () {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n/**\n * Return the absolute bounding box for the given element\n *\n * The absolute bounding box may be used to display overlays in the\n * callers (browser) coordinate system rather than the zoomed in/out\n * canvas coordinates.\n *\n * @param  {ElementDescriptor} element\n * @return {Bounds} the absolute bounding box\n */\n\n\nCanvas.prototype.getAbsoluteBBox = function (element) {\n  var vbox = this.viewbox();\n  var bbox; // connection\n  // use svg bbox\n\n  if (element.waypoints) {\n    var gfx = this.getGraphics(element);\n    bbox = gfx.getBBox();\n  } // shapes\n  // use data\n  else {\n      bbox = element;\n    }\n\n  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n  var width = bbox.width * vbox.scale;\n  var height = bbox.height * vbox.scale;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n/**\n * Fires an event in order other modules can react to the\n * canvas resizing\n */\n\n\nCanvas.prototype.resized = function () {\n  // force recomputation of view box\n  delete this._cachedViewbox;\n\n  this._eventBus.fire('canvas.resized');\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/core/Canvas.js"],"names":["isNumber","assign","forEach","every","debounce","bind","reduce","add","collectionAdd","remove","collectionRemove","getType","append","svgAppend","attr","svgAttr","classes","svgClasses","create","svgCreate","transform","svgTransform","createMatrix","round","number","resolution","Math","ensurePx","createContainer","options","width","height","container","document","body","parent","createElement","setAttribute","style","position","overflow","appendChild","createGroup","cls","childIndex","group","index","undefined","childNodes","length","insertBefore","BASE_LAYER","REQUIRED_MODEL_ATTRS","shape","connection","Canvas","config","eventBus","graphicsFactory","elementRegistry","_eventBus","_elementRegistry","_graphicsFactory","_init","$inject","prototype","_container","svg","_svg","viewport","_viewport","_layers","deferUpdate","_viewboxChanged","on","fire","_cachedViewbox","_destroy","_clear","emit","parentNode","removeChild","_rootElement","self","allElements","getAll","element","type","setRootElement","_removeElement","getDefaultLayer","getLayer","name","Error","layer","_createLayer","getContainer","_updateMarker","marker","id","get","_elements","gfx","secondaryGfx","addMarker","removeMarker","hasMarker","getGraphics","has","toggleMarker","getRootElement","children","override","_ensureValid","currentRoot","requiredAttrs","valid","join","_setParent","parentIndex","_addElement","update","addShape","addConnection","removeShape","removeConnection","secondary","_changeViewbox","changeFn","apply","viewbox","box","innerBox","outerBox","getSize","matrix","scale","x","y","getBBox","a","e","f","inner","outer","min","createSVGMatrix","translate","scroll","delta","node","getCTM","dx","dy","multiply","setCTM","zoom","newScale","center","_fitViewport","_setZoom","m","mstr","b","c","d","vbox","newViewbox","max","point","createSVGPoint","centerPoint","originalPoint","currentMatrix","scaleMatrix","newMatrix","currentScale","matrixTransform","inverse","clientWidth","clientHeight","getAbsoluteBBox","bbox","waypoints","resized"],"mappings":"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","sourcesContent":["import {\n  isNumber,\n  assign,\n  forEach,\n  every,\n  debounce,\n  bind,\n  reduce\n} from 'min-dash';\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../util/Collections';\n\nimport {\n  getType\n} from '../util/Elements';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  classes as svgClasses,\n  create as svgCreate,\n  transform as svgTransform\n} from 'tiny-svg';\n\nimport { createMatrix as createMatrix } from 'tiny-svg';\n\n\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\n\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\n\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param  {Object} options\n * @return {HTMLElement} the container element\n */\nfunction createContainer(options) {\n\n  options = assign({}, { width: '100%', height: '100%' }, options);\n\n  var container = options.container || document.body;\n\n  // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n  var parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container');\n\n  assign(parent.style, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n\n  container.appendChild(parent);\n\n  return parent;\n}\n\nfunction createGroup(parent, cls, childIndex) {\n  var group = svgCreate('g');\n  svgClasses(group).add(cls);\n\n  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;\n\n  // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n  parent.insertBefore(group, parent.childNodes[index] || null);\n\n  return group;\n}\n\nvar BASE_LAYER = 'base';\n\n\nvar REQUIRED_MODEL_ATTRS = {\n  shape: [ 'x', 'y', 'width', 'height' ],\n  connection: [ 'waypoints' ]\n};\n\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n\n  this._init(config || {});\n}\n\nCanvas.$inject = [\n  'config.canvas',\n  'eventBus',\n  'graphicsFactory',\n  'elementRegistry'\n];\n\n\nCanvas.prototype._init = function(config) {\n\n  var eventBus = this._eventBus;\n\n  // Creates a <svg> element that is wrapped into a <div>.\n  // This way we are always able to correctly figure out the size of the svg element\n  // by querying the parent node.\n  //\n  // (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n  //\n  // <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n  //   <svg width=\"100%\" height=\"100%\">\n  //    ...\n  //   </svg>\n  // </div>\n\n  // html container\n  var container = this._container = createContainer(config);\n\n  var svg = this._svg = svgCreate('svg');\n  svgAttr(svg, { width: '100%', height: '100%' });\n\n  svgAppend(container, svg);\n\n  var viewport = this._viewport = createGroup(svg, 'viewport');\n\n  this._layers = {};\n\n  // debounce canvas.viewbox.changed events\n  // for smoother diagram interaction\n  if (config.deferUpdate !== false) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n\n  eventBus.on('diagram.init', function() {\n\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n\n  }, this);\n\n  // reset viewbox on shape changes to\n  // recompute the viewbox\n  eventBus.on([\n    'shape.added',\n    'connection.added',\n    'shape.removed',\n    'connection.removed',\n    'elements.changed'\n  ], function() {\n    delete this._cachedViewbox;\n  }, this);\n\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\n\nCanvas.prototype._destroy = function(emit) {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n\n  var parent = this._container.parentNode;\n\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._rootElement;\n  delete this._viewport;\n};\n\nCanvas.prototype._clear = function() {\n\n  var self = this;\n\n  var allElements = this._elementRegistry.getAll();\n\n  // remove all elements\n  allElements.forEach(function(element) {\n    var type = getType(element);\n\n    if (type === 'root') {\n      self.setRootElement(null, true);\n    } else {\n      self._removeElement(element, type);\n    }\n  });\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n};\n\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getDefaultLayer = function() {\n  return this.getLayer(BASE_LAYER, 0);\n};\n\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {String} name\n * @param {Number} index\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getLayer = function(name, index) {\n\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  }\n\n  // throw an error if layer creation / retrival is\n  // requested on different index\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n\n  return layer.group;\n};\n\n/**\n * Creates a given layer and returns it.\n *\n * @param {String} name\n * @param {Number} [index=0]\n *\n * @return {Object} layer descriptor with { index, group: SVGGroup }\n */\nCanvas.prototype._createLayer = function(name, index) {\n\n  if (!index) {\n    index = 0;\n  }\n\n  var childIndex = reduce(this._layers, function(childIndex, layer) {\n    if (index >= layer.index) {\n      childIndex++;\n    }\n\n    return childIndex;\n  }, 0);\n\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index\n  };\n\n};\n\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {DOMNode}\n */\nCanvas.prototype.getContainer = function() {\n  return this._container;\n};\n\n\n// markers //////////////////////\n\nCanvas.prototype._updateMarker = function(element, marker, add) {\n  var container;\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  // we need to access all\n  container = this._elementRegistry._elements[element.id];\n\n  if (!container) {\n    return;\n  }\n\n  forEach([ container.gfx, container.secondaryGfx ], function(gfx) {\n    if (gfx) {\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        svgClasses(gfx).add(marker);\n      } else {\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {djs.model.Element} element the shape\n   * @property {Object} gfx the graphical representation of the shape\n   * @property {String} marker\n   * @property {Boolean} add true if the marker was added, false if it got removed\n   */\n  this._eventBus.fire('element.marker.update', { element: element, gfx: container.gfx, marker: marker, add: !!add });\n};\n\n\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n * canvas.addMarker('foo', 'some-marker');\n *\n * var fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n *\n * @param {String|djs.model.Base} element\n * @param {String} marker\n */\nCanvas.prototype.addMarker = function(element, marker) {\n  this._updateMarker(element, marker, true);\n};\n\n\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {String|djs.model.Base} element\n * @param  {String} marker\n */\nCanvas.prototype.removeMarker = function(element, marker) {\n  this._updateMarker(element, marker, false);\n};\n\n/**\n * Check the existence of a marker on element.\n *\n * @param  {String|djs.model.Base} element\n * @param  {String} marker\n */\nCanvas.prototype.hasMarker = function(element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  var gfx = this.getGraphics(element);\n\n  return svgClasses(gfx).has(marker);\n};\n\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {String|djs.model.Base} element\n * @param  {String} marker\n */\nCanvas.prototype.toggleMarker = function(element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\n\nCanvas.prototype.getRootElement = function() {\n  if (!this._rootElement) {\n    this.setRootElement({ id: '__implicitroot', children: [] });\n  }\n\n  return this._rootElement;\n};\n\n\n\n// root element handling //////////////////////\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {Boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\nCanvas.prototype.setRootElement = function(element, override) {\n\n  if (element) {\n    this._ensureValid('root', element);\n  }\n\n  var currentRoot = this._rootElement,\n      elementRegistry = this._elementRegistry,\n      eventBus = this._eventBus;\n\n  if (currentRoot) {\n    if (!override) {\n      throw new Error('rootElement already set, need to specify override');\n    }\n\n    // simulate element remove event sequence\n    eventBus.fire('root.remove', { element: currentRoot });\n    eventBus.fire('root.removed', { element: currentRoot });\n\n    elementRegistry.remove(currentRoot);\n  }\n\n  if (element) {\n    var gfx = this.getDefaultLayer();\n\n    // resemble element add event sequence\n    eventBus.fire('root.add', { element: element });\n\n    elementRegistry.add(element, gfx, this._svg);\n\n    eventBus.fire('root.added', { element: element, gfx: gfx });\n  }\n\n  this._rootElement = element;\n\n  return element;\n};\n\n\n\n// add functionality //////////////////////\n\nCanvas.prototype._ensureValid = function(type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element with id ' + element.id + ' already exists');\n  }\n\n  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n\n  var valid = every(requiredAttrs, function(attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n\n  if (!valid) {\n    throw new Error(\n      'must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\n\nCanvas.prototype._setParent = function(element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {String} type\n * @param {Object|djs.model.Base} element\n * @param {Object|djs.model.Base} [parent]\n * @param {Number} [parentIndex]\n *\n * @return {Object|djs.model.Base} the added element\n */\nCanvas.prototype._addElement = function(type, element, parent, parentIndex) {\n\n  parent = parent || this.getRootElement();\n\n  var eventBus = this._eventBus,\n      graphicsFactory = this._graphicsFactory;\n\n  this._ensureValid(type, element);\n\n  eventBus.fire(type + '.add', { element: element, parent: parent });\n\n  this._setParent(element, parent, parentIndex);\n\n  // create graphics\n  var gfx = graphicsFactory.create(type, element, parentIndex);\n\n  this._elementRegistry.add(element, gfx);\n\n  // update its visual\n  graphicsFactory.update(type, element, gfx);\n\n  eventBus.fire(type + '.added', { element: element, gfx: gfx });\n\n  return element;\n};\n\n/**\n * Adds a shape to the canvas\n *\n * @param {Object|djs.model.Shape} shape to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {Number} [parentIndex]\n *\n * @return {djs.model.Shape} the added shape\n */\nCanvas.prototype.addShape = function(shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n\n/**\n * Adds a connection to the canvas\n *\n * @param {Object|djs.model.Connection} connection to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {Number} [parentIndex]\n *\n * @return {djs.model.Connection} the added connection\n */\nCanvas.prototype.addConnection = function(connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n\n\n/**\n * Internal remove element\n */\nCanvas.prototype._removeElement = function(element, type) {\n\n  var elementRegistry = this._elementRegistry,\n      graphicsFactory = this._graphicsFactory,\n      eventBus = this._eventBus;\n\n  element = elementRegistry.get(element.id || element);\n\n  if (!element) {\n    // element was removed already\n    return;\n  }\n\n  eventBus.fire(type + '.remove', { element: element });\n\n  graphicsFactory.remove(element);\n\n  // unset parent <-> child relationship\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n\n  eventBus.fire(type + '.removed', { element: element });\n\n  elementRegistry.remove(element);\n\n  return element;\n};\n\n\n/**\n * Removes a shape from the canvas\n *\n * @param {String|djs.model.Shape} shape or shape id to be removed\n *\n * @return {djs.model.Shape} the removed shape\n */\nCanvas.prototype.removeShape = function(shape) {\n\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.remove\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.removed\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n  return this._removeElement(shape, 'shape');\n};\n\n\n/**\n * Removes a connection from the canvas\n *\n * @param {String|djs.model.Connection} connection or connection id to be removed\n *\n * @return {djs.model.Connection} the removed connection\n */\nCanvas.prototype.removeConnection = function(connection) {\n\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.remove\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.removed\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n  return this._removeElement(connection, 'connection');\n};\n\n\n/**\n * Return the graphical object underlaying a certain diagram element\n *\n * @param {String|djs.model.Base} element descriptor of the element\n * @param {Boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\nCanvas.prototype.getGraphics = function(element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n\n\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\nCanvas.prototype._changeViewbox = function(changeFn) {\n\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing');\n\n  // perform actual change\n  changeFn.apply(this);\n\n  // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n  this._cachedViewbox = null;\n\n  // notify others of the change; this step\n  // may or may not be debounced\n  this._viewboxChanged();\n};\n\nCanvas.prototype._viewboxChanged = function() {\n  this._eventBus.fire('canvas.viewbox.changed', { viewbox: this.viewbox() });\n};\n\n\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * var zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n *\n * @param  {Object} [box] the new view box to set\n * @param  {Number} box.x the top left X coordinate of the canvas visible in view box\n * @param  {Number} box.y the top left Y coordinate of the canvas visible in view box\n * @param  {Number} box.width the visible width\n * @param  {Number} box.height\n *\n * @return {Object} the current view box\n */\nCanvas.prototype.viewbox = function(box) {\n\n  if (box === undefined && this._cachedViewbox) {\n    return this._cachedViewbox;\n  }\n\n  var viewport = this._viewport,\n      innerBox,\n      outerBox = this.getSize(),\n      matrix,\n      transform,\n      scale,\n      x, y;\n\n  if (!box) {\n    // compute the inner box based on the\n    // diagrams default layer. This allows us to exclude\n    // external components, such as overlays\n    innerBox = this.getDefaultLayer().getBBox();\n\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width,\n        height: innerBox.height,\n        x: innerBox.x,\n        y: innerBox.y\n      },\n      outer: outerBox\n    };\n\n    return box;\n  } else {\n\n    this._changeViewbox(function() {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n\n      var matrix = this._svg.createSVGMatrix()\n        .scale(scale)\n        .translate(-box.x, -box.y);\n\n      svgTransform(viewport, matrix);\n    });\n  }\n\n  return box;\n};\n\n\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {Object} [delta] the new scroll to apply.\n *\n * @param {Number} [delta.dx]\n * @param {Number} [delta.dy]\n */\nCanvas.prototype.scroll = function(delta) {\n\n  var node = this._viewport;\n  var matrix = node.getCTM();\n\n  if (delta) {\n    this._changeViewbox(function() {\n      delta = assign({ dx: 0, dy: 0 }, delta || {});\n\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n\n      setCTM(node, matrix);\n    });\n  }\n\n  return { x: matrix.e, y: matrix.f };\n};\n\n\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming\n * to the specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as\n * the first argument to force recomputation of the current level.\n *\n * @param {String|Number} [newScale] the new zoom level, either a number, i.e. 0.9,\n *                                   or `fit-viewport` to adjust the size to fit the current viewport\n * @param {String|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null\n *\n * @return {Number} the current scale\n */\nCanvas.prototype.zoom = function(newScale, center) {\n\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n\n  var outer,\n      matrix;\n\n  this._changeViewbox(function() {\n\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n\n    matrix = this._setZoom(newScale, center);\n  });\n\n  return round(matrix.a, 1000);\n};\n\nfunction setCTM(node, m) {\n  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\n\nCanvas.prototype._fitViewport = function(center) {\n\n  var vbox = this.viewbox(),\n      outer = vbox.outer,\n      inner = vbox.inner,\n      newScale,\n      newViewbox;\n\n  // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 &&\n      inner.y >= 0 &&\n      inner.x + inner.width <= outer.width &&\n      inner.y + inner.height <= outer.height &&\n      !center) {\n\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n\n  this.viewbox(newViewbox);\n\n  return this.viewbox(false).scale;\n};\n\n\nCanvas.prototype._setZoom = function(scale, center) {\n\n  var svg = this._svg,\n      viewport = this._viewport;\n\n  var matrix = svg.createSVGMatrix();\n  var point = svg.createSVGPoint();\n\n  var centerPoint,\n      originalPoint,\n      currentMatrix,\n      scaleMatrix,\n      newMatrix;\n\n  currentMatrix = viewport.getCTM();\n\n  var currentScale = currentMatrix.a;\n\n  if (center) {\n    centerPoint = assign(point, center);\n\n    // revert applied viewport transformations\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());\n\n    // create scale matrix\n    scaleMatrix = matrix\n      .translate(originalPoint.x, originalPoint.y)\n      .scale(1 / currentScale * scale)\n      .translate(-originalPoint.x, -originalPoint.y);\n\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n\n  setCTM(this._viewport, newMatrix);\n\n  return newMatrix;\n};\n\n\n/**\n * Returns the size of the canvas\n *\n * @return {Dimensions}\n */\nCanvas.prototype.getSize = function() {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n\n\n/**\n * Return the absolute bounding box for the given element\n *\n * The absolute bounding box may be used to display overlays in the\n * callers (browser) coordinate system rather than the zoomed in/out\n * canvas coordinates.\n *\n * @param  {ElementDescriptor} element\n * @return {Bounds} the absolute bounding box\n */\nCanvas.prototype.getAbsoluteBBox = function(element) {\n  var vbox = this.viewbox();\n  var bbox;\n\n  // connection\n  // use svg bbox\n  if (element.waypoints) {\n    var gfx = this.getGraphics(element);\n\n    bbox = gfx.getBBox();\n  }\n  // shapes\n  // use data\n  else {\n    bbox = element;\n  }\n\n  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n\n  var width = bbox.width * vbox.scale;\n  var height = bbox.height * vbox.scale;\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n\n/**\n * Fires an event in order other modules can react to the\n * canvas resizing\n */\nCanvas.prototype.resized = function() {\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n\n  this._eventBus.fire('canvas.resized');\n};\n"]},"metadata":{},"sourceType":"module"}