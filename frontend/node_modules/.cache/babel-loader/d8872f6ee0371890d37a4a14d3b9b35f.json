{"ast":null,"code":"import { set as cursorSet, unset as cursorUnset } from '../../util/Cursor';\nimport { install as installClickTrap } from '../../util/ClickTrap';\nimport { delta as deltaPos } from '../../util/PositionUtil';\nimport { event as domEvent, closest as domClosest } from 'min-dom';\nimport { toPoint } from '../../util/Event';\n\nfunction length(point) {\n  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n}\n\nvar THRESHOLD = 15;\nexport default function MoveCanvas(eventBus, canvas) {\n  var context;\n\n  function handleMove(event) {\n    var start = context.start,\n        position = toPoint(event),\n        delta = deltaPos(position, start);\n\n    if (!context.dragging && length(delta) > THRESHOLD) {\n      context.dragging = true;\n      installClickTrap(eventBus);\n      cursorSet('grab');\n    }\n\n    if (context.dragging) {\n      var lastPosition = context.last || context.start;\n      delta = deltaPos(position, lastPosition);\n      canvas.scroll({\n        dx: delta.x,\n        dy: delta.y\n      });\n      context.last = position;\n    } // prevent select\n\n\n    event.preventDefault();\n  }\n\n  function handleEnd(event) {\n    domEvent.unbind(document, 'mousemove', handleMove);\n    domEvent.unbind(document, 'mouseup', handleEnd);\n    context = null;\n    cursorUnset();\n  }\n\n  function handleStart(event) {\n    // event is already handled by '.djs-draggable'\n    if (domClosest(event.target, '.djs-draggable')) {\n      return;\n    } // reject non-left left mouse button or modifier key\n\n\n    if (event.button || event.ctrlKey || event.shiftKey || event.altKey) {\n      return;\n    }\n\n    context = {\n      start: toPoint(event)\n    };\n    domEvent.bind(document, 'mousemove', handleMove);\n    domEvent.bind(document, 'mouseup', handleEnd); // we've handled the event\n\n    return true;\n  } // listen for move on element mouse down;\n  // allow others to hook into the event before us though\n  // (dragging / element moving will do this)\n\n\n  eventBus.on('element.mousedown', 500, function (e) {\n    return handleStart(e.originalEvent);\n  });\n}\nMoveCanvas.$inject = ['eventBus', 'canvas'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/navigation/movecanvas/MoveCanvas.js"],"names":["set","cursorSet","unset","cursorUnset","install","installClickTrap","delta","deltaPos","event","domEvent","closest","domClosest","toPoint","length","point","Math","sqrt","pow","x","y","THRESHOLD","MoveCanvas","eventBus","canvas","context","handleMove","start","position","dragging","lastPosition","last","scroll","dx","dy","preventDefault","handleEnd","unbind","document","handleStart","target","button","ctrlKey","shiftKey","altKey","bind","on","e","originalEvent","$inject"],"mappings":"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","sourcesContent":["import {\n  set as cursorSet,\n  unset as cursorUnset\n} from '../../util/Cursor';\n\nimport {\n  install as installClickTrap\n} from '../../util/ClickTrap';\n\nimport {\n  delta as deltaPos\n} from '../../util/PositionUtil';\n\nimport {\n  event as domEvent,\n  closest as domClosest\n} from 'min-dom';\n\nimport {\n  toPoint\n} from '../../util/Event';\n\n\nfunction length(point) {\n  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n}\n\nvar THRESHOLD = 15;\n\n\nexport default function MoveCanvas(eventBus, canvas) {\n\n  var context;\n\n  function handleMove(event) {\n\n    var start = context.start,\n        position = toPoint(event),\n        delta = deltaPos(position, start);\n\n    if (!context.dragging && length(delta) > THRESHOLD) {\n      context.dragging = true;\n\n      installClickTrap(eventBus);\n\n      cursorSet('grab');\n    }\n\n    if (context.dragging) {\n\n      var lastPosition = context.last || context.start;\n\n      delta = deltaPos(position, lastPosition);\n\n      canvas.scroll({\n        dx: delta.x,\n        dy: delta.y\n      });\n\n      context.last = position;\n    }\n\n    // prevent select\n    event.preventDefault();\n  }\n\n\n  function handleEnd(event) {\n    domEvent.unbind(document, 'mousemove', handleMove);\n    domEvent.unbind(document, 'mouseup', handleEnd);\n\n    context = null;\n\n    cursorUnset();\n  }\n\n  function handleStart(event) {\n    // event is already handled by '.djs-draggable'\n    if (domClosest(event.target, '.djs-draggable')) {\n      return;\n    }\n\n\n    // reject non-left left mouse button or modifier key\n    if (event.button || event.ctrlKey || event.shiftKey || event.altKey) {\n      return;\n    }\n\n    context = {\n      start: toPoint(event)\n    };\n\n    domEvent.bind(document, 'mousemove', handleMove);\n    domEvent.bind(document, 'mouseup', handleEnd);\n\n    // we've handled the event\n    return true;\n  }\n\n  // listen for move on element mouse down;\n  // allow others to hook into the event before us though\n  // (dragging / element moving will do this)\n  eventBus.on('element.mousedown', 500, function(e) {\n    return handleStart(e.originalEvent);\n  });\n\n}\n\n\nMoveCanvas.$inject = [ 'eventBus', 'canvas' ];\n"]},"metadata":{},"sourceType":"module"}