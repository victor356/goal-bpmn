{"ast":null,"code":"'use strict';\n\nvar Validator = require('./Validator');\n/**\n * The guy responsible for template loading.\n *\n * Provide the actual templates via the `config.elementTemplates`.\n *\n * That configuration can either be an array of template\n * descriptors or a node style callback to retrieve\n * the templates asynchronously.\n *\n * @param {Array<TemplateDescriptor>|Function} loadTemplates\n * @param {EventBus} eventBus\n * @param {ElementTemplates} elementTemplates\n */\n\n\nfunction ElementTemplatesLoader(loadTemplates, eventBus, elementTemplates) {\n  this._loadTemplates = loadTemplates;\n  this._eventBus = eventBus;\n  this._elementTemplates = elementTemplates;\n  var self = this;\n  eventBus.on('diagram.init', function () {\n    self.reload();\n  });\n}\n\nmodule.exports = ElementTemplatesLoader;\nElementTemplatesLoader.$inject = ['config.elementTemplates', 'eventBus', 'elementTemplates'];\n\nElementTemplatesLoader.prototype.reload = function () {\n  var self = this;\n  var loadTemplates = this._loadTemplates; // no templates specified\n\n  if (typeof loadTemplates === 'undefined') {\n    return;\n  } // template loader function specified\n\n\n  if (typeof loadTemplates === 'function') {\n    return loadTemplates(function (err, templates) {\n      if (err) {\n        return self.templateErrors([err]);\n      }\n\n      self.setTemplates(templates);\n    });\n  } // templates array specified\n\n\n  if (loadTemplates.length) {\n    return this.setTemplates(loadTemplates);\n  }\n};\n\nElementTemplatesLoader.prototype.setTemplates = function (templates) {\n  var elementTemplates = this._elementTemplates;\n  var validator = new Validator().addAll(templates);\n  var errors = validator.getErrors(),\n      validTemplates = validator.getValidTemplates();\n  elementTemplates.set(validTemplates);\n\n  if (errors.length) {\n    this.templateErrors(errors);\n  }\n\n  this.templatesChanged();\n};\n\nElementTemplatesLoader.prototype.templatesChanged = function () {\n  this._eventBus.fire('elementTemplates.changed');\n};\n\nElementTemplatesLoader.prototype.templateErrors = function (errors) {\n  this._eventBus.fire('elementTemplates.errors', {\n    errors: errors\n  });\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/element-templates/ElementTemplatesLoader.js"],"names":["Validator","require","ElementTemplatesLoader","loadTemplates","eventBus","elementTemplates","_loadTemplates","_eventBus","_elementTemplates","self","on","reload","module","exports","$inject","prototype","err","templates","templateErrors","setTemplates","length","validator","addAll","errors","getErrors","validTemplates","getValidTemplates","set","templatesChanged","fire"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCC,aAAhC,EAA+CC,QAA/C,EAAyDC,gBAAzD,EAA2E;AACzE,OAAKC,cAAL,GAAsBH,aAAtB;AACA,OAAKI,SAAL,GAAiBH,QAAjB;AACA,OAAKI,iBAAL,GAAyBH,gBAAzB;AAEA,MAAII,IAAI,GAAG,IAAX;AAEAL,EAAAA,QAAQ,CAACM,EAAT,CAAY,cAAZ,EAA4B,YAAW;AACrCD,IAAAA,IAAI,CAACE,MAAL;AACD,GAFD;AAGD;;AAEDC,MAAM,CAACC,OAAP,GAAiBX,sBAAjB;AAEAA,sBAAsB,CAACY,OAAvB,GAAiC,CAC/B,yBAD+B,EAE/B,UAF+B,EAG/B,kBAH+B,CAAjC;;AAOAZ,sBAAsB,CAACa,SAAvB,CAAiCJ,MAAjC,GAA0C,YAAW;AAEnD,MAAIF,IAAI,GAAG,IAAX;AAEA,MAAIN,aAAa,GAAG,KAAKG,cAAzB,CAJmD,CAMnD;;AACA,MAAI,OAAOH,aAAP,KAAyB,WAA7B,EAA0C;AACxC;AACD,GATkD,CAWnD;;;AACA,MAAI,OAAOA,aAAP,KAAyB,UAA7B,EAAyC;AAEvC,WAAOA,aAAa,CAAC,UAASa,GAAT,EAAcC,SAAd,EAAyB;AAE5C,UAAID,GAAJ,EAAS;AACP,eAAOP,IAAI,CAACS,cAAL,CAAoB,CAAEF,GAAF,CAApB,CAAP;AACD;;AAEDP,MAAAA,IAAI,CAACU,YAAL,CAAkBF,SAAlB;AACD,KAPmB,CAApB;AAQD,GAtBkD,CAwBnD;;;AACA,MAAId,aAAa,CAACiB,MAAlB,EAA0B;AACxB,WAAO,KAAKD,YAAL,CAAkBhB,aAAlB,CAAP;AACD;AAEF,CA7BD;;AA+BAD,sBAAsB,CAACa,SAAvB,CAAiCI,YAAjC,GAAgD,UAASF,SAAT,EAAoB;AAElE,MAAIZ,gBAAgB,GAAG,KAAKG,iBAA5B;AAEA,MAAIa,SAAS,GAAG,IAAIrB,SAAJ,GAAgBsB,MAAhB,CAAuBL,SAAvB,CAAhB;AAEA,MAAIM,MAAM,GAAGF,SAAS,CAACG,SAAV,EAAb;AAAA,MACIC,cAAc,GAAGJ,SAAS,CAACK,iBAAV,EADrB;AAGArB,EAAAA,gBAAgB,CAACsB,GAAjB,CAAqBF,cAArB;;AAEA,MAAIF,MAAM,CAACH,MAAX,EAAmB;AACjB,SAAKF,cAAL,CAAoBK,MAApB;AACD;;AAED,OAAKK,gBAAL;AACD,CAhBD;;AAkBA1B,sBAAsB,CAACa,SAAvB,CAAiCa,gBAAjC,GAAoD,YAAW;AAC7D,OAAKrB,SAAL,CAAesB,IAAf,CAAoB,0BAApB;AACD,CAFD;;AAIA3B,sBAAsB,CAACa,SAAvB,CAAiCG,cAAjC,GAAkD,UAASK,MAAT,EAAiB;AACjE,OAAKhB,SAAL,CAAesB,IAAf,CAAoB,yBAApB,EAA+C;AAC7CN,IAAAA,MAAM,EAAEA;AADqC,GAA/C;AAGD,CAJD","sourcesContent":["'use strict';\n\nvar Validator = require('./Validator');\n\n/**\n * The guy responsible for template loading.\n *\n * Provide the actual templates via the `config.elementTemplates`.\n *\n * That configuration can either be an array of template\n * descriptors or a node style callback to retrieve\n * the templates asynchronously.\n *\n * @param {Array<TemplateDescriptor>|Function} loadTemplates\n * @param {EventBus} eventBus\n * @param {ElementTemplates} elementTemplates\n */\nfunction ElementTemplatesLoader(loadTemplates, eventBus, elementTemplates) {\n  this._loadTemplates = loadTemplates;\n  this._eventBus = eventBus;\n  this._elementTemplates = elementTemplates;\n\n  var self = this;\n\n  eventBus.on('diagram.init', function() {\n    self.reload();\n  });\n}\n\nmodule.exports = ElementTemplatesLoader;\n\nElementTemplatesLoader.$inject = [\n  'config.elementTemplates',\n  'eventBus',\n  'elementTemplates'\n];\n\n\nElementTemplatesLoader.prototype.reload = function() {\n\n  var self = this;\n\n  var loadTemplates = this._loadTemplates;\n\n  // no templates specified\n  if (typeof loadTemplates === 'undefined') {\n    return;\n  }\n\n  // template loader function specified\n  if (typeof loadTemplates === 'function') {\n\n    return loadTemplates(function(err, templates) {\n\n      if (err) {\n        return self.templateErrors([ err ]);\n      }\n\n      self.setTemplates(templates);\n    });\n  }\n\n  // templates array specified\n  if (loadTemplates.length) {\n    return this.setTemplates(loadTemplates);\n  }\n\n};\n\nElementTemplatesLoader.prototype.setTemplates = function(templates) {\n\n  var elementTemplates = this._elementTemplates;\n\n  var validator = new Validator().addAll(templates);\n\n  var errors = validator.getErrors(),\n      validTemplates = validator.getValidTemplates();\n\n  elementTemplates.set(validTemplates);\n\n  if (errors.length) {\n    this.templateErrors(errors);\n  }\n\n  this.templatesChanged();\n};\n\nElementTemplatesLoader.prototype.templatesChanged = function() {\n  this._eventBus.fire('elementTemplates.changed');\n};\n\nElementTemplatesLoader.prototype.templateErrors = function(errors) {\n  this._eventBus.fire('elementTemplates.errors', {\n    errors: errors\n  });\n};"]},"metadata":{},"sourceType":"script"}