{"ast":null,"code":"import { getNewAttachPoint } from '../../../../util/AttachUtil';\nexport function getResizedSourceAnchor(connection, shape, oldBounds) {\n  var waypoints = safeGetWaypoints(connection),\n      oldAnchor = waypoints[0];\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n}\nexport function getResizedTargetAnchor(connection, shape, oldBounds) {\n  var waypoints = safeGetWaypoints(connection),\n      oldAnchor = waypoints[waypoints.length - 1];\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n}\nexport function getMovedSourceAnchor(connection, source, moveDelta) {\n  return getResizedSourceAnchor(connection, source, substractPosition(source, moveDelta));\n}\nexport function getMovedTargetAnchor(connection, target, moveDelta) {\n  return getResizedTargetAnchor(connection, target, substractPosition(target, moveDelta));\n} // helpers //////////////////////\n\nfunction substractPosition(bounds, delta) {\n  return {\n    x: bounds.x - delta.x,\n    y: bounds.y - delta.y,\n    width: bounds.width,\n    height: bounds.height\n  };\n}\n/**\n * Return waypoints of given connection; throw if non exists (should not happen!!).\n *\n * @param {Connection} connection\n *\n * @return {Array<Point>}\n */\n\n\nfunction safeGetWaypoints(connection) {\n  var waypoints = connection.waypoints;\n\n  if (!waypoints.length) {\n    throw new Error('connection#' + connection.id + ': no waypoints');\n  }\n\n  return waypoints;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/modeling/cmd/helper/AnchorsHelper.js"],"names":["getNewAttachPoint","getResizedSourceAnchor","connection","shape","oldBounds","waypoints","safeGetWaypoints","oldAnchor","original","getResizedTargetAnchor","length","getMovedSourceAnchor","source","moveDelta","substractPosition","getMovedTargetAnchor","target","bounds","delta","x","y","width","height","Error","id"],"mappings":"AAAA,SACEA,iBADF,QAEO,6BAFP;AAKA,OAAO,SAASC,sBAAT,CAAgCC,UAAhC,EAA4CC,KAA5C,EAAmDC,SAAnD,EAA8D;AAEnE,MAAIC,SAAS,GAAGC,gBAAgB,CAACJ,UAAD,CAAhC;AAAA,MACIK,SAAS,GAAGF,SAAS,CAAC,CAAD,CADzB;AAGA,SAAOL,iBAAiB,CAACO,SAAS,CAACC,QAAV,IAAsBD,SAAvB,EAAkCH,SAAlC,EAA6CD,KAA7C,CAAxB;AACD;AAGD,OAAO,SAASM,sBAAT,CAAgCP,UAAhC,EAA4CC,KAA5C,EAAmDC,SAAnD,EAA8D;AAEnE,MAAIC,SAAS,GAAGC,gBAAgB,CAACJ,UAAD,CAAhC;AAAA,MACIK,SAAS,GAAGF,SAAS,CAACA,SAAS,CAACK,MAAV,GAAmB,CAApB,CADzB;AAGA,SAAOV,iBAAiB,CAACO,SAAS,CAACC,QAAV,IAAsBD,SAAvB,EAAkCH,SAAlC,EAA6CD,KAA7C,CAAxB;AACD;AAGD,OAAO,SAASQ,oBAAT,CAA8BT,UAA9B,EAA0CU,MAA1C,EAAkDC,SAAlD,EAA6D;AAClE,SAAOZ,sBAAsB,CAACC,UAAD,EAAaU,MAAb,EAAqBE,iBAAiB,CAACF,MAAD,EAASC,SAAT,CAAtC,CAA7B;AACD;AAGD,OAAO,SAASE,oBAAT,CAA8Bb,UAA9B,EAA0Cc,MAA1C,EAAkDH,SAAlD,EAA6D;AAClE,SAAOJ,sBAAsB,CAACP,UAAD,EAAac,MAAb,EAAqBF,iBAAiB,CAACE,MAAD,EAASH,SAAT,CAAtC,CAA7B;AACD,C,CAGD;;AAEA,SAASC,iBAAT,CAA2BG,MAA3B,EAAmCC,KAAnC,EAA0C;AACxC,SAAO;AACLC,IAAAA,CAAC,EAAEF,MAAM,CAACE,CAAP,GAAWD,KAAK,CAACC,CADf;AAELC,IAAAA,CAAC,EAAEH,MAAM,CAACG,CAAP,GAAWF,KAAK,CAACE,CAFf;AAGLC,IAAAA,KAAK,EAAEJ,MAAM,CAACI,KAHT;AAILC,IAAAA,MAAM,EAAEL,MAAM,CAACK;AAJV,GAAP;AAMD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShB,gBAAT,CAA0BJ,UAA1B,EAAsC;AAEpC,MAAIG,SAAS,GAAGH,UAAU,CAACG,SAA3B;;AAEA,MAAI,CAACA,SAAS,CAACK,MAAf,EAAuB;AACrB,UAAM,IAAIa,KAAJ,CAAU,gBAAgBrB,UAAU,CAACsB,EAA3B,GAAgC,gBAA1C,CAAN;AACD;;AAED,SAAOnB,SAAP;AACD","sourcesContent":["import {\n  getNewAttachPoint\n} from '../../../../util/AttachUtil';\n\n\nexport function getResizedSourceAnchor(connection, shape, oldBounds) {\n\n  var waypoints = safeGetWaypoints(connection),\n      oldAnchor = waypoints[0];\n\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n}\n\n\nexport function getResizedTargetAnchor(connection, shape, oldBounds) {\n\n  var waypoints = safeGetWaypoints(connection),\n      oldAnchor = waypoints[waypoints.length - 1];\n\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n}\n\n\nexport function getMovedSourceAnchor(connection, source, moveDelta) {\n  return getResizedSourceAnchor(connection, source, substractPosition(source, moveDelta));\n}\n\n\nexport function getMovedTargetAnchor(connection, target, moveDelta) {\n  return getResizedTargetAnchor(connection, target, substractPosition(target, moveDelta));\n}\n\n\n// helpers //////////////////////\n\nfunction substractPosition(bounds, delta) {\n  return {\n    x: bounds.x - delta.x,\n    y: bounds.y - delta.y,\n    width: bounds.width,\n    height: bounds.height\n  };\n}\n\n\n/**\n * Return waypoints of given connection; throw if non exists (should not happen!!).\n *\n * @param {Connection} connection\n *\n * @return {Array<Point>}\n */\nfunction safeGetWaypoints(connection) {\n\n  var waypoints = connection.waypoints;\n\n  if (!waypoints.length) {\n    throw new Error('connection#' + connection.id + ': no waypoints');\n  }\n\n  return waypoints;\n}\n"]},"metadata":{},"sourceType":"module"}