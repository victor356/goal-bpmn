{"ast":null,"code":"'use strict';\n\nvar isArray = require('lodash/isArray');\n\nvar isObject = require('lodash/isObject');\n\nvar DROPDOWN_TYPE = 'Dropdown';\nvar VALID_TYPES = ['String', 'Text', 'Boolean', 'Hidden', DROPDOWN_TYPE];\nvar PROPERTY_TYPE = 'property',\n    CAMUNDA_PROPERTY_TYPE = 'camunda:property',\n    CAMUNDA_INPUT_PARAMETER_TYPE = 'camunda:inputParameter',\n    CAMUNDA_OUTPUT_PARAMETER_TYPE = 'camunda:outputParameter',\n    CAMUNDA_IN_TYPE = 'camunda:in',\n    CAMUNDA_OUT_TYPE = 'camunda:out',\n    CAMUNDA_IN_BUSINESS_KEY_TYPE = 'camunda:in:businessKey',\n    CAMUNDA_EXECUTION_LISTENER = 'camunda:executionListener',\n    CAMUNDA_FIELD = 'camunda:field';\nvar VALID_BINDING_TYPES = [PROPERTY_TYPE, CAMUNDA_PROPERTY_TYPE, CAMUNDA_INPUT_PARAMETER_TYPE, CAMUNDA_OUTPUT_PARAMETER_TYPE, CAMUNDA_IN_TYPE, CAMUNDA_OUT_TYPE, CAMUNDA_IN_BUSINESS_KEY_TYPE, CAMUNDA_EXECUTION_LISTENER, CAMUNDA_FIELD];\n/**\n * A element template validator.\n */\n\nfunction Validator() {\n  this._templatesById = {};\n  this._validTemplates = [];\n  this._errors = [];\n  /**\n   * Adds the templates.\n   *\n   * @param {Array<TemplateDescriptor>} templates\n   *\n   * @return {Validator} self\n   */\n\n  this.addAll = function (templates) {\n    if (!isArray(templates)) {\n      this._logError('templates must be []');\n    } else {\n      templates.forEach(this.add, this);\n    }\n\n    return this;\n  };\n  /**\n   * Add the given element template, if it is valid.\n   *\n   * @param {TemplateDescriptor} template\n   *\n   * @return {Validator} self\n   */\n\n\n  this.add = function (template) {\n    var err = this._validateTemplate(template);\n\n    if (!err) {\n      this._templatesById[template.id] = template;\n\n      this._validTemplates.push(template);\n    }\n\n    return this;\n  };\n  /**\n   * Validate given template and return error (if any).\n   *\n   * @param {TemplateDescriptor} template\n   *\n   * @return {Error} validation error, if any\n   */\n\n\n  this._validateTemplate = function (template) {\n    var err,\n        id = template.id,\n        appliesTo = template.appliesTo,\n        properties = template.properties,\n        scopes = template.scopes;\n\n    if (!id) {\n      return this._logError('missing template id');\n    }\n\n    if (id in this._templatesById) {\n      return this._logError('template id <' + id + '> already used');\n    }\n\n    if (!isArray(appliesTo)) {\n      err = this._logError('missing appliesTo=[]', template);\n    }\n\n    if (!isArray(properties)) {\n      err = this._logError('missing properties=[]', template);\n    } else {\n      if (!this._validateProperties(properties)) {\n        err = new Error('invalid properties');\n      }\n    }\n\n    if (scopes) {\n      err = this._validateScopes(template, scopes);\n    }\n\n    return err;\n  };\n\n  this._validateScopes = function (template, scopes) {\n    var err, scope, scopeName;\n\n    if (!isObject(scopes) || isArray(scopes)) {\n      return this._logError('invalid scopes, should be scopes={}', template);\n    }\n\n    for (scopeName in scopes) {\n      scope = scopes[scopeName];\n\n      if (!isObject(scope) || isArray(scope)) {\n        err = this._logError('invalid scope, should be scope={}', template);\n      }\n\n      if (!isArray(scope.properties)) {\n        err = this._logError('missing properties=[] in scope <' + scopeName + '>', template);\n      } else {\n        if (!this._validateProperties(scope.properties)) {\n          err = new Error('invalid properties in scope <' + scopeName + '>');\n        }\n      }\n    }\n\n    return err;\n  };\n  /**\n   * Validate properties and return false if any is invalid.\n   *\n   * @param {Array<PropertyDescriptor>} properties\n   *\n   * @return {Boolean} true if all properties are valid\n   */\n\n\n  this._validateProperties = function (properties) {\n    var validProperties = properties.filter(this._validateProperty, this);\n    return properties.length === validProperties.length;\n  };\n  /**\n   * Validate property and return false, if there was\n   * a validation error.\n   *\n   * @param {PropertyDescriptor} property\n   *\n   * @return {Boolean} true if property is valid\n   */\n\n\n  this._validateProperty = function (property) {\n    var type = property.type,\n        binding = property.binding;\n    var err;\n    var bindingType = binding.type;\n\n    if (VALID_TYPES.indexOf(type) === -1) {\n      err = this._logError('invalid property type <' + type + '>; ' + 'must be any of { ' + VALID_TYPES.join(', ') + ' }');\n    }\n\n    if (type === DROPDOWN_TYPE && bindingType !== CAMUNDA_EXECUTION_LISTENER) {\n      if (!isArray(property.choices)) {\n        err = this._logError('must provide choices=[] with ' + DROPDOWN_TYPE + ' type');\n      } else if (!property.choices.every(isDropdownChoiceValid)) {\n        err = this._logError('{ name, value } must be specified for ' + DROPDOWN_TYPE + ' choices');\n      }\n    }\n\n    if (!binding) {\n      return this._logError('property missing binding');\n    }\n\n    if (VALID_BINDING_TYPES.indexOf(bindingType) === -1) {\n      err = this._logError('invalid property.binding type <' + bindingType + '>; ' + 'must be any of { ' + VALID_BINDING_TYPES.join(', ') + ' }');\n    }\n\n    if (bindingType === PROPERTY_TYPE || bindingType === CAMUNDA_PROPERTY_TYPE || bindingType === CAMUNDA_INPUT_PARAMETER_TYPE || bindingType === CAMUNDA_FIELD) {\n      if (!binding.name) {\n        err = this._logError('property.binding <' + bindingType + '> requires name');\n      }\n    }\n\n    if (bindingType === CAMUNDA_OUTPUT_PARAMETER_TYPE) {\n      if (!binding.source) {\n        err = this._logError('property.binding <' + bindingType + '> requires source');\n      }\n    }\n\n    if (bindingType === CAMUNDA_IN_TYPE) {\n      if (!binding.variables && !binding.target) {\n        err = this._logError('property.binding <' + bindingType + '> requires ' + 'variables or target');\n      }\n    }\n\n    if (bindingType === CAMUNDA_OUT_TYPE) {\n      if (!binding.variables && !binding.source && !binding.sourceExpression) {\n        err = this._logError('property.binding <' + bindingType + '> requires ' + 'variables, sourceExpression or source');\n      }\n    }\n\n    if (bindingType === CAMUNDA_EXECUTION_LISTENER) {\n      if (type !== 'Hidden') {\n        err = this._logError('invalid property type <' + type + '> for ' + CAMUNDA_EXECUTION_LISTENER + '; ' + 'must be <Hidden>');\n      }\n    }\n\n    return !err;\n  };\n\n  this._logError = function (err, template) {\n    if (typeof err === 'string') {\n      if (template) {\n        err = 'template(id: ' + template.id + ') ' + err;\n      }\n\n      err = new Error(err);\n    }\n\n    this._errors.push(err);\n\n    return err;\n  };\n\n  this.getErrors = function () {\n    return this._errors;\n  };\n\n  this.getValidTemplates = function () {\n    return this._validTemplates;\n  };\n}\n\nmodule.exports = Validator; // helpers ///////////////////////////////////\n\nfunction isDropdownChoiceValid(c) {\n  return 'name' in c && 'value' in c;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/element-templates/Validator.js"],"names":["isArray","require","isObject","DROPDOWN_TYPE","VALID_TYPES","PROPERTY_TYPE","CAMUNDA_PROPERTY_TYPE","CAMUNDA_INPUT_PARAMETER_TYPE","CAMUNDA_OUTPUT_PARAMETER_TYPE","CAMUNDA_IN_TYPE","CAMUNDA_OUT_TYPE","CAMUNDA_IN_BUSINESS_KEY_TYPE","CAMUNDA_EXECUTION_LISTENER","CAMUNDA_FIELD","VALID_BINDING_TYPES","Validator","_templatesById","_validTemplates","_errors","addAll","templates","_logError","forEach","add","template","err","_validateTemplate","id","push","appliesTo","properties","scopes","_validateProperties","Error","_validateScopes","scope","scopeName","validProperties","filter","_validateProperty","length","property","type","binding","bindingType","indexOf","join","choices","every","isDropdownChoiceValid","name","source","variables","target","sourceExpression","getErrors","getValidTemplates","module","exports","c"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAtB;;AAEA,IAAIE,aAAa,GAAG,UAApB;AAEA,IAAIC,WAAW,GAAG,CAAE,QAAF,EAAY,MAAZ,EAAoB,SAApB,EAA+B,QAA/B,EAAyCD,aAAzC,CAAlB;AAEA,IAAIE,aAAa,GAAG,UAApB;AAAA,IACIC,qBAAqB,GAAG,kBAD5B;AAAA,IAEIC,4BAA4B,GAAG,wBAFnC;AAAA,IAGIC,6BAA6B,GAAG,yBAHpC;AAAA,IAIIC,eAAe,GAAG,YAJtB;AAAA,IAKIC,gBAAgB,GAAG,aALvB;AAAA,IAMIC,4BAA4B,GAAG,wBANnC;AAAA,IAOIC,0BAA0B,GAAG,2BAPjC;AAAA,IAQIC,aAAa,GAAG,eARpB;AAUA,IAAIC,mBAAmB,GAAG,CACxBT,aADwB,EAExBC,qBAFwB,EAGxBC,4BAHwB,EAIxBC,6BAJwB,EAKxBC,eALwB,EAMxBC,gBANwB,EAOxBC,4BAPwB,EAQxBC,0BARwB,EASxBC,aATwB,CAA1B;AAaA;AACA;AACA;;AACA,SAASE,SAAT,GAAqB;AAEnB,OAAKC,cAAL,GAAsB,EAAtB;AAEA,OAAKC,eAAL,GAAuB,EAAvB;AACA,OAAKC,OAAL,GAAe,EAAf;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAc,UAASC,SAAT,EAAoB;AAEhC,QAAI,CAACpB,OAAO,CAACoB,SAAD,CAAZ,EAAyB;AACvB,WAAKC,SAAL,CAAe,sBAAf;AACD,KAFD,MAEO;AACLD,MAAAA,SAAS,CAACE,OAAV,CAAkB,KAAKC,GAAvB,EAA4B,IAA5B;AACD;;AAED,WAAO,IAAP;AACD,GATD;AAWA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,OAAKA,GAAL,GAAW,UAASC,QAAT,EAAmB;AAE5B,QAAIC,GAAG,GAAG,KAAKC,iBAAL,CAAuBF,QAAvB,CAAV;;AAEA,QAAI,CAACC,GAAL,EAAU;AACR,WAAKT,cAAL,CAAoBQ,QAAQ,CAACG,EAA7B,IAAmCH,QAAnC;;AAEA,WAAKP,eAAL,CAAqBW,IAArB,CAA0BJ,QAA1B;AACD;;AAED,WAAO,IAAP;AACD,GAXD;AAaA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,OAAKE,iBAAL,GAAyB,UAASF,QAAT,EAAmB;AAE1C,QAAIC,GAAJ;AAAA,QACIE,EAAE,GAAGH,QAAQ,CAACG,EADlB;AAAA,QAEIE,SAAS,GAAGL,QAAQ,CAACK,SAFzB;AAAA,QAGIC,UAAU,GAAGN,QAAQ,CAACM,UAH1B;AAAA,QAIIC,MAAM,GAAGP,QAAQ,CAACO,MAJtB;;AAMA,QAAI,CAACJ,EAAL,EAAS;AACP,aAAO,KAAKN,SAAL,CAAe,qBAAf,CAAP;AACD;;AAED,QAAIM,EAAE,IAAI,KAAKX,cAAf,EAA+B;AAC7B,aAAO,KAAKK,SAAL,CAAe,kBAAkBM,EAAlB,GAAuB,gBAAtC,CAAP;AACD;;AAED,QAAI,CAAC3B,OAAO,CAAC6B,SAAD,CAAZ,EAAyB;AACvBJ,MAAAA,GAAG,GAAG,KAAKJ,SAAL,CAAe,sBAAf,EAAuCG,QAAvC,CAAN;AACD;;AAED,QAAI,CAACxB,OAAO,CAAC8B,UAAD,CAAZ,EAA0B;AACxBL,MAAAA,GAAG,GAAG,KAAKJ,SAAL,CAAe,uBAAf,EAAwCG,QAAxC,CAAN;AACD,KAFD,MAEO;AACL,UAAI,CAAC,KAAKQ,mBAAL,CAAyBF,UAAzB,CAAL,EAA2C;AACzCL,QAAAA,GAAG,GAAG,IAAIQ,KAAJ,CAAU,oBAAV,CAAN;AACD;AACF;;AAED,QAAIF,MAAJ,EAAY;AACVN,MAAAA,GAAG,GAAG,KAAKS,eAAL,CAAqBV,QAArB,EAA+BO,MAA/B,CAAN;AACD;;AAED,WAAON,GAAP;AACD,GAjCD;;AAmCA,OAAKS,eAAL,GAAuB,UAASV,QAAT,EAAmBO,MAAnB,EAA2B;AAEhD,QAAIN,GAAJ,EACIU,KADJ,EAEIC,SAFJ;;AAIA,QAAI,CAAClC,QAAQ,CAAC6B,MAAD,CAAT,IAAqB/B,OAAO,CAAC+B,MAAD,CAAhC,EAA0C;AACxC,aAAO,KAAKV,SAAL,CAAe,qCAAf,EAAsDG,QAAtD,CAAP;AACD;;AAED,SAAKY,SAAL,IAAkBL,MAAlB,EAA0B;AACxBI,MAAAA,KAAK,GAAGJ,MAAM,CAACK,SAAD,CAAd;;AAEA,UAAI,CAAClC,QAAQ,CAACiC,KAAD,CAAT,IAAoBnC,OAAO,CAACmC,KAAD,CAA/B,EAAwC;AACtCV,QAAAA,GAAG,GAAG,KAAKJ,SAAL,CAAe,mCAAf,EAAoDG,QAApD,CAAN;AACD;;AAED,UAAI,CAACxB,OAAO,CAACmC,KAAK,CAACL,UAAP,CAAZ,EAAgC;AAC9BL,QAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,qCAAqCe,SAArC,GAAiD,GAD7C,EACkDZ,QADlD,CAAN;AAGD,OAJD,MAIO;AACL,YAAI,CAAC,KAAKQ,mBAAL,CAAyBG,KAAK,CAACL,UAA/B,CAAL,EAAiD;AAC/CL,UAAAA,GAAG,GAAG,IAAIQ,KAAJ,CAAU,kCAAkCG,SAAlC,GAA8C,GAAxD,CAAN;AACD;AACF;AACF;;AAED,WAAOX,GAAP;AACD,GA7BD;AA+BA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,OAAKO,mBAAL,GAA2B,UAASF,UAAT,EAAqB;AAC9C,QAAIO,eAAe,GAAGP,UAAU,CAACQ,MAAX,CAAkB,KAAKC,iBAAvB,EAA0C,IAA1C,CAAtB;AAEA,WAAOT,UAAU,CAACU,MAAX,KAAsBH,eAAe,CAACG,MAA7C;AACD,GAJD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,OAAKD,iBAAL,GAAyB,UAASE,QAAT,EAAmB;AAE1C,QAAIC,IAAI,GAAGD,QAAQ,CAACC,IAApB;AAAA,QACIC,OAAO,GAAGF,QAAQ,CAACE,OADvB;AAGA,QAAIlB,GAAJ;AAEA,QAAImB,WAAW,GAAGD,OAAO,CAACD,IAA1B;;AAEA,QAAItC,WAAW,CAACyC,OAAZ,CAAoBH,IAApB,MAA8B,CAAC,CAAnC,EAAsC;AACpCjB,MAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,4BAA4BqB,IAA5B,GAAmC,KAAnC,GACA,mBADA,GACsBtC,WAAW,CAAC0C,IAAZ,CAAiB,IAAjB,CADtB,GAC+C,IAF3C,CAAN;AAID;;AAED,QAAIJ,IAAI,KAAKvC,aAAT,IAA0ByC,WAAW,KAAKhC,0BAA9C,EAA0E;AACxE,UAAI,CAACZ,OAAO,CAACyC,QAAQ,CAACM,OAAV,CAAZ,EAAgC;AAC9BtB,QAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,kCAAkClB,aAAlC,GAAkD,OAD9C,CAAN;AAGD,OAJD,MAMA,IAAI,CAACsC,QAAQ,CAACM,OAAT,CAAiBC,KAAjB,CAAuBC,qBAAvB,CAAL,EAAoD;AAClDxB,QAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,2CACAlB,aADA,GACgB,UAFZ,CAAN;AAID;AACF;;AAED,QAAI,CAACwC,OAAL,EAAc;AACZ,aAAO,KAAKtB,SAAL,CAAe,0BAAf,CAAP;AACD;;AAED,QAAIP,mBAAmB,CAAC+B,OAApB,CAA4BD,WAA5B,MAA6C,CAAC,CAAlD,EAAqD;AACnDnB,MAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,oCAAoCuB,WAApC,GAAkD,KAAlD,GACA,mBADA,GACsB9B,mBAAmB,CAACgC,IAApB,CAAyB,IAAzB,CADtB,GACuD,IAFnD,CAAN;AAID;;AAED,QAAIF,WAAW,KAAKvC,aAAhB,IACAuC,WAAW,KAAKtC,qBADhB,IAEAsC,WAAW,KAAKrC,4BAFhB,IAGAqC,WAAW,KAAK/B,aAHpB,EAGmC;AAEjC,UAAI,CAAC8B,OAAO,CAACO,IAAb,EAAmB;AACjBzB,QAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,uBAAuBuB,WAAvB,GAAqC,iBADjC,CAAN;AAGD;AACF;;AAED,QAAIA,WAAW,KAAKpC,6BAApB,EAAmD;AACjD,UAAI,CAACmC,OAAO,CAACQ,MAAb,EAAqB;AACnB1B,QAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,uBAAuBuB,WAAvB,GAAqC,mBADjC,CAAN;AAGD;AACF;;AAED,QAAIA,WAAW,KAAKnC,eAApB,EAAqC;AAEnC,UAAI,CAACkC,OAAO,CAACS,SAAT,IAAsB,CAACT,OAAO,CAACU,MAAnC,EAA2C;AACzC5B,QAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,uBAAuBuB,WAAvB,GAAqC,aAArC,GACA,qBAFI,CAAN;AAID;AACF;;AAED,QAAIA,WAAW,KAAKlC,gBAApB,EAAsC;AAEpC,UAAI,CAACiC,OAAO,CAACS,SAAT,IAAsB,CAACT,OAAO,CAACQ,MAA/B,IAAyC,CAACR,OAAO,CAACW,gBAAtD,EAAwE;AACtE7B,QAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,uBAAuBuB,WAAvB,GAAqC,aAArC,GACA,uCAFI,CAAN;AAID;AACF;;AAED,QAAIA,WAAW,KAAKhC,0BAApB,EAAgD;AAE9C,UAAI8B,IAAI,KAAK,QAAb,EAAuB;AACrBjB,QAAAA,GAAG,GAAG,KAAKJ,SAAL,CACJ,4BAA4BqB,IAA5B,GAAmC,QAAnC,GAA8C9B,0BAA9C,GAA2E,IAA3E,GACA,kBAFI,CAAN;AAID;AACF;;AAED,WAAO,CAACa,GAAR;AACD,GA7FD;;AAgGA,OAAKJ,SAAL,GAAiB,UAASI,GAAT,EAAcD,QAAd,EAAwB;AAEvC,QAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAID,QAAJ,EAAc;AACZC,QAAAA,GAAG,GAAG,kBAAkBD,QAAQ,CAACG,EAA3B,GAAgC,IAAhC,GAAuCF,GAA7C;AACD;;AAEDA,MAAAA,GAAG,GAAG,IAAIQ,KAAJ,CAAUR,GAAV,CAAN;AACD;;AAED,SAAKP,OAAL,CAAaU,IAAb,CAAkBH,GAAlB;;AAEA,WAAOA,GAAP;AACD,GAbD;;AAeA,OAAK8B,SAAL,GAAiB,YAAW;AAC1B,WAAO,KAAKrC,OAAZ;AACD,GAFD;;AAIA,OAAKsC,iBAAL,GAAyB,YAAW;AAClC,WAAO,KAAKvC,eAAZ;AACD,GAFD;AAGD;;AAEDwC,MAAM,CAACC,OAAP,GAAiB3C,SAAjB,C,CAGA;;AAEA,SAASkC,qBAAT,CAA+BU,CAA/B,EAAkC;AAChC,SAAO,UAAUA,CAAV,IAAe,WAAWA,CAAjC;AACD","sourcesContent":["'use strict';\n\nvar isArray = require('lodash/isArray');\nvar isObject = require('lodash/isObject');\n\nvar DROPDOWN_TYPE = 'Dropdown';\n\nvar VALID_TYPES = [ 'String', 'Text', 'Boolean', 'Hidden', DROPDOWN_TYPE ];\n\nvar PROPERTY_TYPE = 'property',\n    CAMUNDA_PROPERTY_TYPE = 'camunda:property',\n    CAMUNDA_INPUT_PARAMETER_TYPE = 'camunda:inputParameter',\n    CAMUNDA_OUTPUT_PARAMETER_TYPE = 'camunda:outputParameter',\n    CAMUNDA_IN_TYPE = 'camunda:in',\n    CAMUNDA_OUT_TYPE = 'camunda:out',\n    CAMUNDA_IN_BUSINESS_KEY_TYPE = 'camunda:in:businessKey',\n    CAMUNDA_EXECUTION_LISTENER = 'camunda:executionListener',\n    CAMUNDA_FIELD = 'camunda:field';\n\nvar VALID_BINDING_TYPES = [\n  PROPERTY_TYPE,\n  CAMUNDA_PROPERTY_TYPE,\n  CAMUNDA_INPUT_PARAMETER_TYPE,\n  CAMUNDA_OUTPUT_PARAMETER_TYPE,\n  CAMUNDA_IN_TYPE,\n  CAMUNDA_OUT_TYPE,\n  CAMUNDA_IN_BUSINESS_KEY_TYPE,\n  CAMUNDA_EXECUTION_LISTENER,\n  CAMUNDA_FIELD\n];\n\n\n/**\n * A element template validator.\n */\nfunction Validator() {\n\n  this._templatesById = {};\n\n  this._validTemplates = [];\n  this._errors = [];\n\n\n  /**\n   * Adds the templates.\n   *\n   * @param {Array<TemplateDescriptor>} templates\n   *\n   * @return {Validator} self\n   */\n  this.addAll = function(templates) {\n\n    if (!isArray(templates)) {\n      this._logError('templates must be []');\n    } else {\n      templates.forEach(this.add, this);\n    }\n\n    return this;\n  };\n\n  /**\n   * Add the given element template, if it is valid.\n   *\n   * @param {TemplateDescriptor} template\n   *\n   * @return {Validator} self\n   */\n  this.add = function(template) {\n\n    var err = this._validateTemplate(template);\n\n    if (!err) {\n      this._templatesById[template.id] = template;\n\n      this._validTemplates.push(template);\n    }\n\n    return this;\n  };\n\n  /**\n   * Validate given template and return error (if any).\n   *\n   * @param {TemplateDescriptor} template\n   *\n   * @return {Error} validation error, if any\n   */\n  this._validateTemplate = function(template) {\n\n    var err,\n        id = template.id,\n        appliesTo = template.appliesTo,\n        properties = template.properties,\n        scopes = template.scopes;\n\n    if (!id) {\n      return this._logError('missing template id');\n    }\n\n    if (id in this._templatesById) {\n      return this._logError('template id <' + id + '> already used');\n    }\n\n    if (!isArray(appliesTo)) {\n      err = this._logError('missing appliesTo=[]', template);\n    }\n\n    if (!isArray(properties)) {\n      err = this._logError('missing properties=[]', template);\n    } else {\n      if (!this._validateProperties(properties)) {\n        err = new Error('invalid properties');\n      }\n    }\n\n    if (scopes) {\n      err = this._validateScopes(template, scopes);\n    }\n\n    return err;\n  };\n\n  this._validateScopes = function(template, scopes) {\n\n    var err,\n        scope,\n        scopeName;\n\n    if (!isObject(scopes) || isArray(scopes)) {\n      return this._logError('invalid scopes, should be scopes={}', template);\n    }\n\n    for (scopeName in scopes) {\n      scope = scopes[scopeName];\n\n      if (!isObject(scope) || isArray(scope)) {\n        err = this._logError('invalid scope, should be scope={}', template);\n      }\n\n      if (!isArray(scope.properties)) {\n        err = this._logError(\n          'missing properties=[] in scope <' + scopeName + '>', template\n        );\n      } else {\n        if (!this._validateProperties(scope.properties)) {\n          err = new Error('invalid properties in scope <' + scopeName + '>');\n        }\n      }\n    }\n\n    return err;\n  };\n\n  /**\n   * Validate properties and return false if any is invalid.\n   *\n   * @param {Array<PropertyDescriptor>} properties\n   *\n   * @return {Boolean} true if all properties are valid\n   */\n  this._validateProperties = function(properties) {\n    var validProperties = properties.filter(this._validateProperty, this);\n\n    return properties.length === validProperties.length;\n  };\n\n  /**\n   * Validate property and return false, if there was\n   * a validation error.\n   *\n   * @param {PropertyDescriptor} property\n   *\n   * @return {Boolean} true if property is valid\n   */\n  this._validateProperty = function(property) {\n\n    var type = property.type,\n        binding = property.binding;\n\n    var err;\n\n    var bindingType = binding.type;\n\n    if (VALID_TYPES.indexOf(type) === -1) {\n      err = this._logError(\n        'invalid property type <' + type + '>; ' +\n        'must be any of { ' + VALID_TYPES.join(', ') + ' }'\n      );\n    }\n\n    if (type === DROPDOWN_TYPE && bindingType !== CAMUNDA_EXECUTION_LISTENER) {\n      if (!isArray(property.choices)) {\n        err = this._logError(\n          'must provide choices=[] with ' + DROPDOWN_TYPE + ' type'\n        );\n      } else\n\n      if (!property.choices.every(isDropdownChoiceValid)) {\n        err = this._logError(\n          '{ name, value } must be specified for ' +\n          DROPDOWN_TYPE + ' choices'\n        );\n      }\n    }\n\n    if (!binding) {\n      return this._logError('property missing binding');\n    }\n\n    if (VALID_BINDING_TYPES.indexOf(bindingType) === -1) {\n      err = this._logError(\n        'invalid property.binding type <' + bindingType + '>; ' +\n        'must be any of { ' + VALID_BINDING_TYPES.join(', ') + ' }'\n      );\n    }\n\n    if (bindingType === PROPERTY_TYPE ||\n        bindingType === CAMUNDA_PROPERTY_TYPE ||\n        bindingType === CAMUNDA_INPUT_PARAMETER_TYPE ||\n        bindingType === CAMUNDA_FIELD) {\n\n      if (!binding.name) {\n        err = this._logError(\n          'property.binding <' + bindingType + '> requires name'\n        );\n      }\n    }\n\n    if (bindingType === CAMUNDA_OUTPUT_PARAMETER_TYPE) {\n      if (!binding.source) {\n        err = this._logError(\n          'property.binding <' + bindingType + '> requires source'\n        );\n      }\n    }\n\n    if (bindingType === CAMUNDA_IN_TYPE) {\n\n      if (!binding.variables && !binding.target) {\n        err = this._logError(\n          'property.binding <' + bindingType + '> requires ' +\n          'variables or target'\n        );\n      }\n    }\n\n    if (bindingType === CAMUNDA_OUT_TYPE) {\n\n      if (!binding.variables && !binding.source && !binding.sourceExpression) {\n        err = this._logError(\n          'property.binding <' + bindingType + '> requires ' +\n          'variables, sourceExpression or source'\n        );\n      }\n    }\n\n    if (bindingType === CAMUNDA_EXECUTION_LISTENER) {\n\n      if (type !== 'Hidden') {\n        err = this._logError(\n          'invalid property type <' + type + '> for ' + CAMUNDA_EXECUTION_LISTENER + '; ' +\n          'must be <Hidden>'\n        );\n      }\n    }\n\n    return !err;\n  };\n\n\n  this._logError = function(err, template) {\n\n    if (typeof err === 'string') {\n      if (template) {\n        err = 'template(id: ' + template.id + ') ' + err;\n      }\n\n      err = new Error(err);\n    }\n\n    this._errors.push(err);\n\n    return err;\n  };\n\n  this.getErrors = function() {\n    return this._errors;\n  };\n\n  this.getValidTemplates = function() {\n    return this._validTemplates;\n  };\n}\n\nmodule.exports = Validator;\n\n\n// helpers ///////////////////////////////////\n\nfunction isDropdownChoiceValid(c) {\n  return 'name' in c && 'value' in c;\n}\n"]},"metadata":{},"sourceType":"script"}