{"ast":null,"code":"'use strict';\n\nvar findExtension = require('../Helper').findExtension,\n    findExtensions = require('../Helper').findExtensions;\n\nvar createCamundaProperty = require('../CreateHelper').createCamundaProperty,\n    createInputParameter = require('../CreateHelper').createInputParameter,\n    createOutputParameter = require('../CreateHelper').createOutputParameter,\n    createCamundaIn = require('../CreateHelper').createCamundaIn,\n    createCamundaOut = require('../CreateHelper').createCamundaOut,\n    createCamundaInWithBusinessKey = require('../CreateHelper').createCamundaInWithBusinessKey,\n    createCamundaExecutionListenerScript = require('../CreateHelper').createCamundaExecutionListenerScript,\n    createCamundaFieldInjection = require('../CreateHelper').createCamundaFieldInjection;\n\nvar forEach = require('lodash/forEach');\n\nvar CAMUNDA_SERVICE_TASK_LIKE = ['camunda:class', 'camunda:delegateExpression', 'camunda:expression'];\n/**\n * A handler that changes the modeling template of a BPMN element.\n */\n\nfunction ChangeElementTemplateHandler(modeling, commandStack, bpmnFactory) {\n  function getOrCreateExtensionElements(element) {\n    var bo = element.businessObject;\n    var extensionElements = bo.extensionElements; // add extension elements\n\n    if (!extensionElements) {\n      extensionElements = bpmnFactory.create('bpmn:ExtensionElements', {\n        values: []\n      });\n      modeling.updateProperties(element, {\n        extensionElements: extensionElements\n      });\n    }\n\n    return extensionElements;\n  }\n\n  function updateModelerTemplate(element, newTemplate) {\n    modeling.updateProperties(element, {\n      'camunda:modelerTemplate': newTemplate && newTemplate.id\n    });\n  }\n\n  function updateIoMappings(element, newTemplate, context) {\n    var newMappings = createInputOutputMappings(newTemplate, bpmnFactory),\n        oldMappings;\n\n    if (!newMappings) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: {\n          inputOutput: newMappings\n        }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldMappings = findExtension(element, 'camunda:InputOutput');\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: [newMappings],\n        objectsToRemove: oldMappings ? [oldMappings] : []\n      });\n    }\n  }\n\n  function updateCamundaField(element, newTemplate, context) {\n    var newMappings = createCamundaFieldInjections(newTemplate, bpmnFactory),\n        oldMappings;\n\n    if (!newMappings) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: {\n          field: newMappings\n        }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldMappings = findExtensions(element, ['camunda:Field']);\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: newMappings,\n        objectsToRemove: oldMappings ? oldMappings : []\n      });\n    }\n  }\n\n  function updateCamundaProperties(element, newTemplate, context) {\n    var newProperties = createCamundaProperties(newTemplate, bpmnFactory),\n        oldProperties;\n\n    if (!newProperties) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: {\n          properties: newProperties\n        }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldProperties = findExtension(element, 'camunda:Properties');\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: [newProperties],\n        objectsToRemove: oldProperties ? [oldProperties] : []\n      });\n    }\n  }\n\n  function updateProperties(element, newTemplate, context) {\n    var newProperties = createBpmnPropertyUpdates(newTemplate, bpmnFactory);\n    var newPropertiesCount = Object.keys(newProperties).length;\n\n    if (!newPropertiesCount) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: newProperties\n      });\n    } else {\n      modeling.updateProperties(element, newProperties);\n    }\n  }\n\n  function updateInOut(element, newTemplate, context) {\n    var newInOut = createCamundaInOut(newTemplate, bpmnFactory),\n        oldInOut;\n\n    if (!newInOut) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: {\n          inout: newInOut\n        }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldInOut = findExtensions(context, ['camunda:In', 'camunda:Out']);\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: newInOut,\n        objectsToRemove: oldInOut\n      });\n    }\n  }\n\n  function updateExecutionListener(element, newTemplate, context) {\n    var newExecutionListeners = createCamundaExecutionListeners(newTemplate, bpmnFactory),\n        oldExecutionsListeners;\n\n    if (!newExecutionListeners.length) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: {\n          executionListener: newExecutionListeners\n        }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldExecutionsListeners = findExtensions(context, ['camunda:ExecutionListener']);\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: newExecutionListeners,\n        objectsToRemove: oldExecutionsListeners\n      });\n    }\n  }\n  /**\n   * Update / recreate a scoped element.\n   *\n   * @param {djs.model.Base} element the diagram parent element\n   * @param {String} scopeName name of the scope, i.e. camunda:Connector\n   * @param {Object} scopeDefinition\n   */\n\n\n  function updateScopeElements(element, scopeName, scopeDefinition) {\n    var scopeElement = bpmnFactory.create(scopeName); // update camunda:inputOutput\n\n    updateIoMappings(element, scopeDefinition, scopeElement); // update camunda:field\n\n    updateCamundaField(element, scopeDefinition, scopeElement); // update camunda:properties\n\n    updateCamundaProperties(element, scopeDefinition, scopeElement); // update other properties (bpmn:condition, camunda:async, ...)\n\n    updateProperties(element, scopeDefinition, scopeElement); // update camunda:in and camunda:out\n\n    updateInOut(element, scopeDefinition, scopeElement); // update camunda:executionListener\n\n    updateExecutionListener(element, scopeDefinition, scopeElement);\n    var extensionElements = getOrCreateExtensionElements(element);\n    var oldScope = findExtension(extensionElements, scopeName);\n    commandStack.execute('properties-panel.update-businessobject-list', {\n      element: element,\n      currentObject: extensionElements,\n      propertyName: 'values',\n      objectsToAdd: [scopeElement],\n      objectsToRemove: oldScope ? [oldScope] : []\n    });\n  }\n  /**\n   * Compose an element template change action, updating all\n   * necessary underlying properties.\n   *\n   * @param {Object} context\n   * @param {Object} context.element\n   * @param {Object} context.oldTemplate\n   * @param {Object} context.newTemplate\n   */\n\n\n  this.preExecute = function (context) {\n    var element = context.element,\n        newTemplate = context.newTemplate; // update camunda:modelerTemplate attribute\n\n    updateModelerTemplate(element, newTemplate);\n\n    if (newTemplate) {\n      // update camunda:inputOutput\n      updateIoMappings(element, newTemplate); // update camunda:field\n\n      updateCamundaField(element, newTemplate); // update camunda:properties\n\n      updateCamundaProperties(element, newTemplate); // update other properties (bpmn:condition, camunda:async, ...)\n\n      updateProperties(element, newTemplate); // update camunda:in and camunda:out\n\n      updateInOut(element, newTemplate); // update camunda:executionListener\n\n      updateExecutionListener(element, newTemplate); // loop on scopes properties\n\n      forEach(newTemplate.scopes, function (scopeDefinition, scopeName) {\n        updateScopeElements(element, scopeName, scopeDefinition);\n      });\n    }\n  };\n}\n\nChangeElementTemplateHandler.$inject = ['modeling', 'commandStack', 'bpmnFactory'];\nmodule.exports = ChangeElementTemplateHandler; // helpers /////////////////////////////\n\nfunction createBpmnPropertyUpdates(template, bpmnFactory) {\n  var propertyUpdates = {};\n  template.properties.forEach(function (p) {\n    var binding = p.binding,\n        bindingTarget = binding.name,\n        propertyValue;\n\n    if (binding.type === 'property') {\n      if (bindingTarget === 'conditionExpression') {\n        propertyValue = bpmnFactory.create('bpmn:FormalExpression', {\n          body: p.value,\n          language: binding.scriptFormat\n        });\n      } else {\n        propertyValue = p.value;\n      } // assigning camunda:async to true|false\n      // assigning bpmn:conditionExpression to { $type: 'bpmn:FormalExpression', ... }\n\n\n      propertyUpdates[bindingTarget] = propertyValue; // make sure we unset other \"implementation types\"\n      // when applying a camunda:class template onto a preconfigured\n      // camunda:delegateExpression element\n\n      if (CAMUNDA_SERVICE_TASK_LIKE.indexOf(bindingTarget) !== -1) {\n        CAMUNDA_SERVICE_TASK_LIKE.forEach(function (prop) {\n          if (prop !== bindingTarget) {\n            propertyUpdates[prop] = undefined;\n          }\n        });\n      }\n    }\n  });\n  return propertyUpdates;\n}\n\nfunction createCamundaFieldInjections(template, bpmnFactory) {\n  var injections = [];\n  template.properties.forEach(function (p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n\n    if (bindingType === 'camunda:field') {\n      injections.push(createCamundaFieldInjection(binding, p.value, bpmnFactory));\n    }\n  });\n\n  if (injections.length) {\n    return injections;\n  }\n}\n\nfunction createCamundaProperties(template, bpmnFactory) {\n  var properties = [];\n  template.properties.forEach(function (p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n\n    if (bindingType === 'camunda:property') {\n      properties.push(createCamundaProperty(binding, p.value, bpmnFactory));\n    }\n  });\n\n  if (properties.length) {\n    return bpmnFactory.create('camunda:Properties', {\n      values: properties\n    });\n  }\n}\n\nfunction createInputOutputMappings(template, bpmnFactory) {\n  var inputParameters = [],\n      outputParameters = [];\n  template.properties.forEach(function (p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n\n    if (bindingType === 'camunda:inputParameter') {\n      inputParameters.push(createInputParameter(binding, p.value, bpmnFactory));\n    }\n\n    if (bindingType === 'camunda:outputParameter') {\n      outputParameters.push(createOutputParameter(binding, p.value, bpmnFactory));\n    }\n  }); // do we need to create new ioMappings (?)\n\n  if (outputParameters.length || inputParameters.length) {\n    return bpmnFactory.create('camunda:InputOutput', {\n      inputParameters: inputParameters,\n      outputParameters: outputParameters\n    });\n  }\n}\n\nfunction createCamundaInOut(template, bpmnFactory) {\n  var inOuts = [];\n  template.properties.forEach(function (p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n\n    if (bindingType === 'camunda:in') {\n      inOuts.push(createCamundaIn(binding, p.value, bpmnFactory));\n    } else if (bindingType === 'camunda:out') {\n      inOuts.push(createCamundaOut(binding, p.value, bpmnFactory));\n    } else if (bindingType === 'camunda:in:businessKey') {\n      inOuts.push(createCamundaInWithBusinessKey(binding, p.value, bpmnFactory));\n    }\n  });\n  return inOuts;\n}\n\nfunction createCamundaExecutionListeners(template, bpmnFactory) {\n  var executionListener = [];\n  template.properties.forEach(function (p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n\n    if (bindingType === 'camunda:executionListener') {\n      executionListener.push(createCamundaExecutionListenerScript(binding, p.value, bpmnFactory));\n    }\n  });\n  return executionListener;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/element-templates/cmd/ChangeElementTemplateHandler.js"],"names":["findExtension","require","findExtensions","createCamundaProperty","createInputParameter","createOutputParameter","createCamundaIn","createCamundaOut","createCamundaInWithBusinessKey","createCamundaExecutionListenerScript","createCamundaFieldInjection","forEach","CAMUNDA_SERVICE_TASK_LIKE","ChangeElementTemplateHandler","modeling","commandStack","bpmnFactory","getOrCreateExtensionElements","element","bo","businessObject","extensionElements","create","values","updateProperties","updateModelerTemplate","newTemplate","id","updateIoMappings","context","newMappings","createInputOutputMappings","oldMappings","execute","properties","inputOutput","currentObject","propertyName","objectsToAdd","objectsToRemove","updateCamundaField","createCamundaFieldInjections","field","updateCamundaProperties","newProperties","createCamundaProperties","oldProperties","createBpmnPropertyUpdates","newPropertiesCount","Object","keys","length","updateInOut","newInOut","createCamundaInOut","oldInOut","inout","updateExecutionListener","newExecutionListeners","createCamundaExecutionListeners","oldExecutionsListeners","executionListener","updateScopeElements","scopeName","scopeDefinition","scopeElement","oldScope","preExecute","scopes","$inject","module","exports","template","propertyUpdates","p","binding","bindingTarget","name","propertyValue","type","body","value","language","scriptFormat","indexOf","prop","undefined","injections","bindingType","push","inputParameters","outputParameters","inOuts"],"mappings":"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","sourcesContent":["'use strict';\n\nvar findExtension = require('../Helper').findExtension,\n    findExtensions = require('../Helper').findExtensions;\n\nvar createCamundaProperty = require('../CreateHelper').createCamundaProperty,\n    createInputParameter = require('../CreateHelper').createInputParameter,\n    createOutputParameter = require('../CreateHelper').createOutputParameter,\n    createCamundaIn = require('../CreateHelper').createCamundaIn,\n    createCamundaOut = require('../CreateHelper').createCamundaOut,\n    createCamundaInWithBusinessKey = require('../CreateHelper').createCamundaInWithBusinessKey,\n    createCamundaExecutionListenerScript = require('../CreateHelper').createCamundaExecutionListenerScript,\n    createCamundaFieldInjection = require('../CreateHelper').createCamundaFieldInjection;\n\nvar forEach = require('lodash/forEach');\n\nvar CAMUNDA_SERVICE_TASK_LIKE = [\n  'camunda:class',\n  'camunda:delegateExpression',\n  'camunda:expression'\n];\n\n/**\n * A handler that changes the modeling template of a BPMN element.\n */\nfunction ChangeElementTemplateHandler(modeling, commandStack, bpmnFactory) {\n\n  function getOrCreateExtensionElements(element) {\n\n    var bo = element.businessObject;\n\n    var extensionElements = bo.extensionElements;\n\n    // add extension elements\n    if (!extensionElements) {\n      extensionElements = bpmnFactory.create('bpmn:ExtensionElements', {\n        values: []\n      });\n\n      modeling.updateProperties(element, {\n        extensionElements: extensionElements\n      });\n    }\n\n    return extensionElements;\n  }\n\n  function updateModelerTemplate(element, newTemplate) {\n    modeling.updateProperties(element, {\n      'camunda:modelerTemplate': newTemplate && newTemplate.id\n    });\n  }\n\n  function updateIoMappings(element, newTemplate, context) {\n\n    var newMappings = createInputOutputMappings(newTemplate, bpmnFactory),\n        oldMappings;\n\n    if (!newMappings) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: { inputOutput: newMappings }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldMappings = findExtension(element, 'camunda:InputOutput');\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: [ newMappings ],\n        objectsToRemove: oldMappings ? [ oldMappings ] : []\n      });\n    }\n  }\n\n  function updateCamundaField(element, newTemplate, context) {\n\n    var newMappings = createCamundaFieldInjections(newTemplate, bpmnFactory),\n        oldMappings;\n\n    if (!newMappings) {\n      return;\n    }\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: { field: newMappings }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldMappings = findExtensions(element, ['camunda:Field']);\n\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: newMappings,\n        objectsToRemove: oldMappings ? oldMappings : []\n      });\n    }\n  }\n\n\n  function updateCamundaProperties(element, newTemplate, context) {\n\n    var newProperties = createCamundaProperties(newTemplate, bpmnFactory),\n        oldProperties;\n\n    if (!newProperties) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: { properties: newProperties }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldProperties = findExtension(element, 'camunda:Properties');\n\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: [ newProperties ],\n        objectsToRemove: oldProperties ? [ oldProperties ] : []\n      });\n    }\n  }\n\n  function updateProperties(element, newTemplate, context) {\n\n    var newProperties = createBpmnPropertyUpdates(newTemplate, bpmnFactory);\n\n    var newPropertiesCount = Object.keys(newProperties).length;\n\n    if (!newPropertiesCount) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: newProperties\n      });\n    } else {\n      modeling.updateProperties(element, newProperties);\n    }\n  }\n\n  function updateInOut(element, newTemplate, context) {\n\n    var newInOut = createCamundaInOut(newTemplate, bpmnFactory),\n        oldInOut;\n\n    if (!newInOut) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: { inout: newInOut }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldInOut = findExtensions(context, [ 'camunda:In', 'camunda:Out' ]);\n\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: newInOut,\n        objectsToRemove: oldInOut\n      });\n    }\n  }\n\n  function updateExecutionListener(element, newTemplate, context) {\n\n    var newExecutionListeners = createCamundaExecutionListeners(newTemplate, bpmnFactory),\n        oldExecutionsListeners;\n\n    if (!newExecutionListeners.length) {\n      return;\n    }\n\n    if (context) {\n      commandStack.execute('properties-panel.update-businessobject', {\n        element: element,\n        businessObject: context,\n        properties: { executionListener: newExecutionListeners }\n      });\n    } else {\n      context = getOrCreateExtensionElements(element);\n      oldExecutionsListeners = findExtensions(context, [ 'camunda:ExecutionListener' ]);\n\n      commandStack.execute('properties-panel.update-businessobject-list', {\n        element: element,\n        currentObject: context,\n        propertyName: 'values',\n        objectsToAdd: newExecutionListeners,\n        objectsToRemove: oldExecutionsListeners\n      });\n    }\n  }\n\n  /**\n   * Update / recreate a scoped element.\n   *\n   * @param {djs.model.Base} element the diagram parent element\n   * @param {String} scopeName name of the scope, i.e. camunda:Connector\n   * @param {Object} scopeDefinition\n   */\n  function updateScopeElements(element, scopeName, scopeDefinition) {\n\n    var scopeElement = bpmnFactory.create(scopeName);\n\n    // update camunda:inputOutput\n    updateIoMappings(element, scopeDefinition, scopeElement);\n\n    // update camunda:field\n    updateCamundaField(element, scopeDefinition, scopeElement);\n\n    // update camunda:properties\n    updateCamundaProperties(element, scopeDefinition, scopeElement);\n\n    // update other properties (bpmn:condition, camunda:async, ...)\n    updateProperties(element, scopeDefinition, scopeElement);\n\n    // update camunda:in and camunda:out\n    updateInOut(element, scopeDefinition, scopeElement);\n\n    // update camunda:executionListener\n    updateExecutionListener(element, scopeDefinition, scopeElement);\n\n    var extensionElements = getOrCreateExtensionElements(element);\n    var oldScope = findExtension(extensionElements, scopeName);\n\n    commandStack.execute('properties-panel.update-businessobject-list', {\n      element: element,\n      currentObject: extensionElements,\n      propertyName: 'values',\n      objectsToAdd: [ scopeElement ],\n      objectsToRemove: oldScope ? [ oldScope ] : []\n    });\n  }\n\n  /**\n   * Compose an element template change action, updating all\n   * necessary underlying properties.\n   *\n   * @param {Object} context\n   * @param {Object} context.element\n   * @param {Object} context.oldTemplate\n   * @param {Object} context.newTemplate\n   */\n  this.preExecute = function(context) {\n\n    var element = context.element,\n        newTemplate = context.newTemplate;\n\n    // update camunda:modelerTemplate attribute\n    updateModelerTemplate(element, newTemplate);\n\n    if (newTemplate) {\n\n      // update camunda:inputOutput\n      updateIoMappings(element, newTemplate);\n\n      // update camunda:field\n      updateCamundaField(element, newTemplate);\n\n      // update camunda:properties\n      updateCamundaProperties(element, newTemplate);\n\n      // update other properties (bpmn:condition, camunda:async, ...)\n      updateProperties(element, newTemplate);\n\n      // update camunda:in and camunda:out\n      updateInOut(element, newTemplate);\n\n      // update camunda:executionListener\n      updateExecutionListener(element, newTemplate);\n\n      // loop on scopes properties\n      forEach(newTemplate.scopes, function(scopeDefinition, scopeName) {\n        updateScopeElements(element, scopeName, scopeDefinition);\n      });\n\n    }\n  };\n}\n\nChangeElementTemplateHandler.$inject = [ 'modeling', 'commandStack', 'bpmnFactory' ];\n\nmodule.exports = ChangeElementTemplateHandler;\n\n\n\n// helpers /////////////////////////////\n\nfunction createBpmnPropertyUpdates(template, bpmnFactory) {\n\n  var propertyUpdates = {};\n\n  template.properties.forEach(function(p) {\n\n    var binding = p.binding,\n        bindingTarget = binding.name,\n        propertyValue;\n\n    if (binding.type === 'property') {\n\n      if (bindingTarget === 'conditionExpression') {\n        propertyValue = bpmnFactory.create('bpmn:FormalExpression', {\n          body: p.value,\n          language: binding.scriptFormat\n        });\n      } else {\n        propertyValue = p.value;\n      }\n\n      // assigning camunda:async to true|false\n      // assigning bpmn:conditionExpression to { $type: 'bpmn:FormalExpression', ... }\n      propertyUpdates[bindingTarget] = propertyValue;\n\n      // make sure we unset other \"implementation types\"\n      // when applying a camunda:class template onto a preconfigured\n      // camunda:delegateExpression element\n      if (CAMUNDA_SERVICE_TASK_LIKE.indexOf(bindingTarget) !== -1) {\n        CAMUNDA_SERVICE_TASK_LIKE.forEach(function(prop) {\n          if (prop !== bindingTarget) {\n            propertyUpdates[prop] = undefined;\n          }\n        });\n      }\n    }\n  });\n\n  return propertyUpdates;\n}\n\nfunction createCamundaFieldInjections(template, bpmnFactory) {\n  var injections = [];\n\n  template.properties.forEach(function(p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n    if (bindingType === 'camunda:field') {\n      injections.push(createCamundaFieldInjection(\n        binding, p.value, bpmnFactory\n      ));\n    }\n  });\n\n  if (injections.length) {\n    return injections;\n  }\n}\n\nfunction createCamundaProperties(template, bpmnFactory) {\n\n  var properties = [];\n\n  template.properties.forEach(function(p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n\n    if (bindingType === 'camunda:property') {\n      properties.push(createCamundaProperty(\n        binding, p.value, bpmnFactory\n      ));\n    }\n  });\n\n  if (properties.length) {\n    return bpmnFactory.create('camunda:Properties', {\n      values: properties\n    });\n  }\n}\n\nfunction createInputOutputMappings(template, bpmnFactory) {\n\n  var inputParameters = [],\n      outputParameters = [];\n\n  template.properties.forEach(function(p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n\n    if (bindingType === 'camunda:inputParameter') {\n      inputParameters.push(createInputParameter(\n        binding, p.value, bpmnFactory\n      ));\n    }\n\n    if (bindingType === 'camunda:outputParameter') {\n      outputParameters.push(createOutputParameter(\n        binding, p.value, bpmnFactory\n      ));\n    }\n  });\n\n  // do we need to create new ioMappings (?)\n  if (outputParameters.length || inputParameters.length) {\n    return bpmnFactory.create('camunda:InputOutput', {\n      inputParameters: inputParameters,\n      outputParameters: outputParameters\n    });\n  }\n}\n\nfunction createCamundaInOut(template, bpmnFactory) {\n\n  var inOuts = [];\n\n  template.properties.forEach(function(p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n\n    if (bindingType === 'camunda:in') {\n      inOuts.push(createCamundaIn(\n        binding, p.value, bpmnFactory\n      ));\n    } else\n    if (bindingType === 'camunda:out') {\n      inOuts.push(createCamundaOut(\n        binding, p.value, bpmnFactory\n      ));\n    } else\n    if (bindingType === 'camunda:in:businessKey') {\n      inOuts.push(createCamundaInWithBusinessKey(\n        binding, p.value, bpmnFactory\n      ));\n    }\n  });\n\n  return inOuts;\n}\n\n\nfunction createCamundaExecutionListeners(template, bpmnFactory) {\n\n  var executionListener = [];\n\n  template.properties.forEach(function(p) {\n    var binding = p.binding,\n        bindingType = binding.type;\n\n    if (bindingType === 'camunda:executionListener') {\n      executionListener.push(createCamundaExecutionListenerScript(\n        binding, p.value, bpmnFactory\n      ));\n    }\n  });\n\n  return executionListener;\n}\n"]},"metadata":{},"sourceType":"script"}