{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { Base } from '../../model';\nimport AppendShapeHandler from './cmd/AppendShapeHandler';\nimport CreateShapeHandler from './cmd/CreateShapeHandler';\nimport DeleteShapeHandler from './cmd/DeleteShapeHandler';\nimport MoveShapeHandler from './cmd/MoveShapeHandler';\nimport ResizeShapeHandler from './cmd/ResizeShapeHandler';\nimport ReplaceShapeHandler from './cmd/ReplaceShapeHandler';\nimport ToggleShapeCollapseHandler from './cmd/ToggleShapeCollapseHandler';\nimport SpaceToolHandler from './cmd/SpaceToolHandler';\nimport CreateLabelHandler from './cmd/CreateLabelHandler';\nimport CreateConnectionHandler from './cmd/CreateConnectionHandler';\nimport DeleteConnectionHandler from './cmd/DeleteConnectionHandler';\nimport MoveConnectionHandler from './cmd/MoveConnectionHandler';\nimport LayoutConnectionHandler from './cmd/LayoutConnectionHandler';\nimport UpdateWaypointsHandler from './cmd/UpdateWaypointsHandler';\nimport ReconnectConnectionHandler from './cmd/ReconnectConnectionHandler';\nimport MoveElementsHandler from './cmd/MoveElementsHandler';\nimport DeleteElementsHandler from './cmd/DeleteElementsHandler';\nimport DistributeElementsHandler from './cmd/DistributeElementsHandler';\nimport AlignElementsHandler from './cmd/AlignElementsHandler';\nimport UpdateAttachmentHandler from './cmd/UpdateAttachmentHandler';\nimport PasteHandler from './cmd/PasteHandler';\n/**\n * The basic modeling entry point.\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n */\n\nexport default function Modeling(eventBus, elementFactory, commandStack) {\n  this._eventBus = eventBus;\n  this._elementFactory = elementFactory;\n  this._commandStack = commandStack;\n  var self = this;\n  eventBus.on('diagram.init', function () {\n    // register modeling handlers\n    self.registerHandlers(commandStack);\n  });\n}\nModeling.$inject = ['eventBus', 'elementFactory', 'commandStack'];\n\nModeling.prototype.getHandlers = function () {\n  return {\n    'shape.append': AppendShapeHandler,\n    'shape.create': CreateShapeHandler,\n    'shape.delete': DeleteShapeHandler,\n    'shape.move': MoveShapeHandler,\n    'shape.resize': ResizeShapeHandler,\n    'shape.replace': ReplaceShapeHandler,\n    'shape.toggleCollapse': ToggleShapeCollapseHandler,\n    'spaceTool': SpaceToolHandler,\n    'label.create': CreateLabelHandler,\n    'connection.create': CreateConnectionHandler,\n    'connection.delete': DeleteConnectionHandler,\n    'connection.move': MoveConnectionHandler,\n    'connection.layout': LayoutConnectionHandler,\n    'connection.updateWaypoints': UpdateWaypointsHandler,\n    'connection.reconnectStart': ReconnectConnectionHandler,\n    'connection.reconnectEnd': ReconnectConnectionHandler,\n    'elements.move': MoveElementsHandler,\n    'elements.delete': DeleteElementsHandler,\n    'elements.distribute': DistributeElementsHandler,\n    'elements.align': AlignElementsHandler,\n    'element.updateAttachment': UpdateAttachmentHandler,\n    'elements.paste': PasteHandler\n  };\n};\n/**\n * Register handlers with the command stack\n *\n * @param {CommandStack} commandStack\n */\n\n\nModeling.prototype.registerHandlers = function (commandStack) {\n  forEach(this.getHandlers(), function (handler, id) {\n    commandStack.registerHandler(id, handler);\n  });\n}; // modeling helpers //////////////////////\n\n\nModeling.prototype.moveShape = function (shape, delta, newParent, newParentIndex, hints) {\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = null;\n  }\n\n  var context = {\n    shape: shape,\n    delta: delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.move', context);\n};\n/**\n * Update the attachment of the given shape.\n *\n * @param {djs.mode.Base} shape\n * @param {djs.model.Base} [newHost]\n */\n\n\nModeling.prototype.updateAttachment = function (shape, newHost) {\n  var context = {\n    shape: shape,\n    newHost: newHost\n  };\n\n  this._commandStack.execute('element.updateAttachment', context);\n};\n/**\n * Move a number of shapes to a new target, either setting it as\n * the new parent or attaching it.\n *\n * @param {Array<djs.mode.Base>} shapes\n * @param {Point} delta\n * @param {djs.model.Base} [target]\n * @param {Object} [hints]\n * @param {Boolean} [hints.attach=false]\n */\n\n\nModeling.prototype.moveElements = function (shapes, delta, target, hints) {\n  hints = hints || {};\n  var attach = hints.attach;\n  var newParent = target,\n      newHost;\n\n  if (attach === true) {\n    newHost = target;\n    newParent = target.parent;\n  } else if (attach === false) {\n    newHost = null;\n  }\n\n  var context = {\n    shapes: shapes,\n    delta: delta,\n    newParent: newParent,\n    newHost: newHost,\n    hints: hints\n  };\n\n  this._commandStack.execute('elements.move', context);\n};\n\nModeling.prototype.moveConnection = function (connection, delta, newParent, newParentIndex, hints) {\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = undefined;\n  }\n\n  var context = {\n    connection: connection,\n    delta: delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.move', context);\n};\n\nModeling.prototype.layoutConnection = function (connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.layout', context);\n};\n/**\n * Create connection.\n *\n * @param {djs.model.Base} source\n * @param {djs.model.Base} target\n * @param {Number} [targetIndex]\n * @param {Object|djs.model.Connection} connection\n * @param {djs.model.Base} parent\n * @param {Object} hints\n *\n * @return {djs.model.Connection} the created connection.\n */\n\n\nModeling.prototype.createConnection = function (source, target, parentIndex, connection, parent, hints) {\n  if (typeof parentIndex === 'object') {\n    hints = parent;\n    parent = connection;\n    connection = parentIndex;\n    parentIndex = undefined;\n  }\n\n  connection = this._create('connection', connection);\n  var context = {\n    source: source,\n    target: target,\n    parent: parent,\n    parentIndex: parentIndex,\n    connection: connection,\n    hints: hints\n  };\n\n  this._commandStack.execute('connection.create', context);\n\n  return context.connection;\n};\n/**\n * Create a shape at the specified position.\n *\n * @param {djs.model.Shape|Object} shape\n * @param {Point} position\n * @param {djs.model.Shape|djs.model.Root} target\n * @param {Number} [parentIndex] position in parents children list\n * @param {Object} [hints]\n * @param {Boolean} [hints.attach] whether to attach to target or become a child\n *\n * @return {djs.model.Shape} the created shape\n */\n\n\nModeling.prototype.createShape = function (shape, position, target, parentIndex, hints) {\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n\n  hints = hints || {};\n  var attach = hints.attach,\n      parent,\n      host;\n  shape = this._create('shape', shape);\n\n  if (attach) {\n    parent = target.parent;\n    host = target;\n  } else {\n    parent = target;\n  }\n\n  var context = {\n    position: position,\n    shape: shape,\n    parent: parent,\n    parentIndex: parentIndex,\n    host: host,\n    hints: hints\n  };\n\n  this._commandStack.execute('shape.create', context);\n\n  return context.shape;\n};\n\nModeling.prototype.createLabel = function (labelTarget, position, label, parent) {\n  label = this._create('label', label);\n  var context = {\n    labelTarget: labelTarget,\n    position: position,\n    parent: parent || labelTarget.parent,\n    shape: label\n  };\n\n  this._commandStack.execute('label.create', context);\n\n  return context.shape;\n};\n/**\n * Append shape to given source, drawing a connection\n * between source and the newly created shape.\n *\n * @param {djs.model.Shape} source\n * @param {djs.model.Shape|Object} shape\n * @param {Point} position\n * @param {djs.model.Shape} target\n * @param {Object} [hints]\n * @param {Boolean} [hints.attach]\n * @param {djs.model.Connection|Object} [hints.connection]\n * @param {djs.model.Base} [hints.connectionParent]\n *\n * @return {djs.model.Shape} the newly created shape\n */\n\n\nModeling.prototype.appendShape = function (source, shape, position, target, hints) {\n  hints = hints || {};\n  shape = this._create('shape', shape);\n  var context = {\n    source: source,\n    position: position,\n    target: target,\n    shape: shape,\n    connection: hints.connection,\n    connectionParent: hints.connectionParent,\n    attach: hints.attach\n  };\n\n  this._commandStack.execute('shape.append', context);\n\n  return context.shape;\n};\n\nModeling.prototype.removeElements = function (elements) {\n  var context = {\n    elements: elements\n  };\n\n  this._commandStack.execute('elements.delete', context);\n};\n\nModeling.prototype.distributeElements = function (groups, axis, dimension) {\n  var context = {\n    groups: groups,\n    axis: axis,\n    dimension: dimension\n  };\n\n  this._commandStack.execute('elements.distribute', context);\n};\n\nModeling.prototype.removeShape = function (shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.delete', context);\n};\n\nModeling.prototype.removeConnection = function (connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.delete', context);\n};\n\nModeling.prototype.replaceShape = function (oldShape, newShape, hints) {\n  var context = {\n    oldShape: oldShape,\n    newData: newShape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.replace', context);\n\n  return context.newShape;\n};\n\nModeling.prototype.pasteElements = function (tree, topParent, position) {\n  var context = {\n    tree: tree,\n    topParent: topParent,\n    position: position\n  };\n\n  this._commandStack.execute('elements.paste', context);\n};\n\nModeling.prototype.alignElements = function (elements, alignment) {\n  var context = {\n    elements: elements,\n    alignment: alignment\n  };\n\n  this._commandStack.execute('elements.align', context);\n};\n\nModeling.prototype.resizeShape = function (shape, newBounds, minBounds) {\n  var context = {\n    shape: shape,\n    newBounds: newBounds,\n    minBounds: minBounds\n  };\n\n  this._commandStack.execute('shape.resize', context);\n};\n\nModeling.prototype.createSpace = function (movingShapes, resizingShapes, delta, direction) {\n  var context = {\n    movingShapes: movingShapes,\n    resizingShapes: resizingShapes,\n    delta: delta,\n    direction: direction\n  };\n\n  this._commandStack.execute('spaceTool', context);\n};\n\nModeling.prototype.updateWaypoints = function (connection, newWaypoints, hints) {\n  var context = {\n    connection: connection,\n    newWaypoints: newWaypoints,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.updateWaypoints', context);\n};\n\nModeling.prototype.reconnectStart = function (connection, newSource, dockingOrPoints) {\n  var context = {\n    connection: connection,\n    newSource: newSource,\n    dockingOrPoints: dockingOrPoints\n  };\n\n  this._commandStack.execute('connection.reconnectStart', context);\n};\n\nModeling.prototype.reconnectEnd = function (connection, newTarget, dockingOrPoints) {\n  var context = {\n    connection: connection,\n    newTarget: newTarget,\n    dockingOrPoints: dockingOrPoints\n  };\n\n  this._commandStack.execute('connection.reconnectEnd', context);\n};\n\nModeling.prototype.connect = function (source, target, attrs, hints) {\n  return this.createConnection(source, target, attrs || {}, source.parent, hints);\n};\n\nModeling.prototype._create = function (type, attrs) {\n  if (attrs instanceof Base) {\n    return attrs;\n  } else {\n    return this._elementFactory.create(type, attrs);\n  }\n};\n\nModeling.prototype.toggleCollapse = function (shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.toggleCollapse', context);\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/modeling/Modeling.js"],"names":["forEach","Base","AppendShapeHandler","CreateShapeHandler","DeleteShapeHandler","MoveShapeHandler","ResizeShapeHandler","ReplaceShapeHandler","ToggleShapeCollapseHandler","SpaceToolHandler","CreateLabelHandler","CreateConnectionHandler","DeleteConnectionHandler","MoveConnectionHandler","LayoutConnectionHandler","UpdateWaypointsHandler","ReconnectConnectionHandler","MoveElementsHandler","DeleteElementsHandler","DistributeElementsHandler","AlignElementsHandler","UpdateAttachmentHandler","PasteHandler","Modeling","eventBus","elementFactory","commandStack","_eventBus","_elementFactory","_commandStack","self","on","registerHandlers","$inject","prototype","getHandlers","handler","id","registerHandler","moveShape","shape","delta","newParent","newParentIndex","hints","context","execute","updateAttachment","newHost","moveElements","shapes","target","attach","parent","moveConnection","connection","undefined","layoutConnection","createConnection","source","parentIndex","_create","createShape","position","host","createLabel","labelTarget","label","appendShape","connectionParent","removeElements","elements","distributeElements","groups","axis","dimension","removeShape","removeConnection","replaceShape","oldShape","newShape","newData","pasteElements","tree","topParent","alignElements","alignment","resizeShape","newBounds","minBounds","createSpace","movingShapes","resizingShapes","direction","updateWaypoints","newWaypoints","reconnectStart","newSource","dockingOrPoints","reconnectEnd","newTarget","connect","attrs","type","create","toggleCollapse"],"mappings":"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","sourcesContent":["import { forEach } from 'min-dash';\n\nimport {\n  Base\n} from '../../model';\n\nimport AppendShapeHandler from './cmd/AppendShapeHandler';\nimport CreateShapeHandler from './cmd/CreateShapeHandler';\nimport DeleteShapeHandler from './cmd/DeleteShapeHandler';\nimport MoveShapeHandler from './cmd/MoveShapeHandler';\nimport ResizeShapeHandler from './cmd/ResizeShapeHandler';\nimport ReplaceShapeHandler from './cmd/ReplaceShapeHandler';\nimport ToggleShapeCollapseHandler from './cmd/ToggleShapeCollapseHandler';\nimport SpaceToolHandler from './cmd/SpaceToolHandler';\nimport CreateLabelHandler from './cmd/CreateLabelHandler';\nimport CreateConnectionHandler from './cmd/CreateConnectionHandler';\nimport DeleteConnectionHandler from './cmd/DeleteConnectionHandler';\nimport MoveConnectionHandler from './cmd/MoveConnectionHandler';\nimport LayoutConnectionHandler from './cmd/LayoutConnectionHandler';\nimport UpdateWaypointsHandler from './cmd/UpdateWaypointsHandler';\nimport ReconnectConnectionHandler from './cmd/ReconnectConnectionHandler';\nimport MoveElementsHandler from './cmd/MoveElementsHandler';\nimport DeleteElementsHandler from './cmd/DeleteElementsHandler';\nimport DistributeElementsHandler from './cmd/DistributeElementsHandler';\nimport AlignElementsHandler from './cmd/AlignElementsHandler';\nimport UpdateAttachmentHandler from './cmd/UpdateAttachmentHandler';\nimport PasteHandler from './cmd/PasteHandler';\n\n\n/**\n * The basic modeling entry point.\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n */\nexport default function Modeling(eventBus, elementFactory, commandStack) {\n  this._eventBus = eventBus;\n  this._elementFactory = elementFactory;\n  this._commandStack = commandStack;\n\n  var self = this;\n\n  eventBus.on('diagram.init', function() {\n    // register modeling handlers\n    self.registerHandlers(commandStack);\n  });\n}\n\nModeling.$inject = [ 'eventBus', 'elementFactory', 'commandStack' ];\n\n\nModeling.prototype.getHandlers = function() {\n  return {\n    'shape.append': AppendShapeHandler,\n    'shape.create': CreateShapeHandler,\n    'shape.delete': DeleteShapeHandler,\n    'shape.move': MoveShapeHandler,\n    'shape.resize': ResizeShapeHandler,\n    'shape.replace': ReplaceShapeHandler,\n    'shape.toggleCollapse': ToggleShapeCollapseHandler,\n\n    'spaceTool': SpaceToolHandler,\n\n    'label.create': CreateLabelHandler,\n\n    'connection.create': CreateConnectionHandler,\n    'connection.delete': DeleteConnectionHandler,\n    'connection.move': MoveConnectionHandler,\n    'connection.layout': LayoutConnectionHandler,\n\n    'connection.updateWaypoints': UpdateWaypointsHandler,\n\n    'connection.reconnectStart': ReconnectConnectionHandler,\n    'connection.reconnectEnd': ReconnectConnectionHandler,\n\n    'elements.move': MoveElementsHandler,\n    'elements.delete': DeleteElementsHandler,\n\n    'elements.distribute': DistributeElementsHandler,\n    'elements.align': AlignElementsHandler,\n\n    'element.updateAttachment': UpdateAttachmentHandler,\n\n    'elements.paste': PasteHandler\n  };\n};\n\n/**\n * Register handlers with the command stack\n *\n * @param {CommandStack} commandStack\n */\nModeling.prototype.registerHandlers = function(commandStack) {\n  forEach(this.getHandlers(), function(handler, id) {\n    commandStack.registerHandler(id, handler);\n  });\n};\n\n\n// modeling helpers //////////////////////\n\nModeling.prototype.moveShape = function(shape, delta, newParent, newParentIndex, hints) {\n\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = null;\n  }\n\n  var context = {\n    shape: shape,\n    delta:  delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.move', context);\n};\n\n\n/**\n * Update the attachment of the given shape.\n *\n * @param {djs.mode.Base} shape\n * @param {djs.model.Base} [newHost]\n */\nModeling.prototype.updateAttachment = function(shape, newHost) {\n  var context = {\n    shape: shape,\n    newHost: newHost\n  };\n\n  this._commandStack.execute('element.updateAttachment', context);\n};\n\n\n/**\n * Move a number of shapes to a new target, either setting it as\n * the new parent or attaching it.\n *\n * @param {Array<djs.mode.Base>} shapes\n * @param {Point} delta\n * @param {djs.model.Base} [target]\n * @param {Object} [hints]\n * @param {Boolean} [hints.attach=false]\n */\nModeling.prototype.moveElements = function(shapes, delta, target, hints) {\n\n  hints = hints || {};\n\n  var attach = hints.attach;\n\n  var newParent = target,\n      newHost;\n\n  if (attach === true) {\n    newHost = target;\n    newParent = target.parent;\n  } else\n\n  if (attach === false) {\n    newHost = null;\n  }\n\n  var context = {\n    shapes: shapes,\n    delta: delta,\n    newParent: newParent,\n    newHost: newHost,\n    hints: hints\n  };\n\n  this._commandStack.execute('elements.move', context);\n};\n\n\nModeling.prototype.moveConnection = function(connection, delta, newParent, newParentIndex, hints) {\n\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = undefined;\n  }\n\n  var context = {\n    connection: connection,\n    delta: delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.move', context);\n};\n\n\nModeling.prototype.layoutConnection = function(connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.layout', context);\n};\n\n\n/**\n * Create connection.\n *\n * @param {djs.model.Base} source\n * @param {djs.model.Base} target\n * @param {Number} [targetIndex]\n * @param {Object|djs.model.Connection} connection\n * @param {djs.model.Base} parent\n * @param {Object} hints\n *\n * @return {djs.model.Connection} the created connection.\n */\nModeling.prototype.createConnection = function(source, target, parentIndex, connection, parent, hints) {\n\n  if (typeof parentIndex === 'object') {\n    hints = parent;\n    parent = connection;\n    connection = parentIndex;\n    parentIndex = undefined;\n  }\n\n  connection = this._create('connection', connection);\n\n  var context = {\n    source: source,\n    target: target,\n    parent: parent,\n    parentIndex: parentIndex,\n    connection: connection,\n    hints: hints\n  };\n\n  this._commandStack.execute('connection.create', context);\n\n  return context.connection;\n};\n\n\n/**\n * Create a shape at the specified position.\n *\n * @param {djs.model.Shape|Object} shape\n * @param {Point} position\n * @param {djs.model.Shape|djs.model.Root} target\n * @param {Number} [parentIndex] position in parents children list\n * @param {Object} [hints]\n * @param {Boolean} [hints.attach] whether to attach to target or become a child\n *\n * @return {djs.model.Shape} the created shape\n */\nModeling.prototype.createShape = function(shape, position, target, parentIndex, hints) {\n\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n\n  hints = hints || {};\n\n  var attach = hints.attach,\n      parent,\n      host;\n\n  shape = this._create('shape', shape);\n\n  if (attach) {\n    parent = target.parent;\n    host = target;\n  } else {\n    parent = target;\n  }\n\n  var context = {\n    position: position,\n    shape: shape,\n    parent: parent,\n    parentIndex: parentIndex,\n    host: host,\n    hints: hints\n  };\n\n  this._commandStack.execute('shape.create', context);\n\n  return context.shape;\n};\n\n\nModeling.prototype.createLabel = function(labelTarget, position, label, parent) {\n\n  label = this._create('label', label);\n\n  var context = {\n    labelTarget: labelTarget,\n    position: position,\n    parent: parent || labelTarget.parent,\n    shape: label\n  };\n\n  this._commandStack.execute('label.create', context);\n\n  return context.shape;\n};\n\n\n/**\n * Append shape to given source, drawing a connection\n * between source and the newly created shape.\n *\n * @param {djs.model.Shape} source\n * @param {djs.model.Shape|Object} shape\n * @param {Point} position\n * @param {djs.model.Shape} target\n * @param {Object} [hints]\n * @param {Boolean} [hints.attach]\n * @param {djs.model.Connection|Object} [hints.connection]\n * @param {djs.model.Base} [hints.connectionParent]\n *\n * @return {djs.model.Shape} the newly created shape\n */\nModeling.prototype.appendShape = function(source, shape, position, target, hints) {\n\n  hints = hints || {};\n\n  shape = this._create('shape', shape);\n\n  var context = {\n    source: source,\n    position: position,\n    target: target,\n    shape: shape,\n    connection: hints.connection,\n    connectionParent: hints.connectionParent,\n    attach: hints.attach\n  };\n\n  this._commandStack.execute('shape.append', context);\n\n  return context.shape;\n};\n\n\nModeling.prototype.removeElements = function(elements) {\n  var context = {\n    elements: elements\n  };\n\n  this._commandStack.execute('elements.delete', context);\n};\n\n\nModeling.prototype.distributeElements = function(groups, axis, dimension) {\n  var context = {\n    groups: groups,\n    axis: axis,\n    dimension: dimension\n  };\n\n  this._commandStack.execute('elements.distribute', context);\n};\n\n\nModeling.prototype.removeShape = function(shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.delete', context);\n};\n\n\nModeling.prototype.removeConnection = function(connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.delete', context);\n};\n\nModeling.prototype.replaceShape = function(oldShape, newShape, hints) {\n  var context = {\n    oldShape: oldShape,\n    newData: newShape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.replace', context);\n\n  return context.newShape;\n};\n\nModeling.prototype.pasteElements = function(tree, topParent, position) {\n  var context = {\n    tree: tree,\n    topParent: topParent,\n    position: position\n  };\n\n  this._commandStack.execute('elements.paste', context);\n};\n\nModeling.prototype.alignElements = function(elements, alignment) {\n  var context = {\n    elements: elements,\n    alignment: alignment\n  };\n\n  this._commandStack.execute('elements.align', context);\n};\n\nModeling.prototype.resizeShape = function(shape, newBounds, minBounds) {\n  var context = {\n    shape: shape,\n    newBounds: newBounds,\n    minBounds: minBounds\n  };\n\n  this._commandStack.execute('shape.resize', context);\n};\n\nModeling.prototype.createSpace = function(movingShapes, resizingShapes, delta, direction) {\n  var context = {\n    movingShapes: movingShapes,\n    resizingShapes: resizingShapes,\n    delta: delta,\n    direction: direction\n  };\n\n  this._commandStack.execute('spaceTool', context);\n};\n\nModeling.prototype.updateWaypoints = function(connection, newWaypoints, hints) {\n  var context = {\n    connection: connection,\n    newWaypoints: newWaypoints,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.updateWaypoints', context);\n};\n\nModeling.prototype.reconnectStart = function(connection, newSource, dockingOrPoints) {\n  var context = {\n    connection: connection,\n    newSource: newSource,\n    dockingOrPoints: dockingOrPoints\n  };\n\n  this._commandStack.execute('connection.reconnectStart', context);\n};\n\nModeling.prototype.reconnectEnd = function(connection, newTarget, dockingOrPoints) {\n  var context = {\n    connection: connection,\n    newTarget: newTarget,\n    dockingOrPoints: dockingOrPoints\n  };\n\n  this._commandStack.execute('connection.reconnectEnd', context);\n};\n\nModeling.prototype.connect = function(source, target, attrs, hints) {\n  return this.createConnection(source, target, attrs || {}, source.parent, hints);\n};\n\nModeling.prototype._create = function(type, attrs) {\n  if (attrs instanceof Base) {\n    return attrs;\n  } else {\n    return this._elementFactory.create(type, attrs);\n  }\n};\n\nModeling.prototype.toggleCollapse = function(shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.toggleCollapse', context);\n};\n"]},"metadata":{},"sourceType":"module"}