{"ast":null,"code":"import { forEach, find, matchPattern } from 'min-dash';\nimport inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nexport default function ReplaceConnectionBehavior(eventBus, modeling, bpmnRules) {\n  CommandInterceptor.call(this, eventBus);\n\n  function fixConnection(connection) {\n    var source = connection.source,\n        target = connection.target,\n        parent = connection.parent; // do not do anything if connection\n    // is already deleted (may happen due to other\n    // behaviors plugged-in before)\n\n    if (!parent) {\n      return;\n    }\n\n    var replacementType, remove;\n    /**\n     * Check if incoming or outgoing connections\n     * can stay or could be substituted with an\n     * appropriate replacement.\n     *\n     * This holds true for SequenceFlow <> MessageFlow.\n     */\n\n    if (is(connection, 'bpmn:SequenceFlow')) {\n      if (!bpmnRules.canConnectSequenceFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectMessageFlow(source, target)) {\n        replacementType = 'bpmn:MessageFlow';\n      }\n    } // transform message flows into sequence flows, if possible\n\n\n    if (is(connection, 'bpmn:MessageFlow')) {\n      if (!bpmnRules.canConnectMessageFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectSequenceFlow(source, target)) {\n        replacementType = 'bpmn:SequenceFlow';\n      }\n    }\n\n    if (is(connection, 'bpmn:Association') && !bpmnRules.canConnectAssociation(source, target)) {\n      remove = true;\n    } // remove invalid connection,\n    // unless it has been removed already\n\n\n    if (remove) {\n      modeling.removeConnection(connection);\n    } // replace SequenceFlow <> MessageFlow\n\n\n    if (replacementType) {\n      modeling.connect(source, target, {\n        type: replacementType,\n        waypoints: connection.waypoints.slice()\n      });\n    }\n  }\n\n  this.postExecuted('elements.move', function (context) {\n    var closure = context.closure,\n        allConnections = closure.allConnections;\n    forEach(allConnections, fixConnection);\n  }, true);\n  this.postExecuted(['connection.reconnectStart', 'connection.reconnectEnd'], function (event) {\n    var connection = event.context.connection;\n    fixConnection(connection);\n  });\n  this.postExecuted('element.updateProperties', function (event) {\n    var context = event.context,\n        properties = context.properties,\n        element = context.element,\n        businessObject = element.businessObject,\n        connection; // remove condition expression when morphing to default flow\n\n    if (properties.default) {\n      connection = find(element.outgoing, matchPattern({\n        id: element.businessObject.default.id\n      }));\n\n      if (connection) {\n        modeling.updateProperties(connection, {\n          conditionExpression: undefined\n        });\n      }\n    } // remove default property from source when morphing to conditional flow\n\n\n    if (properties.conditionExpression && businessObject.sourceRef.default === businessObject) {\n      modeling.updateProperties(element.source, {\n        default: undefined\n      });\n    }\n  });\n}\ninherits(ReplaceConnectionBehavior, CommandInterceptor);\nReplaceConnectionBehavior.$inject = ['eventBus', 'modeling', 'bpmnRules'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/modeling/behavior/ReplaceConnectionBehavior.js"],"names":["forEach","find","matchPattern","inherits","CommandInterceptor","is","ReplaceConnectionBehavior","eventBus","modeling","bpmnRules","call","fixConnection","connection","source","target","parent","replacementType","remove","canConnectSequenceFlow","canConnectMessageFlow","canConnectAssociation","removeConnection","connect","type","waypoints","slice","postExecuted","context","closure","allConnections","event","properties","element","businessObject","default","outgoing","id","updateProperties","conditionExpression","undefined","sourceRef","$inject"],"mappings":"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","sourcesContent":["import {\n  forEach,\n  find,\n  matchPattern\n} from 'min-dash';\n\nimport inherits from 'inherits';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { is } from '../../../util/ModelUtil';\n\n\nexport default function ReplaceConnectionBehavior(eventBus, modeling, bpmnRules) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  function fixConnection(connection) {\n\n    var source = connection.source,\n        target = connection.target,\n        parent = connection.parent;\n\n    // do not do anything if connection\n    // is already deleted (may happen due to other\n    // behaviors plugged-in before)\n    if (!parent) {\n      return;\n    }\n\n    var replacementType,\n        remove;\n\n    /**\n     * Check if incoming or outgoing connections\n     * can stay or could be substituted with an\n     * appropriate replacement.\n     *\n     * This holds true for SequenceFlow <> MessageFlow.\n     */\n\n    if (is(connection, 'bpmn:SequenceFlow')) {\n      if (!bpmnRules.canConnectSequenceFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectMessageFlow(source, target)) {\n        replacementType = 'bpmn:MessageFlow';\n      }\n    }\n\n    // transform message flows into sequence flows, if possible\n\n    if (is(connection, 'bpmn:MessageFlow')) {\n\n      if (!bpmnRules.canConnectMessageFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectSequenceFlow(source, target)) {\n        replacementType = 'bpmn:SequenceFlow';\n      }\n    }\n\n    if (is(connection, 'bpmn:Association') && !bpmnRules.canConnectAssociation(source, target)) {\n      remove = true;\n    }\n\n\n    // remove invalid connection,\n    // unless it has been removed already\n    if (remove) {\n      modeling.removeConnection(connection);\n    }\n\n    // replace SequenceFlow <> MessageFlow\n\n    if (replacementType) {\n      modeling.connect(source, target, {\n        type: replacementType,\n        waypoints: connection.waypoints.slice()\n      });\n    }\n  }\n\n  this.postExecuted('elements.move', function(context) {\n\n    var closure = context.closure,\n        allConnections = closure.allConnections;\n\n    forEach(allConnections, fixConnection);\n  }, true);\n\n  this.postExecuted([\n    'connection.reconnectStart',\n    'connection.reconnectEnd'\n  ], function(event) {\n\n    var connection = event.context.connection;\n\n    fixConnection(connection);\n  });\n\n  this.postExecuted('element.updateProperties', function(event) {\n    var context = event.context,\n        properties = context.properties,\n        element = context.element,\n        businessObject = element.businessObject,\n        connection;\n\n    // remove condition expression when morphing to default flow\n    if (properties.default) {\n      connection = find(\n        element.outgoing,\n        matchPattern({ id: element.businessObject.default.id })\n      );\n\n      if (connection) {\n        modeling.updateProperties(connection, { conditionExpression: undefined });\n      }\n    }\n\n    // remove default property from source when morphing to conditional flow\n    if (properties.conditionExpression && businessObject.sourceRef.default === businessObject) {\n      modeling.updateProperties(element.source, { default: undefined });\n    }\n  });\n}\n\ninherits(ReplaceConnectionBehavior, CommandInterceptor);\n\nReplaceConnectionBehavior.$inject = [\n  'eventBus',\n  'modeling',\n  'bpmnRules'\n];\n"]},"metadata":{},"sourceType":"module"}