{"ast":null,"code":"import { forEach } from 'min-dash';\nexport default function DeleteElementsHandler(modeling, elementRegistry) {\n  this._modeling = modeling;\n  this._elementRegistry = elementRegistry;\n}\nDeleteElementsHandler.$inject = ['modeling', 'elementRegistry'];\n\nDeleteElementsHandler.prototype.postExecute = function (context) {\n  var modeling = this._modeling,\n      elementRegistry = this._elementRegistry,\n      elements = context.elements;\n  forEach(elements, function (element) {\n    // element may have been removed with previous\n    // remove operations already (e.g. in case of nesting)\n    if (!elementRegistry.get(element.id)) {\n      return;\n    }\n\n    if (element.waypoints) {\n      modeling.removeConnection(element);\n    } else {\n      modeling.removeShape(element);\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/modeling/cmd/DeleteElementsHandler.js"],"names":["forEach","DeleteElementsHandler","modeling","elementRegistry","_modeling","_elementRegistry","$inject","prototype","postExecute","context","elements","element","get","id","waypoints","removeConnection","removeShape"],"mappings":"AAAA,SAASA,OAAT,QAAwB,UAAxB;AAGA,eAAe,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,eAAzC,EAA0D;AACvE,OAAKC,SAAL,GAAiBF,QAAjB;AACA,OAAKG,gBAAL,GAAwBF,eAAxB;AACD;AAEDF,qBAAqB,CAACK,OAAtB,GAAgC,CAC9B,UAD8B,EAE9B,iBAF8B,CAAhC;;AAMAL,qBAAqB,CAACM,SAAtB,CAAgCC,WAAhC,GAA8C,UAASC,OAAT,EAAkB;AAE9D,MAAIP,QAAQ,GAAG,KAAKE,SAApB;AAAA,MACID,eAAe,GAAG,KAAKE,gBAD3B;AAAA,MAEIK,QAAQ,GAAGD,OAAO,CAACC,QAFvB;AAIAV,EAAAA,OAAO,CAACU,QAAD,EAAW,UAASC,OAAT,EAAkB;AAElC;AACA;AACA,QAAI,CAACR,eAAe,CAACS,GAAhB,CAAoBD,OAAO,CAACE,EAA5B,CAAL,EAAsC;AACpC;AACD;;AAED,QAAIF,OAAO,CAACG,SAAZ,EAAuB;AACrBZ,MAAAA,QAAQ,CAACa,gBAAT,CAA0BJ,OAA1B;AACD,KAFD,MAEO;AACLT,MAAAA,QAAQ,CAACc,WAAT,CAAqBL,OAArB;AACD;AACF,GAbM,CAAP;AAcD,CApBD","sourcesContent":["import { forEach } from 'min-dash';\n\n\nexport default function DeleteElementsHandler(modeling, elementRegistry) {\n  this._modeling = modeling;\n  this._elementRegistry = elementRegistry;\n}\n\nDeleteElementsHandler.$inject = [\n  'modeling',\n  'elementRegistry'\n];\n\n\nDeleteElementsHandler.prototype.postExecute = function(context) {\n\n  var modeling = this._modeling,\n      elementRegistry = this._elementRegistry,\n      elements = context.elements;\n\n  forEach(elements, function(element) {\n\n    // element may have been removed with previous\n    // remove operations already (e.g. in case of nesting)\n    if (!elementRegistry.get(element.id)) {\n      return;\n    }\n\n    if (element.waypoints) {\n      modeling.removeConnection(element);\n    } else {\n      modeling.removeShape(element);\n    }\n  });\n};"]},"metadata":{},"sourceType":"module"}