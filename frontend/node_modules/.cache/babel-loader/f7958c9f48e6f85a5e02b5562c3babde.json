{"ast":null,"code":"import { assign } from 'min-dash';\nvar DEFAULT_CONFIG = {\n  moveSpeed: 50,\n  moveSpeedAccelerated: 200\n};\n/**\n * A feature that allows users to move the canvas using the keyboard.\n *\n * @param {Object} config\n * @param {Number} [config.moveSpeed=50]\n * @param {Number} [config.moveSpeedAccelerated=200]\n * @param {Keyboard} keyboard\n * @param {Canvas} canvas\n */\n\nexport default function KeyboardMove(config, keyboard, canvas) {\n  var self = this;\n  this._config = assign({}, DEFAULT_CONFIG, config || {});\n  keyboard.addListener(arrowsListener);\n\n  function arrowsListener(context) {\n    var event = context.keyEvent,\n        config = self._config;\n\n    if (!keyboard.isCmd(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['ArrowLeft', 'Left', 'ArrowUp', 'Up', 'ArrowDown', 'Down', 'ArrowRight', 'Right'], event)) {\n      var speed = keyboard.isShift(event) ? config.moveSpeedAccelerated : config.moveSpeed;\n      var direction;\n\n      switch (event.key) {\n        case 'ArrowLeft':\n        case 'Left':\n          direction = 'left';\n          break;\n\n        case 'ArrowUp':\n        case 'Up':\n          direction = 'up';\n          break;\n\n        case 'ArrowRight':\n        case 'Right':\n          direction = 'right';\n          break;\n\n        case 'ArrowDown':\n        case 'Down':\n          direction = 'down';\n          break;\n      }\n\n      self.moveCanvas({\n        speed: speed,\n        direction: direction\n      });\n      return true;\n    }\n  }\n\n  this.moveCanvas = function (opts) {\n    var dx = 0,\n        dy = 0,\n        speed = opts.speed;\n    var actualSpeed = speed / Math.min(Math.sqrt(canvas.viewbox().scale), 1);\n\n    switch (opts.direction) {\n      case 'left':\n        // Left\n        dx = actualSpeed;\n        break;\n\n      case 'up':\n        // Up\n        dy = actualSpeed;\n        break;\n\n      case 'right':\n        // Right\n        dx = -actualSpeed;\n        break;\n\n      case 'down':\n        // Down\n        dy = -actualSpeed;\n        break;\n    }\n\n    canvas.scroll({\n      dx: dx,\n      dy: dy\n    });\n  };\n}\nKeyboardMove.$inject = ['config.keyboardMove', 'keyboard', 'canvas'];","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/navigation/keyboard-move/KeyboardMove.js"],"names":["assign","DEFAULT_CONFIG","moveSpeed","moveSpeedAccelerated","KeyboardMove","config","keyboard","canvas","self","_config","addListener","arrowsListener","context","event","keyEvent","isCmd","isKey","speed","isShift","direction","key","moveCanvas","opts","dx","dy","actualSpeed","Math","min","sqrt","viewbox","scale","scroll","$inject"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AAGA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,oBAAoB,EAAE;AAFH,CAArB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CACXC,MADW,EAEXC,QAFW,EAGXC,MAHW,EAIb;AAEA,MAAIC,IAAI,GAAG,IAAX;AAEA,OAAKC,OAAL,GAAeT,MAAM,CAAC,EAAD,EAAKC,cAAL,EAAqBI,MAAM,IAAI,EAA/B,CAArB;AAEAC,EAAAA,QAAQ,CAACI,WAAT,CAAqBC,cAArB;;AAGA,WAASA,cAAT,CAAwBC,OAAxB,EAAiC;AAE/B,QAAIC,KAAK,GAAGD,OAAO,CAACE,QAApB;AAAA,QACIT,MAAM,GAAGG,IAAI,CAACC,OADlB;;AAGA,QAAI,CAACH,QAAQ,CAACS,KAAT,CAAeF,KAAf,CAAL,EAA4B;AAC1B;AACD;;AAED,QAAIP,QAAQ,CAACU,KAAT,CAAe,CACjB,WADiB,EACJ,MADI,EAEjB,SAFiB,EAEN,IAFM,EAGjB,WAHiB,EAGJ,MAHI,EAIjB,YAJiB,EAIH,OAJG,CAAf,EAKDH,KALC,CAAJ,EAKW;AAET,UAAII,KAAK,GACPX,QAAQ,CAACY,OAAT,CAAiBL,KAAjB,IACER,MAAM,CAACF,oBADT,GAEEE,MAAM,CAACH,SAHX;AAMA,UAAIiB,SAAJ;;AAEA,cAAQN,KAAK,CAACO,GAAd;AACA,aAAK,WAAL;AACA,aAAK,MAAL;AACED,UAAAA,SAAS,GAAG,MAAZ;AACA;;AACF,aAAK,SAAL;AACA,aAAK,IAAL;AACEA,UAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,aAAK,YAAL;AACA,aAAK,OAAL;AACEA,UAAAA,SAAS,GAAG,OAAZ;AACA;;AACF,aAAK,WAAL;AACA,aAAK,MAAL;AACEA,UAAAA,SAAS,GAAG,MAAZ;AACA;AAhBF;;AAmBAX,MAAAA,IAAI,CAACa,UAAL,CAAgB;AACdJ,QAAAA,KAAK,EAAEA,KADO;AAEdE,QAAAA,SAAS,EAAEA;AAFG,OAAhB;AAKA,aAAO,IAAP;AACD;AACF;;AAED,OAAKE,UAAL,GAAkB,UAASC,IAAT,EAAe;AAE/B,QAAIC,EAAE,GAAG,CAAT;AAAA,QACIC,EAAE,GAAG,CADT;AAAA,QAEIP,KAAK,GAAGK,IAAI,CAACL,KAFjB;AAIA,QAAIQ,WAAW,GAAGR,KAAK,GAAGS,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,IAAL,CAAUrB,MAAM,CAACsB,OAAP,GAAiBC,KAA3B,CAAT,EAA4C,CAA5C,CAA1B;;AAEA,YAAQR,IAAI,CAACH,SAAb;AACA,WAAK,MAAL;AAAa;AACXI,QAAAA,EAAE,GAAGE,WAAL;AACA;;AACF,WAAK,IAAL;AAAW;AACTD,QAAAA,EAAE,GAAGC,WAAL;AACA;;AACF,WAAK,OAAL;AAAc;AACZF,QAAAA,EAAE,GAAG,CAACE,WAAN;AACA;;AACF,WAAK,MAAL;AAAa;AACXD,QAAAA,EAAE,GAAG,CAACC,WAAN;AACA;AAZF;;AAeAlB,IAAAA,MAAM,CAACwB,MAAP,CAAc;AACZR,MAAAA,EAAE,EAAEA,EADQ;AAEZC,MAAAA,EAAE,EAAEA;AAFQ,KAAd;AAID,GA3BD;AA6BD;AAGDpB,YAAY,CAAC4B,OAAb,GAAuB,CACrB,qBADqB,EAErB,UAFqB,EAGrB,QAHqB,CAAvB","sourcesContent":["import { assign } from 'min-dash';\n\n\nvar DEFAULT_CONFIG = {\n  moveSpeed: 50,\n  moveSpeedAccelerated: 200\n};\n\n\n/**\n * A feature that allows users to move the canvas using the keyboard.\n *\n * @param {Object} config\n * @param {Number} [config.moveSpeed=50]\n * @param {Number} [config.moveSpeedAccelerated=200]\n * @param {Keyboard} keyboard\n * @param {Canvas} canvas\n */\nexport default function KeyboardMove(\n    config,\n    keyboard,\n    canvas\n) {\n\n  var self = this;\n\n  this._config = assign({}, DEFAULT_CONFIG, config || {});\n\n  keyboard.addListener(arrowsListener);\n\n\n  function arrowsListener(context) {\n\n    var event = context.keyEvent,\n        config = self._config;\n\n    if (!keyboard.isCmd(event)) {\n      return;\n    }\n\n    if (keyboard.isKey([\n      'ArrowLeft', 'Left',\n      'ArrowUp', 'Up',\n      'ArrowDown', 'Down',\n      'ArrowRight', 'Right'\n    ], event)) {\n\n      var speed = (\n        keyboard.isShift(event) ?\n          config.moveSpeedAccelerated :\n          config.moveSpeed\n      );\n\n      var direction;\n\n      switch (event.key) {\n      case 'ArrowLeft':\n      case 'Left':\n        direction = 'left';\n        break;\n      case 'ArrowUp':\n      case 'Up':\n        direction = 'up';\n        break;\n      case 'ArrowRight':\n      case 'Right':\n        direction = 'right';\n        break;\n      case 'ArrowDown':\n      case 'Down':\n        direction = 'down';\n        break;\n      }\n\n      self.moveCanvas({\n        speed: speed,\n        direction: direction\n      });\n\n      return true;\n    }\n  }\n\n  this.moveCanvas = function(opts) {\n\n    var dx = 0,\n        dy = 0,\n        speed = opts.speed;\n\n    var actualSpeed = speed / Math.min(Math.sqrt(canvas.viewbox().scale), 1);\n\n    switch (opts.direction) {\n    case 'left': // Left\n      dx = actualSpeed;\n      break;\n    case 'up': // Up\n      dy = actualSpeed;\n      break;\n    case 'right': // Right\n      dx = -actualSpeed;\n      break;\n    case 'down': // Down\n      dy = -actualSpeed;\n      break;\n    }\n\n    canvas.scroll({\n      dx: dx,\n      dy: dy\n    });\n  };\n\n}\n\n\nKeyboardMove.$inject = [\n  'config.keyboardMove',\n  'keyboard',\n  'canvas'\n];\n"]},"metadata":{},"sourceType":"module"}