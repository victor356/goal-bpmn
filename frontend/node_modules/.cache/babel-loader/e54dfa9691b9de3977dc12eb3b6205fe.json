{"ast":null,"code":"'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    getExtensionElements = require('../../../helper/ExtensionElementsHelper').getExtensionElements,\n    removeEntry = require('../../../helper/ExtensionElementsHelper').removeEntry,\n    extensionElements = require('./implementation/ExtensionElements'),\n    properties = require('./implementation/Properties'),\n    entryFactory = require('../../../factory/EntryFactory'),\n    elementHelper = require('../../../helper/ElementHelper'),\n    cmdHelper = require('../../../helper/CmdHelper'),\n    formHelper = require('../../../helper/FormHelper'),\n    utils = require('../../../Utils'),\n    is = require('bpmn-js/lib/util/ModelUtil').is,\n    find = require('lodash/find'),\n    each = require('lodash/forEach');\n\nfunction generateValueId() {\n  return utils.nextId('Value_');\n}\n/**\n * Generate a form field specific textField using entryFactory.\n *\n * @param  {string} options.id\n * @param  {string} options.label\n * @param  {string} options.modelProperty\n * @param  {function} options.validate\n *\n * @return {Object} an entryFactory.textField object\n */\n\n\nfunction formFieldTextField(options, getSelectedFormField) {\n  var id = options.id,\n      label = options.label,\n      modelProperty = options.modelProperty,\n      validate = options.validate;\n  return entryFactory.textField({\n    id: id,\n    label: label,\n    modelProperty: modelProperty,\n    get: function (element, node) {\n      var selectedFormField = getSelectedFormField(element, node) || {},\n          values = {};\n      values[modelProperty] = selectedFormField[modelProperty];\n      return values;\n    },\n    set: function (element, values, node) {\n      var commands = [];\n\n      if (typeof options.set === 'function') {\n        var cmd = options.set(element, values, node);\n\n        if (cmd) {\n          commands.push(cmd);\n        }\n      }\n\n      var formField = getSelectedFormField(element, node),\n          properties = {};\n      properties[modelProperty] = values[modelProperty] || undefined;\n      commands.push(cmdHelper.updateBusinessObject(element, formField, properties));\n      return commands;\n    },\n    hidden: function (element, node) {\n      return !getSelectedFormField(element, node);\n    },\n    validate: validate\n  });\n}\n\nfunction ensureFormKeyAndDataSupported(element) {\n  return is(element, 'bpmn:StartEvent') && !is(element.parent, 'bpmn:SubProcess') || is(element, 'bpmn:UserTask');\n}\n\nmodule.exports = function (group, element, bpmnFactory, translate) {\n  if (!ensureFormKeyAndDataSupported(element)) {\n    return;\n  }\n  /**\n   * Return the currently selected form field querying the form field select box\n   * from the DOM.\n   *\n   * @param  {djs.model.Base} element\n   * @param  {DOMElement} node - DOM element of any form field text input\n   *\n   * @return {ModdleElement} the currently selected form field\n   */\n\n\n  function getSelectedFormField(element, node) {\n    var selected = formFieldsEntry.getSelected(element, node.parentNode);\n\n    if (selected.idx === -1) {\n      return;\n    }\n\n    return formHelper.getFormField(element, selected.idx);\n  } // [FormKey] form key text input field\n\n\n  group.entries.push(entryFactory.textField({\n    id: 'form-key',\n    label: translate('Form Key'),\n    modelProperty: 'formKey',\n    get: function (element, node) {\n      var bo = getBusinessObject(element);\n      return {\n        formKey: bo.get('camunda:formKey')\n      };\n    },\n    set: function (element, values, node) {\n      var bo = getBusinessObject(element),\n          formKey = values.formKey || undefined;\n      return cmdHelper.updateBusinessObject(element, bo, {\n        'camunda:formKey': formKey\n      });\n    }\n  })); // [FormData] form field select box\n\n  var formFieldsEntry = extensionElements(element, bpmnFactory, {\n    id: 'form-fields',\n    label: translate('Form Fields'),\n    modelProperty: 'id',\n    prefix: 'FormField',\n    createExtensionElement: function (element, extensionElements, value) {\n      var bo = getBusinessObject(element),\n          commands = [];\n\n      if (!extensionElements) {\n        extensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n          values: []\n        }, bo, bpmnFactory);\n        commands.push(cmdHelper.updateProperties(element, {\n          extensionElements: extensionElements\n        }));\n      }\n\n      var formData = formHelper.getFormData(element);\n\n      if (!formData) {\n        formData = elementHelper.createElement('camunda:FormData', {\n          fields: []\n        }, extensionElements, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(element, extensionElements, 'values', 'extensionElements', [formData], []));\n      }\n\n      var field = elementHelper.createElement('camunda:FormField', {\n        id: value\n      }, formData, bpmnFactory);\n\n      if (typeof formData.fields !== 'undefined') {\n        commands.push(cmdHelper.addElementsTolist(element, formData, 'fields', [field]));\n      } else {\n        commands.push(cmdHelper.updateBusinessObject(element, formData, {\n          fields: [field]\n        }));\n      }\n\n      return commands;\n    },\n    removeExtensionElement: function (element, extensionElements, value, idx) {\n      var formData = getExtensionElements(getBusinessObject(element), 'camunda:FormData')[0],\n          entry = formData.fields[idx],\n          commands = [];\n\n      if (formData.fields.length < 2) {\n        commands.push(removeEntry(getBusinessObject(element), element, formData));\n      } else {\n        commands.push(cmdHelper.removeElementsFromList(element, formData, 'fields', null, [entry]));\n\n        if (entry.id === formData.get('businessKey')) {\n          commands.push(cmdHelper.updateBusinessObject(element, formData, {\n            'businessKey': undefined\n          }));\n        }\n      }\n\n      return commands;\n    },\n    getExtensionElements: function (element) {\n      return formHelper.getFormFields(element);\n    },\n    hideExtensionElements: function (element, node) {\n      return false;\n    }\n  });\n  group.entries.push(formFieldsEntry); // [FormData] business key form field select box\n\n  var formBusinessKeyFormFieldEntry = entryFactory.selectBox({\n    id: 'form-business-key',\n    label: translate('Business Key'),\n    modelProperty: 'businessKey',\n    selectOptions: function (element, inputNode) {\n      var selectOptions = [{\n        name: '',\n        value: ''\n      }];\n      var formFields = formHelper.getFormFields(element);\n      each(formFields, function (field) {\n        if (field.type !== 'boolean') {\n          selectOptions.push({\n            name: field.id,\n            value: field.id\n          });\n        }\n      });\n      return selectOptions;\n    },\n    get: function (element, node) {\n      var result = {\n        businessKey: ''\n      };\n      var bo = getBusinessObject(element);\n      var formDataExtension = getExtensionElements(bo, 'camunda:FormData');\n\n      if (formDataExtension) {\n        var formData = formDataExtension[0];\n        var storedValue = formData.get('businessKey');\n        result = {\n          businessKey: storedValue\n        };\n      }\n\n      return result;\n    },\n    set: function (element, values, node) {\n      var formData = getExtensionElements(getBusinessObject(element), 'camunda:FormData')[0];\n      return cmdHelper.updateBusinessObject(element, formData, {\n        'businessKey': values.businessKey || undefined\n      });\n    },\n    hidden: function (element, node) {\n      var isStartEvent = is(element, 'bpmn:StartEvent');\n      return !(isStartEvent && formHelper.getFormFields(element).length > 0);\n    }\n  });\n  group.entries.push(formBusinessKeyFormFieldEntry); // [FormData] Form Field label\n\n  group.entries.push(entryFactory.label({\n    id: 'form-field-header',\n    labelText: translate('Form Field'),\n    showLabel: function (element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  })); // [FormData] form field id text input field\n\n  group.entries.push(entryFactory.validationAwareTextField({\n    id: 'form-field-id',\n    label: translate('ID'),\n    modelProperty: 'id',\n    getProperty: function (element, node) {\n      var selectedFormField = getSelectedFormField(element, node) || {};\n      return selectedFormField.id;\n    },\n    setProperty: function (element, properties, node) {\n      var formField = getSelectedFormField(element, node);\n      return cmdHelper.updateBusinessObject(element, formField, properties);\n    },\n    hidden: function (element, node) {\n      return !getSelectedFormField(element, node);\n    },\n    validate: function (element, values, node) {\n      var formField = getSelectedFormField(element, node);\n\n      if (formField) {\n        var idValue = values.id;\n\n        if (!idValue || idValue.trim() === '') {\n          return {\n            id: 'Form field id must not be empty'\n          };\n        }\n\n        var formFields = formHelper.getFormFields(element);\n        var existingFormField = find(formFields, function (f) {\n          return f !== formField && f.id === idValue;\n        });\n\n        if (existingFormField) {\n          return {\n            id: 'Form field id already used in form data.'\n          };\n        }\n      }\n    }\n  })); // [FormData] form field type combo box\n\n  group.entries.push(entryFactory.comboBox({\n    id: 'form-field-type',\n    label: translate('Type'),\n    selectOptions: [{\n      name: 'string',\n      value: 'string'\n    }, {\n      name: 'long',\n      value: 'long'\n    }, {\n      name: 'boolean',\n      value: 'boolean'\n    }, {\n      name: 'date',\n      value: 'date'\n    }, {\n      name: 'enum',\n      value: 'enum'\n    }],\n    modelProperty: 'type',\n    emptyParameter: true,\n    get: function (element, node) {\n      var selectedFormField = getSelectedFormField(element, node);\n\n      if (selectedFormField) {\n        return {\n          type: selectedFormField.type\n        };\n      } else {\n        return {};\n      }\n    },\n    set: function (element, values, node) {\n      var selectedFormField = getSelectedFormField(element, node),\n          formData = getExtensionElements(getBusinessObject(element), 'camunda:FormData')[0],\n          commands = [];\n\n      if (selectedFormField.type === 'enum' && values.type !== 'enum') {\n        // delete camunda:value objects from formField.values when switching from type enum\n        commands.push(cmdHelper.updateBusinessObject(element, selectedFormField, {\n          values: undefined\n        }));\n      }\n\n      if (values.type === 'boolean' && selectedFormField.get('id') === formData.get('businessKey')) {\n        commands.push(cmdHelper.updateBusinessObject(element, formData, {\n          'businessKey': undefined\n        }));\n      }\n\n      commands.push(cmdHelper.updateBusinessObject(element, selectedFormField, values));\n      return commands;\n    },\n    hidden: function (element, node) {\n      return !getSelectedFormField(element, node);\n    }\n  })); // [FormData] form field label text input field\n\n  group.entries.push(formFieldTextField({\n    id: 'form-field-label',\n    label: translate('Label'),\n    modelProperty: 'label'\n  }, getSelectedFormField)); // [FormData] form field defaultValue text input field\n\n  group.entries.push(formFieldTextField({\n    id: 'form-field-defaultValue',\n    label: translate('Default Value'),\n    modelProperty: 'defaultValue'\n  }, getSelectedFormField)); // [FormData] form field enum values label\n\n  group.entries.push(entryFactory.label({\n    id: 'form-field-enum-values-header',\n    labelText: translate('Values'),\n    divider: true,\n    showLabel: function (element, node) {\n      var selectedFormField = getSelectedFormField(element, node);\n      return selectedFormField && selectedFormField.type === 'enum';\n    }\n  })); // [FormData] form field enum values table\n\n  group.entries.push(entryFactory.table({\n    id: 'form-field-enum-values',\n    labels: [translate('Id'), translate('Name')],\n    modelProperties: ['id', 'name'],\n    show: function (element, node) {\n      var selectedFormField = getSelectedFormField(element, node);\n      return selectedFormField && selectedFormField.type === 'enum';\n    },\n    getElements: function (element, node) {\n      var selectedFormField = getSelectedFormField(element, node);\n      return formHelper.getEnumValues(selectedFormField);\n    },\n    addElement: function (element, node) {\n      var selectedFormField = getSelectedFormField(element, node),\n          id = generateValueId();\n      var enumValue = elementHelper.createElement('camunda:Value', {\n        id: id,\n        name: undefined\n      }, getBusinessObject(element), bpmnFactory);\n      return cmdHelper.addElementsTolist(element, selectedFormField, 'values', [enumValue]);\n    },\n    removeElement: function (element, node, idx) {\n      var selectedFormField = getSelectedFormField(element, node),\n          enumValue = selectedFormField.values[idx];\n      return cmdHelper.removeElementsFromList(element, selectedFormField, 'values', null, [enumValue]);\n    },\n    updateElement: function (element, value, node, idx) {\n      var selectedFormField = getSelectedFormField(element, node),\n          enumValue = selectedFormField.values[idx];\n      value.name = value.name || undefined;\n      return cmdHelper.updateBusinessObject(element, enumValue, value);\n    },\n    validate: function (element, value, node, idx) {\n      var selectedFormField = getSelectedFormField(element, node),\n          enumValue = selectedFormField.values[idx];\n\n      if (enumValue) {\n        // check if id is valid\n        var validationError = utils.isIdValid(enumValue, value.id);\n\n        if (validationError) {\n          return {\n            id: validationError\n          };\n        }\n      }\n    }\n  })); // [FormData] Validation label\n\n  group.entries.push(entryFactory.label({\n    id: 'form-field-validation-header',\n    labelText: translate('Validation'),\n    divider: true,\n    showLabel: function (element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  })); // [FormData] form field constraints table\n\n  group.entries.push(entryFactory.table({\n    id: 'constraints-list',\n    modelProperties: ['name', 'config'],\n    labels: [translate('Name'), translate('Config')],\n    addLabel: translate('Add Constraint'),\n    getElements: function (element, node) {\n      var formField = getSelectedFormField(element, node);\n      return formHelper.getConstraints(formField);\n    },\n    addElement: function (element, node) {\n      var commands = [],\n          formField = getSelectedFormField(element, node),\n          validation = formField.validation;\n\n      if (!validation) {\n        // create validation business object and add it to form data, if it doesn't exist\n        validation = elementHelper.createElement('camunda:Validation', {}, getBusinessObject(element), bpmnFactory);\n        commands.push(cmdHelper.updateBusinessObject(element, formField, {\n          'validation': validation\n        }));\n      }\n\n      var newConstraint = elementHelper.createElement('camunda:Constraint', {\n        name: undefined,\n        config: undefined\n      }, validation, bpmnFactory);\n      commands.push(cmdHelper.addElementsTolist(element, validation, 'constraints', [newConstraint]));\n      return commands;\n    },\n    updateElement: function (element, value, node, idx) {\n      var formField = getSelectedFormField(element, node),\n          constraint = formHelper.getConstraints(formField)[idx];\n      value.name = value.name || undefined;\n      value.config = value.config || undefined;\n      return cmdHelper.updateBusinessObject(element, constraint, value);\n    },\n    removeElement: function (element, node, idx) {\n      var commands = [],\n          formField = getSelectedFormField(element, node),\n          constraints = formHelper.getConstraints(formField),\n          currentConstraint = constraints[idx];\n      commands.push(cmdHelper.removeElementsFromList(element, formField.validation, 'constraints', null, [currentConstraint]));\n\n      if (constraints.length === 1) {\n        // remove camunda:validation if the last existing constraint has been removed\n        commands.push(cmdHelper.updateBusinessObject(element, formField, {\n          validation: undefined\n        }));\n      }\n\n      return commands;\n    },\n    show: function (element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  })); // [FormData] Properties label\n\n  group.entries.push(entryFactory.label({\n    id: 'form-field-properties-header',\n    labelText: translate('Properties'),\n    divider: true,\n    showLabel: function (element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  })); // [FormData] camunda:properties table\n\n  group.entries.push(properties(element, bpmnFactory, {\n    id: 'form-field-properties',\n    modelProperties: ['id', 'value'],\n    labels: [translate('Id'), translate('Value')],\n    getParent: function (element, node) {\n      return getSelectedFormField(element, node);\n    },\n    show: function (element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  }, translate));\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/FormProps.js"],"names":["getBusinessObject","require","getExtensionElements","removeEntry","extensionElements","properties","entryFactory","elementHelper","cmdHelper","formHelper","utils","is","find","each","generateValueId","nextId","formFieldTextField","options","getSelectedFormField","id","label","modelProperty","validate","textField","get","element","node","selectedFormField","values","set","commands","cmd","push","formField","undefined","updateBusinessObject","hidden","ensureFormKeyAndDataSupported","parent","module","exports","group","bpmnFactory","translate","selected","formFieldsEntry","getSelected","parentNode","idx","getFormField","entries","bo","formKey","prefix","createExtensionElement","value","createElement","updateProperties","formData","getFormData","fields","addAndRemoveElementsFromList","field","addElementsTolist","removeExtensionElement","entry","length","removeElementsFromList","getFormFields","hideExtensionElements","formBusinessKeyFormFieldEntry","selectBox","selectOptions","inputNode","name","formFields","type","result","businessKey","formDataExtension","storedValue","isStartEvent","labelText","showLabel","validationAwareTextField","getProperty","setProperty","idValue","trim","existingFormField","f","comboBox","emptyParameter","divider","table","labels","modelProperties","show","getElements","getEnumValues","addElement","enumValue","removeElement","updateElement","validationError","isIdValid","addLabel","getConstraints","validation","newConstraint","config","constraint","constraints","currentConstraint","getParent"],"mappings":"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","sourcesContent":["'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    getExtensionElements = require('../../../helper/ExtensionElementsHelper').getExtensionElements,\n    removeEntry = require('../../../helper/ExtensionElementsHelper').removeEntry,\n    extensionElements = require('./implementation/ExtensionElements'),\n    properties = require('./implementation/Properties'),\n    entryFactory = require('../../../factory/EntryFactory'),\n    elementHelper = require('../../../helper/ElementHelper'),\n    cmdHelper = require('../../../helper/CmdHelper'),\n    formHelper = require('../../../helper/FormHelper'),\n    utils = require('../../../Utils'),\n    is = require('bpmn-js/lib/util/ModelUtil').is,\n    find = require('lodash/find'),\n    each = require('lodash/forEach');\n\nfunction generateValueId() {\n  return utils.nextId('Value_');\n}\n\n/**\n * Generate a form field specific textField using entryFactory.\n *\n * @param  {string} options.id\n * @param  {string} options.label\n * @param  {string} options.modelProperty\n * @param  {function} options.validate\n *\n * @return {Object} an entryFactory.textField object\n */\nfunction formFieldTextField(options, getSelectedFormField) {\n\n  var id = options.id,\n      label = options.label,\n      modelProperty = options.modelProperty,\n      validate = options.validate;\n\n  return entryFactory.textField({\n    id: id,\n    label: label,\n    modelProperty: modelProperty,\n    get: function(element, node) {\n      var selectedFormField = getSelectedFormField(element, node) || {},\n          values = {};\n\n      values[modelProperty] = selectedFormField[modelProperty];\n\n      return values;\n    },\n\n    set: function(element, values, node) {\n      var commands = [];\n\n      if (typeof options.set === 'function') {\n        var cmd = options.set(element, values, node);\n\n        if (cmd) {\n          commands.push(cmd);\n        }\n      }\n\n      var formField = getSelectedFormField(element, node),\n          properties = {};\n\n      properties[modelProperty] = values[modelProperty] || undefined;\n\n      commands.push(cmdHelper.updateBusinessObject(element, formField, properties));\n\n      return commands;\n    },\n    hidden: function(element, node) {\n      return !getSelectedFormField(element, node);\n    },\n    validate: validate\n  });\n}\n\nfunction ensureFormKeyAndDataSupported(element) {\n  return (\n    is(element, 'bpmn:StartEvent') && !is(element.parent, 'bpmn:SubProcess')\n  ) || is(element, 'bpmn:UserTask');\n}\n\nmodule.exports = function(group, element, bpmnFactory, translate) {\n\n  if (!ensureFormKeyAndDataSupported(element)) {\n    return;\n  }\n\n\n  /**\n   * Return the currently selected form field querying the form field select box\n   * from the DOM.\n   *\n   * @param  {djs.model.Base} element\n   * @param  {DOMElement} node - DOM element of any form field text input\n   *\n   * @return {ModdleElement} the currently selected form field\n   */\n  function getSelectedFormField(element, node) {\n    var selected = formFieldsEntry.getSelected(element, node.parentNode);\n\n    if (selected.idx === -1) {\n      return;\n    }\n\n    return formHelper.getFormField(element, selected.idx);\n  }\n\n  // [FormKey] form key text input field\n  group.entries.push(entryFactory.textField({\n    id : 'form-key',\n    label : translate('Form Key'),\n    modelProperty: 'formKey',\n    get: function(element, node) {\n      var bo = getBusinessObject(element);\n\n      return {\n        formKey: bo.get('camunda:formKey')\n      };\n    },\n    set: function(element, values, node) {\n      var bo = getBusinessObject(element),\n          formKey = values.formKey || undefined;\n\n      return cmdHelper.updateBusinessObject(element, bo, { 'camunda:formKey': formKey });\n    }\n  }));\n\n  // [FormData] form field select box\n  var formFieldsEntry = extensionElements(element, bpmnFactory, {\n    id: 'form-fields',\n    label: translate('Form Fields'),\n    modelProperty: 'id',\n    prefix: 'FormField',\n    createExtensionElement: function(element, extensionElements, value) {\n      var bo = getBusinessObject(element), commands = [];\n\n      if (!extensionElements) {\n        extensionElements = elementHelper.createElement('bpmn:ExtensionElements', { values: [] }, bo, bpmnFactory);\n        commands.push(cmdHelper.updateProperties(element, { extensionElements: extensionElements }));\n      }\n\n      var formData = formHelper.getFormData(element);\n\n      if (!formData) {\n        formData = elementHelper.createElement('camunda:FormData', { fields: [] }, extensionElements, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(\n          element,\n          extensionElements,\n          'values',\n          'extensionElements',\n          [formData],\n          []\n        ));\n      }\n\n      var field = elementHelper.createElement('camunda:FormField', { id: value }, formData, bpmnFactory);\n      if (typeof formData.fields !== 'undefined') {\n        commands.push(cmdHelper.addElementsTolist(element, formData, 'fields', [ field ]));\n      } else {\n        commands.push(cmdHelper.updateBusinessObject(element, formData, {\n          fields: [ field ]\n        }));\n      }\n      return commands;\n    },\n    removeExtensionElement: function(element, extensionElements, value, idx) {\n      var formData = getExtensionElements(getBusinessObject(element), 'camunda:FormData')[0],\n          entry = formData.fields[idx],\n          commands = [];\n\n      if (formData.fields.length < 2) {\n        commands.push(removeEntry(getBusinessObject(element), element, formData));\n      } else {\n        commands.push(cmdHelper.removeElementsFromList(element, formData, 'fields', null, [entry]));\n\n        if (entry.id === formData.get('businessKey')) {\n          commands.push(cmdHelper.updateBusinessObject(element, formData, { 'businessKey': undefined }));\n        }\n      }\n\n      return commands;\n    },\n    getExtensionElements: function(element) {\n      return formHelper.getFormFields(element);\n    },\n    hideExtensionElements: function(element, node) {\n      return false;\n    }\n  });\n  group.entries.push(formFieldsEntry);\n\n  // [FormData] business key form field select box\n  var formBusinessKeyFormFieldEntry = entryFactory.selectBox({\n    id: 'form-business-key',\n    label: translate('Business Key'),\n    modelProperty: 'businessKey',\n    selectOptions: function(element, inputNode) {\n      var selectOptions = [{ name: '', value: '' }];\n      var formFields = formHelper.getFormFields(element);\n      each(formFields, function(field) {\n        if (field.type !== 'boolean') {\n          selectOptions.push({ name: field.id, value: field.id });\n        }\n      });\n      return selectOptions;\n    },\n    get: function(element, node) {\n      var result = { businessKey: '' };\n      var bo = getBusinessObject(element);\n      var formDataExtension = getExtensionElements(bo, 'camunda:FormData');\n      if (formDataExtension) {\n        var formData = formDataExtension[0];\n        var storedValue = formData.get('businessKey');\n        result = { businessKey: storedValue };\n      }\n      return result;\n    },\n    set: function(element, values, node) {\n      var formData = getExtensionElements(getBusinessObject(element), 'camunda:FormData')[0];\n      return cmdHelper.updateBusinessObject(element, formData, { 'businessKey': values.businessKey || undefined });\n    },\n    hidden: function(element, node) {\n      var isStartEvent = is(element,'bpmn:StartEvent');\n      return !(isStartEvent && formHelper.getFormFields(element).length > 0);\n    }\n  });\n  group.entries.push(formBusinessKeyFormFieldEntry);\n\n  // [FormData] Form Field label\n  group.entries.push(entryFactory.label({\n    id: 'form-field-header',\n    labelText: translate('Form Field'),\n    showLabel: function(element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  }));\n\n  // [FormData] form field id text input field\n  group.entries.push(entryFactory.validationAwareTextField({\n    id: 'form-field-id',\n    label: translate('ID'),\n    modelProperty: 'id',\n\n    getProperty: function(element, node) {\n      var selectedFormField = getSelectedFormField(element, node) || {};\n\n      return selectedFormField.id;\n    },\n\n    setProperty: function(element, properties, node) {\n      var formField = getSelectedFormField(element, node);\n\n      return cmdHelper.updateBusinessObject(element, formField, properties);\n    },\n\n    hidden: function(element, node) {\n      return !getSelectedFormField(element, node);\n    },\n\n    validate: function(element, values, node) {\n\n      var formField = getSelectedFormField(element, node);\n\n      if (formField) {\n\n        var idValue = values.id;\n\n        if (!idValue || idValue.trim() === '') {\n          return { id: 'Form field id must not be empty' };\n        }\n\n        var formFields = formHelper.getFormFields(element);\n\n        var existingFormField = find(formFields, function(f) {\n          return f !== formField && f.id === idValue;\n        });\n\n        if (existingFormField) {\n          return { id: 'Form field id already used in form data.' };\n        }\n      }\n    }\n  }));\n\n  // [FormData] form field type combo box\n  group.entries.push(entryFactory.comboBox({\n    id: 'form-field-type',\n    label: translate('Type'),\n    selectOptions: [\n      { name: 'string', value: 'string' },\n      { name: 'long', value: 'long' },\n      { name: 'boolean', value: 'boolean' },\n      { name: 'date', value: 'date' },\n      { name: 'enum', value: 'enum' }\n    ],\n    modelProperty: 'type',\n    emptyParameter: true,\n\n    get: function(element, node) {\n      var selectedFormField = getSelectedFormField(element, node);\n\n      if (selectedFormField) {\n        return { type: selectedFormField.type };\n      } else {\n        return {};\n      }\n    },\n    set: function(element, values, node) {\n      var selectedFormField = getSelectedFormField(element, node),\n          formData = getExtensionElements(getBusinessObject(element), 'camunda:FormData')[0],\n          commands = [];\n\n      if (selectedFormField.type === 'enum' && values.type !== 'enum') {\n        // delete camunda:value objects from formField.values when switching from type enum\n        commands.push(cmdHelper.updateBusinessObject(element, selectedFormField, { values: undefined }));\n      }\n      if (values.type === 'boolean' && selectedFormField.get('id') === formData.get('businessKey')) {\n        commands.push(cmdHelper.updateBusinessObject(element, formData, { 'businessKey': undefined }));\n      }\n      commands.push(cmdHelper.updateBusinessObject(element, selectedFormField, values));\n\n      return commands;\n    },\n    hidden: function(element, node) {\n      return !getSelectedFormField(element, node);\n    }\n  }));\n\n  // [FormData] form field label text input field\n  group.entries.push(formFieldTextField({\n    id: 'form-field-label',\n    label: translate('Label'),\n    modelProperty: 'label'\n  }, getSelectedFormField));\n\n  // [FormData] form field defaultValue text input field\n  group.entries.push(formFieldTextField({\n    id: 'form-field-defaultValue',\n    label: translate('Default Value'),\n    modelProperty: 'defaultValue'\n  }, getSelectedFormField));\n\n\n  // [FormData] form field enum values label\n  group.entries.push(entryFactory.label({\n    id: 'form-field-enum-values-header',\n    labelText: translate('Values'),\n    divider: true,\n    showLabel: function(element, node) {\n      var selectedFormField = getSelectedFormField(element, node);\n\n      return selectedFormField && selectedFormField.type === 'enum';\n    }\n  }));\n\n  // [FormData] form field enum values table\n  group.entries.push(entryFactory.table({\n    id: 'form-field-enum-values',\n    labels: [ translate('Id'), translate('Name') ],\n    modelProperties: [ 'id', 'name' ],\n    show: function(element, node) {\n      var selectedFormField = getSelectedFormField(element, node);\n\n      return selectedFormField && selectedFormField.type === 'enum';\n    },\n    getElements: function(element, node) {\n      var selectedFormField = getSelectedFormField(element, node);\n\n      return formHelper.getEnumValues(selectedFormField);\n    },\n    addElement: function(element, node) {\n      var selectedFormField = getSelectedFormField(element, node),\n          id = generateValueId();\n\n      var enumValue = elementHelper.createElement(\n        'camunda:Value',\n        { id: id, name: undefined },\n        getBusinessObject(element),\n        bpmnFactory\n      );\n\n      return cmdHelper.addElementsTolist(element, selectedFormField, 'values', [enumValue]);\n    },\n    removeElement: function(element, node, idx) {\n      var selectedFormField = getSelectedFormField(element, node),\n          enumValue = selectedFormField.values[idx];\n\n      return cmdHelper.removeElementsFromList(element, selectedFormField, 'values', null, [enumValue]);\n    },\n    updateElement: function(element, value, node, idx) {\n      var selectedFormField = getSelectedFormField(element, node),\n          enumValue = selectedFormField.values[idx];\n\n      value.name = value.name || undefined;\n      return cmdHelper.updateBusinessObject(element, enumValue, value);\n    },\n    validate: function(element, value, node, idx) {\n\n      var selectedFormField = getSelectedFormField(element, node),\n          enumValue = selectedFormField.values[idx];\n\n      if (enumValue) {\n        // check if id is valid\n        var validationError = utils.isIdValid(enumValue, value.id);\n\n        if (validationError) {\n          return { id: validationError };\n        }\n      }\n    }\n  }));\n\n  // [FormData] Validation label\n  group.entries.push(entryFactory.label({\n    id: 'form-field-validation-header',\n    labelText: translate('Validation'),\n    divider: true,\n    showLabel: function(element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  }));\n\n  // [FormData] form field constraints table\n  group.entries.push(entryFactory.table({\n    id: 'constraints-list',\n    modelProperties: [ 'name', 'config' ],\n    labels: [ translate('Name'), translate('Config') ],\n    addLabel: translate('Add Constraint'),\n    getElements: function(element, node) {\n      var formField = getSelectedFormField(element, node);\n\n      return formHelper.getConstraints(formField);\n    },\n    addElement: function(element, node) {\n\n      var commands = [],\n          formField = getSelectedFormField(element, node),\n          validation = formField.validation;\n\n      if (!validation) {\n        // create validation business object and add it to form data, if it doesn't exist\n        validation = elementHelper.createElement('camunda:Validation', {}, getBusinessObject(element), bpmnFactory);\n\n        commands.push(cmdHelper.updateBusinessObject(element, formField, { 'validation': validation }));\n      }\n\n      var newConstraint = elementHelper.createElement(\n        'camunda:Constraint',\n        { name: undefined, config: undefined },\n        validation,\n        bpmnFactory\n      );\n\n      commands.push(cmdHelper.addElementsTolist(element, validation, 'constraints', [ newConstraint ]));\n\n      return commands;\n    },\n    updateElement: function(element, value, node, idx) {\n      var formField = getSelectedFormField(element, node),\n          constraint = formHelper.getConstraints(formField)[idx];\n\n      value.name = value.name || undefined;\n      value.config = value.config || undefined;\n\n      return cmdHelper.updateBusinessObject(element, constraint, value);\n    },\n    removeElement: function(element, node, idx) {\n      var commands = [],\n          formField = getSelectedFormField(element, node),\n          constraints = formHelper.getConstraints(formField),\n          currentConstraint = constraints[idx];\n\n      commands.push(cmdHelper.removeElementsFromList(\n        element,\n        formField.validation,\n        'constraints',\n        null,\n        [ currentConstraint ]\n      ));\n\n      if (constraints.length === 1) {\n        // remove camunda:validation if the last existing constraint has been removed\n        commands.push(cmdHelper.updateBusinessObject(element, formField, { validation: undefined }));\n      }\n\n      return commands;\n    },\n    show: function(element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  }));\n\n  // [FormData] Properties label\n  group.entries.push(entryFactory.label({\n    id: 'form-field-properties-header',\n    labelText: translate('Properties'),\n    divider: true,\n    showLabel: function(element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  }));\n\n  // [FormData] camunda:properties table\n  group.entries.push(properties(element, bpmnFactory, {\n    id: 'form-field-properties',\n    modelProperties: [ 'id', 'value' ],\n    labels: [ translate('Id'), translate('Value') ],\n    getParent: function(element, node) {\n      return getSelectedFormField(element, node);\n    },\n    show: function(element, node) {\n      return !!getSelectedFormField(element, node);\n    }\n  }, translate));\n};\n"]},"metadata":{},"sourceType":"script"}