{"ast":null,"code":"import { isArray, isString, isObject, assign, forEach, find, filter, matchPattern, isDefined } from 'min-dash';\nimport { domify, classes as domClasses, attr as domAttr, remove as domRemove, clear as domClear } from 'min-dom';\nimport { getBBox } from '../../util/Elements';\nimport Ids from '../../util/IdGenerator'; // document wide unique overlay ids\n\nvar ids = new Ids('ov');\nvar LOW_PRIORITY = 500;\n/**\n * A service that allows users to attach overlays to diagram elements.\n *\n * The overlay service will take care of overlay positioning during updates.\n *\n * @example\n *\n * // add a pink badge on the top left of the shape\n * overlays.add(someShape, {\n *   position: {\n *     top: -5,\n *     left: -5\n *   },\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n * // or add via shape id\n *\n * overlays.add('some-element-id', {\n *   position: {\n *     top: -5,\n *     left: -5\n *   }\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n * // or add with optional type\n *\n * overlays.add(someShape, 'badge', {\n *   position: {\n *     top: -5,\n *     left: -5\n *   }\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n *\n * // remove an overlay\n *\n * var id = overlays.add(...);\n * overlays.remove(id);\n *\n *\n * You may configure overlay defaults during tool by providing a `config` module\n * with `overlays.defaults` as an entry:\n *\n * {\n *   overlays: {\n *     defaults: {\n *       show: {\n *         minZoom: 0.7,\n *         maxZoom: 5.0\n *       },\n *       scale: {\n *         min: 1\n *       }\n *     }\n * }\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementRegistry} elementRegistry\n */\n\nexport default function Overlays(config, eventBus, canvas, elementRegistry) {\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementRegistry = elementRegistry;\n  this._ids = ids;\n  this._overlayDefaults = assign({\n    // no show constraints\n    show: null,\n    // always scale\n    scale: true\n  }, config && config.defaults);\n  /**\n   * Mapping overlayId -> overlay\n   */\n\n  this._overlays = {};\n  /**\n   * Mapping elementId -> overlay container\n   */\n\n  this._overlayContainers = []; // root html element for all overlays\n\n  this._overlayRoot = createRoot(canvas.getContainer());\n\n  this._init();\n}\nOverlays.$inject = ['config.overlays', 'eventBus', 'canvas', 'elementRegistry'];\n/**\n * Returns the overlay with the specified id or a list of overlays\n * for an element with a given type.\n *\n * @example\n *\n * // return the single overlay with the given id\n * overlays.get('some-id');\n *\n * // return all overlays for the shape\n * overlays.get({ element: someShape });\n *\n * // return all overlays on shape with type 'badge'\n * overlays.get({ element: someShape, type: 'badge' });\n *\n * // shape can also be specified as id\n * overlays.get({ element: 'element-id', type: 'badge' });\n *\n *\n * @param {Object} search\n * @param {String} [search.id]\n * @param {String|djs.model.Base} [search.element]\n * @param {String} [search.type]\n *\n * @return {Object|Array<Object>} the overlay(s)\n */\n\nOverlays.prototype.get = function (search) {\n  if (isString(search)) {\n    search = {\n      id: search\n    };\n  }\n\n  if (isString(search.element)) {\n    search.element = this._elementRegistry.get(search.element);\n  }\n\n  if (search.element) {\n    var container = this._getOverlayContainer(search.element, true); // return a list of overlays when searching by element (+type)\n\n\n    if (container) {\n      return search.type ? filter(container.overlays, matchPattern({\n        type: search.type\n      })) : container.overlays.slice();\n    } else {\n      return [];\n    }\n  } else if (search.type) {\n    return filter(this._overlays, matchPattern({\n      type: search.type\n    }));\n  } else {\n    // return single element when searching by id\n    return search.id ? this._overlays[search.id] : null;\n  }\n};\n/**\n * Adds a HTML overlay to an element.\n *\n * @param {String|djs.model.Base}   element   attach overlay to this shape\n * @param {String}                  [type]    optional type to assign to the overlay\n * @param {Object}                  overlay   the overlay configuration\n *\n * @param {String|DOMElement}       overlay.html                 html element to use as an overlay\n * @param {Object}                  [overlay.show]               show configuration\n * @param {Number}                  [overlay.show.minZoom]       minimal zoom level to show the overlay\n * @param {Number}                  [overlay.show.maxZoom]       maximum zoom level to show the overlay\n * @param {Object}                  overlay.position             where to attach the overlay\n * @param {Number}                  [overlay.position.left]      relative to element bbox left attachment\n * @param {Number}                  [overlay.position.top]       relative to element bbox top attachment\n * @param {Number}                  [overlay.position.bottom]    relative to element bbox bottom attachment\n * @param {Number}                  [overlay.position.right]     relative to element bbox right attachment\n * @param {Boolean|Object}          [overlay.scale=true]         false to preserve the same size regardless of\n *                                                               diagram zoom\n * @param {Number}                  [overlay.scale.min]\n * @param {Number}                  [overlay.scale.max]\n *\n * @return {String}                 id that may be used to reference the overlay for update or removal\n */\n\n\nOverlays.prototype.add = function (element, type, overlay) {\n  if (isObject(type)) {\n    overlay = type;\n    type = null;\n  }\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  if (!overlay.position) {\n    throw new Error('must specifiy overlay position');\n  }\n\n  if (!overlay.html) {\n    throw new Error('must specifiy overlay html');\n  }\n\n  if (!element) {\n    throw new Error('invalid element specified');\n  }\n\n  var id = this._ids.next();\n\n  overlay = assign({}, this._overlayDefaults, overlay, {\n    id: id,\n    type: type,\n    element: element,\n    html: overlay.html\n  });\n\n  this._addOverlay(overlay);\n\n  return id;\n};\n/**\n * Remove an overlay with the given id or all overlays matching the given filter.\n *\n * @see Overlays#get for filter options.\n *\n * @param {String} [id]\n * @param {Object} [filter]\n */\n\n\nOverlays.prototype.remove = function (filter) {\n  var overlays = this.get(filter) || [];\n\n  if (!isArray(overlays)) {\n    overlays = [overlays];\n  }\n\n  var self = this;\n  forEach(overlays, function (overlay) {\n    var container = self._getOverlayContainer(overlay.element, true);\n\n    if (overlay) {\n      domRemove(overlay.html);\n      domRemove(overlay.htmlContainer);\n      delete overlay.htmlContainer;\n      delete overlay.element;\n      delete self._overlays[overlay.id];\n    }\n\n    if (container) {\n      var idx = container.overlays.indexOf(overlay);\n\n      if (idx !== -1) {\n        container.overlays.splice(idx, 1);\n      }\n    }\n  });\n};\n\nOverlays.prototype.show = function () {\n  setVisible(this._overlayRoot);\n};\n\nOverlays.prototype.hide = function () {\n  setVisible(this._overlayRoot, false);\n};\n\nOverlays.prototype.clear = function () {\n  this._overlays = {};\n  this._overlayContainers = [];\n  domClear(this._overlayRoot);\n};\n\nOverlays.prototype._updateOverlayContainer = function (container) {\n  var element = container.element,\n      html = container.html; // update container left,top according to the elements x,y coordinates\n  // this ensures we can attach child elements relative to this container\n\n  var x = element.x,\n      y = element.y;\n\n  if (element.waypoints) {\n    var bbox = getBBox(element);\n    x = bbox.x;\n    y = bbox.y;\n  }\n\n  setPosition(html, x, y);\n  domAttr(container.html, 'data-container-id', element.id);\n};\n\nOverlays.prototype._updateOverlay = function (overlay) {\n  var position = overlay.position,\n      htmlContainer = overlay.htmlContainer,\n      element = overlay.element; // update overlay html relative to shape because\n  // it is already positioned on the element\n  // update relative\n\n  var left = position.left,\n      top = position.top;\n\n  if (position.right !== undefined) {\n    var width;\n\n    if (element.waypoints) {\n      width = getBBox(element).width;\n    } else {\n      width = element.width;\n    }\n\n    left = position.right * -1 + width;\n  }\n\n  if (position.bottom !== undefined) {\n    var height;\n\n    if (element.waypoints) {\n      height = getBBox(element).height;\n    } else {\n      height = element.height;\n    }\n\n    top = position.bottom * -1 + height;\n  }\n\n  setPosition(htmlContainer, left || 0, top || 0);\n};\n\nOverlays.prototype._createOverlayContainer = function (element) {\n  var html = domify('<div class=\"djs-overlays\" style=\"position: absolute\" />');\n\n  this._overlayRoot.appendChild(html);\n\n  var container = {\n    html: html,\n    element: element,\n    overlays: []\n  };\n\n  this._updateOverlayContainer(container);\n\n  this._overlayContainers.push(container);\n\n  return container;\n};\n\nOverlays.prototype._updateRoot = function (viewbox) {\n  var scale = viewbox.scale || 1;\n  var matrix = 'matrix(' + [scale, 0, 0, scale, -1 * viewbox.x * scale, -1 * viewbox.y * scale].join(',') + ')';\n  setTransform(this._overlayRoot, matrix);\n};\n\nOverlays.prototype._getOverlayContainer = function (element, raw) {\n  var container = find(this._overlayContainers, function (c) {\n    return c.element === element;\n  });\n\n  if (!container && !raw) {\n    return this._createOverlayContainer(element);\n  }\n\n  return container;\n};\n\nOverlays.prototype._addOverlay = function (overlay) {\n  var id = overlay.id,\n      element = overlay.element,\n      html = overlay.html,\n      htmlContainer,\n      overlayContainer; // unwrap jquery (for those who need it)\n\n  if (html.get && html.constructor.prototype.jquery) {\n    html = html.get(0);\n  } // create proper html elements from\n  // overlay HTML strings\n\n\n  if (isString(html)) {\n    html = domify(html);\n  }\n\n  overlayContainer = this._getOverlayContainer(element);\n  htmlContainer = domify('<div class=\"djs-overlay\" data-overlay-id=\"' + id + '\" style=\"position: absolute\">');\n  htmlContainer.appendChild(html);\n\n  if (overlay.type) {\n    domClasses(htmlContainer).add('djs-overlay-' + overlay.type);\n  }\n\n  overlay.htmlContainer = htmlContainer;\n  overlayContainer.overlays.push(overlay);\n  overlayContainer.html.appendChild(htmlContainer);\n  this._overlays[id] = overlay;\n\n  this._updateOverlay(overlay);\n\n  this._updateOverlayVisibilty(overlay, this._canvas.viewbox());\n};\n\nOverlays.prototype._updateOverlayVisibilty = function (overlay, viewbox) {\n  var show = overlay.show,\n      minZoom = show && show.minZoom,\n      maxZoom = show && show.maxZoom,\n      htmlContainer = overlay.htmlContainer,\n      visible = true;\n\n  if (show) {\n    if (isDefined(minZoom) && minZoom > viewbox.scale || isDefined(maxZoom) && maxZoom < viewbox.scale) {\n      visible = false;\n    }\n\n    setVisible(htmlContainer, visible);\n  }\n\n  this._updateOverlayScale(overlay, viewbox);\n};\n\nOverlays.prototype._updateOverlayScale = function (overlay, viewbox) {\n  var shouldScale = overlay.scale,\n      minScale,\n      maxScale,\n      htmlContainer = overlay.htmlContainer;\n  var scale,\n      transform = '';\n\n  if (shouldScale !== true) {\n    if (shouldScale === false) {\n      minScale = 1;\n      maxScale = 1;\n    } else {\n      minScale = shouldScale.min;\n      maxScale = shouldScale.max;\n    }\n\n    if (isDefined(minScale) && viewbox.scale < minScale) {\n      scale = (1 / viewbox.scale || 1) * minScale;\n    }\n\n    if (isDefined(maxScale) && viewbox.scale > maxScale) {\n      scale = (1 / viewbox.scale || 1) * maxScale;\n    }\n  }\n\n  if (isDefined(scale)) {\n    transform = 'scale(' + scale + ',' + scale + ')';\n  }\n\n  setTransform(htmlContainer, transform);\n};\n\nOverlays.prototype._updateOverlaysVisibilty = function (viewbox) {\n  var self = this;\n  forEach(this._overlays, function (overlay) {\n    self._updateOverlayVisibilty(overlay, viewbox);\n  });\n};\n\nOverlays.prototype._init = function () {\n  var eventBus = this._eventBus;\n  var self = this; // scroll/zoom integration\n\n  function updateViewbox(viewbox) {\n    self._updateRoot(viewbox);\n\n    self._updateOverlaysVisibilty(viewbox);\n\n    self.show();\n  }\n\n  eventBus.on('canvas.viewbox.changing', function (event) {\n    self.hide();\n  });\n  eventBus.on('canvas.viewbox.changed', function (event) {\n    updateViewbox(event.viewbox);\n  }); // remove integration\n\n  eventBus.on(['shape.remove', 'connection.remove'], function (e) {\n    var element = e.element;\n    var overlays = self.get({\n      element: element\n    });\n    forEach(overlays, function (o) {\n      self.remove(o.id);\n    });\n\n    var container = self._getOverlayContainer(element);\n\n    if (container) {\n      domRemove(container.html);\n\n      var i = self._overlayContainers.indexOf(container);\n\n      if (i !== -1) {\n        self._overlayContainers.splice(i, 1);\n      }\n    }\n  }); // move integration\n\n  eventBus.on('element.changed', LOW_PRIORITY, function (e) {\n    var element = e.element;\n\n    var container = self._getOverlayContainer(element, true);\n\n    if (container) {\n      forEach(container.overlays, function (overlay) {\n        self._updateOverlay(overlay);\n      });\n\n      self._updateOverlayContainer(container);\n    }\n  }); // marker integration, simply add them on the overlays as classes, too.\n\n  eventBus.on('element.marker.update', function (e) {\n    var container = self._getOverlayContainer(e.element, true);\n\n    if (container) {\n      domClasses(container.html)[e.add ? 'add' : 'remove'](e.marker);\n    }\n  }); // clear overlays with diagram\n\n  eventBus.on('diagram.clear', this.clear, this);\n}; // helpers /////////////////////////////\n\n\nfunction createRoot(parentNode) {\n  var root = domify('<div class=\"djs-overlay-container\" style=\"position: absolute; width: 0; height: 0;\" />');\n  parentNode.insertBefore(root, parentNode.firstChild);\n  return root;\n}\n\nfunction setPosition(el, x, y) {\n  assign(el.style, {\n    left: x + 'px',\n    top: y + 'px'\n  });\n}\n\nfunction setVisible(el, visible) {\n  el.style.display = visible === false ? 'none' : '';\n}\n\nfunction setTransform(el, transform) {\n  el.style['transform-origin'] = 'top left';\n  ['', '-ms-', '-webkit-'].forEach(function (prefix) {\n    el.style[prefix + 'transform'] = transform;\n  });\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/overlays/Overlays.js"],"names":["isArray","isString","isObject","assign","forEach","find","filter","matchPattern","isDefined","domify","classes","domClasses","attr","domAttr","remove","domRemove","clear","domClear","getBBox","Ids","ids","LOW_PRIORITY","Overlays","config","eventBus","canvas","elementRegistry","_eventBus","_canvas","_elementRegistry","_ids","_overlayDefaults","show","scale","defaults","_overlays","_overlayContainers","_overlayRoot","createRoot","getContainer","_init","$inject","prototype","get","search","id","element","container","_getOverlayContainer","type","overlays","slice","add","overlay","position","Error","html","next","_addOverlay","self","htmlContainer","idx","indexOf","splice","setVisible","hide","_updateOverlayContainer","x","y","waypoints","bbox","setPosition","_updateOverlay","left","top","right","undefined","width","bottom","height","_createOverlayContainer","appendChild","push","_updateRoot","viewbox","matrix","join","setTransform","raw","c","overlayContainer","constructor","jquery","_updateOverlayVisibilty","minZoom","maxZoom","visible","_updateOverlayScale","shouldScale","minScale","maxScale","transform","min","max","_updateOverlaysVisibilty","updateViewbox","on","event","e","o","i","marker","parentNode","root","insertBefore","firstChild","el","style","display","prefix"],"mappings":"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","sourcesContent":["import {\n  isArray,\n  isString,\n  isObject,\n  assign,\n  forEach,\n  find,\n  filter,\n  matchPattern,\n  isDefined\n} from 'min-dash';\n\nimport {\n  domify,\n  classes as domClasses,\n  attr as domAttr,\n  remove as domRemove,\n  clear as domClear\n} from 'min-dom';\n\nimport {\n  getBBox\n} from '../../util/Elements';\n\nimport Ids from '../../util/IdGenerator';\n\n// document wide unique overlay ids\nvar ids = new Ids('ov');\n\nvar LOW_PRIORITY = 500;\n\n\n/**\n * A service that allows users to attach overlays to diagram elements.\n *\n * The overlay service will take care of overlay positioning during updates.\n *\n * @example\n *\n * // add a pink badge on the top left of the shape\n * overlays.add(someShape, {\n *   position: {\n *     top: -5,\n *     left: -5\n *   },\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n * // or add via shape id\n *\n * overlays.add('some-element-id', {\n *   position: {\n *     top: -5,\n *     left: -5\n *   }\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n * // or add with optional type\n *\n * overlays.add(someShape, 'badge', {\n *   position: {\n *     top: -5,\n *     left: -5\n *   }\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n *\n * // remove an overlay\n *\n * var id = overlays.add(...);\n * overlays.remove(id);\n *\n *\n * You may configure overlay defaults during tool by providing a `config` module\n * with `overlays.defaults` as an entry:\n *\n * {\n *   overlays: {\n *     defaults: {\n *       show: {\n *         minZoom: 0.7,\n *         maxZoom: 5.0\n *       },\n *       scale: {\n *         min: 1\n *       }\n *     }\n * }\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementRegistry} elementRegistry\n */\nexport default function Overlays(config, eventBus, canvas, elementRegistry) {\n\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementRegistry = elementRegistry;\n\n  this._ids = ids;\n\n  this._overlayDefaults = assign({\n    // no show constraints\n    show: null,\n\n    // always scale\n    scale: true\n  }, config && config.defaults);\n\n  /**\n   * Mapping overlayId -> overlay\n   */\n  this._overlays = {};\n\n  /**\n   * Mapping elementId -> overlay container\n   */\n  this._overlayContainers = [];\n\n  // root html element for all overlays\n  this._overlayRoot = createRoot(canvas.getContainer());\n\n  this._init();\n}\n\n\nOverlays.$inject = [\n  'config.overlays',\n  'eventBus',\n  'canvas',\n  'elementRegistry'\n];\n\n\n/**\n * Returns the overlay with the specified id or a list of overlays\n * for an element with a given type.\n *\n * @example\n *\n * // return the single overlay with the given id\n * overlays.get('some-id');\n *\n * // return all overlays for the shape\n * overlays.get({ element: someShape });\n *\n * // return all overlays on shape with type 'badge'\n * overlays.get({ element: someShape, type: 'badge' });\n *\n * // shape can also be specified as id\n * overlays.get({ element: 'element-id', type: 'badge' });\n *\n *\n * @param {Object} search\n * @param {String} [search.id]\n * @param {String|djs.model.Base} [search.element]\n * @param {String} [search.type]\n *\n * @return {Object|Array<Object>} the overlay(s)\n */\nOverlays.prototype.get = function(search) {\n\n  if (isString(search)) {\n    search = { id: search };\n  }\n\n  if (isString(search.element)) {\n    search.element = this._elementRegistry.get(search.element);\n  }\n\n  if (search.element) {\n    var container = this._getOverlayContainer(search.element, true);\n\n    // return a list of overlays when searching by element (+type)\n    if (container) {\n      return search.type ? filter(container.overlays, matchPattern({ type: search.type })) : container.overlays.slice();\n    } else {\n      return [];\n    }\n  } else\n  if (search.type) {\n    return filter(this._overlays, matchPattern({ type: search.type }));\n  } else {\n    // return single element when searching by id\n    return search.id ? this._overlays[search.id] : null;\n  }\n};\n\n/**\n * Adds a HTML overlay to an element.\n *\n * @param {String|djs.model.Base}   element   attach overlay to this shape\n * @param {String}                  [type]    optional type to assign to the overlay\n * @param {Object}                  overlay   the overlay configuration\n *\n * @param {String|DOMElement}       overlay.html                 html element to use as an overlay\n * @param {Object}                  [overlay.show]               show configuration\n * @param {Number}                  [overlay.show.minZoom]       minimal zoom level to show the overlay\n * @param {Number}                  [overlay.show.maxZoom]       maximum zoom level to show the overlay\n * @param {Object}                  overlay.position             where to attach the overlay\n * @param {Number}                  [overlay.position.left]      relative to element bbox left attachment\n * @param {Number}                  [overlay.position.top]       relative to element bbox top attachment\n * @param {Number}                  [overlay.position.bottom]    relative to element bbox bottom attachment\n * @param {Number}                  [overlay.position.right]     relative to element bbox right attachment\n * @param {Boolean|Object}          [overlay.scale=true]         false to preserve the same size regardless of\n *                                                               diagram zoom\n * @param {Number}                  [overlay.scale.min]\n * @param {Number}                  [overlay.scale.max]\n *\n * @return {String}                 id that may be used to reference the overlay for update or removal\n */\nOverlays.prototype.add = function(element, type, overlay) {\n\n  if (isObject(type)) {\n    overlay = type;\n    type = null;\n  }\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  if (!overlay.position) {\n    throw new Error('must specifiy overlay position');\n  }\n\n  if (!overlay.html) {\n    throw new Error('must specifiy overlay html');\n  }\n\n  if (!element) {\n    throw new Error('invalid element specified');\n  }\n\n  var id = this._ids.next();\n\n  overlay = assign({}, this._overlayDefaults, overlay, {\n    id: id,\n    type: type,\n    element: element,\n    html: overlay.html\n  });\n\n  this._addOverlay(overlay);\n\n  return id;\n};\n\n\n/**\n * Remove an overlay with the given id or all overlays matching the given filter.\n *\n * @see Overlays#get for filter options.\n *\n * @param {String} [id]\n * @param {Object} [filter]\n */\nOverlays.prototype.remove = function(filter) {\n\n  var overlays = this.get(filter) || [];\n\n  if (!isArray(overlays)) {\n    overlays = [ overlays ];\n  }\n\n  var self = this;\n\n  forEach(overlays, function(overlay) {\n\n    var container = self._getOverlayContainer(overlay.element, true);\n\n    if (overlay) {\n      domRemove(overlay.html);\n      domRemove(overlay.htmlContainer);\n\n      delete overlay.htmlContainer;\n      delete overlay.element;\n\n      delete self._overlays[overlay.id];\n    }\n\n    if (container) {\n      var idx = container.overlays.indexOf(overlay);\n      if (idx !== -1) {\n        container.overlays.splice(idx, 1);\n      }\n    }\n  });\n\n};\n\n\nOverlays.prototype.show = function() {\n  setVisible(this._overlayRoot);\n};\n\n\nOverlays.prototype.hide = function() {\n  setVisible(this._overlayRoot, false);\n};\n\nOverlays.prototype.clear = function() {\n  this._overlays = {};\n\n  this._overlayContainers = [];\n\n  domClear(this._overlayRoot);\n};\n\nOverlays.prototype._updateOverlayContainer = function(container) {\n  var element = container.element,\n      html = container.html;\n\n  // update container left,top according to the elements x,y coordinates\n  // this ensures we can attach child elements relative to this container\n\n  var x = element.x,\n      y = element.y;\n\n  if (element.waypoints) {\n    var bbox = getBBox(element);\n    x = bbox.x;\n    y = bbox.y;\n  }\n\n  setPosition(html, x, y);\n\n  domAttr(container.html, 'data-container-id', element.id);\n};\n\n\nOverlays.prototype._updateOverlay = function(overlay) {\n\n  var position = overlay.position,\n      htmlContainer = overlay.htmlContainer,\n      element = overlay.element;\n\n  // update overlay html relative to shape because\n  // it is already positioned on the element\n\n  // update relative\n  var left = position.left,\n      top = position.top;\n\n  if (position.right !== undefined) {\n\n    var width;\n\n    if (element.waypoints) {\n      width = getBBox(element).width;\n    } else {\n      width = element.width;\n    }\n\n    left = position.right * -1 + width;\n  }\n\n  if (position.bottom !== undefined) {\n\n    var height;\n\n    if (element.waypoints) {\n      height = getBBox(element).height;\n    } else {\n      height = element.height;\n    }\n\n    top = position.bottom * -1 + height;\n  }\n\n  setPosition(htmlContainer, left || 0, top || 0);\n};\n\n\nOverlays.prototype._createOverlayContainer = function(element) {\n  var html = domify('<div class=\"djs-overlays\" style=\"position: absolute\" />');\n\n  this._overlayRoot.appendChild(html);\n\n  var container = {\n    html: html,\n    element: element,\n    overlays: []\n  };\n\n  this._updateOverlayContainer(container);\n\n  this._overlayContainers.push(container);\n\n  return container;\n};\n\n\nOverlays.prototype._updateRoot = function(viewbox) {\n  var scale = viewbox.scale || 1;\n\n  var matrix = 'matrix(' +\n  [\n    scale,\n    0,\n    0,\n    scale,\n    -1 * viewbox.x * scale,\n    -1 * viewbox.y * scale\n  ].join(',') +\n  ')';\n\n  setTransform(this._overlayRoot, matrix);\n};\n\n\nOverlays.prototype._getOverlayContainer = function(element, raw) {\n  var container = find(this._overlayContainers, function(c) {\n    return c.element === element;\n  });\n\n\n  if (!container && !raw) {\n    return this._createOverlayContainer(element);\n  }\n\n  return container;\n};\n\n\nOverlays.prototype._addOverlay = function(overlay) {\n\n  var id = overlay.id,\n      element = overlay.element,\n      html = overlay.html,\n      htmlContainer,\n      overlayContainer;\n\n  // unwrap jquery (for those who need it)\n  if (html.get && html.constructor.prototype.jquery) {\n    html = html.get(0);\n  }\n\n  // create proper html elements from\n  // overlay HTML strings\n  if (isString(html)) {\n    html = domify(html);\n  }\n\n  overlayContainer = this._getOverlayContainer(element);\n\n  htmlContainer = domify('<div class=\"djs-overlay\" data-overlay-id=\"' + id + '\" style=\"position: absolute\">');\n\n  htmlContainer.appendChild(html);\n\n  if (overlay.type) {\n    domClasses(htmlContainer).add('djs-overlay-' + overlay.type);\n  }\n\n  overlay.htmlContainer = htmlContainer;\n\n  overlayContainer.overlays.push(overlay);\n  overlayContainer.html.appendChild(htmlContainer);\n\n  this._overlays[id] = overlay;\n\n  this._updateOverlay(overlay);\n  this._updateOverlayVisibilty(overlay, this._canvas.viewbox());\n};\n\n\nOverlays.prototype._updateOverlayVisibilty = function(overlay, viewbox) {\n  var show = overlay.show,\n      minZoom = show && show.minZoom,\n      maxZoom = show && show.maxZoom,\n      htmlContainer = overlay.htmlContainer,\n      visible = true;\n\n  if (show) {\n    if (\n      (isDefined(minZoom) && minZoom > viewbox.scale) ||\n      (isDefined(maxZoom) && maxZoom < viewbox.scale)\n    ) {\n      visible = false;\n    }\n\n    setVisible(htmlContainer, visible);\n  }\n\n  this._updateOverlayScale(overlay, viewbox);\n};\n\n\nOverlays.prototype._updateOverlayScale = function(overlay, viewbox) {\n  var shouldScale = overlay.scale,\n      minScale,\n      maxScale,\n      htmlContainer = overlay.htmlContainer;\n\n  var scale, transform = '';\n\n  if (shouldScale !== true) {\n\n    if (shouldScale === false) {\n      minScale = 1;\n      maxScale = 1;\n    } else {\n      minScale = shouldScale.min;\n      maxScale = shouldScale.max;\n    }\n\n    if (isDefined(minScale) && viewbox.scale < minScale) {\n      scale = (1 / viewbox.scale || 1) * minScale;\n    }\n\n    if (isDefined(maxScale) && viewbox.scale > maxScale) {\n      scale = (1 / viewbox.scale || 1) * maxScale;\n    }\n  }\n\n  if (isDefined(scale)) {\n    transform = 'scale(' + scale + ',' + scale + ')';\n  }\n\n  setTransform(htmlContainer, transform);\n};\n\n\nOverlays.prototype._updateOverlaysVisibilty = function(viewbox) {\n\n  var self = this;\n\n  forEach(this._overlays, function(overlay) {\n    self._updateOverlayVisibilty(overlay, viewbox);\n  });\n};\n\n\nOverlays.prototype._init = function() {\n\n  var eventBus = this._eventBus;\n\n  var self = this;\n\n\n  // scroll/zoom integration\n\n  function updateViewbox(viewbox) {\n    self._updateRoot(viewbox);\n    self._updateOverlaysVisibilty(viewbox);\n\n    self.show();\n  }\n\n  eventBus.on('canvas.viewbox.changing', function(event) {\n    self.hide();\n  });\n\n  eventBus.on('canvas.viewbox.changed', function(event) {\n    updateViewbox(event.viewbox);\n  });\n\n\n  // remove integration\n\n  eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {\n    var element = e.element;\n    var overlays = self.get({ element: element });\n\n    forEach(overlays, function(o) {\n      self.remove(o.id);\n    });\n\n    var container = self._getOverlayContainer(element);\n\n    if (container) {\n      domRemove(container.html);\n      var i = self._overlayContainers.indexOf(container);\n      if (i !== -1) {\n        self._overlayContainers.splice(i, 1);\n      }\n    }\n  });\n\n\n  // move integration\n\n  eventBus.on('element.changed', LOW_PRIORITY, function(e) {\n    var element = e.element;\n\n    var container = self._getOverlayContainer(element, true);\n\n    if (container) {\n      forEach(container.overlays, function(overlay) {\n        self._updateOverlay(overlay);\n      });\n\n      self._updateOverlayContainer(container);\n    }\n  });\n\n\n  // marker integration, simply add them on the overlays as classes, too.\n\n  eventBus.on('element.marker.update', function(e) {\n    var container = self._getOverlayContainer(e.element, true);\n    if (container) {\n      domClasses(container.html)[e.add ? 'add' : 'remove'](e.marker);\n    }\n  });\n\n\n  // clear overlays with diagram\n\n  eventBus.on('diagram.clear', this.clear, this);\n};\n\n\n\n// helpers /////////////////////////////\n\nfunction createRoot(parentNode) {\n  var root = domify(\n    '<div class=\"djs-overlay-container\" style=\"position: absolute; width: 0; height: 0;\" />'\n  );\n\n  parentNode.insertBefore(root, parentNode.firstChild);\n\n  return root;\n}\n\nfunction setPosition(el, x, y) {\n  assign(el.style, { left: x + 'px', top: y + 'px' });\n}\n\nfunction setVisible(el, visible) {\n  el.style.display = visible === false ? 'none' : '';\n}\n\nfunction setTransform(el, transform) {\n\n  el.style['transform-origin'] = 'top left';\n\n  [ '', '-ms-', '-webkit-' ].forEach(function(prefix) {\n    el.style[prefix + 'transform'] = transform;\n  });\n}"]},"metadata":{},"sourceType":"module"}