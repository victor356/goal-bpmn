{"ast":null,"code":"import { pick, assign, filter, has } from 'min-dash';\nimport { is, getBusinessObject } from '../../util/ModelUtil';\nimport { isAny } from '../modeling/util/ModelingUtil';\nimport { isExpanded, isEventSubProcess } from '../../util/DiUtil';\nimport { getProperties, IGNORED_PROPERTIES } from '../../util/model/ModelCloneUtils';\nimport ModelCloneHelper from '../../util/model/ModelCloneHelper';\nvar CUSTOM_PROPERTIES = ['cancelActivity', 'instantiate', 'eventGatewayType', 'triggeredByEvent', 'isInterrupting'];\n\nfunction toggeling(element, target) {\n  var oldCollapsed = element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element);\n  var targetCollapsed;\n\n  if (target && (has(target, 'collapsed') || has(target, 'isExpanded'))) {\n    // property is explicitly set so use it\n    targetCollapsed = has(target, 'collapsed') ? target.collapsed : !target.isExpanded;\n  } else {\n    // keep old state\n    targetCollapsed = oldCollapsed;\n  }\n\n  if (oldCollapsed !== targetCollapsed) {\n    element.collapsed = oldCollapsed;\n    return true;\n  }\n\n  return false;\n}\n/**\n * This module takes care of replacing BPMN elements\n */\n\n\nexport default function BpmnReplace(bpmnFactory, replace, selection, modeling, eventBus) {\n  var helper = new ModelCloneHelper(eventBus, bpmnFactory);\n  /**\n   * Prepares a new business object for the replacement element\n   * and triggers the replace operation.\n   *\n   * @param  {djs.model.Base} element\n   * @param  {Object} target\n   * @param  {Object} [hints]\n   *\n   * @return {djs.model.Base} the newly created element\n   */\n\n  function replaceElement(element, target, hints) {\n    hints = hints || {};\n    var type = target.type,\n        oldBusinessObject = element.businessObject;\n\n    if (isSubProcess(oldBusinessObject)) {\n      if (type === 'bpmn:SubProcess') {\n        if (toggeling(element, target)) {\n          // expanding or collapsing process\n          modeling.toggleCollapse(element);\n          return element;\n        }\n      }\n    }\n\n    var newBusinessObject = bpmnFactory.create(type);\n    var newElement = {\n      type: type,\n      businessObject: newBusinessObject\n    };\n    var elementProps = getProperties(oldBusinessObject.$descriptor),\n        newElementProps = getProperties(newBusinessObject.$descriptor, true),\n        copyProps = intersection(elementProps, newElementProps); // initialize special properties defined in target definition\n\n    assign(newBusinessObject, pick(target, CUSTOM_PROPERTIES));\n    var properties = filter(copyProps, function (property) {\n      var propName = property.replace(/bpmn:/, ''); // copying event definitions, unless we replace\n\n      if (propName === 'eventDefinitions') {\n        return hasEventDefinition(element, target.eventDefinitionType);\n      } // retain loop characteristics if the target element\n      // is not an event sub process\n\n\n      if (propName === 'loopCharacteristics') {\n        return !isEventSubProcess(newBusinessObject);\n      } // so the applied properties from 'target' don't get lost\n\n\n      if (property in newBusinessObject) {\n        return false;\n      }\n\n      if (propName === 'processRef' && target.isExpanded === false) {\n        return false;\n      }\n\n      if (propName === 'triggeredByEvent') {\n        return false;\n      }\n\n      return IGNORED_PROPERTIES.indexOf(propName) === -1;\n    });\n    newBusinessObject = helper.clone(oldBusinessObject, newBusinessObject, properties); // initialize custom BPMN extensions\n\n    if (target.eventDefinitionType) {\n      // only initialize with new eventDefinition\n      // if we did not set an event definition yet,\n      // i.e. because we cloned it\n      if (!hasEventDefinition(newBusinessObject, target.eventDefinitionType)) {\n        newElement.eventDefinitionType = target.eventDefinitionType;\n      }\n    }\n\n    if (is(oldBusinessObject, 'bpmn:Activity')) {\n      if (isSubProcess(oldBusinessObject)) {\n        // no toggeling, so keep old state\n        newElement.isExpanded = isExpanded(oldBusinessObject);\n      } // else if property is explicitly set, use it\n      else if (target && has(target, 'isExpanded')) {\n          newElement.isExpanded = target.isExpanded;\n        } // TODO: need also to respect min/max Size\n      // copy size, from an expanded subprocess to an expanded alternative subprocess\n      // except bpmn:Task, because Task is always expanded\n\n\n      if (isExpanded(oldBusinessObject) && !is(oldBusinessObject, 'bpmn:Task') && newElement.isExpanded) {\n        newElement.width = element.width;\n        newElement.height = element.height;\n      }\n    } // remove children if not expanding sub process\n\n\n    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {\n      hints.moveChildren = false;\n    } // transform collapsed/expanded pools\n\n\n    if (is(oldBusinessObject, 'bpmn:Participant')) {\n      // create expanded pool\n      if (target.isExpanded === true) {\n        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n      } else {\n        // remove children when transforming to collapsed pool\n        hints.moveChildren = false;\n      } // apply same size\n\n\n      newElement.width = element.width;\n      newElement.height = element.height;\n    }\n\n    newBusinessObject.name = oldBusinessObject.name; // retain default flow's reference between inclusive <-> exclusive gateways and activities\n\n    if (isAny(oldBusinessObject, ['bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:Activity']) && isAny(newBusinessObject, ['bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:Activity'])) {\n      newBusinessObject.default = oldBusinessObject.default;\n    }\n\n    if ('fill' in oldBusinessObject.di || 'stroke' in oldBusinessObject.di) {\n      assign(newElement, {\n        colors: pick(oldBusinessObject.di, ['fill', 'stroke'])\n      });\n    }\n\n    newElement = replace.replaceElement(element, newElement, hints);\n\n    if (hints.select !== false) {\n      selection.select(newElement);\n    }\n\n    return newElement;\n  }\n\n  this.replaceElement = replaceElement;\n}\nBpmnReplace.$inject = ['bpmnFactory', 'replace', 'selection', 'modeling', 'eventBus'];\n\nfunction isSubProcess(bo) {\n  return is(bo, 'bpmn:SubProcess');\n}\n\nfunction hasEventDefinition(element, type) {\n  var bo = getBusinessObject(element);\n  return type && bo.get('eventDefinitions').some(function (definition) {\n    return is(definition, type);\n  });\n}\n/**\n * Compute intersection between two arrays.\n */\n\n\nfunction intersection(a1, a2) {\n  return a1.filter(function (el) {\n    return a2.indexOf(el) !== -1;\n  });\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/features/replace/BpmnReplace.js"],"names":["pick","assign","filter","has","is","getBusinessObject","isAny","isExpanded","isEventSubProcess","getProperties","IGNORED_PROPERTIES","ModelCloneHelper","CUSTOM_PROPERTIES","toggeling","element","target","oldCollapsed","collapsed","targetCollapsed","BpmnReplace","bpmnFactory","replace","selection","modeling","eventBus","helper","replaceElement","hints","type","oldBusinessObject","businessObject","isSubProcess","toggleCollapse","newBusinessObject","create","newElement","elementProps","$descriptor","newElementProps","copyProps","intersection","properties","property","propName","hasEventDefinition","eventDefinitionType","indexOf","clone","width","height","moveChildren","processRef","name","default","di","colors","select","$inject","bo","get","some","definition","a1","a2","el"],"mappings":"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","sourcesContent":["import {\n  pick,\n  assign,\n  filter,\n  has\n} from 'min-dash';\n\nimport {\n  is,\n  getBusinessObject\n} from '../../util/ModelUtil';\n\nimport {\n  isAny\n} from '../modeling/util/ModelingUtil';\n\nimport {\n  isExpanded,\n  isEventSubProcess\n} from '../../util/DiUtil';\n\nimport {\n  getProperties,\n  IGNORED_PROPERTIES\n} from '../../util/model/ModelCloneUtils';\n\nimport ModelCloneHelper from '../../util/model/ModelCloneHelper';\n\nvar CUSTOM_PROPERTIES = [\n  'cancelActivity',\n  'instantiate',\n  'eventGatewayType',\n  'triggeredByEvent',\n  'isInterrupting'\n];\n\n\nfunction toggeling(element, target) {\n\n  var oldCollapsed = (\n    element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element)\n  );\n\n  var targetCollapsed;\n\n  if (target && (has(target, 'collapsed') || has(target, 'isExpanded'))) {\n    // property is explicitly set so use it\n    targetCollapsed = (\n      has(target, 'collapsed') ? target.collapsed : !target.isExpanded\n    );\n  } else {\n    // keep old state\n    targetCollapsed = oldCollapsed;\n  }\n\n  if (oldCollapsed !== targetCollapsed) {\n    element.collapsed = oldCollapsed;\n    return true;\n  }\n\n  return false;\n}\n\n\n\n/**\n * This module takes care of replacing BPMN elements\n */\nexport default function BpmnReplace(\n    bpmnFactory, replace, selection,\n    modeling, eventBus) {\n\n  var helper = new ModelCloneHelper(eventBus, bpmnFactory);\n\n  /**\n   * Prepares a new business object for the replacement element\n   * and triggers the replace operation.\n   *\n   * @param  {djs.model.Base} element\n   * @param  {Object} target\n   * @param  {Object} [hints]\n   *\n   * @return {djs.model.Base} the newly created element\n   */\n  function replaceElement(element, target, hints) {\n\n    hints = hints || {};\n\n    var type = target.type,\n        oldBusinessObject = element.businessObject;\n\n    if (isSubProcess(oldBusinessObject)) {\n      if (type === 'bpmn:SubProcess') {\n        if (toggeling(element, target)) {\n          // expanding or collapsing process\n          modeling.toggleCollapse(element);\n\n          return element;\n        }\n      }\n    }\n\n    var newBusinessObject = bpmnFactory.create(type);\n\n    var newElement = {\n      type: type,\n      businessObject: newBusinessObject\n    };\n\n    var elementProps = getProperties(oldBusinessObject.$descriptor),\n        newElementProps = getProperties(newBusinessObject.$descriptor, true),\n        copyProps = intersection(elementProps, newElementProps);\n\n    // initialize special properties defined in target definition\n    assign(newBusinessObject, pick(target, CUSTOM_PROPERTIES));\n\n    var properties = filter(copyProps, function(property) {\n      var propName = property.replace(/bpmn:/, '');\n\n      // copying event definitions, unless we replace\n      if (propName === 'eventDefinitions') {\n        return hasEventDefinition(element, target.eventDefinitionType);\n      }\n\n      // retain loop characteristics if the target element\n      // is not an event sub process\n      if (propName === 'loopCharacteristics') {\n        return !isEventSubProcess(newBusinessObject);\n      }\n\n      // so the applied properties from 'target' don't get lost\n      if (property in newBusinessObject) {\n        return false;\n      }\n\n      if (propName === 'processRef' && target.isExpanded === false) {\n        return false;\n      }\n\n      if (propName === 'triggeredByEvent') {\n        return false;\n      }\n\n      return IGNORED_PROPERTIES.indexOf(propName) === -1;\n    });\n\n    newBusinessObject = helper.clone(oldBusinessObject, newBusinessObject, properties);\n\n    // initialize custom BPMN extensions\n    if (target.eventDefinitionType) {\n\n      // only initialize with new eventDefinition\n      // if we did not set an event definition yet,\n      // i.e. because we cloned it\n      if (!hasEventDefinition(newBusinessObject, target.eventDefinitionType)) {\n        newElement.eventDefinitionType = target.eventDefinitionType;\n      }\n    }\n\n    if (is(oldBusinessObject, 'bpmn:Activity')) {\n\n      if (isSubProcess(oldBusinessObject)) {\n        // no toggeling, so keep old state\n        newElement.isExpanded = isExpanded(oldBusinessObject);\n      }\n      // else if property is explicitly set, use it\n      else if (target && has(target, 'isExpanded')) {\n        newElement.isExpanded = target.isExpanded;\n      }\n\n      // TODO: need also to respect min/max Size\n      // copy size, from an expanded subprocess to an expanded alternative subprocess\n      // except bpmn:Task, because Task is always expanded\n      if ((isExpanded(oldBusinessObject) && !is(oldBusinessObject, 'bpmn:Task')) && newElement.isExpanded) {\n        newElement.width = element.width;\n        newElement.height = element.height;\n      }\n    }\n\n    // remove children if not expanding sub process\n    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {\n      hints.moveChildren = false;\n    }\n\n    // transform collapsed/expanded pools\n    if (is(oldBusinessObject, 'bpmn:Participant')) {\n\n      // create expanded pool\n      if (target.isExpanded === true) {\n        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n      } else {\n        // remove children when transforming to collapsed pool\n        hints.moveChildren = false;\n      }\n\n      // apply same size\n      newElement.width = element.width;\n      newElement.height = element.height;\n    }\n\n    newBusinessObject.name = oldBusinessObject.name;\n\n    // retain default flow's reference between inclusive <-> exclusive gateways and activities\n    if (\n      isAny(oldBusinessObject, [\n        'bpmn:ExclusiveGateway',\n        'bpmn:InclusiveGateway',\n        'bpmn:Activity'\n      ]) &&\n      isAny(newBusinessObject, [\n        'bpmn:ExclusiveGateway',\n        'bpmn:InclusiveGateway',\n        'bpmn:Activity'\n      ])\n    ) {\n      newBusinessObject.default = oldBusinessObject.default;\n    }\n\n    if ('fill' in oldBusinessObject.di || 'stroke' in oldBusinessObject.di) {\n      assign(newElement, { colors: pick(oldBusinessObject.di, [ 'fill', 'stroke' ]) });\n    }\n\n    newElement = replace.replaceElement(element, newElement, hints);\n\n    if (hints.select !== false) {\n      selection.select(newElement);\n    }\n\n    return newElement;\n  }\n\n  this.replaceElement = replaceElement;\n}\n\nBpmnReplace.$inject = [\n  'bpmnFactory',\n  'replace',\n  'selection',\n  'modeling',\n  'eventBus'\n];\n\n\nfunction isSubProcess(bo) {\n  return is(bo, 'bpmn:SubProcess');\n}\n\nfunction hasEventDefinition(element, type) {\n\n  var bo = getBusinessObject(element);\n\n  return type && bo.get('eventDefinitions').some(function(definition) {\n    return is(definition, type);\n  });\n}\n\n/**\n * Compute intersection between two arrays.\n */\nfunction intersection(a1, a2) {\n  return a1.filter(function(el) {\n    return a2.indexOf(el) !== -1;\n  });\n}"]},"metadata":{},"sourceType":"module"}