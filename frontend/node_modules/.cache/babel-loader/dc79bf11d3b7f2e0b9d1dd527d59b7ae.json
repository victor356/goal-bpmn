{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../factory/EntryFactory');\n\nvar cmdHelper = require('../../../helper/CmdHelper'),\n    ImplementationTypeHelper = require('../../../helper/ImplementationTypeHelper'),\n    script = require('./implementation/Script')('scriptFormat', 'value', true);\n\nvar LISTENER_TYPE_LABEL = {\n  class: 'Java Class',\n  expression: 'Expression',\n  delegateExpression: 'Delegate Expression',\n  script: 'Script'\n};\n\nmodule.exports = function (group, element, bpmnFactory, options, translate) {\n  options = options || {};\n  var getSelectedListener = options.getSelectedListener;\n  var classProp = 'class',\n      expressionProp = 'expression',\n      delegateExpressionProp = 'delegateExpression',\n      scriptProp = 'script';\n  var executionListenerEventTypeOptions = ImplementationTypeHelper.isSequenceFlow(element) ? [{\n    name: 'take',\n    value: 'take'\n  }] : [{\n    name: 'start',\n    value: 'start'\n  }, {\n    name: 'end',\n    value: 'end'\n  }];\n  var taskListenerEventTypeOptions = [{\n    name: 'create',\n    value: 'create'\n  }, {\n    name: 'assignment',\n    value: 'assignment'\n  }, {\n    name: 'complete',\n    value: 'complete'\n  }, {\n    name: 'delete',\n    value: 'delete'\n  }];\n\n  var isSelected = function (element, node) {\n    return getSelectedListener(element, node);\n  };\n\n  group.entries.push(entryFactory.selectBox({\n    id: 'listener-event-type',\n    label: translate('Event Type'),\n    modelProperty: 'eventType',\n    emptyParameter: false,\n    get: function (element, node) {\n      var listener = getSelectedListener(element, node);\n      var eventType = listener && listener.get('event');\n      return {\n        eventType: eventType\n      };\n    },\n    set: function (element, values, node) {\n      var eventType = values.eventType;\n      return cmdHelper.updateBusinessObject(element, getSelectedListener(element, node), {\n        event: eventType\n      });\n    },\n    selectOptions: function (element, node) {\n      var eventTypeOptions;\n      var selectedListener = getSelectedListener(element, node);\n\n      if (ImplementationTypeHelper.isTaskListener(selectedListener)) {\n        eventTypeOptions = taskListenerEventTypeOptions;\n      } else if (ImplementationTypeHelper.isExecutionListener(selectedListener)) {\n        eventTypeOptions = executionListenerEventTypeOptions;\n      }\n\n      return eventTypeOptions;\n    },\n    hidden: function (element, node) {\n      return !isSelected(element, node);\n    }\n  }));\n  group.entries.push(entryFactory.selectBox({\n    id: 'listener-type',\n    label: translate('Listener Type'),\n    selectOptions: [{\n      value: classProp,\n      name: translate('Java Class')\n    }, {\n      value: expressionProp,\n      name: translate('Expression')\n    }, {\n      value: delegateExpressionProp,\n      name: translate('Delegate Expression')\n    }, {\n      value: scriptProp,\n      name: translate('Script')\n    }],\n    modelProperty: 'listenerType',\n    emptyParameter: false,\n    get: function (element, node) {\n      var listener = getSelectedListener(element, node);\n      return {\n        listenerType: ImplementationTypeHelper.getImplementationType(listener)\n      };\n    },\n    set: function (element, values, node) {\n      var listener = getSelectedListener(element, node),\n          listenerType = values.listenerType || undefined,\n          update = {};\n      update[classProp] = listenerType === classProp ? '' : undefined;\n      update[expressionProp] = listenerType === expressionProp ? '' : undefined;\n      update[delegateExpressionProp] = listenerType === delegateExpressionProp ? '' : undefined;\n      update[scriptProp] = listenerType === scriptProp ? bpmnFactory.create('camunda:Script') : undefined;\n      return cmdHelper.updateBusinessObject(element, listener, update);\n    },\n    hidden: function (element, node) {\n      return !isSelected(element, node);\n    }\n  }));\n  group.entries.push(entryFactory.textField({\n    id: 'listener-value',\n    dataValueLabel: 'listenerValueLabel',\n    modelProperty: 'listenerValue',\n    get: function (element, node) {\n      var value = {},\n          listener = getSelectedListener(element, node),\n          listenerType = ImplementationTypeHelper.getImplementationType(listener);\n      value.listenerValueLabel = LISTENER_TYPE_LABEL[listenerType] || '';\n      value.listenerValue = listener && listener.get(listenerType) || undefined;\n      return value;\n    },\n    set: function (element, values, node) {\n      var update = {},\n          listener = getSelectedListener(element, node),\n          listenerType = ImplementationTypeHelper.getImplementationType(listener);\n      update[listenerType] = values.listenerValue || '';\n      return cmdHelper.updateBusinessObject(element, listener, update);\n    },\n    hidden: function (element, node) {\n      var listener = getSelectedListener(element, node);\n      return !listener || listener.script;\n    },\n    validate: function (element, values) {\n      var value = values.listenerValue,\n          validate = {};\n\n      if (!value) {\n        validate.listenerValue = translate('Must provide a value');\n      }\n\n      return validate;\n    }\n  }));\n  group.entries.push({\n    id: 'listener-script-value',\n    html: '<div data-show=\"isScript\">' + script.template + '</div>',\n    get: function (element, node) {\n      var listener = getSelectedListener(element, node);\n      return listener && listener.script ? script.get(element, listener.script) : {};\n    },\n    set: function (element, values, node) {\n      var listener = getSelectedListener(element, node);\n      var update = script.set(element, values, listener);\n      return cmdHelper.updateBusinessObject(element, listener.script, update);\n    },\n    validate: function (element, values, node) {\n      var listener = getSelectedListener(element, node);\n      return listener && listener.script ? script.validate(element, values) : {};\n    },\n    isScript: function (element, node) {\n      var listener = getSelectedListener(element, node);\n      return listener && listener.script;\n    },\n    script: script\n  });\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/ListenerDetailProps.js"],"names":["entryFactory","require","cmdHelper","ImplementationTypeHelper","script","LISTENER_TYPE_LABEL","class","expression","delegateExpression","module","exports","group","element","bpmnFactory","options","translate","getSelectedListener","classProp","expressionProp","delegateExpressionProp","scriptProp","executionListenerEventTypeOptions","isSequenceFlow","name","value","taskListenerEventTypeOptions","isSelected","node","entries","push","selectBox","id","label","modelProperty","emptyParameter","get","listener","eventType","set","values","updateBusinessObject","event","selectOptions","eventTypeOptions","selectedListener","isTaskListener","isExecutionListener","hidden","listenerType","getImplementationType","undefined","update","create","textField","dataValueLabel","listenerValueLabel","listenerValue","validate","html","template","isScript"],"mappings":"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","sourcesContent":["'use strict';\n\nvar entryFactory = require('../../../factory/EntryFactory');\n\nvar cmdHelper = require('../../../helper/CmdHelper'),\n    ImplementationTypeHelper = require('../../../helper/ImplementationTypeHelper'),\n\n    script = require('./implementation/Script')('scriptFormat', 'value', true);\n\n\nvar LISTENER_TYPE_LABEL = {\n  class: 'Java Class',\n  expression: 'Expression',\n  delegateExpression: 'Delegate Expression',\n  script: 'Script'\n};\n\nmodule.exports = function(group, element, bpmnFactory, options, translate) {\n\n  options = options || {};\n\n  var getSelectedListener = options.getSelectedListener;\n\n  var classProp = 'class',\n      expressionProp = 'expression',\n      delegateExpressionProp = 'delegateExpression',\n      scriptProp = 'script';\n\n  var executionListenerEventTypeOptions = ImplementationTypeHelper.isSequenceFlow(element) ? [\n    { name: 'take', value: 'take' }\n  ] : [\n    { name: 'start', value: 'start' },\n    { name: 'end', value: 'end' }\n  ];\n\n  var taskListenerEventTypeOptions = [\n    { name: 'create', value: 'create' },\n    { name: 'assignment', value: 'assignment' },\n    { name: 'complete', value: 'complete' },\n    { name: 'delete', value: 'delete' }\n  ];\n\n  var isSelected = function(element, node) {\n    return getSelectedListener(element, node);\n  };\n\n  group.entries.push(entryFactory.selectBox({\n    id: 'listener-event-type',\n    label: translate('Event Type'),\n    modelProperty: 'eventType',\n    emptyParameter: false,\n\n    get: function(element, node) {\n\n\n      var listener = getSelectedListener(element, node);\n\n      var eventType = listener && listener.get('event');\n\n      return {\n        eventType: eventType\n      };\n    },\n\n    set: function(element, values, node) {\n      var eventType = values.eventType;\n\n      return cmdHelper.updateBusinessObject(element, getSelectedListener(element, node), { event: eventType });\n    },\n\n    selectOptions: function(element, node) {\n      var eventTypeOptions;\n\n      var selectedListener = getSelectedListener(element, node);\n      if (ImplementationTypeHelper.isTaskListener(selectedListener)) {\n        eventTypeOptions = taskListenerEventTypeOptions;\n      } else if (ImplementationTypeHelper.isExecutionListener(selectedListener)) {\n        eventTypeOptions = executionListenerEventTypeOptions;\n      }\n\n      return eventTypeOptions;\n\n    },\n\n    hidden: function(element, node) {\n      return !isSelected(element, node);\n    }\n\n  }));\n\n\n  group.entries.push(entryFactory.selectBox({\n    id: 'listener-type',\n    label: translate('Listener Type'),\n    selectOptions: [\n      { value: classProp, name: translate('Java Class') },\n      { value: expressionProp, name: translate('Expression') },\n      { value: delegateExpressionProp, name: translate('Delegate Expression') },\n      { value: scriptProp, name: translate('Script') }\n    ],\n    modelProperty: 'listenerType',\n    emptyParameter: false,\n\n    get: function(element, node) {\n      var listener = getSelectedListener(element, node);\n      return {\n        listenerType: ImplementationTypeHelper.getImplementationType(listener)\n      };\n    },\n\n    set: function(element, values, node) {\n      var listener = getSelectedListener(element, node),\n          listenerType = values.listenerType || undefined,\n          update = {};\n\n      update[classProp] = listenerType === classProp ? '' : undefined;\n      update[expressionProp] = listenerType === expressionProp ? '' : undefined;\n      update[delegateExpressionProp] = listenerType === delegateExpressionProp ? '' : undefined;\n      update[scriptProp] = listenerType === scriptProp ? bpmnFactory.create('camunda:Script') : undefined;\n\n      return cmdHelper.updateBusinessObject(element, listener, update);\n    },\n\n    hidden: function(element, node) {\n      return !isSelected(element, node);\n    }\n\n  }));\n\n\n  group.entries.push(entryFactory.textField({\n    id: 'listener-value',\n    dataValueLabel: 'listenerValueLabel',\n    modelProperty: 'listenerValue',\n\n    get: function(element, node) {\n      var value = {},\n          listener = getSelectedListener(element, node),\n          listenerType = ImplementationTypeHelper.getImplementationType(listener);\n\n      value.listenerValueLabel = LISTENER_TYPE_LABEL[listenerType] || '';\n      value.listenerValue = (listener && listener.get(listenerType)) || undefined;\n\n      return value;\n    },\n\n    set: function(element, values, node) {\n      var update = {},\n          listener = getSelectedListener(element, node),\n          listenerType = ImplementationTypeHelper.getImplementationType(listener);\n\n      update[listenerType] = values.listenerValue || '';\n\n      return cmdHelper.updateBusinessObject(element, listener, update);\n    },\n\n    hidden: function(element, node) {\n      var listener = getSelectedListener(element, node);\n      return !listener || listener.script;\n    },\n\n    validate: function(element, values) {\n      var value = values.listenerValue,\n          validate = {};\n\n      if (!value) {\n        validate.listenerValue = translate('Must provide a value');\n      }\n\n      return validate;\n    }\n\n  }));\n\n\n  group.entries.push({\n    id: 'listener-script-value',\n    html: '<div data-show=\"isScript\">' +\n            script.template +\n          '</div>',\n\n    get: function(element, node) {\n      var listener = getSelectedListener(element, node);\n      return listener && listener.script ? script.get(element, listener.script) : {};\n    },\n\n    set: function(element, values, node) {\n      var listener = getSelectedListener(element, node);\n      var update = script.set(element, values, listener);\n      return cmdHelper.updateBusinessObject(element, listener.script, update);\n    },\n\n    validate: function(element, values, node) {\n      var listener = getSelectedListener(element, node);\n      return listener && listener.script ? script.validate(element, values) : {};\n    },\n\n    isScript: function(element, node) {\n      var listener = getSelectedListener(element, node);\n      return listener && listener.script;\n    },\n\n    script: script\n\n  });\n\n};\n"]},"metadata":{},"sourceType":"script"}