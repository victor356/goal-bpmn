{"ast":null,"code":"'use strict';\n\nvar forEach = require('lodash/forEach');\n/**\n * A handler that combines and executes multiple commands.\n *\n * All updates are bundled on the command stack and executed in one step.\n * This also makes it possible to revert the changes in one step.\n *\n * Example use case: remove the camunda:formKey attribute and in addition\n * add all form fields needed for the camunda:formData property.\n *\n * @class\n * @constructor\n */\n\n\nfunction MultiCommandHandler(commandStack) {\n  this._commandStack = commandStack;\n}\n\nMultiCommandHandler.$inject = ['commandStack'];\nmodule.exports = MultiCommandHandler;\n\nMultiCommandHandler.prototype.preExecute = function (context) {\n  var commandStack = this._commandStack;\n  forEach(context, function (command) {\n    commandStack.execute(command.cmd, command.context);\n  });\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/cmd/MultiCommandHandler.js"],"names":["forEach","require","MultiCommandHandler","commandStack","_commandStack","$inject","module","exports","prototype","preExecute","context","command","execute","cmd"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,mBAAT,CAA6BC,YAA7B,EAA2C;AACzC,OAAKC,aAAL,GAAqBD,YAArB;AACD;;AAEDD,mBAAmB,CAACG,OAApB,GAA8B,CAAE,cAAF,CAA9B;AAEAC,MAAM,CAACC,OAAP,GAAiBL,mBAAjB;;AAEAA,mBAAmB,CAACM,SAApB,CAA8BC,UAA9B,GAA2C,UAASC,OAAT,EAAkB;AAE3D,MAAIP,YAAY,GAAG,KAAKC,aAAxB;AAEAJ,EAAAA,OAAO,CAACU,OAAD,EAAU,UAASC,OAAT,EAAkB;AACjCR,IAAAA,YAAY,CAACS,OAAb,CAAqBD,OAAO,CAACE,GAA7B,EAAkCF,OAAO,CAACD,OAA1C;AACD,GAFM,CAAP;AAGD,CAPD","sourcesContent":["'use strict';\n\nvar forEach = require('lodash/forEach');\n\n/**\n * A handler that combines and executes multiple commands.\n *\n * All updates are bundled on the command stack and executed in one step.\n * This also makes it possible to revert the changes in one step.\n *\n * Example use case: remove the camunda:formKey attribute and in addition\n * add all form fields needed for the camunda:formData property.\n *\n * @class\n * @constructor\n */\nfunction MultiCommandHandler(commandStack) {\n  this._commandStack = commandStack;\n}\n\nMultiCommandHandler.$inject = [ 'commandStack' ];\n\nmodule.exports = MultiCommandHandler;\n\nMultiCommandHandler.prototype.preExecute = function(context) {\n\n  var commandStack = this._commandStack;\n\n  forEach(context, function(command) {\n    commandStack.execute(command.cmd, command.context);\n  });\n};"]},"metadata":{},"sourceType":"script"}