{"ast":null,"code":"import { isFunction, isArray, isNumber, bind, assign } from 'min-dash';\nvar FN_REF = '__fn';\nvar DEFAULT_PRIORITY = 1000;\nvar slice = Array.prototype.slice;\n/**\n * A general purpose event bus.\n *\n * This component is used to communicate across a diagram instance.\n * Other parts of a diagram can use it to listen to and broadcast events.\n *\n *\n * ## Registering for Events\n *\n * The event bus provides the {@link EventBus#on} and {@link EventBus#once}\n * methods to register for events. {@link EventBus#off} can be used to\n * remove event registrations. Listeners receive an instance of {@link Event}\n * as the first argument. It allows them to hook into the event execution.\n *\n * ```javascript\n *\n * // listen for event\n * eventBus.on('foo', function(event) {\n *\n *   // access event type\n *   event.type; // 'foo'\n *\n *   // stop propagation to other listeners\n *   event.stopPropagation();\n *\n *   // prevent event default\n *   event.preventDefault();\n * });\n *\n * // listen for event with custom payload\n * eventBus.on('bar', function(event, payload) {\n *   console.log(payload);\n * });\n *\n * // listen for event returning value\n * eventBus.on('foobar', function(event) {\n *\n *   // stop event propagation + prevent default\n *   return false;\n *\n *   // stop event propagation + return custom result\n *   return {\n *     complex: 'listening result'\n *   };\n * });\n *\n *\n * // listen with custom priority (default=1000, higher is better)\n * eventBus.on('priorityfoo', 1500, function(event) {\n *   console.log('invoked first!');\n * });\n *\n *\n * // listen for event and pass the context (`this`)\n * eventBus.on('foobar', function(event) {\n *   this.foo();\n * }, this);\n * ```\n *\n *\n * ## Emitting Events\n *\n * Events can be emitted via the event bus using {@link EventBus#fire}.\n *\n * ```javascript\n *\n * // false indicates that the default action\n * // was prevented by listeners\n * if (eventBus.fire('foo') === false) {\n *   console.log('default has been prevented!');\n * };\n *\n *\n * // custom args + return value listener\n * eventBus.on('sum', function(event, a, b) {\n *   return a + b;\n * });\n *\n * // you can pass custom arguments + retrieve result values.\n * var sum = eventBus.fire('sum', 1, 2);\n * console.log(sum); // 3\n * ```\n */\n\nexport default function EventBus() {\n  this._listeners = {}; // cleanup on destroy on lowest priority to allow\n  // message passing until the bitter end\n\n  this.on('diagram.destroy', 1, this._destroy, this);\n}\n/**\n * Register an event listener for events with the given name.\n *\n * The callback will be invoked with `event, ...additionalArguments`\n * that have been passed to {@link EventBus#fire}.\n *\n * Returning false from a listener will prevent the events default action\n * (if any is specified). To stop an event from being processed further in\n * other listeners execute {@link Event#stopPropagation}.\n *\n * Returning anything but `undefined` from a listener will stop the listener propagation.\n *\n * @param {String|Array<String>} events\n * @param {Number} [priority=1000] the priority in which this listener is called, larger is higher\n * @param {Function} callback\n * @param {Object} [that] Pass context (`this`) to the callback\n */\n\nEventBus.prototype.on = function (events, priority, callback, that) {\n  events = isArray(events) ? events : [events];\n\n  if (isFunction(priority)) {\n    that = callback;\n    callback = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  if (!isNumber(priority)) {\n    throw new Error('priority must be a number');\n  }\n\n  var actualCallback = callback;\n\n  if (that) {\n    actualCallback = bind(callback, that); // make sure we remember and are able to remove\n    // bound callbacks via {@link #off} using the original\n    // callback\n\n    actualCallback[FN_REF] = callback[FN_REF] || callback;\n  }\n\n  var self = this,\n      listener = {\n    priority: priority,\n    callback: actualCallback\n  };\n  events.forEach(function (e) {\n    self._addListener(e, listener);\n  });\n};\n/**\n * Register an event listener that is executed only once.\n *\n * @param {String} event the event name to register for\n * @param {Function} callback the callback to execute\n * @param {Object} [that] Pass context (`this`) to the callback\n */\n\n\nEventBus.prototype.once = function (event, priority, callback, that) {\n  var self = this;\n\n  if (isFunction(priority)) {\n    that = callback;\n    callback = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  if (!isNumber(priority)) {\n    throw new Error('priority must be a number');\n  }\n\n  function wrappedCallback() {\n    self.off(event, wrappedCallback);\n    return callback.apply(that, arguments);\n  } // make sure we remember and are able to remove\n  // bound callbacks via {@link #off} using the original\n  // callback\n\n\n  wrappedCallback[FN_REF] = callback;\n  this.on(event, priority, wrappedCallback);\n};\n/**\n * Removes event listeners by event and callback.\n *\n * If no callback is given, all listeners for a given event name are being removed.\n *\n * @param {String|Array<String>} events\n * @param {Function} [callback]\n */\n\n\nEventBus.prototype.off = function (events, callback) {\n  events = isArray(events) ? events : [events];\n  var self = this;\n  events.forEach(function (event) {\n    self._removeListener(event, callback);\n  });\n};\n/**\n * Create an EventBus event.\n *\n * @param {Object} data\n *\n * @return {Object} event, recognized by the eventBus\n */\n\n\nEventBus.prototype.createEvent = function (data) {\n  var event = new InternalEvent();\n  event.init(data);\n  return event;\n};\n/**\n * Fires a named event.\n *\n * @example\n *\n * // fire event by name\n * events.fire('foo');\n *\n * // fire event object with nested type\n * var event = { type: 'foo' };\n * events.fire(event);\n *\n * // fire event with explicit type\n * var event = { x: 10, y: 20 };\n * events.fire('element.moved', event);\n *\n * // pass additional arguments to the event\n * events.on('foo', function(event, bar) {\n *   alert(bar);\n * });\n *\n * events.fire({ type: 'foo' }, 'I am bar!');\n *\n * @param {String} [name] the optional event name\n * @param {Object} [event] the event object\n * @param {...Object} additional arguments to be passed to the callback functions\n *\n * @return {Boolean} the events return value, if specified or false if the\n *                   default action was prevented by listeners\n */\n\n\nEventBus.prototype.fire = function (type, data) {\n  var event, listeners, returnValue, args;\n  args = slice.call(arguments);\n\n  if (typeof type === 'object') {\n    event = type;\n    type = event.type;\n  }\n\n  if (!type) {\n    throw new Error('no event type specified');\n  }\n\n  listeners = this._listeners[type];\n\n  if (!listeners) {\n    return;\n  } // we make sure we fire instances of our home made\n  // events here. We wrap them only once, though\n\n\n  if (data instanceof InternalEvent) {\n    // we are fine, we alread have an event\n    event = data;\n  } else {\n    event = this.createEvent(data);\n  } // ensure we pass the event as the first parameter\n\n\n  args[0] = event; // original event type (in case we delegate)\n\n  var originalType = event.type; // update event type before delegation\n\n  if (type !== originalType) {\n    event.type = type;\n  }\n\n  try {\n    returnValue = this._invokeListeners(event, args, listeners);\n  } finally {\n    // reset event type after delegation\n    if (type !== originalType) {\n      event.type = originalType;\n    }\n  } // set the return value to false if the event default\n  // got prevented and no other return value exists\n\n\n  if (returnValue === undefined && event.defaultPrevented) {\n    returnValue = false;\n  }\n\n  return returnValue;\n};\n\nEventBus.prototype.handleError = function (error) {\n  return this.fire('error', {\n    error: error\n  }) === false;\n};\n\nEventBus.prototype._destroy = function () {\n  this._listeners = {};\n};\n\nEventBus.prototype._invokeListeners = function (event, args, listeners) {\n  var idx, listener, returnValue;\n\n  for (idx = 0; listener = listeners[idx]; idx++) {\n    // handle stopped propagation\n    if (event.cancelBubble) {\n      break;\n    }\n\n    returnValue = this._invokeListener(event, args, listener);\n  }\n\n  return returnValue;\n};\n\nEventBus.prototype._invokeListener = function (event, args, listener) {\n  var returnValue;\n\n  try {\n    // returning false prevents the default action\n    returnValue = invokeFunction(listener.callback, args); // stop propagation on return value\n\n    if (returnValue !== undefined) {\n      event.returnValue = returnValue;\n      event.stopPropagation();\n    } // prevent default on return false\n\n\n    if (returnValue === false) {\n      event.preventDefault();\n    }\n  } catch (e) {\n    if (!this.handleError(e)) {\n      console.error('unhandled error in event listener');\n      console.error(e.stack);\n      throw e;\n    }\n  }\n\n  return returnValue;\n};\n/*\n * Add new listener with a certain priority to the list\n * of listeners (for the given event).\n *\n * The semantics of listener registration / listener execution are\n * first register, first serve: New listeners will always be inserted\n * after existing listeners with the same priority.\n *\n * Example: Inserting two listeners with priority 1000 and 1300\n *\n *    * before: [ 1500, 1500, 1000, 1000 ]\n *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]\n *\n * @param {String} event\n * @param {Object} listener { priority, callback }\n */\n\n\nEventBus.prototype._addListener = function (event, newListener) {\n  var listeners = this._getListeners(event),\n      existingListener,\n      idx; // ensure we order listeners by priority from\n  // 0 (high) to n > 0 (low)\n\n\n  for (idx = 0; existingListener = listeners[idx]; idx++) {\n    if (existingListener.priority < newListener.priority) {\n      // prepend newListener at before existingListener\n      listeners.splice(idx, 0, newListener);\n      return;\n    }\n  }\n\n  listeners.push(newListener);\n};\n\nEventBus.prototype._getListeners = function (name) {\n  var listeners = this._listeners[name];\n\n  if (!listeners) {\n    this._listeners[name] = listeners = [];\n  }\n\n  return listeners;\n};\n\nEventBus.prototype._removeListener = function (event, callback) {\n  var listeners = this._getListeners(event),\n      listener,\n      listenerCallback,\n      idx;\n\n  if (callback) {\n    // move through listeners from back to front\n    // and remove matching listeners\n    for (idx = listeners.length - 1; listener = listeners[idx]; idx--) {\n      listenerCallback = listener.callback;\n\n      if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {\n        listeners.splice(idx, 1);\n      }\n    }\n  } else {\n    // clear listeners\n    listeners.length = 0;\n  }\n};\n/**\n * A event that is emitted via the event bus.\n */\n\n\nfunction InternalEvent() {}\n\nInternalEvent.prototype.stopPropagation = function () {\n  this.cancelBubble = true;\n};\n\nInternalEvent.prototype.preventDefault = function () {\n  this.defaultPrevented = true;\n};\n\nInternalEvent.prototype.init = function (data) {\n  assign(this, data || {});\n};\n/**\n * Invoke function. Be fast...\n *\n * @param {Function} fn\n * @param {Array<Object>} args\n *\n * @return {Any}\n */\n\n\nfunction invokeFunction(fn, args) {\n  return fn.apply(null, args);\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/core/EventBus.js"],"names":["isFunction","isArray","isNumber","bind","assign","FN_REF","DEFAULT_PRIORITY","slice","Array","prototype","EventBus","_listeners","on","_destroy","events","priority","callback","that","Error","actualCallback","self","listener","forEach","e","_addListener","once","event","wrappedCallback","off","apply","arguments","_removeListener","createEvent","data","InternalEvent","init","fire","type","listeners","returnValue","args","call","originalType","_invokeListeners","undefined","defaultPrevented","handleError","error","idx","cancelBubble","_invokeListener","invokeFunction","stopPropagation","preventDefault","console","stack","newListener","_getListeners","existingListener","splice","push","name","listenerCallback","length","fn"],"mappings":"AAAA,SACEA,UADF,EAEEC,OAFF,EAGEC,QAHF,EAIEC,IAJF,EAKEC,MALF,QAMO,UANP;AAQA,IAAIC,MAAM,GAAG,MAAb;AAEA,IAAIC,gBAAgB,GAAG,IAAvB;AAEA,IAAIC,KAAK,GAAGC,KAAK,CAACC,SAAN,CAAgBF,KAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASG,QAAT,GAAoB;AACjC,OAAKC,UAAL,GAAkB,EAAlB,CADiC,CAGjC;AACA;;AACA,OAAKC,EAAL,CAAQ,iBAAR,EAA2B,CAA3B,EAA8B,KAAKC,QAAnC,EAA6C,IAA7C;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,QAAQ,CAACD,SAAT,CAAmBG,EAAnB,GAAwB,UAASE,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,IAArC,EAA2C;AAEjEH,EAAAA,MAAM,GAAGb,OAAO,CAACa,MAAD,CAAP,GAAkBA,MAAlB,GAA2B,CAAEA,MAAF,CAApC;;AAEA,MAAId,UAAU,CAACe,QAAD,CAAd,EAA0B;AACxBE,IAAAA,IAAI,GAAGD,QAAP;AACAA,IAAAA,QAAQ,GAAGD,QAAX;AACAA,IAAAA,QAAQ,GAAGT,gBAAX;AACD;;AAED,MAAI,CAACJ,QAAQ,CAACa,QAAD,CAAb,EAAyB;AACvB,UAAM,IAAIG,KAAJ,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","sourcesContent":["import {\n  isFunction,\n  isArray,\n  isNumber,\n  bind,\n  assign\n} from 'min-dash';\n\nvar FN_REF = '__fn';\n\nvar DEFAULT_PRIORITY = 1000;\n\nvar slice = Array.prototype.slice;\n\n/**\n * A general purpose event bus.\n *\n * This component is used to communicate across a diagram instance.\n * Other parts of a diagram can use it to listen to and broadcast events.\n *\n *\n * ## Registering for Events\n *\n * The event bus provides the {@link EventBus#on} and {@link EventBus#once}\n * methods to register for events. {@link EventBus#off} can be used to\n * remove event registrations. Listeners receive an instance of {@link Event}\n * as the first argument. It allows them to hook into the event execution.\n *\n * ```javascript\n *\n * // listen for event\n * eventBus.on('foo', function(event) {\n *\n *   // access event type\n *   event.type; // 'foo'\n *\n *   // stop propagation to other listeners\n *   event.stopPropagation();\n *\n *   // prevent event default\n *   event.preventDefault();\n * });\n *\n * // listen for event with custom payload\n * eventBus.on('bar', function(event, payload) {\n *   console.log(payload);\n * });\n *\n * // listen for event returning value\n * eventBus.on('foobar', function(event) {\n *\n *   // stop event propagation + prevent default\n *   return false;\n *\n *   // stop event propagation + return custom result\n *   return {\n *     complex: 'listening result'\n *   };\n * });\n *\n *\n * // listen with custom priority (default=1000, higher is better)\n * eventBus.on('priorityfoo', 1500, function(event) {\n *   console.log('invoked first!');\n * });\n *\n *\n * // listen for event and pass the context (`this`)\n * eventBus.on('foobar', function(event) {\n *   this.foo();\n * }, this);\n * ```\n *\n *\n * ## Emitting Events\n *\n * Events can be emitted via the event bus using {@link EventBus#fire}.\n *\n * ```javascript\n *\n * // false indicates that the default action\n * // was prevented by listeners\n * if (eventBus.fire('foo') === false) {\n *   console.log('default has been prevented!');\n * };\n *\n *\n * // custom args + return value listener\n * eventBus.on('sum', function(event, a, b) {\n *   return a + b;\n * });\n *\n * // you can pass custom arguments + retrieve result values.\n * var sum = eventBus.fire('sum', 1, 2);\n * console.log(sum); // 3\n * ```\n */\nexport default function EventBus() {\n  this._listeners = {};\n\n  // cleanup on destroy on lowest priority to allow\n  // message passing until the bitter end\n  this.on('diagram.destroy', 1, this._destroy, this);\n}\n\n\n/**\n * Register an event listener for events with the given name.\n *\n * The callback will be invoked with `event, ...additionalArguments`\n * that have been passed to {@link EventBus#fire}.\n *\n * Returning false from a listener will prevent the events default action\n * (if any is specified). To stop an event from being processed further in\n * other listeners execute {@link Event#stopPropagation}.\n *\n * Returning anything but `undefined` from a listener will stop the listener propagation.\n *\n * @param {String|Array<String>} events\n * @param {Number} [priority=1000] the priority in which this listener is called, larger is higher\n * @param {Function} callback\n * @param {Object} [that] Pass context (`this`) to the callback\n */\nEventBus.prototype.on = function(events, priority, callback, that) {\n\n  events = isArray(events) ? events : [ events ];\n\n  if (isFunction(priority)) {\n    that = callback;\n    callback = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  if (!isNumber(priority)) {\n    throw new Error('priority must be a number');\n  }\n\n  var actualCallback = callback;\n\n  if (that) {\n    actualCallback = bind(callback, that);\n\n    // make sure we remember and are able to remove\n    // bound callbacks via {@link #off} using the original\n    // callback\n    actualCallback[FN_REF] = callback[FN_REF] || callback;\n  }\n\n  var self = this,\n      listener = { priority: priority, callback: actualCallback };\n\n  events.forEach(function(e) {\n    self._addListener(e, listener);\n  });\n};\n\n\n/**\n * Register an event listener that is executed only once.\n *\n * @param {String} event the event name to register for\n * @param {Function} callback the callback to execute\n * @param {Object} [that] Pass context (`this`) to the callback\n */\nEventBus.prototype.once = function(event, priority, callback, that) {\n  var self = this;\n\n  if (isFunction(priority)) {\n    that = callback;\n    callback = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  if (!isNumber(priority)) {\n    throw new Error('priority must be a number');\n  }\n\n  function wrappedCallback() {\n    self.off(event, wrappedCallback);\n    return callback.apply(that, arguments);\n  }\n\n  // make sure we remember and are able to remove\n  // bound callbacks via {@link #off} using the original\n  // callback\n  wrappedCallback[FN_REF] = callback;\n\n  this.on(event, priority, wrappedCallback);\n};\n\n\n/**\n * Removes event listeners by event and callback.\n *\n * If no callback is given, all listeners for a given event name are being removed.\n *\n * @param {String|Array<String>} events\n * @param {Function} [callback]\n */\nEventBus.prototype.off = function(events, callback) {\n\n  events = isArray(events) ? events : [ events ];\n\n  var self = this;\n\n  events.forEach(function(event) {\n    self._removeListener(event, callback);\n  });\n\n};\n\n\n/**\n * Create an EventBus event.\n *\n * @param {Object} data\n *\n * @return {Object} event, recognized by the eventBus\n */\nEventBus.prototype.createEvent = function(data) {\n  var event = new InternalEvent();\n\n  event.init(data);\n\n  return event;\n};\n\n\n/**\n * Fires a named event.\n *\n * @example\n *\n * // fire event by name\n * events.fire('foo');\n *\n * // fire event object with nested type\n * var event = { type: 'foo' };\n * events.fire(event);\n *\n * // fire event with explicit type\n * var event = { x: 10, y: 20 };\n * events.fire('element.moved', event);\n *\n * // pass additional arguments to the event\n * events.on('foo', function(event, bar) {\n *   alert(bar);\n * });\n *\n * events.fire({ type: 'foo' }, 'I am bar!');\n *\n * @param {String} [name] the optional event name\n * @param {Object} [event] the event object\n * @param {...Object} additional arguments to be passed to the callback functions\n *\n * @return {Boolean} the events return value, if specified or false if the\n *                   default action was prevented by listeners\n */\nEventBus.prototype.fire = function(type, data) {\n\n  var event,\n      listeners,\n      returnValue,\n      args;\n\n  args = slice.call(arguments);\n\n  if (typeof type === 'object') {\n    event = type;\n    type = event.type;\n  }\n\n  if (!type) {\n    throw new Error('no event type specified');\n  }\n\n  listeners = this._listeners[type];\n\n  if (!listeners) {\n    return;\n  }\n\n  // we make sure we fire instances of our home made\n  // events here. We wrap them only once, though\n  if (data instanceof InternalEvent) {\n    // we are fine, we alread have an event\n    event = data;\n  } else {\n    event = this.createEvent(data);\n  }\n\n  // ensure we pass the event as the first parameter\n  args[0] = event;\n\n  // original event type (in case we delegate)\n  var originalType = event.type;\n\n  // update event type before delegation\n  if (type !== originalType) {\n    event.type = type;\n  }\n\n  try {\n    returnValue = this._invokeListeners(event, args, listeners);\n  } finally {\n    // reset event type after delegation\n    if (type !== originalType) {\n      event.type = originalType;\n    }\n  }\n\n  // set the return value to false if the event default\n  // got prevented and no other return value exists\n  if (returnValue === undefined && event.defaultPrevented) {\n    returnValue = false;\n  }\n\n  return returnValue;\n};\n\n\nEventBus.prototype.handleError = function(error) {\n  return this.fire('error', { error: error }) === false;\n};\n\n\nEventBus.prototype._destroy = function() {\n  this._listeners = {};\n};\n\nEventBus.prototype._invokeListeners = function(event, args, listeners) {\n\n  var idx,\n      listener,\n      returnValue;\n\n  for (idx = 0; (listener = listeners[idx]); idx++) {\n\n    // handle stopped propagation\n    if (event.cancelBubble) {\n      break;\n    }\n\n    returnValue = this._invokeListener(event, args, listener);\n  }\n\n  return returnValue;\n};\n\nEventBus.prototype._invokeListener = function(event, args, listener) {\n\n  var returnValue;\n\n  try {\n    // returning false prevents the default action\n    returnValue = invokeFunction(listener.callback, args);\n\n    // stop propagation on return value\n    if (returnValue !== undefined) {\n      event.returnValue = returnValue;\n      event.stopPropagation();\n    }\n\n    // prevent default on return false\n    if (returnValue === false) {\n      event.preventDefault();\n    }\n  } catch (e) {\n    if (!this.handleError(e)) {\n      console.error('unhandled error in event listener');\n      console.error(e.stack);\n\n      throw e;\n    }\n  }\n\n  return returnValue;\n};\n\n/*\n * Add new listener with a certain priority to the list\n * of listeners (for the given event).\n *\n * The semantics of listener registration / listener execution are\n * first register, first serve: New listeners will always be inserted\n * after existing listeners with the same priority.\n *\n * Example: Inserting two listeners with priority 1000 and 1300\n *\n *    * before: [ 1500, 1500, 1000, 1000 ]\n *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]\n *\n * @param {String} event\n * @param {Object} listener { priority, callback }\n */\nEventBus.prototype._addListener = function(event, newListener) {\n\n  var listeners = this._getListeners(event),\n      existingListener,\n      idx;\n\n  // ensure we order listeners by priority from\n  // 0 (high) to n > 0 (low)\n  for (idx = 0; (existingListener = listeners[idx]); idx++) {\n    if (existingListener.priority < newListener.priority) {\n\n      // prepend newListener at before existingListener\n      listeners.splice(idx, 0, newListener);\n      return;\n    }\n  }\n\n  listeners.push(newListener);\n};\n\n\nEventBus.prototype._getListeners = function(name) {\n  var listeners = this._listeners[name];\n\n  if (!listeners) {\n    this._listeners[name] = listeners = [];\n  }\n\n  return listeners;\n};\n\n\nEventBus.prototype._removeListener = function(event, callback) {\n\n  var listeners = this._getListeners(event),\n      listener,\n      listenerCallback,\n      idx;\n\n  if (callback) {\n\n    // move through listeners from back to front\n    // and remove matching listeners\n    for (idx = listeners.length - 1; (listener = listeners[idx]); idx--) {\n      listenerCallback = listener.callback;\n\n      if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {\n        listeners.splice(idx, 1);\n      }\n    }\n  } else {\n    // clear listeners\n    listeners.length = 0;\n  }\n};\n\n\n/**\n * A event that is emitted via the event bus.\n */\nfunction InternalEvent() { }\n\nInternalEvent.prototype.stopPropagation = function() {\n  this.cancelBubble = true;\n};\n\nInternalEvent.prototype.preventDefault = function() {\n  this.defaultPrevented = true;\n};\n\nInternalEvent.prototype.init = function(data) {\n  assign(this, data || {});\n};\n\n\n/**\n * Invoke function. Be fast...\n *\n * @param {Function} fn\n * @param {Array<Object>} args\n *\n * @return {Any}\n */\nfunction invokeFunction(fn, args) {\n  return fn.apply(null, args);\n}\n"]},"metadata":{},"sourceType":"module"}