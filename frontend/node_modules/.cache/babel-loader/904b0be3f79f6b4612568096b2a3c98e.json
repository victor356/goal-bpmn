{"ast":null,"code":"import { forEach, reduce } from 'min-dash';\nimport { getChildren, getVisual } from '../util/GraphicsUtil';\nimport { translate } from '../util/SvgTransformUtil';\nimport { clear as domClear } from 'min-dom';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, create as svgCreate, remove as svgRemove } from 'tiny-svg';\n/**\n * A factory that creates graphical elements\n *\n * @param {EventBus} eventBus\n * @param {ElementRegistry} elementRegistry\n */\n\nexport default function GraphicsFactory(eventBus, elementRegistry) {\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n}\nGraphicsFactory.$inject = ['eventBus', 'elementRegistry'];\n\nGraphicsFactory.prototype._getChildren = function (element) {\n  var gfx = this._elementRegistry.getGraphics(element);\n\n  var childrenGfx; // root element\n\n  if (!element.parent) {\n    childrenGfx = gfx;\n  } else {\n    childrenGfx = getChildren(gfx);\n\n    if (!childrenGfx) {\n      childrenGfx = svgCreate('g');\n      svgClasses(childrenGfx).add('djs-children');\n      svgAppend(gfx.parentNode, childrenGfx);\n    }\n  }\n\n  return childrenGfx;\n};\n/**\n * Clears the graphical representation of the element and returns the\n * cleared visual (the <g class=\"djs-visual\" /> element).\n */\n\n\nGraphicsFactory.prototype._clear = function (gfx) {\n  var visual = getVisual(gfx);\n  domClear(visual);\n  return visual;\n};\n/**\n * Creates a gfx container for shapes and connections\n *\n * The layout is as follows:\n *\n * <g class=\"djs-group\">\n *\n *   <!-- the gfx -->\n *   <g class=\"djs-element djs-(shape|connection)\">\n *     <g class=\"djs-visual\">\n *       <!-- the renderer draws in here -->\n *     </g>\n *\n *     <!-- extensions (overlays, click box, ...) goes here\n *   </g>\n *\n *   <!-- the gfx child nodes -->\n *   <g class=\"djs-children\"></g>\n * </g>\n *\n * @param {Object} parent\n * @param {String} type the type of the element, i.e. shape | connection\n * @param {Number} [parentIndex] position to create container in parent\n */\n\n\nGraphicsFactory.prototype._createContainer = function (type, childrenGfx, parentIndex) {\n  var outerGfx = svgCreate('g');\n  svgClasses(outerGfx).add('djs-group'); // insert node at position\n\n  if (typeof parentIndex !== 'undefined') {\n    prependTo(outerGfx, childrenGfx, childrenGfx.childNodes[parentIndex]);\n  } else {\n    svgAppend(childrenGfx, outerGfx);\n  }\n\n  var gfx = svgCreate('g');\n  svgClasses(gfx).add('djs-element');\n  svgClasses(gfx).add('djs-' + type);\n  svgAppend(outerGfx, gfx); // create visual\n\n  var visual = svgCreate('g');\n  svgClasses(visual).add('djs-visual');\n  svgAppend(gfx, visual);\n  return gfx;\n};\n\nGraphicsFactory.prototype.create = function (type, element, parentIndex) {\n  var childrenGfx = this._getChildren(element.parent);\n\n  return this._createContainer(type, childrenGfx, parentIndex);\n};\n\nGraphicsFactory.prototype.updateContainments = function (elements) {\n  var self = this,\n      elementRegistry = this._elementRegistry,\n      parents;\n  parents = reduce(elements, function (map, e) {\n    if (e.parent) {\n      map[e.parent.id] = e.parent;\n    }\n\n    return map;\n  }, {}); // update all parents of changed and reorganized their children\n  // in the correct order (as indicated in our model)\n\n  forEach(parents, function (parent) {\n    var children = parent.children;\n\n    if (!children) {\n      return;\n    }\n\n    var childGfx = self._getChildren(parent);\n\n    forEach(children.slice().reverse(), function (c) {\n      var gfx = elementRegistry.getGraphics(c);\n      prependTo(gfx.parentNode, childGfx);\n    });\n  });\n};\n\nGraphicsFactory.prototype.drawShape = function (visual, element) {\n  var eventBus = this._eventBus;\n  return eventBus.fire('render.shape', {\n    gfx: visual,\n    element: element\n  });\n};\n\nGraphicsFactory.prototype.getShapePath = function (element) {\n  var eventBus = this._eventBus;\n  return eventBus.fire('render.getShapePath', element);\n};\n\nGraphicsFactory.prototype.drawConnection = function (visual, element) {\n  var eventBus = this._eventBus;\n  return eventBus.fire('render.connection', {\n    gfx: visual,\n    element: element\n  });\n};\n\nGraphicsFactory.prototype.getConnectionPath = function (waypoints) {\n  var eventBus = this._eventBus;\n  return eventBus.fire('render.getConnectionPath', waypoints);\n};\n\nGraphicsFactory.prototype.update = function (type, element, gfx) {\n  // Do not update root element\n  if (!element.parent) {\n    return;\n  }\n\n  var visual = this._clear(gfx); // redraw\n\n\n  if (type === 'shape') {\n    this.drawShape(visual, element); // update positioning\n\n    translate(gfx, element.x, element.y);\n  } else if (type === 'connection') {\n    this.drawConnection(visual, element);\n  } else {\n    throw new Error('unknown type: ' + type);\n  }\n\n  if (element.hidden) {\n    svgAttr(gfx, 'display', 'none');\n  } else {\n    svgAttr(gfx, 'display', 'block');\n  }\n};\n\nGraphicsFactory.prototype.remove = function (element) {\n  var gfx = this._elementRegistry.getGraphics(element); // remove\n\n\n  svgRemove(gfx.parentNode);\n}; // helpers //////////////////////\n\n\nfunction prependTo(newNode, parentNode, siblingNode) {\n  parentNode.insertBefore(newNode, siblingNode || parentNode.firstChild);\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/core/GraphicsFactory.js"],"names":["forEach","reduce","getChildren","getVisual","translate","clear","domClear","append","svgAppend","attr","svgAttr","classes","svgClasses","create","svgCreate","remove","svgRemove","GraphicsFactory","eventBus","elementRegistry","_eventBus","_elementRegistry","$inject","prototype","_getChildren","element","gfx","getGraphics","childrenGfx","parent","add","parentNode","_clear","visual","_createContainer","type","parentIndex","outerGfx","prependTo","childNodes","updateContainments","elements","self","parents","map","e","id","children","childGfx","slice","reverse","c","drawShape","fire","getShapePath","drawConnection","getConnectionPath","waypoints","update","x","y","Error","hidden","newNode","siblingNode","insertBefore","firstChild"],"mappings":"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","sourcesContent":["import {\n  forEach,\n  reduce\n} from 'min-dash';\n\nimport {\n  getChildren,\n  getVisual\n} from '../util/GraphicsUtil';\n\nimport { translate } from '../util/SvgTransformUtil';\n\nimport { clear as domClear } from 'min-dom';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  classes as svgClasses,\n  create as svgCreate,\n  remove as svgRemove\n} from 'tiny-svg';\n\n\n/**\n * A factory that creates graphical elements\n *\n * @param {EventBus} eventBus\n * @param {ElementRegistry} elementRegistry\n */\nexport default function GraphicsFactory(eventBus, elementRegistry) {\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n}\n\nGraphicsFactory.$inject = [ 'eventBus' , 'elementRegistry' ];\n\n\nGraphicsFactory.prototype._getChildren = function(element) {\n\n  var gfx = this._elementRegistry.getGraphics(element);\n\n  var childrenGfx;\n\n  // root element\n  if (!element.parent) {\n    childrenGfx = gfx;\n  } else {\n    childrenGfx = getChildren(gfx);\n    if (!childrenGfx) {\n      childrenGfx = svgCreate('g');\n      svgClasses(childrenGfx).add('djs-children');\n\n      svgAppend(gfx.parentNode, childrenGfx);\n    }\n  }\n\n  return childrenGfx;\n};\n\n/**\n * Clears the graphical representation of the element and returns the\n * cleared visual (the <g class=\"djs-visual\" /> element).\n */\nGraphicsFactory.prototype._clear = function(gfx) {\n  var visual = getVisual(gfx);\n\n  domClear(visual);\n\n  return visual;\n};\n\n/**\n * Creates a gfx container for shapes and connections\n *\n * The layout is as follows:\n *\n * <g class=\"djs-group\">\n *\n *   <!-- the gfx -->\n *   <g class=\"djs-element djs-(shape|connection)\">\n *     <g class=\"djs-visual\">\n *       <!-- the renderer draws in here -->\n *     </g>\n *\n *     <!-- extensions (overlays, click box, ...) goes here\n *   </g>\n *\n *   <!-- the gfx child nodes -->\n *   <g class=\"djs-children\"></g>\n * </g>\n *\n * @param {Object} parent\n * @param {String} type the type of the element, i.e. shape | connection\n * @param {Number} [parentIndex] position to create container in parent\n */\nGraphicsFactory.prototype._createContainer = function(type, childrenGfx, parentIndex) {\n  var outerGfx = svgCreate('g');\n  svgClasses(outerGfx).add('djs-group');\n\n  // insert node at position\n  if (typeof parentIndex !== 'undefined') {\n    prependTo(outerGfx, childrenGfx, childrenGfx.childNodes[parentIndex]);\n  } else {\n    svgAppend(childrenGfx, outerGfx);\n  }\n\n  var gfx = svgCreate('g');\n  svgClasses(gfx).add('djs-element');\n  svgClasses(gfx).add('djs-' + type);\n\n  svgAppend(outerGfx, gfx);\n\n  // create visual\n  var visual = svgCreate('g');\n  svgClasses(visual).add('djs-visual');\n\n  svgAppend(gfx, visual);\n\n  return gfx;\n};\n\nGraphicsFactory.prototype.create = function(type, element, parentIndex) {\n  var childrenGfx = this._getChildren(element.parent);\n  return this._createContainer(type, childrenGfx, parentIndex);\n};\n\nGraphicsFactory.prototype.updateContainments = function(elements) {\n\n  var self = this,\n      elementRegistry = this._elementRegistry,\n      parents;\n\n  parents = reduce(elements, function(map, e) {\n\n    if (e.parent) {\n      map[e.parent.id] = e.parent;\n    }\n\n    return map;\n  }, {});\n\n  // update all parents of changed and reorganized their children\n  // in the correct order (as indicated in our model)\n  forEach(parents, function(parent) {\n\n    var children = parent.children;\n\n    if (!children) {\n      return;\n    }\n\n    var childGfx = self._getChildren(parent);\n\n    forEach(children.slice().reverse(), function(c) {\n      var gfx = elementRegistry.getGraphics(c);\n\n      prependTo(gfx.parentNode, childGfx);\n    });\n  });\n};\n\nGraphicsFactory.prototype.drawShape = function(visual, element) {\n  var eventBus = this._eventBus;\n\n  return eventBus.fire('render.shape', { gfx: visual, element: element });\n};\n\nGraphicsFactory.prototype.getShapePath = function(element) {\n  var eventBus = this._eventBus;\n\n  return eventBus.fire('render.getShapePath', element);\n};\n\nGraphicsFactory.prototype.drawConnection = function(visual, element) {\n  var eventBus = this._eventBus;\n\n  return eventBus.fire('render.connection', { gfx: visual, element: element });\n};\n\nGraphicsFactory.prototype.getConnectionPath = function(waypoints) {\n  var eventBus = this._eventBus;\n\n  return eventBus.fire('render.getConnectionPath', waypoints);\n};\n\nGraphicsFactory.prototype.update = function(type, element, gfx) {\n  // Do not update root element\n  if (!element.parent) {\n    return;\n  }\n\n  var visual = this._clear(gfx);\n\n  // redraw\n  if (type === 'shape') {\n    this.drawShape(visual, element);\n\n    // update positioning\n    translate(gfx, element.x, element.y);\n  } else\n  if (type === 'connection') {\n    this.drawConnection(visual, element);\n  } else {\n    throw new Error('unknown type: ' + type);\n  }\n\n  if (element.hidden) {\n    svgAttr(gfx, 'display', 'none');\n  } else {\n    svgAttr(gfx, 'display', 'block');\n  }\n};\n\nGraphicsFactory.prototype.remove = function(element) {\n  var gfx = this._elementRegistry.getGraphics(element);\n\n  // remove\n  svgRemove(gfx.parentNode);\n};\n\n\n// helpers //////////////////////\n\nfunction prependTo(newNode, parentNode, siblingNode) {\n  parentNode.insertBefore(newNode, siblingNode || parentNode.firstChild);\n}\n"]},"metadata":{},"sourceType":"module"}