{"ast":null,"code":"import { hasPrimaryModifier } from '../../util/Mouse';\nvar HIGH_PRIORITY = 1500;\nvar HAND_CURSOR = 'grab';\nexport default function HandTool(eventBus, canvas, dragging, toolManager) {\n  this._dragging = dragging;\n  toolManager.registerTool('hand', {\n    tool: 'hand',\n    dragging: 'hand.move'\n  });\n  eventBus.on('element.mousedown', HIGH_PRIORITY, function (event) {\n    if (hasPrimaryModifier(event)) {\n      this.activateMove(event.originalEvent);\n      return false;\n    }\n  }, this);\n  eventBus.on('hand.end', function (event) {\n    var target = event.originalEvent.target; // only reactive on diagram click\n    // on some occasions, event.hover is not set and we have to check if the target is an svg\n\n    if (!event.hover && !(target instanceof SVGElement)) {\n      return false;\n    }\n\n    eventBus.once('hand.ended', function () {\n      this.activateMove(event.originalEvent, {\n        reactivate: true\n      });\n    }, this);\n  }, this);\n  eventBus.on('hand.move.move', function (event) {\n    var scale = canvas.viewbox().scale;\n    canvas.scroll({\n      dx: event.dx * scale,\n      dy: event.dy * scale\n    });\n  });\n  eventBus.on('hand.move.end', function (event) {\n    var context = event.context,\n        reactivate = context.reactivate; // Don't reactivate if the user is using the keyboard keybinding\n\n    if (!hasPrimaryModifier(event) && reactivate) {\n      eventBus.once('hand.move.ended', function (event) {\n        this.activateHand(event.originalEvent, true, true);\n      }, this);\n    }\n\n    return false;\n  }, this);\n}\nHandTool.$inject = ['eventBus', 'canvas', 'dragging', 'toolManager'];\n\nHandTool.prototype.activateMove = function (event, autoActivate, context) {\n  if (typeof autoActivate === 'object') {\n    context = autoActivate;\n    autoActivate = false;\n  }\n\n  this._dragging.init(event, 'hand.move', {\n    autoActivate: autoActivate,\n    cursor: HAND_CURSOR,\n    data: {\n      context: context || {}\n    }\n  });\n};\n\nHandTool.prototype.activateHand = function (event, autoActivate, reactivate) {\n  this._dragging.init(event, 'hand', {\n    trapClick: false,\n    autoActivate: autoActivate,\n    cursor: HAND_CURSOR,\n    data: {\n      context: {\n        reactivate: reactivate\n      }\n    }\n  });\n};\n\nHandTool.prototype.toggle = function () {\n  if (this.isActive()) {\n    this._dragging.cancel();\n  } else {\n    this.activateHand();\n  }\n};\n\nHandTool.prototype.isActive = function () {\n  var context = this._dragging.context();\n\n  return context && /^hand/.test(context.prefix);\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/features/hand-tool/HandTool.js"],"names":["hasPrimaryModifier","HIGH_PRIORITY","HAND_CURSOR","HandTool","eventBus","canvas","dragging","toolManager","_dragging","registerTool","tool","on","event","activateMove","originalEvent","target","hover","SVGElement","once","reactivate","scale","viewbox","scroll","dx","dy","context","activateHand","$inject","prototype","autoActivate","init","cursor","data","trapClick","toggle","isActive","cancel","test","prefix"],"mappings":"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","sourcesContent":["import { hasPrimaryModifier } from '../../util/Mouse';\n\nvar HIGH_PRIORITY = 1500;\nvar HAND_CURSOR = 'grab';\n\n\nexport default function HandTool(eventBus, canvas, dragging, toolManager) {\n  this._dragging = dragging;\n\n\n  toolManager.registerTool('hand', {\n    tool: 'hand',\n    dragging: 'hand.move'\n  });\n\n  eventBus.on('element.mousedown', HIGH_PRIORITY, function(event) {\n    if (hasPrimaryModifier(event)) {\n      this.activateMove(event.originalEvent);\n\n      return false;\n    }\n  }, this);\n\n\n  eventBus.on('hand.end', function(event) {\n    var target = event.originalEvent.target;\n\n    // only reactive on diagram click\n    // on some occasions, event.hover is not set and we have to check if the target is an svg\n    if (!event.hover && !(target instanceof SVGElement)) {\n      return false;\n    }\n\n    eventBus.once('hand.ended', function() {\n      this.activateMove(event.originalEvent, { reactivate: true });\n    }, this);\n\n  }, this);\n\n\n  eventBus.on('hand.move.move', function(event) {\n    var scale = canvas.viewbox().scale;\n\n    canvas.scroll({\n      dx: event.dx * scale,\n      dy: event.dy * scale\n    });\n  });\n\n  eventBus.on('hand.move.end', function(event) {\n    var context = event.context,\n        reactivate = context.reactivate;\n\n    // Don't reactivate if the user is using the keyboard keybinding\n    if (!hasPrimaryModifier(event) && reactivate) {\n\n      eventBus.once('hand.move.ended', function(event) {\n        this.activateHand(event.originalEvent, true, true);\n      }, this);\n\n    }\n\n    return false;\n  }, this);\n\n}\n\nHandTool.$inject = [\n  'eventBus',\n  'canvas',\n  'dragging',\n  'toolManager'\n];\n\n\nHandTool.prototype.activateMove = function(event, autoActivate, context) {\n  if (typeof autoActivate === 'object') {\n    context = autoActivate;\n    autoActivate = false;\n  }\n\n  this._dragging.init(event, 'hand.move', {\n    autoActivate: autoActivate,\n    cursor: HAND_CURSOR,\n    data: {\n      context: context || {}\n    }\n  });\n};\n\nHandTool.prototype.activateHand = function(event, autoActivate, reactivate) {\n  this._dragging.init(event, 'hand', {\n    trapClick: false,\n    autoActivate: autoActivate,\n    cursor: HAND_CURSOR,\n    data: {\n      context: {\n        reactivate: reactivate\n      }\n    }\n  });\n};\n\nHandTool.prototype.toggle = function() {\n  if (this.isActive()) {\n    this._dragging.cancel();\n  } else {\n    this.activateHand();\n  }\n};\n\nHandTool.prototype.isActive = function() {\n  var context = this._dragging.context();\n\n  return context && /^hand/.test(context.prefix);\n};\n"]},"metadata":{},"sourceType":"module"}