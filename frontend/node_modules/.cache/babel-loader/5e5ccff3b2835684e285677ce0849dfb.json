{"ast":null,"code":"import { setLabel, getLabel } from '../LabelUtil';\nimport { getExternalLabelMid, isLabelExternal, hasExternalLabel, isLabel } from '../../../util/LabelUtil';\nimport { getBusinessObject, is } from '../../../util/ModelUtil';\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n/**\n * A handler that updates the text of a BPMN element.\n */\n\nexport default function UpdateLabelHandler(modeling, textRenderer) {\n  /**\n   * Set the label and return the changed elements.\n   *\n   * Element parameter can be label itself or connection (i.e. sequence flow).\n   *\n   * @param {djs.model.Base} element\n   * @param {String} text\n   */\n  function setText(element, text) {\n    // external label if present\n    var label = element.label || element;\n    var labelTarget = element.labelTarget || element;\n    setLabel(label, text, labelTarget !== label);\n    return [label, labelTarget];\n  }\n\n  function preExecute(ctx) {\n    var element = ctx.element,\n        businessObject = element.businessObject,\n        newLabel = ctx.newLabel;\n\n    if (!isLabel(element) && isLabelExternal(element) && !hasExternalLabel(element) && !isEmptyText(newLabel)) {\n      // create label\n      var paddingTop = 7;\n      var labelCenter = getExternalLabelMid(element);\n      labelCenter = {\n        x: labelCenter.x,\n        y: labelCenter.y + paddingTop\n      };\n      modeling.createLabel(element, labelCenter, {\n        id: businessObject.id + '_label',\n        businessObject: businessObject\n      });\n    }\n  }\n\n  function execute(ctx) {\n    ctx.oldLabel = getLabel(ctx.element);\n    return setText(ctx.element, ctx.newLabel);\n  }\n\n  function revert(ctx) {\n    return setText(ctx.element, ctx.oldLabel);\n  }\n\n  function postExecute(ctx) {\n    var element = ctx.element,\n        label = element.label || element,\n        newLabel = ctx.newLabel,\n        newBounds = ctx.newBounds,\n        hints = ctx.hints || {};\n\n    if (isLabel(label) && isEmptyText(newLabel)) {\n      if (hints.removeShape !== false) {\n        modeling.removeShape(label, {\n          unsetLabel: false\n        });\n      }\n\n      return;\n    } // ignore internal labels for elements except text annotations\n\n\n    if (!isLabelExternal(element) && !is(element, 'bpmn:TextAnnotation')) {\n      return;\n    }\n\n    var bo = getBusinessObject(label);\n    var text = bo.name || bo.text; // don't resize without text\n\n    if (!text) {\n      return;\n    } // resize element based on label _or_ pre-defined bounds\n\n\n    if (typeof newBounds === 'undefined') {\n      newBounds = textRenderer.getExternalLabelBounds(label, text);\n    } // setting newBounds to false or _null_ will\n    // disable the postExecute resize operation\n\n\n    if (newBounds) {\n      modeling.resizeShape(label, newBounds, NULL_DIMENSIONS);\n    }\n  } // API\n\n\n  this.preExecute = preExecute;\n  this.execute = execute;\n  this.revert = revert;\n  this.postExecute = postExecute;\n}\nUpdateLabelHandler.$inject = ['modeling', 'textRenderer']; // helpers ///////////////////////\n\nfunction isEmptyText(label) {\n  return !label || !label.trim();\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/features/label-editing/cmd/UpdateLabelHandler.js"],"names":["setLabel","getLabel","getExternalLabelMid","isLabelExternal","hasExternalLabel","isLabel","getBusinessObject","is","NULL_DIMENSIONS","width","height","UpdateLabelHandler","modeling","textRenderer","setText","element","text","label","labelTarget","preExecute","ctx","businessObject","newLabel","isEmptyText","paddingTop","labelCenter","x","y","createLabel","id","execute","oldLabel","revert","postExecute","newBounds","hints","removeShape","unsetLabel","bo","name","getExternalLabelBounds","resizeShape","$inject","trim"],"mappings":"AAAA,SACEA,QADF,EAEEC,QAFF,QAGO,cAHP;AAKA,SACEC,mBADF,EAEEC,eAFF,EAGEC,gBAHF,EAIEC,OAJF,QAKO,yBALP;AAOA,SACEC,iBADF,EAEEC,EAFF,QAGO,yBAHP;AAKA,IAAIC,eAAe,GAAG;AACpBC,EAAAA,KAAK,EAAE,CADa;AAEpBC,EAAAA,MAAM,EAAE;AAFY,CAAtB;AAMA;AACA;AACA;;AACA,eAAe,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,YAAtC,EAAoD;AAEjE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,WAASC,OAAT,CAAiBC,OAAjB,EAA0BC,IAA1B,EAAgC;AAE9B;AACA,QAAIC,KAAK,GAAGF,OAAO,CAACE,KAAR,IAAiBF,OAA7B;AAEA,QAAIG,WAAW,GAAGH,OAAO,CAACG,WAAR,IAAuBH,OAAzC;AAEAf,IAAAA,QAAQ,CAACiB,KAAD,EAAQD,IAAR,EAAcE,WAAW,KAAKD,KAA9B,CAAR;AAEA,WAAO,CAAEA,KAAF,EAASC,WAAT,CAAP;AACD;;AAED,WAASC,UAAT,CAAoBC,GAApB,EAAyB;AACvB,QAAIL,OAAO,GAAGK,GAAG,CAACL,OAAlB;AAAA,QACIM,cAAc,GAAGN,OAAO,CAACM,cAD7B;AAAA,QAEIC,QAAQ,GAAGF,GAAG,CAACE,QAFnB;;AAIA,QAAI,CAACjB,OAAO,CAACU,OAAD,CAAR,IACGZ,eAAe,CAACY,OAAD,CADlB,IAEG,CAACX,gBAAgB,CAACW,OAAD,CAFpB,IAGG,CAACQ,WAAW,CAACD,QAAD,CAHnB,EAG+B;AAE7B;AACA,UAAIE,UAAU,GAAG,CAAjB;AAEA,UAAIC,WAAW,GAAGvB,mBAAmB,CAACa,OAAD,CAArC;AAEAU,MAAAA,WAAW,GAAG;AACZC,QAAAA,CAAC,EAAED,WAAW,CAACC,CADH;AAEZC,QAAAA,CAAC,EAAEF,WAAW,CAACE,CAAZ,GAAgBH;AAFP,OAAd;AAKAZ,MAAAA,QAAQ,CAACgB,WAAT,CAAqBb,OAArB,EAA8BU,WAA9B,EAA2C;AACzCI,QAAAA,EAAE,EAAER,cAAc,CAACQ,EAAf,GAAoB,QADiB;AAEzCR,QAAAA,cAAc,EAAEA;AAFyB,OAA3C;AAID;AACF;;AAED,WAASS,OAAT,CAAiBV,GAAjB,EAAsB;AACpBA,IAAAA,GAAG,CAACW,QAAJ,GAAe9B,QAAQ,CAACmB,GAAG,CAACL,OAAL,CAAvB;AACA,WAAOD,OAAO,CAACM,GAAG,CAACL,OAAL,EAAcK,GAAG,CAACE,QAAlB,CAAd;AACD;;AAED,WAASU,MAAT,CAAgBZ,GAAhB,EAAqB;AACnB,WAAON,OAAO,CAACM,GAAG,CAACL,OAAL,EAAcK,GAAG,CAACW,QAAlB,CAAd;AACD;;AAED,WAASE,WAAT,CAAqBb,GAArB,EAA0B;AACxB,QAAIL,OAAO,GAAGK,GAAG,CAACL,OAAlB;AAAA,QACIE,KAAK,GAAGF,OAAO,CAACE,KAAR,IAAiBF,OAD7B;AAAA,QAEIO,QAAQ,GAAGF,GAAG,CAACE,QAFnB;AAAA,QAGIY,SAAS,GAAGd,GAAG,CAACc,SAHpB;AAAA,QAIIC,KAAK,GAAGf,GAAG,CAACe,KAAJ,IAAa,EAJzB;;AAMA,QAAI9B,OAAO,CAACY,KAAD,CAAP,IAAkBM,WAAW,CAACD,QAAD,CAAjC,EAA6C;AAE3C,UAAIa,KAAK,CAACC,WAAN,KAAsB,KAA1B,EAAiC;AAC/BxB,QAAAA,QAAQ,CAACwB,WAAT,CAAqBnB,KAArB,EAA4B;AAAEoB,UAAAA,UAAU,EAAE;AAAd,SAA5B;AACD;;AAED;AACD,KAduB,CAgBxB;;;AACA,QAAI,CAAClC,eAAe,CAACY,OAAD,CAAhB,IAA6B,CAACR,EAAE,CAACQ,OAAD,EAAU,qBAAV,CAApC,EAAsE;AACpE;AACD;;AAED,QAAIuB,EAAE,GAAGhC,iBAAiB,CAACW,KAAD,CAA1B;AAEA,QAAID,IAAI,GAAGsB,EAAE,CAACC,IAAH,IAAWD,EAAE,CAACtB,IAAzB,CAvBwB,CAyBxB;;AACA,QAAI,CAACA,IAAL,EAAW;AACT;AACD,KA5BuB,CA8BxB;;;AACA,QAAI,OAAOkB,SAAP,KAAqB,WAAzB,EAAsC;AACpCA,MAAAA,SAAS,GAAGrB,YAAY,CAAC2B,sBAAb,CAAoCvB,KAApC,EAA2CD,IAA3C,CAAZ;AACD,KAjCuB,CAmCxB;AACA;;;AACA,QAAIkB,SAAJ,EAAe;AACbtB,MAAAA,QAAQ,CAAC6B,WAAT,CAAqBxB,KAArB,EAA4BiB,SAA5B,EAAuC1B,eAAvC;AACD;AACF,GAlGgE,CAoGjE;;;AAEA,OAAKW,UAAL,GAAkBA,UAAlB;AACA,OAAKW,OAAL,GAAeA,OAAf;AACA,OAAKE,MAAL,GAAcA,MAAd;AACA,OAAKC,WAAL,GAAmBA,WAAnB;AACD;AAEDtB,kBAAkB,CAAC+B,OAAnB,GAA6B,CAC3B,UAD2B,EAE3B,cAF2B,CAA7B,C,CAMA;;AAEA,SAASnB,WAAT,CAAqBN,KAArB,EAA4B;AAC1B,SAAO,CAACA,KAAD,IAAU,CAACA,KAAK,CAAC0B,IAAN,EAAlB;AACD","sourcesContent":["import {\n  setLabel,\n  getLabel\n} from '../LabelUtil';\n\nimport {\n  getExternalLabelMid,\n  isLabelExternal,\n  hasExternalLabel,\n  isLabel\n} from '../../../util/LabelUtil';\n\nimport {\n  getBusinessObject,\n  is\n} from '../../../util/ModelUtil';\n\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n\n/**\n * A handler that updates the text of a BPMN element.\n */\nexport default function UpdateLabelHandler(modeling, textRenderer) {\n\n  /**\n   * Set the label and return the changed elements.\n   *\n   * Element parameter can be label itself or connection (i.e. sequence flow).\n   *\n   * @param {djs.model.Base} element\n   * @param {String} text\n   */\n  function setText(element, text) {\n\n    // external label if present\n    var label = element.label || element;\n\n    var labelTarget = element.labelTarget || element;\n\n    setLabel(label, text, labelTarget !== label);\n\n    return [ label, labelTarget ];\n  }\n\n  function preExecute(ctx) {\n    var element = ctx.element,\n        businessObject = element.businessObject,\n        newLabel = ctx.newLabel;\n\n    if (!isLabel(element)\n        && isLabelExternal(element)\n        && !hasExternalLabel(element)\n        && !isEmptyText(newLabel)) {\n\n      // create label\n      var paddingTop = 7;\n\n      var labelCenter = getExternalLabelMid(element);\n\n      labelCenter = {\n        x: labelCenter.x,\n        y: labelCenter.y + paddingTop\n      };\n\n      modeling.createLabel(element, labelCenter, {\n        id: businessObject.id + '_label',\n        businessObject: businessObject\n      });\n    }\n  }\n\n  function execute(ctx) {\n    ctx.oldLabel = getLabel(ctx.element);\n    return setText(ctx.element, ctx.newLabel);\n  }\n\n  function revert(ctx) {\n    return setText(ctx.element, ctx.oldLabel);\n  }\n\n  function postExecute(ctx) {\n    var element = ctx.element,\n        label = element.label || element,\n        newLabel = ctx.newLabel,\n        newBounds = ctx.newBounds,\n        hints = ctx.hints || {};\n\n    if (isLabel(label) && isEmptyText(newLabel)) {\n\n      if (hints.removeShape !== false) {\n        modeling.removeShape(label, { unsetLabel: false });\n      }\n\n      return;\n    }\n\n    // ignore internal labels for elements except text annotations\n    if (!isLabelExternal(element) && !is(element, 'bpmn:TextAnnotation')) {\n      return;\n    }\n\n    var bo = getBusinessObject(label);\n\n    var text = bo.name || bo.text;\n\n    // don't resize without text\n    if (!text) {\n      return;\n    }\n\n    // resize element based on label _or_ pre-defined bounds\n    if (typeof newBounds === 'undefined') {\n      newBounds = textRenderer.getExternalLabelBounds(label, text);\n    }\n\n    // setting newBounds to false or _null_ will\n    // disable the postExecute resize operation\n    if (newBounds) {\n      modeling.resizeShape(label, newBounds, NULL_DIMENSIONS);\n    }\n  }\n\n  // API\n\n  this.preExecute = preExecute;\n  this.execute = execute;\n  this.revert = revert;\n  this.postExecute = postExecute;\n}\n\nUpdateLabelHandler.$inject = [\n  'modeling',\n  'textRenderer'\n];\n\n\n// helpers ///////////////////////\n\nfunction isEmptyText(label) {\n  return !label || !label.trim();\n}"]},"metadata":{},"sourceType":"module"}