{"ast":null,"code":"import { isString, isFunction, assign } from 'min-dash';\nimport Moddle from 'moddle';\nimport { Reader, Writer } from 'moddle-xml';\n/**\n * A sub class of {@link Moddle} with support for import and export of BPMN 2.0 xml files.\n *\n * @class BpmnModdle\n * @extends Moddle\n *\n * @param {Object|Array} packages to use for instantiating the model\n * @param {Object} [options] additional options to pass over\n */\n\nexport default function BpmnModdle(packages, options) {\n  Moddle.call(this, packages, options);\n}\nBpmnModdle.prototype = Object.create(Moddle.prototype);\n/**\n * Instantiates a BPMN model tree from a given xml string.\n *\n * @param {String}   xmlStr\n * @param {String}   [typeName='bpmn:Definitions'] name of the root element\n * @param {Object}   [options]  options to pass to the underlying reader\n * @param {Function} done       callback that is invoked with (err, result, parseContext)\n *                              once the import completes\n */\n\nBpmnModdle.prototype.fromXML = function (xmlStr, typeName, options, done) {\n  if (!isString(typeName)) {\n    done = options;\n    options = typeName;\n    typeName = 'bpmn:Definitions';\n  }\n\n  if (isFunction(options)) {\n    done = options;\n    options = {};\n  }\n\n  var reader = new Reader(assign({\n    model: this,\n    lax: true\n  }, options));\n  var rootHandler = reader.handler(typeName);\n  reader.fromXML(xmlStr, rootHandler, done);\n};\n/**\n * Serializes a BPMN 2.0 object tree to XML.\n *\n * @param {String}   element    the root element, typically an instance of `bpmn:Definitions`\n * @param {Object}   [options]  to pass to the underlying writer\n * @param {Function} done       callback invoked with (err, xmlStr) once the import completes\n */\n\n\nBpmnModdle.prototype.toXML = function (element, options, done) {\n  if (isFunction(options)) {\n    done = options;\n    options = {};\n  }\n\n  var writer = new Writer(options);\n  var result;\n  var err;\n\n  try {\n    result = writer.toXML(element);\n  } catch (e) {\n    err = e;\n  }\n\n  return done(err, result);\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-moddle/lib/bpmn-moddle.js"],"names":["isString","isFunction","assign","Moddle","Reader","Writer","BpmnModdle","packages","options","call","prototype","Object","create","fromXML","xmlStr","typeName","done","reader","model","lax","rootHandler","handler","toXML","element","writer","result","err","e"],"mappings":"AAAA,SACEA,QADF,EAEEC,UAFF,EAGEC,MAHF,QAIO,UAJP;AAMA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SACEC,MADF,EAEEC,MAFF,QAGO,YAHP;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,OAA9B,EAAuC;AACpDL,EAAAA,MAAM,CAACM,IAAP,CAAY,IAAZ,EAAkBF,QAAlB,EAA4BC,OAA5B;AACD;AAEDF,UAAU,CAACI,SAAX,GAAuBC,MAAM,CAACC,MAAP,CAAcT,MAAM,CAACO,SAArB,CAAvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,UAAU,CAACI,SAAX,CAAqBG,OAArB,GAA+B,UAASC,MAAT,EAAiBC,QAAjB,EAA2BP,OAA3B,EAAoCQ,IAApC,EAA0C;AAEvE,MAAI,CAAChB,QAAQ,CAACe,QAAD,CAAb,EAAyB;AACvBC,IAAAA,IAAI,GAAGR,OAAP;AACAA,IAAAA,OAAO,GAAGO,QAAV;AACAA,IAAAA,QAAQ,GAAG,kBAAX;AACD;;AAED,MAAId,UAAU,CAACO,OAAD,CAAd,EAAyB;AACvBQ,IAAAA,IAAI,GAAGR,OAAP;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIS,MAAM,GAAG,IAAIb,MAAJ,CAAWF,MAAM,CAAC;AAAEgB,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,GAAG,EAAE;AAApB,GAAD,EAA6BX,OAA7B,CAAjB,CAAb;AACA,MAAIY,WAAW,GAAGH,MAAM,CAACI,OAAP,CAAeN,QAAf,CAAlB;AAEAE,EAAAA,MAAM,CAACJ,OAAP,CAAeC,MAAf,EAAuBM,WAAvB,EAAoCJ,IAApC;AACD,CAjBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,UAAU,CAACI,SAAX,CAAqBY,KAArB,GAA6B,UAASC,OAAT,EAAkBf,OAAlB,EAA2BQ,IAA3B,EAAiC;AAE5D,MAAIf,UAAU,CAACO,OAAD,CAAd,EAAyB;AACvBQ,IAAAA,IAAI,GAAGR,OAAP;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIgB,MAAM,GAAG,IAAInB,MAAJ,CAAWG,OAAX,CAAb;AAEA,MAAIiB,MAAJ;AACA,MAAIC,GAAJ;;AAEA,MAAI;AACFD,IAAAA,MAAM,GAAGD,MAAM,CAACF,KAAP,CAAaC,OAAb,CAAT;AACD,GAFD,CAEE,OAAOI,CAAP,EAAU;AACVD,IAAAA,GAAG,GAAGC,CAAN;AACD;;AAED,SAAOX,IAAI,CAACU,GAAD,EAAMD,MAAN,CAAX;AACD,CAnBD","sourcesContent":["import {\n  isString,\n  isFunction,\n  assign\n} from 'min-dash';\n\nimport Moddle from 'moddle';\n\nimport {\n  Reader,\n  Writer\n} from 'moddle-xml';\n\n\n/**\n * A sub class of {@link Moddle} with support for import and export of BPMN 2.0 xml files.\n *\n * @class BpmnModdle\n * @extends Moddle\n *\n * @param {Object|Array} packages to use for instantiating the model\n * @param {Object} [options] additional options to pass over\n */\nexport default function BpmnModdle(packages, options) {\n  Moddle.call(this, packages, options);\n}\n\nBpmnModdle.prototype = Object.create(Moddle.prototype);\n\n\n/**\n * Instantiates a BPMN model tree from a given xml string.\n *\n * @param {String}   xmlStr\n * @param {String}   [typeName='bpmn:Definitions'] name of the root element\n * @param {Object}   [options]  options to pass to the underlying reader\n * @param {Function} done       callback that is invoked with (err, result, parseContext)\n *                              once the import completes\n */\nBpmnModdle.prototype.fromXML = function(xmlStr, typeName, options, done) {\n\n  if (!isString(typeName)) {\n    done = options;\n    options = typeName;\n    typeName = 'bpmn:Definitions';\n  }\n\n  if (isFunction(options)) {\n    done = options;\n    options = {};\n  }\n\n  var reader = new Reader(assign({ model: this, lax: true }, options));\n  var rootHandler = reader.handler(typeName);\n\n  reader.fromXML(xmlStr, rootHandler, done);\n};\n\n\n/**\n * Serializes a BPMN 2.0 object tree to XML.\n *\n * @param {String}   element    the root element, typically an instance of `bpmn:Definitions`\n * @param {Object}   [options]  to pass to the underlying writer\n * @param {Function} done       callback invoked with (err, xmlStr) once the import completes\n */\nBpmnModdle.prototype.toXML = function(element, options, done) {\n\n  if (isFunction(options)) {\n    done = options;\n    options = {};\n  }\n\n  var writer = new Writer(options);\n\n  var result;\n  var err;\n\n  try {\n    result = writer.toXML(element);\n  } catch (e) {\n    err = e;\n  }\n\n  return done(err, result);\n};\n"]},"metadata":{},"sourceType":"module"}