{"ast":null,"code":"import { reduce, keys, forEach, assign } from 'min-dash';\nimport { getBusinessObject } from '../../../util/ModelUtil';\nvar DEFAULT_FLOW = 'default',\n    ID = 'id',\n    DI = 'di';\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n/**\n * A handler that implements a BPMN 2.0 property update.\n *\n * This should be used to set simple properties on elements with\n * an underlying BPMN business object.\n *\n * Use respective diagram-js provided handlers if you would\n * like to perform automated modeling.\n */\n\nexport default function UpdatePropertiesHandler(elementRegistry, moddle, translate, modeling, textRenderer) {\n  this._elementRegistry = elementRegistry;\n  this._moddle = moddle;\n  this._translate = translate;\n  this._modeling = modeling;\n  this._textRenderer = textRenderer;\n}\nUpdatePropertiesHandler.$inject = ['elementRegistry', 'moddle', 'translate', 'modeling', 'textRenderer']; // api //////////////////////\n\n/**\n * Updates a BPMN element with a list of new properties\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element the element to update\n * @param {Object} context.properties a list of properties to set on the element's\n *                                    businessObject (the BPMN model element)\n *\n * @return {Array<djs.model.Base>} the updated element\n */\n\nUpdatePropertiesHandler.prototype.execute = function (context) {\n  var element = context.element,\n      changed = [element],\n      translate = this._translate;\n\n  if (!element) {\n    throw new Error(translate('element required'));\n  }\n\n  var elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n  var businessObject = element.businessObject,\n      properties = unwrapBusinessObjects(context.properties),\n      oldProperties = context.oldProperties || getProperties(businessObject, properties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(businessObject[ID]);\n    elementRegistry.updateId(element, properties[ID]);\n    ids.claim(properties[ID], businessObject);\n  } // correctly indicate visual changes on default flow updates\n\n\n  if (DEFAULT_FLOW in properties) {\n    if (properties[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));\n    }\n\n    if (businessObject[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));\n    }\n  } // update properties\n\n\n  setProperties(businessObject, properties); // store old values\n\n  context.oldProperties = oldProperties;\n  context.changed = changed; // indicate changed on objects affected by the update\n\n  return changed;\n};\n\nUpdatePropertiesHandler.prototype.postExecute = function (context) {\n  var element = context.element,\n      label = element.label;\n  var text = label && getBusinessObject(label).name;\n\n  if (!text) {\n    return;\n  } // get layouted text bounds and resize external\n  // external label accordingly\n\n\n  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);\n\n  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);\n};\n/**\n * Reverts the update on a BPMN elements properties.\n *\n * @param  {Object} context\n *\n * @return {djs.model.Base} the updated element\n */\n\n\nUpdatePropertiesHandler.prototype.revert = function (context) {\n  var element = context.element,\n      properties = context.properties,\n      oldProperties = context.oldProperties,\n      businessObject = element.businessObject,\n      elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids; // update properties\n\n  setProperties(businessObject, oldProperties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(properties[ID]);\n    elementRegistry.updateId(element, oldProperties[ID]);\n    ids.claim(oldProperties[ID], businessObject);\n  }\n\n  return context.changed;\n};\n\nfunction isIdChange(properties, businessObject) {\n  return ID in properties && properties[ID] !== businessObject[ID];\n}\n\nfunction getProperties(businessObject, properties) {\n  var propertyNames = keys(properties);\n  return reduce(propertyNames, function (result, key) {\n    // handle DI seperately\n    if (key !== DI) {\n      result[key] = businessObject.get(key);\n    } else {\n      result[key] = getDiProperties(businessObject.di, keys(properties.di));\n    }\n\n    return result;\n  }, {});\n}\n\nfunction getDiProperties(di, propertyNames) {\n  return reduce(propertyNames, function (result, key) {\n    result[key] = di.get(key);\n    return result;\n  }, {});\n}\n\nfunction setProperties(businessObject, properties) {\n  forEach(properties, function (value, key) {\n    if (key !== DI) {\n      businessObject.set(key, value);\n    } else {\n      // only update, if businessObject.di exists\n      if (businessObject.di) {\n        setDiProperties(businessObject.di, value);\n      }\n    }\n  });\n}\n\nfunction setDiProperties(di, properties) {\n  forEach(properties, function (value, key) {\n    di.set(key, value);\n  });\n}\n\nvar referencePropertyNames = ['default'];\n/**\n * Make sure we unwrap the actual business object\n * behind diagram element that may have been\n * passed as arguments.\n *\n * @param  {Object} properties\n *\n * @return {Object} unwrappedProps\n */\n\nfunction unwrapBusinessObjects(properties) {\n  var unwrappedProps = assign({}, properties);\n  referencePropertyNames.forEach(function (name) {\n    if (name in properties) {\n      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);\n    }\n  });\n  return unwrappedProps;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/modeling/cmd/UpdatePropertiesHandler.js"],"names":["reduce","keys","forEach","assign","getBusinessObject","DEFAULT_FLOW","ID","DI","NULL_DIMENSIONS","width","height","UpdatePropertiesHandler","elementRegistry","moddle","translate","modeling","textRenderer","_elementRegistry","_moddle","_translate","_modeling","_textRenderer","$inject","prototype","execute","context","element","changed","Error","ids","businessObject","properties","unwrapBusinessObjects","oldProperties","getProperties","isIdChange","unclaim","updateId","claim","push","get","id","setProperties","postExecute","label","text","name","newLabelBounds","getExternalLabelBounds","resizeShape","revert","propertyNames","result","key","getDiProperties","di","value","set","setDiProperties","referencePropertyNames","unwrappedProps"],"mappings":"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","sourcesContent":["import {\n  reduce,\n  keys,\n  forEach,\n  assign\n} from 'min-dash';\n\nimport {\n  getBusinessObject\n} from '../../../util/ModelUtil';\n\nvar DEFAULT_FLOW = 'default',\n    ID = 'id',\n    DI = 'di';\n\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n/**\n * A handler that implements a BPMN 2.0 property update.\n *\n * This should be used to set simple properties on elements with\n * an underlying BPMN business object.\n *\n * Use respective diagram-js provided handlers if you would\n * like to perform automated modeling.\n */\nexport default function UpdatePropertiesHandler(\n    elementRegistry, moddle, translate,\n    modeling, textRenderer) {\n\n  this._elementRegistry = elementRegistry;\n  this._moddle = moddle;\n  this._translate = translate;\n  this._modeling = modeling;\n  this._textRenderer = textRenderer;\n}\n\nUpdatePropertiesHandler.$inject = [\n  'elementRegistry',\n  'moddle',\n  'translate',\n  'modeling',\n  'textRenderer'\n];\n\n\n// api //////////////////////\n\n/**\n * Updates a BPMN element with a list of new properties\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element the element to update\n * @param {Object} context.properties a list of properties to set on the element's\n *                                    businessObject (the BPMN model element)\n *\n * @return {Array<djs.model.Base>} the updated element\n */\nUpdatePropertiesHandler.prototype.execute = function(context) {\n\n  var element = context.element,\n      changed = [ element ],\n      translate = this._translate;\n\n  if (!element) {\n    throw new Error(translate('element required'));\n  }\n\n  var elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  var businessObject = element.businessObject,\n      properties = unwrapBusinessObjects(context.properties),\n      oldProperties = context.oldProperties || getProperties(businessObject, properties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(businessObject[ID]);\n\n    elementRegistry.updateId(element, properties[ID]);\n\n    ids.claim(properties[ID], businessObject);\n  }\n\n  // correctly indicate visual changes on default flow updates\n  if (DEFAULT_FLOW in properties) {\n\n    if (properties[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));\n    }\n\n    if (businessObject[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));\n    }\n  }\n\n  // update properties\n  setProperties(businessObject, properties);\n\n  // store old values\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n\nUpdatePropertiesHandler.prototype.postExecute = function(context) {\n  var element = context.element,\n      label = element.label;\n\n  var text = label && getBusinessObject(label).name;\n\n  if (!text) {\n    return;\n  }\n\n  // get layouted text bounds and resize external\n  // external label accordingly\n  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);\n\n  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);\n};\n\n/**\n * Reverts the update on a BPMN elements properties.\n *\n * @param  {Object} context\n *\n * @return {djs.model.Base} the updated element\n */\nUpdatePropertiesHandler.prototype.revert = function(context) {\n\n  var element = context.element,\n      properties = context.properties,\n      oldProperties = context.oldProperties,\n      businessObject = element.businessObject,\n      elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  // update properties\n  setProperties(businessObject, oldProperties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(properties[ID]);\n\n    elementRegistry.updateId(element, oldProperties[ID]);\n\n    ids.claim(oldProperties[ID], businessObject);\n  }\n\n  return context.changed;\n};\n\n\nfunction isIdChange(properties, businessObject) {\n  return ID in properties && properties[ID] !== businessObject[ID];\n}\n\n\nfunction getProperties(businessObject, properties) {\n  var propertyNames = keys(properties);\n\n  return reduce(propertyNames, function(result, key) {\n\n    // handle DI seperately\n    if (key !== DI) {\n      result[key] = businessObject.get(key);\n    } else {\n      result[key] = getDiProperties(businessObject.di, keys(properties.di));\n    }\n\n    return result;\n  }, {});\n}\n\n\nfunction getDiProperties(di, propertyNames) {\n  return reduce(propertyNames, function(result, key) {\n    result[key] = di.get(key);\n\n    return result;\n  }, {});\n}\n\n\nfunction setProperties(businessObject, properties) {\n  forEach(properties, function(value, key) {\n\n    if (key !== DI) {\n      businessObject.set(key, value);\n    } else {\n      // only update, if businessObject.di exists\n      if (businessObject.di) {\n        setDiProperties(businessObject.di, value);\n      }\n    }\n  });\n}\n\n\nfunction setDiProperties(di, properties) {\n  forEach(properties, function(value, key) {\n    di.set(key, value);\n  });\n}\n\n\nvar referencePropertyNames = [ 'default' ];\n\n/**\n * Make sure we unwrap the actual business object\n * behind diagram element that may have been\n * passed as arguments.\n *\n * @param  {Object} properties\n *\n * @return {Object} unwrappedProps\n */\nfunction unwrapBusinessObjects(properties) {\n\n  var unwrappedProps = assign({}, properties);\n\n  referencePropertyNames.forEach(function(name) {\n    if (name in properties) {\n      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);\n    }\n  });\n\n  return unwrappedProps;\n}"]},"metadata":{},"sourceType":"module"}