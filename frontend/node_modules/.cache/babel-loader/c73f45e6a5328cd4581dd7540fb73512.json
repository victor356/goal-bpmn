{"ast":null,"code":"/**\n * Get Resize direction given axis + offset\n *\n * @param {String} axis (x|y)\n * @param {Number} offset\n *\n * @return {String} (e|w|n|s)\n */\nexport function getDirection(axis, offset) {\n  if (axis === 'x') {\n    if (offset > 0) {\n      return 'e';\n    }\n\n    if (offset < 0) {\n      return 'w';\n    }\n  }\n\n  if (axis === 'y') {\n    if (offset > 0) {\n      return 's';\n    }\n\n    if (offset < 0) {\n      return 'n';\n    }\n  }\n\n  return null;\n}\n/**\n * Resize the given bounds by the specified delta from a given anchor point.\n *\n * @param {Bounds} bounds the bounding box that should be resized\n * @param {String} direction in which the element is resized (n, s, e, w)\n * @param {Point} delta of the resize operation\n *\n * @return {Bounds} resized bounding box\n */\n\nexport function resizeBounds(bounds, direction, delta) {\n  var dx = delta.x,\n      dy = delta.y;\n\n  switch (direction) {\n    case 'n':\n      return {\n        x: bounds.x,\n        y: bounds.y + dy,\n        width: bounds.width,\n        height: bounds.height - dy\n      };\n\n    case 's':\n      return {\n        x: bounds.x,\n        y: bounds.y,\n        width: bounds.width,\n        height: bounds.height + dy\n      };\n\n    case 'w':\n      return {\n        x: bounds.x + dx,\n        y: bounds.y,\n        width: bounds.width - dx,\n        height: bounds.height\n      };\n\n    case 'e':\n      return {\n        x: bounds.x,\n        y: bounds.y,\n        width: bounds.width + dx,\n        height: bounds.height\n      };\n\n    default:\n      throw new Error('unrecognized direction: ' + direction);\n  }\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/space-tool/SpaceUtil.js"],"names":["getDirection","axis","offset","resizeBounds","bounds","direction","delta","dx","x","dy","y","width","height","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAT,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoC;AAEzC,MAAID,IAAI,KAAK,GAAb,EAAkB;AAChB,QAAIC,MAAM,GAAG,CAAb,EAAgB;AACd,aAAO,GAAP;AACD;;AAED,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,aAAO,GAAP;AACD;AACF;;AAED,MAAID,IAAI,KAAK,GAAb,EAAkB;AAChB,QAAIC,MAAM,GAAG,CAAb,EAAgB;AACd,aAAO,GAAP;AACD;;AAED,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,aAAO,GAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,SAA9B,EAAyCC,KAAzC,EAAgD;AAErD,MAAIC,EAAE,GAAGD,KAAK,CAACE,CAAf;AAAA,MACIC,EAAE,GAAGH,KAAK,CAACI,CADf;;AAGA,UAAQL,SAAR;AAEA,SAAK,GAAL;AACE,aAAO;AACLG,QAAAA,CAAC,EAAEJ,MAAM,CAACI,CADL;AAELE,QAAAA,CAAC,EAAEN,MAAM,CAACM,CAAP,GAAWD,EAFT;AAGLE,QAAAA,KAAK,EAAEP,MAAM,CAACO,KAHT;AAILC,QAAAA,MAAM,EAAER,MAAM,CAACQ,MAAP,GAAgBH;AAJnB,OAAP;;AAOF,SAAK,GAAL;AACE,aAAO;AACLD,QAAAA,CAAC,EAAEJ,MAAM,CAACI,CADL;AAELE,QAAAA,CAAC,EAAEN,MAAM,CAACM,CAFL;AAGLC,QAAAA,KAAK,EAAEP,MAAM,CAACO,KAHT;AAILC,QAAAA,MAAM,EAAER,MAAM,CAACQ,MAAP,GAAgBH;AAJnB,OAAP;;AAOF,SAAK,GAAL;AACE,aAAO;AACLD,QAAAA,CAAC,EAAEJ,MAAM,CAACI,CAAP,GAAWD,EADT;AAELG,QAAAA,CAAC,EAAEN,MAAM,CAACM,CAFL;AAGLC,QAAAA,KAAK,EAAEP,MAAM,CAACO,KAAP,GAAeJ,EAHjB;AAILK,QAAAA,MAAM,EAAER,MAAM,CAACQ;AAJV,OAAP;;AAOF,SAAK,GAAL;AACE,aAAO;AACLJ,QAAAA,CAAC,EAAEJ,MAAM,CAACI,CADL;AAELE,QAAAA,CAAC,EAAEN,MAAM,CAACM,CAFL;AAGLC,QAAAA,KAAK,EAAEP,MAAM,CAACO,KAAP,GAAeJ,EAHjB;AAILK,QAAAA,MAAM,EAAER,MAAM,CAACQ;AAJV,OAAP;;AAOF;AACE,YAAM,IAAIC,KAAJ,CAAU,6BAA6BR,SAAvC,CAAN;AAnCF;AAqCD","sourcesContent":["/**\n * Get Resize direction given axis + offset\n *\n * @param {String} axis (x|y)\n * @param {Number} offset\n *\n * @return {String} (e|w|n|s)\n */\nexport function getDirection(axis, offset) {\n\n  if (axis === 'x') {\n    if (offset > 0) {\n      return 'e';\n    }\n\n    if (offset < 0) {\n      return 'w';\n    }\n  }\n\n  if (axis === 'y') {\n    if (offset > 0) {\n      return 's';\n    }\n\n    if (offset < 0) {\n      return 'n';\n    }\n  }\n\n  return null;\n}\n\n\n/**\n * Resize the given bounds by the specified delta from a given anchor point.\n *\n * @param {Bounds} bounds the bounding box that should be resized\n * @param {String} direction in which the element is resized (n, s, e, w)\n * @param {Point} delta of the resize operation\n *\n * @return {Bounds} resized bounding box\n */\nexport function resizeBounds(bounds, direction, delta) {\n\n  var dx = delta.x,\n      dy = delta.y;\n\n  switch (direction) {\n\n  case 'n':\n    return {\n      x: bounds.x,\n      y: bounds.y + dy,\n      width: bounds.width,\n      height: bounds.height - dy\n    };\n\n  case 's':\n    return {\n      x: bounds.x,\n      y: bounds.y,\n      width: bounds.width,\n      height: bounds.height + dy\n    };\n\n  case 'w':\n    return {\n      x: bounds.x + dx,\n      y: bounds.y,\n      width: bounds.width - dx,\n      height: bounds.height\n    };\n\n  case 'e':\n    return {\n      x: bounds.x,\n      y: bounds.y,\n      width: bounds.width + dx,\n      height: bounds.height\n    };\n\n  default:\n    throw new Error('unrecognized direction: ' + direction);\n  }\n}"]},"metadata":{},"sourceType":"module"}