{"ast":null,"code":"'use strict';\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar assign = require('lodash/assign');\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nmodule.exports = function (element, bpmnFactory, options, translate) {\n  var getBusinessObject = options.getBusinessObject,\n      hideResultVariable = options.hideResultVariable,\n      id = options.id || 'resultVariable';\n  var resultVariableEntry = entryFactory.textField({\n    id: id,\n    label: translate('Result Variable'),\n    modelProperty: 'resultVariable',\n    get: function (element, node) {\n      var bo = getBusinessObject(element);\n      return {\n        resultVariable: bo.get('camunda:resultVariable')\n      };\n    },\n    set: function (element, values, node) {\n      var bo = getBusinessObject(element);\n      var resultVariable = values.resultVariable || undefined;\n      var props = {\n        'camunda:resultVariable': resultVariable\n      };\n\n      if (is(bo, 'camunda:DmnCapable') && !resultVariable) {\n        props = assign({\n          'camunda:mapDecisionResult': 'resultList'\n        }, props);\n      }\n\n      return cmdHelper.updateBusinessObject(element, bo, props);\n    },\n    hidden: function (element, node) {\n      if (typeof hideResultVariable === 'function') {\n        return hideResultVariable.apply(resultVariableEntry, arguments);\n      }\n    }\n  });\n  return [resultVariableEntry];\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/parts/implementation/ResultVariable.js"],"names":["is","require","assign","entryFactory","cmdHelper","module","exports","element","bpmnFactory","options","translate","getBusinessObject","hideResultVariable","id","resultVariableEntry","textField","label","modelProperty","get","node","bo","resultVariable","set","values","undefined","props","updateBusinessObject","hidden","apply","arguments"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,4BAAD,CAAP,CAAsCD,EAA/C;;AAEA,IAAIE,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;;AAEA,IAAIE,YAAY,GAAGF,OAAO,CAAC,kCAAD,CAA1B;AAAA,IACIG,SAAS,GAAGH,OAAO,CAAC,8BAAD,CADvB;;AAGAI,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkBC,WAAlB,EAA+BC,OAA/B,EAAwCC,SAAxC,EAAmD;AAElE,MAAIC,iBAAiB,GAAGF,OAAO,CAACE,iBAAhC;AAAA,MACIC,kBAAkB,GAAGH,OAAO,CAACG,kBADjC;AAAA,MAEIC,EAAE,GAAGJ,OAAO,CAACI,EAAR,IAAc,gBAFvB;AAKA,MAAIC,mBAAmB,GAAGX,YAAY,CAACY,SAAb,CAAuB;AAC/CF,IAAAA,EAAE,EAAEA,EAD2C;AAE/CG,IAAAA,KAAK,EAAEN,SAAS,CAAC,iBAAD,CAF+B;AAG/CO,IAAAA,aAAa,EAAE,gBAHgC;AAK/CC,IAAAA,GAAG,EAAE,UAASX,OAAT,EAAkBY,IAAlB,EAAwB;AAC3B,UAAIC,EAAE,GAAGT,iBAAiB,CAACJ,OAAD,CAA1B;AACA,aAAO;AAAEc,QAAAA,cAAc,EAAED,EAAE,CAACF,GAAH,CAAO,wBAAP;AAAlB,OAAP;AACD,KAR8C;AAU/CI,IAAAA,GAAG,EAAE,UAASf,OAAT,EAAkBgB,MAAlB,EAA0BJ,IAA1B,EAAgC;AACnC,UAAIC,EAAE,GAAGT,iBAAiB,CAACJ,OAAD,CAA1B;AAEA,UAAIc,cAAc,GAAGE,MAAM,CAACF,cAAP,IAAyBG,SAA9C;AAEA,UAAIC,KAAK,GAAG;AACV,kCAA0BJ;AADhB,OAAZ;;AAIA,UAAIrB,EAAE,CAACoB,EAAD,EAAK,oBAAL,CAAF,IAAgC,CAACC,cAArC,EAAqD;AACnDI,QAAAA,KAAK,GAAGvB,MAAM,CAAC;AAAE,uCAA6B;AAA/B,SAAD,EAAgDuB,KAAhD,CAAd;AACD;;AAED,aAAOrB,SAAS,CAACsB,oBAAV,CAA+BnB,OAA/B,EAAwCa,EAAxC,EAA4CK,KAA5C,CAAP;AACD,KAxB8C;AA0B/CE,IAAAA,MAAM,EAAE,UAASpB,OAAT,EAAkBY,IAAlB,EAAwB;AAC9B,UAAI,OAAOP,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,eAAOA,kBAAkB,CAACgB,KAAnB,CAAyBd,mBAAzB,EAA8Ce,SAA9C,CAAP;AACD;AACF;AA9B8C,GAAvB,CAA1B;AAkCA,SAAO,CAAEf,mBAAF,CAAP;AAED,CA3CD","sourcesContent":["'use strict';\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar assign = require('lodash/assign');\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    cmdHelper = require('../../../../helper/CmdHelper');\n\nmodule.exports = function(element, bpmnFactory, options, translate) {\n\n  var getBusinessObject = options.getBusinessObject,\n      hideResultVariable = options.hideResultVariable,\n      id = options.id || 'resultVariable';\n\n\n  var resultVariableEntry = entryFactory.textField({\n    id: id,\n    label: translate('Result Variable'),\n    modelProperty: 'resultVariable',\n\n    get: function(element, node) {\n      var bo = getBusinessObject(element);\n      return { resultVariable: bo.get('camunda:resultVariable') };\n    },\n\n    set: function(element, values, node) {\n      var bo = getBusinessObject(element);\n\n      var resultVariable = values.resultVariable || undefined;\n\n      var props = {\n        'camunda:resultVariable': resultVariable\n      };\n\n      if (is(bo, 'camunda:DmnCapable') && !resultVariable) {\n        props = assign({ 'camunda:mapDecisionResult': 'resultList' }, props);\n      }\n\n      return cmdHelper.updateBusinessObject(element, bo, props);\n    },\n\n    hidden: function(element, node) {\n      if (typeof hideResultVariable === 'function') {\n        return hideResultVariable.apply(resultVariableEntry, arguments);\n      }\n    }\n\n  });\n\n  return [ resultVariableEntry ];\n\n};\n"]},"metadata":{},"sourceType":"script"}