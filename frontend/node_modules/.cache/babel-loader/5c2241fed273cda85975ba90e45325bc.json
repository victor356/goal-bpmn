{"ast":null,"code":"import { flatten, forEach, filter, find, groupBy, map, matchPattern, size } from 'min-dash';\nimport { selfAndAllChildren } from '../../util/Elements';\nimport { append as svgAppend, attr as svgAttr, clear as svgClear, create as svgCreate } from 'tiny-svg';\nimport { translate } from '../../util/SvgTransformUtil';\nvar LOW_PRIORITY = 499;\nvar MARKER_DRAGGING = 'djs-dragging',\n    MARKER_OK = 'drop-ok',\n    MARKER_NOT_OK = 'drop-not-ok',\n    MARKER_NEW_PARENT = 'new-parent',\n    MARKER_ATTACH = 'attach-ok';\n/**\n * Provides previews for moving shapes when moving.\n *\n * @param {EventBus} eventBus\n * @param {ElementRegistry} elementRegistry\n * @param {Canvas} canvas\n * @param {Styles} styles\n */\n\nexport default function MovePreview(eventBus, elementRegistry, canvas, styles, previewSupport) {\n  function getVisualDragShapes(shapes) {\n    var elements = getAllDraggedElements(shapes);\n    var filteredElements = removeEdges(elements);\n    return filteredElements;\n  }\n\n  function getAllDraggedElements(shapes) {\n    var allShapes = selfAndAllChildren(shapes, true);\n    var allConnections = map(allShapes, function (shape) {\n      return (shape.incoming || []).concat(shape.outgoing || []);\n    });\n    return flatten(allShapes.concat(allConnections));\n  }\n  /**\n   * Sets drop marker on an element.\n   */\n\n\n  function setMarker(element, marker) {\n    [MARKER_ATTACH, MARKER_OK, MARKER_NOT_OK, MARKER_NEW_PARENT].forEach(function (m) {\n      if (m === marker) {\n        canvas.addMarker(element, m);\n      } else {\n        canvas.removeMarker(element, m);\n      }\n    });\n  }\n  /**\n   * Make an element draggable.\n   *\n   * @param {Object} context\n   * @param {djs.model.Base} element\n   * @param {Boolean} addMarker\n   */\n\n\n  function makeDraggable(context, element, addMarker) {\n    previewSupport.addDragger(element, context.dragGroup);\n\n    if (addMarker) {\n      canvas.addMarker(element, MARKER_DRAGGING);\n    }\n\n    if (context.allDraggedElements) {\n      context.allDraggedElements.push(element);\n    } else {\n      context.allDraggedElements = [element];\n    }\n  } // assign a low priority to this handler\n  // to let others modify the move context before\n  // we draw things\n\n\n  eventBus.on('shape.move.start', LOW_PRIORITY, function (event) {\n    var context = event.context,\n        dragShapes = context.shapes,\n        allDraggedElements = context.allDraggedElements;\n    var visuallyDraggedShapes = getVisualDragShapes(dragShapes);\n\n    if (!context.dragGroup) {\n      var dragGroup = svgCreate('g');\n      svgAttr(dragGroup, styles.cls('djs-drag-group', ['no-events']));\n      var defaultLayer = canvas.getDefaultLayer();\n      svgAppend(defaultLayer, dragGroup);\n      context.dragGroup = dragGroup;\n    } // add previews\n\n\n    visuallyDraggedShapes.forEach(function (shape) {\n      previewSupport.addDragger(shape, context.dragGroup);\n    }); // cache all dragged elements / gfx\n    // so that we can quickly undo their state changes later\n\n    if (!allDraggedElements) {\n      allDraggedElements = getAllDraggedElements(dragShapes);\n    } else {\n      allDraggedElements = flatten([allDraggedElements, getAllDraggedElements(dragShapes)]);\n    } // add dragging marker\n\n\n    forEach(allDraggedElements, function (e) {\n      canvas.addMarker(e, MARKER_DRAGGING);\n    });\n    context.allDraggedElements = allDraggedElements; // determine, if any of the dragged elements have different parents\n\n    context.differentParents = haveDifferentParents(dragShapes);\n  }); // update previews\n\n  eventBus.on('shape.move.move', LOW_PRIORITY, function (event) {\n    var context = event.context,\n        dragGroup = context.dragGroup,\n        target = context.target,\n        parent = context.shape.parent,\n        canExecute = context.canExecute;\n\n    if (target) {\n      if (canExecute === 'attach') {\n        setMarker(target, MARKER_ATTACH);\n      } else if (context.canExecute && target && target.id !== parent.id) {\n        setMarker(target, MARKER_NEW_PARENT);\n      } else {\n        setMarker(target, context.canExecute ? MARKER_OK : MARKER_NOT_OK);\n      }\n    }\n\n    translate(dragGroup, event.dx, event.dy);\n  });\n  eventBus.on(['shape.move.out', 'shape.move.cleanup'], function (event) {\n    var context = event.context,\n        target = context.target;\n\n    if (target) {\n      setMarker(target, null);\n    }\n  }); // remove previews\n\n  eventBus.on('shape.move.cleanup', function (event) {\n    var context = event.context,\n        allDraggedElements = context.allDraggedElements,\n        dragGroup = context.dragGroup; // remove dragging marker\n\n    forEach(allDraggedElements, function (e) {\n      canvas.removeMarker(e, MARKER_DRAGGING);\n    });\n\n    if (dragGroup) {\n      svgClear(dragGroup);\n    }\n  }); // API //////////////////////\n\n  /**\n   * Make an element draggable.\n   *\n   * @param {Object} context\n   * @param {djs.model.Base} element\n   * @param {Boolean} addMarker\n   */\n\n  this.makeDraggable = makeDraggable;\n}\nMovePreview.$inject = ['eventBus', 'elementRegistry', 'canvas', 'styles', 'previewSupport']; // helpers //////////////////////\n\n/**\n * returns elements minus all connections\n * where source or target is not elements\n */\n\nfunction removeEdges(elements) {\n  var filteredElements = filter(elements, function (element) {\n    if (!isConnection(element)) {\n      return true;\n    } else {\n      return find(elements, matchPattern({\n        id: element.source.id\n      })) && find(elements, matchPattern({\n        id: element.target.id\n      }));\n    }\n  });\n  return filteredElements;\n}\n\nfunction haveDifferentParents(elements) {\n  return size(groupBy(elements, function (e) {\n    return e.parent && e.parent.id;\n  })) !== 1;\n}\n/**\n * Checks if an element is a connection.\n */\n\n\nfunction isConnection(element) {\n  return element.waypoints;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/move/MovePreview.js"],"names":["flatten","forEach","filter","find","groupBy","map","matchPattern","size","selfAndAllChildren","append","svgAppend","attr","svgAttr","clear","svgClear","create","svgCreate","translate","LOW_PRIORITY","MARKER_DRAGGING","MARKER_OK","MARKER_NOT_OK","MARKER_NEW_PARENT","MARKER_ATTACH","MovePreview","eventBus","elementRegistry","canvas","styles","previewSupport","getVisualDragShapes","shapes","elements","getAllDraggedElements","filteredElements","removeEdges","allShapes","allConnections","shape","incoming","concat","outgoing","setMarker","element","marker","m","addMarker","removeMarker","makeDraggable","context","addDragger","dragGroup","allDraggedElements","push","on","event","dragShapes","visuallyDraggedShapes","cls","defaultLayer","getDefaultLayer","e","differentParents","haveDifferentParents","target","parent","canExecute","id","dx","dy","$inject","isConnection","source","waypoints"],"mappings":"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","sourcesContent":["import {\n  flatten,\n  forEach,\n  filter,\n  find,\n  groupBy,\n  map,\n  matchPattern,\n  size\n} from 'min-dash';\n\nimport {\n  selfAndAllChildren\n} from '../../util/Elements';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  clear as svgClear,\n  create as svgCreate\n} from 'tiny-svg';\n\nimport { translate } from '../../util/SvgTransformUtil';\n\nvar LOW_PRIORITY = 499;\n\nvar MARKER_DRAGGING = 'djs-dragging',\n    MARKER_OK = 'drop-ok',\n    MARKER_NOT_OK = 'drop-not-ok',\n    MARKER_NEW_PARENT = 'new-parent',\n    MARKER_ATTACH = 'attach-ok';\n\n\n/**\n * Provides previews for moving shapes when moving.\n *\n * @param {EventBus} eventBus\n * @param {ElementRegistry} elementRegistry\n * @param {Canvas} canvas\n * @param {Styles} styles\n */\nexport default function MovePreview(\n    eventBus, elementRegistry, canvas,\n    styles, previewSupport) {\n\n  function getVisualDragShapes(shapes) {\n    var elements = getAllDraggedElements(shapes);\n\n    var filteredElements = removeEdges(elements);\n\n    return filteredElements;\n  }\n\n  function getAllDraggedElements(shapes) {\n    var allShapes = selfAndAllChildren(shapes, true);\n\n    var allConnections = map(allShapes, function(shape) {\n      return (shape.incoming || []).concat(shape.outgoing || []);\n    });\n\n    return flatten(allShapes.concat(allConnections));\n  }\n\n  /**\n   * Sets drop marker on an element.\n   */\n  function setMarker(element, marker) {\n\n    [ MARKER_ATTACH, MARKER_OK, MARKER_NOT_OK, MARKER_NEW_PARENT ].forEach(function(m) {\n\n      if (m === marker) {\n        canvas.addMarker(element, m);\n      } else {\n        canvas.removeMarker(element, m);\n      }\n    });\n  }\n\n  /**\n   * Make an element draggable.\n   *\n   * @param {Object} context\n   * @param {djs.model.Base} element\n   * @param {Boolean} addMarker\n   */\n  function makeDraggable(context, element, addMarker) {\n\n    previewSupport.addDragger(element, context.dragGroup);\n\n    if (addMarker) {\n      canvas.addMarker(element, MARKER_DRAGGING);\n    }\n\n    if (context.allDraggedElements) {\n      context.allDraggedElements.push(element);\n    } else {\n      context.allDraggedElements = [ element ];\n    }\n  }\n\n  // assign a low priority to this handler\n  // to let others modify the move context before\n  // we draw things\n  eventBus.on('shape.move.start', LOW_PRIORITY, function(event) {\n\n    var context = event.context,\n        dragShapes = context.shapes,\n        allDraggedElements = context.allDraggedElements;\n\n    var visuallyDraggedShapes = getVisualDragShapes(dragShapes);\n\n    if (!context.dragGroup) {\n      var dragGroup = svgCreate('g');\n      svgAttr(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));\n\n      var defaultLayer = canvas.getDefaultLayer();\n\n      svgAppend(defaultLayer, dragGroup);\n\n      context.dragGroup = dragGroup;\n    }\n\n    // add previews\n    visuallyDraggedShapes.forEach(function(shape) {\n      previewSupport.addDragger(shape, context.dragGroup);\n    });\n\n    // cache all dragged elements / gfx\n    // so that we can quickly undo their state changes later\n    if (!allDraggedElements) {\n      allDraggedElements = getAllDraggedElements(dragShapes);\n    } else {\n      allDraggedElements = flatten([\n        allDraggedElements,\n        getAllDraggedElements(dragShapes)\n      ]);\n    }\n\n    // add dragging marker\n    forEach(allDraggedElements, function(e) {\n      canvas.addMarker(e, MARKER_DRAGGING);\n    });\n\n    context.allDraggedElements = allDraggedElements;\n\n    // determine, if any of the dragged elements have different parents\n    context.differentParents = haveDifferentParents(dragShapes);\n  });\n\n  // update previews\n  eventBus.on('shape.move.move', LOW_PRIORITY, function(event) {\n\n    var context = event.context,\n        dragGroup = context.dragGroup,\n        target = context.target,\n        parent = context.shape.parent,\n        canExecute = context.canExecute;\n\n    if (target) {\n      if (canExecute === 'attach') {\n        setMarker(target, MARKER_ATTACH);\n      } else if (context.canExecute && target && target.id !== parent.id) {\n        setMarker(target, MARKER_NEW_PARENT);\n      } else {\n        setMarker(target, context.canExecute ? MARKER_OK : MARKER_NOT_OK);\n      }\n    }\n\n    translate(dragGroup, event.dx, event.dy);\n  });\n\n  eventBus.on([ 'shape.move.out', 'shape.move.cleanup' ], function(event) {\n    var context = event.context,\n        target = context.target;\n\n    if (target) {\n      setMarker(target, null);\n    }\n  });\n\n  // remove previews\n  eventBus.on('shape.move.cleanup', function(event) {\n\n    var context = event.context,\n        allDraggedElements = context.allDraggedElements,\n        dragGroup = context.dragGroup;\n\n\n    // remove dragging marker\n    forEach(allDraggedElements, function(e) {\n      canvas.removeMarker(e, MARKER_DRAGGING);\n    });\n\n    if (dragGroup) {\n      svgClear(dragGroup);\n    }\n  });\n\n\n  // API //////////////////////\n\n  /**\n   * Make an element draggable.\n   *\n   * @param {Object} context\n   * @param {djs.model.Base} element\n   * @param {Boolean} addMarker\n   */\n  this.makeDraggable = makeDraggable;\n}\n\nMovePreview.$inject = [\n  'eventBus',\n  'elementRegistry',\n  'canvas',\n  'styles',\n  'previewSupport'\n];\n\n\n// helpers //////////////////////\n\n/**\n * returns elements minus all connections\n * where source or target is not elements\n */\nfunction removeEdges(elements) {\n\n  var filteredElements = filter(elements, function(element) {\n\n    if (!isConnection(element)) {\n      return true;\n    } else {\n\n      return (\n        find(elements, matchPattern({ id: element.source.id })) &&\n        find(elements, matchPattern({ id: element.target.id }))\n      );\n    }\n  });\n\n  return filteredElements;\n}\n\nfunction haveDifferentParents(elements) {\n  return size(groupBy(elements, function(e) { return e.parent && e.parent.id; })) !== 1;\n}\n\n/**\n * Checks if an element is a connection.\n */\nfunction isConnection(element) {\n  return element.waypoints;\n}\n"]},"metadata":{},"sourceType":"module"}