{"ast":null,"code":"'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject; // input entities\n\n\nvar textInputField = require('./TextInputEntryFactory'),\n    checkboxField = require('./CheckboxEntryFactory'),\n    selectBoxField = require('./SelectEntryFactory'),\n    comboBoxField = require('./ComboEntryFactory'),\n    textBoxField = require('./TextBoxEntryFactory'),\n    validationAwareTextInputField = require('./ValidationAwareTextInput'),\n    tableField = require('./TableEntryFactory'),\n    labelEntry = require('./LabelFactory'),\n    link = require('./LinkEntryFactory');\n\nvar cmdHelper = require('../helper/CmdHelper'); // helpers ////////////////////////////////////////\n\n\nfunction ensureNotNull(prop) {\n  if (!prop) {\n    throw new Error(prop + ' must be set.');\n  }\n\n  return prop;\n}\n/**\n * sets the default parameters which are needed to create an entry\n *\n * @param options\n * @returns {{id: *, description: (*|string), get: (*|Function), set: (*|Function),\n *            validate: (*|Function), html: string}}\n */\n\n\nvar setDefaultParameters = function (options) {\n  // default method to fetch the current value of the input field\n  var defaultGet = function (element) {\n    var bo = getBusinessObject(element),\n        res = {},\n        prop = ensureNotNull(options.modelProperty);\n    res[prop] = bo.get(prop);\n    return res;\n  }; // default method to set a new value to the input field\n\n\n  var defaultSet = function (element, values) {\n    var res = {},\n        prop = ensureNotNull(options.modelProperty);\n\n    if (values[prop] !== '') {\n      res[prop] = values[prop];\n    } else {\n      res[prop] = undefined;\n    }\n\n    return cmdHelper.updateProperties(element, res);\n  }; // default validation method\n\n\n  var defaultValidate = function () {\n    return {};\n  };\n\n  return {\n    id: options.id,\n    description: options.description || '',\n    get: options.get || defaultGet,\n    set: options.set || defaultSet,\n    validate: options.validate || defaultValidate,\n    html: ''\n  };\n};\n\nfunction EntryFactory() {}\n/**\n * Generates an text input entry object for a property panel.\n * options are:\n * - id: id of the entry - String\n *\n * - description: description of the property - String\n *\n * - label: label for the input field - String\n *\n * - set: setter method - Function\n *\n * - get: getter method - Function\n *\n * - validate: validation mehtod - Function\n *\n * - modelProperty: name of the model property - String\n *\n * - buttonAction: Object which contains the following properties: - Object\n * ---- name: name of the [data-action] callback - String\n * ---- method: callback function for [data-action] - Function\n *\n * - buttonShow: Object which contains the following properties: - Object\n * ---- name: name of the [data-show] callback - String\n * ---- method: callback function for [data-show] - Function\n *\n * @param options\n * @returns the propertyPanel entry resource object\n */\n\n\nEntryFactory.textField = function (options) {\n  return textInputField(options, setDefaultParameters(options));\n};\n\nEntryFactory.validationAwareTextField = function (options) {\n  return validationAwareTextInputField(options, setDefaultParameters(options));\n};\n/**\n * Generates a checkbox input entry object for a property panel.\n * options are:\n * - id: id of the entry - String\n *\n * - description: description of the property - String\n *\n * - label: label for the input field - String\n *\n * - set: setter method - Function\n *\n * - get: getter method - Function\n *\n * - validate: validation mehtod - Function\n *\n * - modelProperty: name of the model property - String\n *\n * @param options\n * @returns the propertyPanel entry resource object\n */\n\n\nEntryFactory.checkbox = function (options) {\n  return checkboxField(options, setDefaultParameters(options));\n};\n\nEntryFactory.textBox = function (options) {\n  return textBoxField(options, setDefaultParameters(options));\n};\n\nEntryFactory.selectBox = function (options) {\n  return selectBoxField(options, setDefaultParameters(options));\n};\n\nEntryFactory.comboBox = function (options) {\n  return comboBoxField(options);\n};\n\nEntryFactory.table = function (options) {\n  return tableField(options);\n};\n\nEntryFactory.label = function (options) {\n  return labelEntry(options);\n};\n\nEntryFactory.link = function (options) {\n  return link(options);\n};\n\nmodule.exports = EntryFactory;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js-properties-panel/lib/factory/EntryFactory.js"],"names":["getBusinessObject","require","textInputField","checkboxField","selectBoxField","comboBoxField","textBoxField","validationAwareTextInputField","tableField","labelEntry","link","cmdHelper","ensureNotNull","prop","Error","setDefaultParameters","options","defaultGet","element","bo","res","modelProperty","get","defaultSet","values","undefined","updateProperties","defaultValidate","id","description","set","validate","html","EntryFactory","textField","validationAwareTextField","checkbox","textBox","selectBox","comboBox","table","label","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;\n\n// input entities\nvar textInputField = require('./TextInputEntryFactory'),\n    checkboxField = require('./CheckboxEntryFactory'),\n    selectBoxField = require('./SelectEntryFactory'),\n    comboBoxField = require('./ComboEntryFactory'),\n    textBoxField = require('./TextBoxEntryFactory'),\n    validationAwareTextInputField = require('./ValidationAwareTextInput'),\n    tableField = require('./TableEntryFactory'),\n    labelEntry = require('./LabelFactory'),\n    link = require('./LinkEntryFactory');\n\nvar cmdHelper = require('../helper/CmdHelper');\n\n// helpers ////////////////////////////////////////\n\nfunction ensureNotNull(prop) {\n  if (!prop) {\n    throw new Error(prop + ' must be set.');\n  }\n\n  return prop;\n}\n\n/**\n * sets the default parameters which are needed to create an entry\n *\n * @param options\n * @returns {{id: *, description: (*|string), get: (*|Function), set: (*|Function),\n *            validate: (*|Function), html: string}}\n */\nvar setDefaultParameters = function(options) {\n\n  // default method to fetch the current value of the input field\n  var defaultGet = function(element) {\n    var bo = getBusinessObject(element),\n        res = {},\n        prop = ensureNotNull(options.modelProperty);\n    res[prop] = bo.get(prop);\n\n    return res;\n  };\n\n  // default method to set a new value to the input field\n  var defaultSet = function(element, values) {\n    var res = {},\n        prop = ensureNotNull(options.modelProperty);\n    if (values[prop] !== '') {\n      res[prop] = values[prop];\n    } else {\n      res[prop] = undefined;\n    }\n\n    return cmdHelper.updateProperties(element, res);\n  };\n\n  // default validation method\n  var defaultValidate = function() {\n    return {};\n  };\n\n  return {\n    id : options.id,\n    description : (options.description || ''),\n    get : (options.get || defaultGet),\n    set : (options.set || defaultSet),\n    validate : (options.validate || defaultValidate),\n    html: ''\n  };\n};\n\nfunction EntryFactory() {\n\n}\n\n/**\n * Generates an text input entry object for a property panel.\n * options are:\n * - id: id of the entry - String\n *\n * - description: description of the property - String\n *\n * - label: label for the input field - String\n *\n * - set: setter method - Function\n *\n * - get: getter method - Function\n *\n * - validate: validation mehtod - Function\n *\n * - modelProperty: name of the model property - String\n *\n * - buttonAction: Object which contains the following properties: - Object\n * ---- name: name of the [data-action] callback - String\n * ---- method: callback function for [data-action] - Function\n *\n * - buttonShow: Object which contains the following properties: - Object\n * ---- name: name of the [data-show] callback - String\n * ---- method: callback function for [data-show] - Function\n *\n * @param options\n * @returns the propertyPanel entry resource object\n */\nEntryFactory.textField = function(options) {\n  return textInputField(options, setDefaultParameters(options));\n};\n\nEntryFactory.validationAwareTextField = function(options) {\n  return validationAwareTextInputField(options, setDefaultParameters(options));\n};\n\n/**\n * Generates a checkbox input entry object for a property panel.\n * options are:\n * - id: id of the entry - String\n *\n * - description: description of the property - String\n *\n * - label: label for the input field - String\n *\n * - set: setter method - Function\n *\n * - get: getter method - Function\n *\n * - validate: validation mehtod - Function\n *\n * - modelProperty: name of the model property - String\n *\n * @param options\n * @returns the propertyPanel entry resource object\n */\nEntryFactory.checkbox = function(options) {\n  return checkboxField(options, setDefaultParameters(options));\n};\n\nEntryFactory.textBox = function(options) {\n  return textBoxField(options, setDefaultParameters(options));\n};\n\nEntryFactory.selectBox = function(options) {\n  return selectBoxField(options, setDefaultParameters(options));\n};\n\nEntryFactory.comboBox = function(options) {\n  return comboBoxField(options);\n};\n\nEntryFactory.table = function(options) {\n  return tableField(options);\n};\n\nEntryFactory.label = function(options) {\n  return labelEntry(options);\n};\n\nEntryFactory.link = function(options) {\n  return link(options);\n};\n\nmodule.exports = EntryFactory;\n"]},"metadata":{},"sourceType":"script"}