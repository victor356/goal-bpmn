{"ast":null,"code":"'use strict';\n\nvar cmdHelper = require('./CmdHelper'),\n    elementHelper = require('./ElementHelper');\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar ExtensionElementsHelper = {};\n\nvar getExtensionElements = function (bo) {\n  return bo.get('extensionElements');\n};\n\nExtensionElementsHelper.getExtensionElements = function (bo, type) {\n  var extensionElements = getExtensionElements(bo);\n\n  if (typeof extensionElements !== 'undefined') {\n    var extensionValues = extensionElements.get('values');\n\n    if (typeof extensionValues !== 'undefined') {\n      var elements = extensionValues.filter(function (value) {\n        return is(value, type);\n      });\n\n      if (elements.length) {\n        return elements;\n      }\n    }\n  }\n};\n\nExtensionElementsHelper.addEntry = function (bo, element, entry, bpmnFactory) {\n  var extensionElements = bo.get('extensionElements'); // if there is no extensionElements list, create one\n\n  if (!extensionElements) {\n    // TODO: Ask Daniel which operation costs more\n    extensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n      values: [entry]\n    }, bo, bpmnFactory);\n    return {\n      extensionElements: extensionElements\n    };\n  } else {\n    // add new failedJobRetryExtensionElement to existing extensionElements list\n    return cmdHelper.addElementsTolist(element, extensionElements, 'values', [entry]);\n  }\n};\n\nExtensionElementsHelper.removeEntry = function (bo, element, entry) {\n  var extensionElements = bo.get('extensionElements');\n\n  if (!extensionElements) {\n    // return an empty command when there is no extensionElements list\n    return {};\n  }\n\n  return cmdHelper.removeElementsFromList(element, extensionElements, 'values', 'extensionElements', [entry]);\n};\n\nmodule.exports = ExtensionElementsHelper;","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/helper/ExtensionElementsHelper.js"],"names":["cmdHelper","require","elementHelper","is","ExtensionElementsHelper","getExtensionElements","bo","get","type","extensionElements","extensionValues","elements","filter","value","length","addEntry","element","entry","bpmnFactory","createElement","values","addElementsTolist","removeEntry","removeElementsFromList","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAAA,IACIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAD3B;;AAGA,IAAIE,EAAE,GAAGF,OAAO,CAAC,4BAAD,CAAP,CAAsCE,EAA/C;;AAEA,IAAIC,uBAAuB,GAAG,EAA9B;;AAEA,IAAIC,oBAAoB,GAAG,UAASC,EAAT,EAAa;AACtC,SAAOA,EAAE,CAACC,GAAH,CAAO,mBAAP,CAAP;AACD,CAFD;;AAIAH,uBAAuB,CAACC,oBAAxB,GAA+C,UAASC,EAAT,EAAaE,IAAb,EAAmB;AAChE,MAAIC,iBAAiB,GAAGJ,oBAAoB,CAACC,EAAD,CAA5C;;AACA,MAAI,OAAOG,iBAAP,KAA6B,WAAjC,EAA8C;AAC5C,QAAIC,eAAe,GAAGD,iBAAiB,CAACF,GAAlB,CAAsB,QAAtB,CAAtB;;AACA,QAAI,OAAOG,eAAP,KAA2B,WAA/B,EAA4C;AAC1C,UAAIC,QAAQ,GAAGD,eAAe,CAACE,MAAhB,CAAuB,UAASC,KAAT,EAAgB;AACpD,eAAOV,EAAE,CAACU,KAAD,EAAQL,IAAR,CAAT;AACD,OAFc,CAAf;;AAGA,UAAIG,QAAQ,CAACG,MAAb,EAAqB;AACnB,eAAOH,QAAP;AACD;AACF;AACF;AACF,CAbD;;AAeAP,uBAAuB,CAACW,QAAxB,GAAmC,UAAST,EAAT,EAAaU,OAAb,EAAsBC,KAAtB,EAA6BC,WAA7B,EAA0C;AAC3E,MAAIT,iBAAiB,GAAGH,EAAE,CAACC,GAAH,CAAO,mBAAP,CAAxB,CAD2E,CAG3E;;AACA,MAAI,CAACE,iBAAL,EAAwB;AACtB;AACAA,IAAAA,iBAAiB,GAAGP,aAAa,CAACiB,aAAd,CAA4B,wBAA5B,EAAsD;AAAEC,MAAAA,MAAM,EAAE,CAACH,KAAD;AAAV,KAAtD,EAA2EX,EAA3E,EAA+EY,WAA/E,CAApB;AACA,WAAO;AAAET,MAAAA,iBAAiB,EAAGA;AAAtB,KAAP;AACD,GAJD,MAIO;AACL;AACA,WAAOT,SAAS,CAACqB,iBAAV,CAA4BL,OAA5B,EAAqCP,iBAArC,EAAwD,QAAxD,EAAkE,CAACQ,KAAD,CAAlE,CAAP;AACD;AACF,CAZD;;AAcAb,uBAAuB,CAACkB,WAAxB,GAAsC,UAAShB,EAAT,EAAaU,OAAb,EAAsBC,KAAtB,EAA6B;AACjE,MAAIR,iBAAiB,GAAGH,EAAE,CAACC,GAAH,CAAO,mBAAP,CAAxB;;AAEA,MAAI,CAACE,iBAAL,EAAwB;AAEtB;AACA,WAAO,EAAP;AACD;;AAED,SAAOT,SAAS,CAACuB,sBAAV,CAAiCP,OAAjC,EAA0CP,iBAA1C,EAA6D,QAA7D,EAAuE,mBAAvE,EAA4F,CAACQ,KAAD,CAA5F,CAAP;AACD,CAVD;;AAYAO,MAAM,CAACC,OAAP,GAAiBrB,uBAAjB","sourcesContent":["'use strict';\n\nvar cmdHelper = require('./CmdHelper'),\n    elementHelper = require('./ElementHelper');\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is;\n\nvar ExtensionElementsHelper = {};\n\nvar getExtensionElements = function(bo) {\n  return bo.get('extensionElements');\n};\n\nExtensionElementsHelper.getExtensionElements = function(bo, type) {\n  var extensionElements = getExtensionElements(bo);\n  if (typeof extensionElements !== 'undefined') {\n    var extensionValues = extensionElements.get('values');\n    if (typeof extensionValues !== 'undefined') {\n      var elements = extensionValues.filter(function(value) {\n        return is(value, type);\n      });\n      if (elements.length) {\n        return elements;\n      }\n    }\n  }\n};\n\nExtensionElementsHelper.addEntry = function(bo, element, entry, bpmnFactory) {\n  var extensionElements = bo.get('extensionElements');\n\n  // if there is no extensionElements list, create one\n  if (!extensionElements) {\n    // TODO: Ask Daniel which operation costs more\n    extensionElements = elementHelper.createElement('bpmn:ExtensionElements', { values: [entry] }, bo, bpmnFactory);\n    return { extensionElements : extensionElements };\n  } else {\n    // add new failedJobRetryExtensionElement to existing extensionElements list\n    return cmdHelper.addElementsTolist(element, extensionElements, 'values', [entry]);\n  }\n};\n\nExtensionElementsHelper.removeEntry = function(bo, element, entry) {\n  var extensionElements = bo.get('extensionElements');\n\n  if (!extensionElements) {\n\n    // return an empty command when there is no extensionElements list\n    return {};\n  }\n\n  return cmdHelper.removeElementsFromList(element, extensionElements, 'values', 'extensionElements', [entry]);\n};\n\nmodule.exports = ExtensionElementsHelper;\n"]},"metadata":{},"sourceType":"script"}