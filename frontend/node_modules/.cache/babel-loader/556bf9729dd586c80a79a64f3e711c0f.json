{"ast":null,"code":"import inherits from 'inherits';\nimport CreateShapeHandler from './CreateShapeHandler';\n/**\n * A handler that attaches a label to a given target shape.\n *\n * @param {Canvas} canvas\n */\n\nexport default function CreateLabelHandler(canvas) {\n  CreateShapeHandler.call(this, canvas);\n}\ninherits(CreateLabelHandler, CreateShapeHandler);\nCreateLabelHandler.$inject = ['canvas']; // api //////////////////////\n\nvar originalExecute = CreateShapeHandler.prototype.execute;\n/**\n * Appends a label to a target shape.\n *\n * @method CreateLabelHandler#execute\n *\n * @param {Object} context\n * @param {ElementDescriptor} context.target the element the label is attached to\n * @param {ElementDescriptor} context.parent the parent object\n * @param {Point} context.position position of the new element\n */\n\nCreateLabelHandler.prototype.execute = function (context) {\n  var label = context.shape;\n  ensureValidDimensions(label);\n  label.labelTarget = context.labelTarget;\n  return originalExecute.call(this, context);\n};\n\nvar originalRevert = CreateShapeHandler.prototype.revert;\n/**\n * Undo append by removing the shape\n */\n\nCreateLabelHandler.prototype.revert = function (context) {\n  context.shape.labelTarget = null;\n  return originalRevert.call(this, context);\n}; // helpers //////////////////////\n\n\nfunction ensureValidDimensions(label) {\n  // make sure a label has valid { width, height } dimensions\n  ['width', 'height'].forEach(function (prop) {\n    if (typeof label[prop] === 'undefined') {\n      label[prop] = 0;\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/diagram-js/lib/features/modeling/cmd/CreateLabelHandler.js"],"names":["inherits","CreateShapeHandler","CreateLabelHandler","canvas","call","$inject","originalExecute","prototype","execute","context","label","shape","ensureValidDimensions","labelTarget","originalRevert","revert","forEach","prop"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AAGA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AACjDF,EAAAA,kBAAkB,CAACG,IAAnB,CAAwB,IAAxB,EAA8BD,MAA9B;AACD;AAEDH,QAAQ,CAACE,kBAAD,EAAqBD,kBAArB,CAAR;AAEAC,kBAAkB,CAACG,OAAnB,GAA6B,CAAE,QAAF,CAA7B,C,CAGA;;AAGA,IAAIC,eAAe,GAAGL,kBAAkB,CAACM,SAAnB,CAA6BC,OAAnD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAN,kBAAkB,CAACK,SAAnB,CAA6BC,OAA7B,GAAuC,UAASC,OAAT,EAAkB;AAEvD,MAAIC,KAAK,GAAGD,OAAO,CAACE,KAApB;AAEAC,EAAAA,qBAAqB,CAACF,KAAD,CAArB;AAEAA,EAAAA,KAAK,CAACG,WAAN,GAAoBJ,OAAO,CAACI,WAA5B;AAEA,SAAOP,eAAe,CAACF,IAAhB,CAAqB,IAArB,EAA2BK,OAA3B,CAAP;AACD,CATD;;AAWA,IAAIK,cAAc,GAAGb,kBAAkB,CAACM,SAAnB,CAA6BQ,MAAlD;AAEA;AACA;AACA;;AACAb,kBAAkB,CAACK,SAAnB,CAA6BQ,MAA7B,GAAsC,UAASN,OAAT,EAAkB;AACtDA,EAAAA,OAAO,CAACE,KAAR,CAAcE,WAAd,GAA4B,IAA5B;AAEA,SAAOC,cAAc,CAACV,IAAf,CAAoB,IAApB,EAA0BK,OAA1B,CAAP;AACD,CAJD,C,CAOA;;;AAEA,SAASG,qBAAT,CAA+BF,KAA/B,EAAsC;AACpC;AACA,GAAE,OAAF,EAAW,QAAX,EAAsBM,OAAtB,CAA8B,UAASC,IAAT,EAAe;AAC3C,QAAI,OAAOP,KAAK,CAACO,IAAD,CAAZ,KAAuB,WAA3B,EAAwC;AACtCP,MAAAA,KAAK,CAACO,IAAD,CAAL,GAAc,CAAd;AACD;AACF,GAJD;AAKD","sourcesContent":["import inherits from 'inherits';\n\nimport CreateShapeHandler from './CreateShapeHandler';\n\n\n/**\n * A handler that attaches a label to a given target shape.\n *\n * @param {Canvas} canvas\n */\nexport default function CreateLabelHandler(canvas) {\n  CreateShapeHandler.call(this, canvas);\n}\n\ninherits(CreateLabelHandler, CreateShapeHandler);\n\nCreateLabelHandler.$inject = [ 'canvas' ];\n\n\n// api //////////////////////\n\n\nvar originalExecute = CreateShapeHandler.prototype.execute;\n\n/**\n * Appends a label to a target shape.\n *\n * @method CreateLabelHandler#execute\n *\n * @param {Object} context\n * @param {ElementDescriptor} context.target the element the label is attached to\n * @param {ElementDescriptor} context.parent the parent object\n * @param {Point} context.position position of the new element\n */\nCreateLabelHandler.prototype.execute = function(context) {\n\n  var label = context.shape;\n\n  ensureValidDimensions(label);\n\n  label.labelTarget = context.labelTarget;\n\n  return originalExecute.call(this, context);\n};\n\nvar originalRevert = CreateShapeHandler.prototype.revert;\n\n/**\n * Undo append by removing the shape\n */\nCreateLabelHandler.prototype.revert = function(context) {\n  context.shape.labelTarget = null;\n\n  return originalRevert.call(this, context);\n};\n\n\n// helpers //////////////////////\n\nfunction ensureValidDimensions(label) {\n  // make sure a label has valid { width, height } dimensions\n  [ 'width', 'height' ].forEach(function(prop) {\n    if (typeof label[prop] === 'undefined') {\n      label[prop] = 0;\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}