{"ast":null,"code":"import { isArray } from 'min-dash';\n/**\n * Reconnect connection handler\n */\n\nexport default function ReconnectConnectionHandler(modeling) {\n  this._modeling = modeling;\n}\nReconnectConnectionHandler.$inject = ['modeling'];\n\nReconnectConnectionHandler.prototype.execute = function (context) {\n  var newSource = context.newSource,\n      newTarget = context.newTarget,\n      connection = context.connection,\n      dockingOrPoints = context.dockingOrPoints;\n\n  if (!newSource && !newTarget) {\n    throw new Error('newSource or newTarget are required');\n  }\n\n  if (newSource && newTarget) {\n    throw new Error('must specify either newSource or newTarget');\n  }\n\n  if (isArray(dockingOrPoints)) {\n    context.oldWaypoints = connection.waypoints;\n    connection.waypoints = dockingOrPoints;\n  }\n\n  if (newSource) {\n    context.oldSource = connection.source;\n    connection.source = newSource;\n  }\n\n  if (newTarget) {\n    context.oldTarget = connection.target;\n    connection.target = newTarget;\n  }\n\n  return connection;\n};\n\nReconnectConnectionHandler.prototype.postExecute = function (context) {\n  var connection = context.connection,\n      dockingOrPoints = context.dockingOrPoints,\n      newSource = context.newSource,\n      movedEnd = newSource ? 'connectionStart' : 'connectionEnd',\n      newWaypoint,\n      hints = {};\n\n  if (isArray(dockingOrPoints)) {\n    newWaypoint = newSource ? dockingOrPoints[0] : dockingOrPoints[dockingOrPoints.length - 1];\n  } else {\n    newWaypoint = dockingOrPoints;\n  }\n\n  hints[movedEnd] = getDocking(newWaypoint);\n\n  this._modeling.layoutConnection(connection, hints);\n};\n\nReconnectConnectionHandler.prototype.revert = function (context) {\n  var oldSource = context.oldSource,\n      oldTarget = context.oldTarget,\n      oldWaypoints = context.oldWaypoints,\n      connection = context.connection;\n\n  if (oldSource) {\n    connection.source = oldSource;\n  }\n\n  if (oldTarget) {\n    connection.target = oldTarget;\n  }\n\n  if (oldWaypoints) {\n    connection.waypoints = oldWaypoints;\n  }\n\n  return connection;\n}; // helper ///////////////\n\n\nfunction getDocking(point) {\n  return point.original || point;\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/diagram-js/lib/features/modeling/cmd/ReconnectConnectionHandler.js"],"names":["isArray","ReconnectConnectionHandler","modeling","_modeling","$inject","prototype","execute","context","newSource","newTarget","connection","dockingOrPoints","Error","oldWaypoints","waypoints","oldSource","source","oldTarget","target","postExecute","movedEnd","newWaypoint","hints","length","getDocking","layoutConnection","revert","point","original"],"mappings":"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","sourcesContent":["import { isArray } from 'min-dash';\n\n\n/**\n * Reconnect connection handler\n */\nexport default function ReconnectConnectionHandler(modeling) {\n  this._modeling = modeling;\n}\n\nReconnectConnectionHandler.$inject = [ 'modeling' ];\n\nReconnectConnectionHandler.prototype.execute = function(context) {\n\n  var newSource = context.newSource,\n      newTarget = context.newTarget,\n      connection = context.connection,\n      dockingOrPoints = context.dockingOrPoints;\n\n  if (!newSource && !newTarget) {\n    throw new Error('newSource or newTarget are required');\n  }\n\n  if (newSource && newTarget) {\n    throw new Error('must specify either newSource or newTarget');\n  }\n\n  if (isArray(dockingOrPoints)) {\n    context.oldWaypoints = connection.waypoints;\n    connection.waypoints = dockingOrPoints;\n  }\n\n  if (newSource) {\n    context.oldSource = connection.source;\n    connection.source = newSource;\n  }\n\n  if (newTarget) {\n    context.oldTarget = connection.target;\n    connection.target = newTarget;\n  }\n\n  return connection;\n};\n\nReconnectConnectionHandler.prototype.postExecute = function(context) {\n  var connection = context.connection,\n      dockingOrPoints = context.dockingOrPoints,\n      newSource = context.newSource,\n      movedEnd = newSource ? 'connectionStart' : 'connectionEnd',\n      newWaypoint,\n      hints = {};\n\n  if (isArray(dockingOrPoints)) {\n    newWaypoint = newSource ? dockingOrPoints[0] : dockingOrPoints[dockingOrPoints.length - 1];\n  } else {\n    newWaypoint = dockingOrPoints;\n  }\n\n  hints[movedEnd] = getDocking(newWaypoint);\n\n  this._modeling.layoutConnection(connection, hints);\n};\n\nReconnectConnectionHandler.prototype.revert = function(context) {\n\n  var oldSource = context.oldSource,\n      oldTarget = context.oldTarget,\n      oldWaypoints = context.oldWaypoints,\n      connection = context.connection;\n\n  if (oldSource) {\n    connection.source = oldSource;\n  }\n\n  if (oldTarget) {\n    connection.target = oldTarget;\n  }\n\n  if (oldWaypoints) {\n    connection.waypoints = oldWaypoints;\n  }\n\n  return connection;\n};\n\n\n\n// helper ///////////////\n\nfunction getDocking(point) {\n  return point.original || point;\n}"]},"metadata":{},"sourceType":"module"}