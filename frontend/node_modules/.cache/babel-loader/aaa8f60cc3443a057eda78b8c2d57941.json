{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\n/**\n * BPMN specific create participant behavior\n */\n\nexport default function CreateParticipantBehavior(eventBus, modeling, elementFactory, bpmnFactory, canvas) {\n  CommandInterceptor.call(this, eventBus);\n  /**\n   * morph process into collaboration before adding\n   * participant onto collaboration\n   */\n\n  this.preExecute('shape.create', function (context) {\n    var parent = context.parent,\n        shape = context.shape,\n        position = context.position;\n    var rootElement = canvas.getRootElement();\n\n    if (is(parent, 'bpmn:Process') && is(shape, 'bpmn:Participant') && !is(rootElement, 'bpmn:Collaboration')) {\n      // this is going to detach the process root\n      // and set the returned collaboration element\n      // as the new root element\n      var collaborationElement = modeling.makeCollaboration(); // monkey patch the create context\n      // so that the participant is being dropped\n      // onto the new collaboration root instead\n\n      context.position = position;\n      context.parent = collaborationElement;\n      context.processRoot = parent;\n    }\n  }, true);\n  this.execute('shape.create', function (context) {\n    var processRoot = context.processRoot,\n        shape = context.shape;\n\n    if (processRoot) {\n      context.oldProcessRef = shape.businessObject.processRef; // assign the participant processRef\n\n      shape.businessObject.processRef = processRoot.businessObject;\n    }\n  }, true);\n  this.revert('shape.create', function (context) {\n    var processRoot = context.processRoot,\n        shape = context.shape;\n\n    if (processRoot) {\n      // assign the participant processRef\n      shape.businessObject.processRef = context.oldProcessRef;\n    }\n  }, true);\n  this.postExecute('shape.create', function (context) {\n    var processRoot = context.processRoot,\n        shape = context.shape;\n\n    if (processRoot) {\n      // process root is already detached at this point\n      var processChildren = processRoot.children.slice();\n      modeling.moveElements(processChildren, {\n        x: 0,\n        y: 0\n      }, shape);\n    }\n  }, true);\n}\nCreateParticipantBehavior.$inject = ['eventBus', 'modeling', 'elementFactory', 'bpmnFactory', 'canvas'];\ninherits(CreateParticipantBehavior, CommandInterceptor);","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/lib/features/modeling/behavior/CreateParticipantBehavior.js"],"names":["inherits","CommandInterceptor","is","CreateParticipantBehavior","eventBus","modeling","elementFactory","bpmnFactory","canvas","call","preExecute","context","parent","shape","position","rootElement","getRootElement","collaborationElement","makeCollaboration","processRoot","execute","oldProcessRef","businessObject","processRef","revert","postExecute","processChildren","children","slice","moveElements","x","y","$inject"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,OAAOC,kBAAP,MAA+B,2CAA/B;AAEA,SAASC,EAAT,QAAmB,yBAAnB;AAGA;AACA;AACA;;AACA,eAAe,SAASC,yBAAT,CACXC,QADW,EACDC,QADC,EACSC,cADT,EAEXC,WAFW,EAEEC,MAFF,EAEU;AAEvBP,EAAAA,kBAAkB,CAACQ,IAAnB,CAAwB,IAAxB,EAA8BL,QAA9B;AAEA;AACF;AACA;AACA;;AAEE,OAAKM,UAAL,CAAgB,cAAhB,EAAgC,UAASC,OAAT,EAAkB;AAEhD,QAAIC,MAAM,GAAGD,OAAO,CAACC,MAArB;AAAA,QACIC,KAAK,GAAGF,OAAO,CAACE,KADpB;AAAA,QAEIC,QAAQ,GAAGH,OAAO,CAACG,QAFvB;AAIA,QAAIC,WAAW,GAAGP,MAAM,CAACQ,cAAP,EAAlB;;AAEA,QACEd,EAAE,CAACU,MAAD,EAAS,cAAT,CAAF,IACAV,EAAE,CAACW,KAAD,EAAQ,kBAAR,CADF,IAEA,CAACX,EAAE,CAACa,WAAD,EAAc,oBAAd,CAHL,EAIE;AAEA;AACA;AACA;AACA,UAAIE,oBAAoB,GAAGZ,QAAQ,CAACa,iBAAT,EAA3B,CALA,CAOA;AACA;AACA;;AACAP,MAAAA,OAAO,CAACG,QAAR,GAAmBA,QAAnB;AACAH,MAAAA,OAAO,CAACC,MAAR,GAAiBK,oBAAjB;AAEAN,MAAAA,OAAO,CAACQ,WAAR,GAAsBP,MAAtB;AACD;AACF,GA3BD,EA2BG,IA3BH;AA8BA,OAAKQ,OAAL,CAAa,cAAb,EAA6B,UAAST,OAAT,EAAkB;AAE7C,QAAIQ,WAAW,GAAGR,OAAO,CAACQ,WAA1B;AAAA,QACIN,KAAK,GAAGF,OAAO,CAACE,KADpB;;AAGA,QAAIM,WAAJ,EAAiB;AACfR,MAAAA,OAAO,CAACU,aAAR,GAAwBR,KAAK,CAACS,cAAN,CAAqBC,UAA7C,CADe,CAGf;;AACAV,MAAAA,KAAK,CAACS,cAAN,CAAqBC,UAArB,GAAkCJ,WAAW,CAACG,cAA9C;AACD;AACF,GAXD,EAWG,IAXH;AAcA,OAAKE,MAAL,CAAY,cAAZ,EAA4B,UAASb,OAAT,EAAkB;AAC5C,QAAIQ,WAAW,GAAGR,OAAO,CAACQ,WAA1B;AAAA,QACIN,KAAK,GAAGF,OAAO,CAACE,KADpB;;AAGA,QAAIM,WAAJ,EAAiB;AACf;AACAN,MAAAA,KAAK,CAACS,cAAN,CAAqBC,UAArB,GAAkCZ,OAAO,CAACU,aAA1C;AACD;AACF,GARD,EAQG,IARH;AAWA,OAAKI,WAAL,CAAiB,cAAjB,EAAiC,UAASd,OAAT,EAAkB;AAEjD,QAAIQ,WAAW,GAAGR,OAAO,CAACQ,WAA1B;AAAA,QACIN,KAAK,GAAGF,OAAO,CAACE,KADpB;;AAGA,QAAIM,WAAJ,EAAiB;AACf;AACA,UAAIO,eAAe,GAAGP,WAAW,CAACQ,QAAZ,CAAqBC,KAArB,EAAtB;AACAvB,MAAAA,QAAQ,CAACwB,YAAT,CAAsBH,eAAtB,EAAuC;AAAEI,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAAvC,EAAuDlB,KAAvD;AACD;AAEF,GAXD,EAWG,IAXH;AAaD;AAEDV,yBAAyB,CAAC6B,OAA1B,GAAoC,CAClC,UADkC,EAElC,UAFkC,EAGlC,gBAHkC,EAIlC,aAJkC,EAKlC,QALkC,CAApC;AAQAhC,QAAQ,CAACG,yBAAD,EAA4BF,kBAA5B,CAAR","sourcesContent":["import inherits from 'inherits';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { is } from '../../../util/ModelUtil';\n\n\n/**\n * BPMN specific create participant behavior\n */\nexport default function CreateParticipantBehavior(\n    eventBus, modeling, elementFactory,\n    bpmnFactory, canvas) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  /**\n   * morph process into collaboration before adding\n   * participant onto collaboration\n   */\n\n  this.preExecute('shape.create', function(context) {\n\n    var parent = context.parent,\n        shape = context.shape,\n        position = context.position;\n\n    var rootElement = canvas.getRootElement();\n\n    if (\n      is(parent, 'bpmn:Process') &&\n      is(shape, 'bpmn:Participant') &&\n      !is(rootElement, 'bpmn:Collaboration')\n    ) {\n\n      // this is going to detach the process root\n      // and set the returned collaboration element\n      // as the new root element\n      var collaborationElement = modeling.makeCollaboration();\n\n      // monkey patch the create context\n      // so that the participant is being dropped\n      // onto the new collaboration root instead\n      context.position = position;\n      context.parent = collaborationElement;\n\n      context.processRoot = parent;\n    }\n  }, true);\n\n\n  this.execute('shape.create', function(context) {\n\n    var processRoot = context.processRoot,\n        shape = context.shape;\n\n    if (processRoot) {\n      context.oldProcessRef = shape.businessObject.processRef;\n\n      // assign the participant processRef\n      shape.businessObject.processRef = processRoot.businessObject;\n    }\n  }, true);\n\n\n  this.revert('shape.create', function(context) {\n    var processRoot = context.processRoot,\n        shape = context.shape;\n\n    if (processRoot) {\n      // assign the participant processRef\n      shape.businessObject.processRef = context.oldProcessRef;\n    }\n  }, true);\n\n\n  this.postExecute('shape.create', function(context) {\n\n    var processRoot = context.processRoot,\n        shape = context.shape;\n\n    if (processRoot) {\n      // process root is already detached at this point\n      var processChildren = processRoot.children.slice();\n      modeling.moveElements(processChildren, { x: 0, y: 0 }, shape);\n    }\n\n  }, true);\n\n}\n\nCreateParticipantBehavior.$inject = [\n  'eventBus',\n  'modeling',\n  'elementFactory',\n  'bpmnFactory',\n  'canvas'\n];\n\ninherits(CreateParticipantBehavior, CommandInterceptor);"]},"metadata":{},"sourceType":"module"}