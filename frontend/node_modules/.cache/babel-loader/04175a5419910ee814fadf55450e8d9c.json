{"ast":null,"code":"import { add as collectionAdd, remove as collectionRemove } from 'diagram-js/lib/util/Collections';\nexport default function UpdateCanvasRootHandler(canvas, modeling) {\n  this._canvas = canvas;\n  this._modeling = modeling;\n}\nUpdateCanvasRootHandler.$inject = ['canvas', 'modeling'];\n\nUpdateCanvasRootHandler.prototype.execute = function (context) {\n  var canvas = this._canvas;\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = canvas.getRootElement(),\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = oldRootBusinessObject.$parent,\n      diPlane = oldRootBusinessObject.di; // (1) replace process old <> new root\n\n  canvas.setRootElement(newRoot, true); // (2) update root elements\n\n  collectionAdd(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = bpmnDefinitions;\n  collectionRemove(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = null; // (3) wire di\n\n  oldRootBusinessObject.di = null;\n  diPlane.bpmnElement = newRootBusinessObject;\n  newRootBusinessObject.di = diPlane;\n  context.oldRoot = oldRoot; // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n};\n\nUpdateCanvasRootHandler.prototype.revert = function (context) {\n  var canvas = this._canvas;\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = context.oldRoot,\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = newRootBusinessObject.$parent,\n      diPlane = newRootBusinessObject.di; // (1) replace process old <> new root\n\n  canvas.setRootElement(oldRoot, true); // (2) update root elements\n\n  collectionRemove(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = null;\n  collectionAdd(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = bpmnDefinitions; // (3) wire di\n\n  newRootBusinessObject.di = null;\n  diPlane.bpmnElement = oldRootBusinessObject;\n  oldRootBusinessObject.di = diPlane; // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/goal-bpmn/frontend/node_modules/bpmn-js/lib/features/modeling/cmd/UpdateCanvasRootHandler.js"],"names":["add","collectionAdd","remove","collectionRemove","UpdateCanvasRootHandler","canvas","modeling","_canvas","_modeling","$inject","prototype","execute","context","newRoot","newRootBusinessObject","businessObject","oldRoot","getRootElement","oldRootBusinessObject","bpmnDefinitions","$parent","diPlane","di","setRootElement","rootElements","bpmnElement","revert"],"mappings":"AAAA,SACEA,GAAG,IAAIC,aADT,EAEEC,MAAM,IAAIC,gBAFZ,QAGO,iCAHP;AAMA,eAAe,SAASC,uBAAT,CAAiCC,MAAjC,EAAyCC,QAAzC,EAAmD;AAChE,OAAKC,OAAL,GAAeF,MAAf;AACA,OAAKG,SAAL,GAAiBF,QAAjB;AACD;AAEDF,uBAAuB,CAACK,OAAxB,GAAkC,CAChC,QADgC,EAEhC,UAFgC,CAAlC;;AAMAL,uBAAuB,CAACM,SAAxB,CAAkCC,OAAlC,GAA4C,UAASC,OAAT,EAAkB;AAE5D,MAAIP,MAAM,GAAG,KAAKE,OAAlB;AAEA,MAAIM,OAAO,GAAGD,OAAO,CAACC,OAAtB;AAAA,MACIC,qBAAqB,GAAGD,OAAO,CAACE,cADpC;AAAA,MAEIC,OAAO,GAAGX,MAAM,CAACY,cAAP,EAFd;AAAA,MAGIC,qBAAqB,GAAGF,OAAO,CAACD,cAHpC;AAAA,MAIII,eAAe,GAAGD,qBAAqB,CAACE,OAJ5C;AAAA,MAKIC,OAAO,GAAGH,qBAAqB,CAACI,EALpC,CAJ4D,CAW5D;;AACAjB,EAAAA,MAAM,CAACkB,cAAP,CAAsBV,OAAtB,EAA+B,IAA/B,EAZ4D,CAc5D;;AACAZ,EAAAA,aAAa,CAACkB,eAAe,CAACK,YAAjB,EAA+BV,qBAA/B,CAAb;AACAA,EAAAA,qBAAqB,CAACM,OAAtB,GAAgCD,eAAhC;AAEAhB,EAAAA,gBAAgB,CAACgB,eAAe,CAACK,YAAjB,EAA+BN,qBAA/B,CAAhB;AACAA,EAAAA,qBAAqB,CAACE,OAAtB,GAAgC,IAAhC,CAnB4D,CAqB5D;;AACAF,EAAAA,qBAAqB,CAACI,EAAtB,GAA2B,IAA3B;AAEAD,EAAAA,OAAO,CAACI,WAAR,GAAsBX,qBAAtB;AACAA,EAAAA,qBAAqB,CAACQ,EAAtB,GAA2BD,OAA3B;AAEAT,EAAAA,OAAO,CAACI,OAAR,GAAkBA,OAAlB,CA3B4D,CA6B5D;AACA;AACD,CA/BD;;AAkCAZ,uBAAuB,CAACM,SAAxB,CAAkCgB,MAAlC,GAA2C,UAASd,OAAT,EAAkB;AAE3D,MAAIP,MAAM,GAAG,KAAKE,OAAlB;AAEA,MAAIM,OAAO,GAAGD,OAAO,CAACC,OAAtB;AAAA,MACIC,qBAAqB,GAAGD,OAAO,CAACE,cADpC;AAAA,MAEIC,OAAO,GAAGJ,OAAO,CAACI,OAFtB;AAAA,MAGIE,qBAAqB,GAAGF,OAAO,CAACD,cAHpC;AAAA,MAIII,eAAe,GAAGL,qBAAqB,CAACM,OAJ5C;AAAA,MAKIC,OAAO,GAAGP,qBAAqB,CAACQ,EALpC,CAJ2D,CAW3D;;AACAjB,EAAAA,MAAM,CAACkB,cAAP,CAAsBP,OAAtB,EAA+B,IAA/B,EAZ2D,CAc3D;;AACAb,EAAAA,gBAAgB,CAACgB,eAAe,CAACK,YAAjB,EAA+BV,qBAA/B,CAAhB;AACAA,EAAAA,qBAAqB,CAACM,OAAtB,GAAgC,IAAhC;AAEAnB,EAAAA,aAAa,CAACkB,eAAe,CAACK,YAAjB,EAA+BN,qBAA/B,CAAb;AACAA,EAAAA,qBAAqB,CAACE,OAAtB,GAAgCD,eAAhC,CAnB2D,CAqB3D;;AACAL,EAAAA,qBAAqB,CAACQ,EAAtB,GAA2B,IAA3B;AAEAD,EAAAA,OAAO,CAACI,WAAR,GAAsBP,qBAAtB;AACAA,EAAAA,qBAAqB,CAACI,EAAtB,GAA2BD,OAA3B,CAzB2D,CA2B3D;AACA;AACD,CA7BD","sourcesContent":["import {\n  add as collectionAdd,\n  remove as collectionRemove\n} from 'diagram-js/lib/util/Collections';\n\n\nexport default function UpdateCanvasRootHandler(canvas, modeling) {\n  this._canvas = canvas;\n  this._modeling = modeling;\n}\n\nUpdateCanvasRootHandler.$inject = [\n  'canvas',\n  'modeling'\n];\n\n\nUpdateCanvasRootHandler.prototype.execute = function(context) {\n\n  var canvas = this._canvas;\n\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = canvas.getRootElement(),\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = oldRootBusinessObject.$parent,\n      diPlane = oldRootBusinessObject.di;\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(newRoot, true);\n\n  // (2) update root elements\n  collectionAdd(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = bpmnDefinitions;\n\n  collectionRemove(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = null;\n\n  // (3) wire di\n  oldRootBusinessObject.di = null;\n\n  diPlane.bpmnElement = newRootBusinessObject;\n  newRootBusinessObject.di = diPlane;\n\n  context.oldRoot = oldRoot;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n};\n\n\nUpdateCanvasRootHandler.prototype.revert = function(context) {\n\n  var canvas = this._canvas;\n\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = context.oldRoot,\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = newRootBusinessObject.$parent,\n      diPlane = newRootBusinessObject.di;\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(oldRoot, true);\n\n  // (2) update root elements\n  collectionRemove(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = null;\n\n  collectionAdd(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = bpmnDefinitions;\n\n  // (3) wire di\n  newRootBusinessObject.di = null;\n\n  diPlane.bpmnElement = oldRootBusinessObject;\n  oldRootBusinessObject.di = diPlane;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n};"]},"metadata":{},"sourceType":"module"}