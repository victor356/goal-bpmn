{"ast":null,"code":"'use strict';\n\nvar assign = require('lodash/assign');\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    getTemplate = require('../Helper').getTemplate,\n    cmdHelper = require('../../../../helper/CmdHelper'),\n    elementHelper = require('../../../../helper/ElementHelper');\n\nvar findExtension = require('../Helper').findExtension,\n    findExtensions = require('../Helper').findExtensions,\n    findInputParameter = require('../Helper').findInputParameter,\n    findOutputParameter = require('../Helper').findOutputParameter,\n    findCamundaProperty = require('../Helper').findCamundaProperty,\n    findCamundaInOut = require('../Helper').findCamundaInOut;\n\nvar createCamundaProperty = require('../CreateHelper').createCamundaProperty,\n    createInputParameter = require('../CreateHelper').createInputParameter,\n    createOutputParameter = require('../CreateHelper').createOutputParameter,\n    createCamundaIn = require('../CreateHelper').createCamundaIn,\n    createCamundaOut = require('../CreateHelper').createCamundaOut,\n    createCamundaInWithBusinessKey = require('../CreateHelper').createCamundaInWithBusinessKey,\n    createCamundaFieldInjection = require('../CreateHelper').createCamundaFieldInjection;\n\nvar CAMUNDA_PROPERTY_TYPE = 'camunda:property',\n    CAMUNDA_INPUT_PARAMETER_TYPE = 'camunda:inputParameter',\n    CAMUNDA_OUTPUT_PARAMETER_TYPE = 'camunda:outputParameter',\n    CAMUNDA_IN_TYPE = 'camunda:in',\n    CAMUNDA_OUT_TYPE = 'camunda:out',\n    CAMUNDA_IN_BUSINESS_KEY_TYPE = 'camunda:in:businessKey',\n    CAMUNDA_EXECUTION_LISTENER_TYPE = 'camunda:executionListener',\n    CAMUNDA_FIELD = 'camunda:field';\nvar BASIC_MODDLE_TYPES = ['Boolean', 'Integer', 'String'];\nvar EXTENSION_BINDING_TYPES = [CAMUNDA_PROPERTY_TYPE, CAMUNDA_INPUT_PARAMETER_TYPE, CAMUNDA_OUTPUT_PARAMETER_TYPE, CAMUNDA_IN_TYPE, CAMUNDA_OUT_TYPE, CAMUNDA_IN_BUSINESS_KEY_TYPE, CAMUNDA_FIELD];\nvar IO_BINDING_TYPES = [CAMUNDA_INPUT_PARAMETER_TYPE, CAMUNDA_OUTPUT_PARAMETER_TYPE];\nvar IN_OUT_BINDING_TYPES = [CAMUNDA_IN_TYPE, CAMUNDA_OUT_TYPE, CAMUNDA_IN_BUSINESS_KEY_TYPE];\n/**\n * Injects custom properties into the given group.\n *\n * @param {GroupDescriptor} group\n * @param {djs.model.Base} element\n * @param {ElementTemplates} elementTemplates\n * @param {BpmnFactory} bpmnFactory\n */\n\nmodule.exports = function (element, elementTemplates, bpmnFactory, translate) {\n  var template = getTemplate(element, elementTemplates);\n\n  if (!template) {\n    return [];\n  }\n\n  var renderCustomField = function (id, p, idx) {\n    var propertyType = p.type;\n    var entryOptions = {\n      id: id,\n      description: p.description,\n      label: p.label,\n      modelProperty: id,\n      get: propertyGetter(id, p),\n      set: propertySetter(id, p, bpmnFactory),\n      validate: propertyValidator(id, p)\n    };\n    var entry;\n\n    if (propertyType === 'Boolean') {\n      entry = entryFactory.checkbox(entryOptions);\n    }\n\n    if (propertyType === 'String') {\n      entry = entryFactory.textField(entryOptions);\n    }\n\n    if (propertyType === 'Text') {\n      entry = entryFactory.textBox(entryOptions);\n    }\n\n    if (propertyType === 'Dropdown') {\n      entryOptions.selectOptions = p.choices;\n      entry = entryFactory.selectBox(entryOptions);\n    }\n\n    return entry;\n  };\n\n  var groups = [];\n  var id, entry;\n  var customFieldsGroup = {\n    id: 'customField',\n    label: translate('Custom Fields'),\n    entries: []\n  };\n  template.properties.forEach(function (p, idx) {\n    id = 'custom-' + template.id + '-' + idx;\n    entry = renderCustomField(id, p, idx);\n\n    if (entry) {\n      customFieldsGroup.entries.push(entry);\n    }\n  });\n\n  if (customFieldsGroup.entries.length > 0) {\n    groups.push(customFieldsGroup);\n  }\n\n  if (template.scopes) {\n    for (var scopeName in template.scopes) {\n      var scope = template.scopes[scopeName];\n      var idScopeName = scopeName.replace(/:/g, '_');\n      var customScopeFieldsGroup = {\n        id: 'customField-' + idScopeName,\n        label: translate('Custom Fields for scope: ') + scopeName,\n        entries: []\n      };\n      scope.properties.forEach(function (p, idx) {\n        var propertyId = 'custom-' + template.id + '-' + idScopeName + '-' + idx;\n        var scopedProperty = propertyWithScope(p, scopeName);\n        entry = renderCustomField(propertyId, scopedProperty, idx);\n\n        if (entry) {\n          customScopeFieldsGroup.entries.push(entry);\n        }\n      });\n\n      if (customScopeFieldsGroup.entries.length > 0) {\n        groups.push(customScopeFieldsGroup);\n      }\n    }\n  }\n\n  return groups;\n}; // getters, setters and validators ///////////////\n\n/**\n * Return a getter that retrieves the given property.\n *\n * @param {String} name\n * @param {PropertyDescriptor} property\n *\n * @return {Function}\n */\n\n\nfunction propertyGetter(name, property) {\n  /* getter */\n  return function get(element) {\n    var value = getPropertyValue(element, property);\n    return objectWithKey(name, value);\n  };\n}\n/**\n * Return a setter that updates the given property.\n *\n * @param {String} name\n * @param {PropertyDescriptor} property\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {Function}\n */\n\n\nfunction propertySetter(name, property, bpmnFactory) {\n  /* setter */\n  return function set(element, values) {\n    var value = values[name];\n    return setPropertyValue(element, property, value, bpmnFactory);\n  };\n}\n/**\n * Return a validator that ensures the property is ok.\n *\n * @param {String} name\n * @param {PropertyDescriptor} property\n *\n * @return {Function}\n */\n\n\nfunction propertyValidator(name, property) {\n  /* validator */\n  return function validate(element, values) {\n    var value = values[name];\n    var error = validateValue(value, property);\n\n    if (error) {\n      return objectWithKey(name, error);\n    }\n  };\n} // get, set and validate helpers ///////////////////\n\n/**\n * Return the value of the specified property descriptor,\n * on the passed diagram element.\n *\n * @param {djs.model.Base} element\n * @param {PropertyDescriptor} property\n *\n * @return {Any}\n */\n\n\nfunction getPropertyValue(element, property) {\n  var bo = getBusinessObject(element);\n  var binding = property.binding,\n      scope = property.scope;\n  var bindingType = binding.type,\n      bindingName = binding.name;\n  var propertyValue = property.value || '';\n\n  if (scope) {\n    bo = findExtension(bo, scope.name);\n\n    if (!bo) {\n      return propertyValue;\n    }\n  } // property\n\n\n  if (bindingType === 'property') {\n    var value = bo.get(bindingName);\n\n    if (bindingName === 'conditionExpression') {\n      if (value) {\n        return value.body;\n      } else {\n        // return defined default\n        return propertyValue;\n      }\n    } else {\n      // return value; default to defined default\n      return typeof value !== 'undefined' ? value : propertyValue;\n    }\n  }\n\n  var camundaProperties, camundaProperty;\n\n  if (bindingType === CAMUNDA_PROPERTY_TYPE) {\n    if (scope) {\n      camundaProperties = bo.get('properties');\n    } else {\n      camundaProperties = findExtension(bo, 'camunda:Properties');\n    }\n\n    if (camundaProperties) {\n      camundaProperty = findCamundaProperty(camundaProperties, binding);\n\n      if (camundaProperty) {\n        return camundaProperty.value;\n      }\n    }\n\n    return propertyValue;\n  }\n\n  var inputOutput, ioParameter;\n\n  if (IO_BINDING_TYPES.indexOf(bindingType) !== -1) {\n    if (scope) {\n      inputOutput = bo.get('inputOutput');\n    } else {\n      inputOutput = findExtension(bo, 'camunda:InputOutput');\n    }\n\n    if (!inputOutput) {\n      // ioParameter cannot exist yet, return property value\n      return propertyValue;\n    }\n  } // camunda input parameter\n\n\n  if (bindingType === CAMUNDA_INPUT_PARAMETER_TYPE) {\n    ioParameter = findInputParameter(inputOutput, binding);\n\n    if (ioParameter) {\n      if (binding.scriptFormat) {\n        if (ioParameter.definition) {\n          return ioParameter.definition.value;\n        }\n      } else {\n        return ioParameter.value || '';\n      }\n    }\n\n    return propertyValue;\n  } // camunda output parameter\n\n\n  if (binding.type === CAMUNDA_OUTPUT_PARAMETER_TYPE) {\n    ioParameter = findOutputParameter(inputOutput, binding);\n\n    if (ioParameter) {\n      return ioParameter.name;\n    }\n\n    return propertyValue;\n  }\n\n  var ioElement;\n\n  if (IN_OUT_BINDING_TYPES.indexOf(bindingType) != -1) {\n    ioElement = findCamundaInOut(bo, binding);\n\n    if (ioElement) {\n      if (bindingType === CAMUNDA_IN_BUSINESS_KEY_TYPE) {\n        return ioElement.businessKey;\n      } else if (bindingType === CAMUNDA_OUT_TYPE) {\n        return ioElement.target;\n      } else if (bindingType === CAMUNDA_IN_TYPE) {\n        return ioElement[binding.expression ? 'sourceExpression' : 'source'];\n      }\n    }\n\n    return propertyValue;\n  }\n\n  if (bindingType === CAMUNDA_EXECUTION_LISTENER_TYPE) {\n    var executionListener;\n\n    if (scope) {\n      executionListener = bo.get('executionListener');\n    } else {\n      executionListener = findExtension(bo, 'camunda:ExecutionListener');\n    }\n\n    return executionListener.script.value;\n  }\n\n  var fieldInjection;\n\n  if (CAMUNDA_FIELD === bindingType) {\n    var fieldInjections = findExtensions(bo, ['camunda:Field']);\n    fieldInjections.forEach(function (item) {\n      if (item.name === binding.name) {\n        fieldInjection = item;\n      }\n    });\n\n    if (fieldInjection) {\n      return fieldInjection.string || fieldInjection.expression;\n    } else {\n      return '';\n    }\n  }\n\n  throw unknownPropertyBinding(property);\n}\n\nmodule.exports.getPropertyValue = getPropertyValue;\n/**\n * Return an update operation that changes the diagram\n * element's custom property to the given value.\n *\n * The response of this method will be processed via\n * {@link PropertiesPanel#applyChanges}.\n *\n * @param {djs.model.Base} element\n * @param {PropertyDescriptor} property\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {Object|Array<Object>} results to be processed\n */\n\nfunction setPropertyValue(element, property, value, bpmnFactory) {\n  var bo = getBusinessObject(element);\n  var binding = property.binding,\n      scope = property.scope;\n  var bindingType = binding.type,\n      bindingName = binding.name;\n  var propertyValue;\n  var updates = [];\n  var extensionElements;\n\n  if (EXTENSION_BINDING_TYPES.indexOf(bindingType) !== -1) {\n    extensionElements = bo.get('extensionElements'); // create extension elements, if they do not exist (yet)\n\n    if (!extensionElements) {\n      extensionElements = elementHelper.createElement('bpmn:ExtensionElements', null, element, bpmnFactory);\n      updates.push(cmdHelper.updateBusinessObject(element, bo, objectWithKey('extensionElements', extensionElements)));\n    }\n  }\n\n  if (scope) {\n    bo = findExtension(bo, scope.name);\n\n    if (!bo) {\n      bo = elementHelper.createElement(scope.name, null, element, bpmnFactory);\n      updates.push(cmdHelper.addElementsTolist(bo, extensionElements, 'values', [bo]));\n    }\n  } // property\n\n\n  if (bindingType === 'property') {\n    if (bindingName === 'conditionExpression') {\n      propertyValue = elementHelper.createElement('bpmn:FormalExpression', {\n        body: value,\n        language: binding.scriptFormat\n      }, bo, bpmnFactory);\n    } else {\n      var moddlePropertyDescriptor = bo.$descriptor.propertiesByName[bindingName];\n      var moddleType = moddlePropertyDescriptor.type; // make sure we only update String, Integer, Real and\n      // Boolean properties (do not accidentally override complex objects...)\n\n      if (BASIC_MODDLE_TYPES.indexOf(moddleType) === -1) {\n        throw new Error('cannot set moddle type <' + moddleType + '>');\n      }\n\n      if (moddleType === 'Boolean') {\n        propertyValue = !!value;\n      } else if (moddleType === 'Integer') {\n        propertyValue = parseInt(value, 10);\n\n        if (isNaN(propertyValue)) {\n          // do not write NaN value\n          propertyValue = undefined;\n        }\n      } else {\n        propertyValue = value;\n      }\n    }\n\n    if (propertyValue !== undefined) {\n      updates.push(cmdHelper.updateBusinessObject(element, bo, objectWithKey(bindingName, propertyValue)));\n    }\n  } // camunda:property\n\n\n  var camundaProperties, existingCamundaProperty, newCamundaProperty;\n\n  if (bindingType === CAMUNDA_PROPERTY_TYPE) {\n    if (scope) {\n      camundaProperties = bo.get('properties');\n    } else {\n      camundaProperties = findExtension(extensionElements, 'camunda:Properties');\n    }\n\n    if (!camundaProperties) {\n      camundaProperties = elementHelper.createElement('camunda:Properties', null, bo, bpmnFactory);\n\n      if (scope) {\n        updates.push(cmdHelper.updateBusinessObject(element, bo, {\n          properties: camundaProperties\n        }));\n      } else {\n        updates.push(cmdHelper.addElementsTolist(element, extensionElements, 'values', [camundaProperties]));\n      }\n    }\n\n    existingCamundaProperty = findCamundaProperty(camundaProperties, binding);\n    newCamundaProperty = createCamundaProperty(binding, value, bpmnFactory);\n    updates.push(cmdHelper.addAndRemoveElementsFromList(element, camundaProperties, 'values', null, [newCamundaProperty], existingCamundaProperty ? [existingCamundaProperty] : []));\n  } // camunda:inputParameter\n  // camunda:outputParameter\n\n\n  var inputOutput, existingIoParameter, newIoParameter;\n\n  if (IO_BINDING_TYPES.indexOf(bindingType) !== -1) {\n    if (scope) {\n      inputOutput = bo.get('inputOutput');\n    } else {\n      inputOutput = findExtension(extensionElements, 'camunda:InputOutput');\n    } // create inputOutput element, if it do not exist (yet)\n\n\n    if (!inputOutput) {\n      inputOutput = elementHelper.createElement('camunda:InputOutput', null, bo, bpmnFactory);\n\n      if (scope) {\n        updates.push(cmdHelper.updateBusinessObject(element, bo, {\n          inputOutput: inputOutput\n        }));\n      } else {\n        updates.push(cmdHelper.addElementsTolist(element, extensionElements, 'values', inputOutput));\n      }\n    }\n  }\n\n  if (bindingType === CAMUNDA_INPUT_PARAMETER_TYPE) {\n    existingIoParameter = findInputParameter(inputOutput, binding);\n    newIoParameter = createInputParameter(binding, value, bpmnFactory);\n    updates.push(cmdHelper.addAndRemoveElementsFromList(element, inputOutput, 'inputParameters', null, [newIoParameter], existingIoParameter ? [existingIoParameter] : []));\n  }\n\n  if (bindingType === CAMUNDA_OUTPUT_PARAMETER_TYPE) {\n    existingIoParameter = findOutputParameter(inputOutput, binding);\n    newIoParameter = createOutputParameter(binding, value, bpmnFactory);\n    updates.push(cmdHelper.addAndRemoveElementsFromList(element, inputOutput, 'outputParameters', null, [newIoParameter], existingIoParameter ? [existingIoParameter] : []));\n  } // camunda:in\n  // camunda:out\n  // camunda:in:businessKey\n\n\n  var existingInOut, newInOut;\n\n  if (IN_OUT_BINDING_TYPES.indexOf(bindingType) !== -1) {\n    existingInOut = findCamundaInOut(bo, binding);\n\n    if (bindingType === CAMUNDA_IN_TYPE) {\n      newInOut = createCamundaIn(binding, value, bpmnFactory);\n    } else if (bindingType === CAMUNDA_OUT_TYPE) {\n      newInOut = createCamundaOut(binding, value, bpmnFactory);\n    } else {\n      newInOut = createCamundaInWithBusinessKey(binding, value, bpmnFactory);\n    }\n\n    updates.push(cmdHelper.addAndRemoveElementsFromList(element, extensionElements, 'values', null, [newInOut], existingInOut ? [existingInOut] : []));\n  }\n\n  if (bindingType === CAMUNDA_FIELD) {\n    var existingFieldInjections = findExtensions(bo, ['camunda:Field']);\n    var newFieldInjections = [];\n\n    if (existingFieldInjections.length > 0) {\n      existingFieldInjections.forEach(function (item) {\n        if (item.name === binding.name) {\n          newFieldInjections.push(createCamundaFieldInjection(binding, value, bpmnFactory));\n        } else {\n          newFieldInjections.push(item);\n        }\n      });\n    } else {\n      newFieldInjections.push(createCamundaFieldInjection(binding, value, bpmnFactory));\n    }\n\n    updates.push(cmdHelper.addAndRemoveElementsFromList(element, extensionElements, 'values', null, newFieldInjections, existingFieldInjections ? existingFieldInjections : []));\n  }\n\n  if (updates.length) {\n    return updates;\n  } // quick warning for better debugging\n\n\n  console.warn('no update', element, property, value);\n}\n\nmodule.exports.setPropertyValue = setPropertyValue;\n/**\n * Validate value of a given property.\n *\n * @param {String} value\n * @param {PropertyDescriptor} property\n *\n * @return {Object} with validation errors\n */\n\nfunction validateValue(value, property) {\n  var constraints = property.constraints || {};\n\n  if (constraints.notEmpty && isEmpty(value)) {\n    return 'Must not be empty';\n  }\n\n  if (constraints.maxLength && value.length > constraints.maxLength) {\n    return 'Must have max length ' + constraints.maxLength;\n  }\n\n  if (constraints.minLength && value.length < constraints.minLength) {\n    return 'Must have min length ' + constraints.minLength;\n  }\n\n  var pattern = constraints.pattern,\n      message;\n\n  if (pattern) {\n    if (typeof pattern !== 'string') {\n      message = pattern.message;\n      pattern = pattern.value;\n    }\n\n    if (!matchesPattern(value, pattern)) {\n      return message || 'Must match pattern ' + pattern;\n    }\n  }\n} // misc helpers ///////////////////////////////\n\n\nfunction propertyWithScope(property, scopeName) {\n  if (!scopeName) {\n    return property;\n  }\n\n  return assign({}, property, {\n    scope: {\n      name: scopeName\n    }\n  });\n}\n/**\n * Return an object with a single key -> value association.\n *\n * @param {String} key\n * @param {Any} value\n *\n * @return {Object}\n */\n\n\nfunction objectWithKey(key, value) {\n  var obj = {};\n  obj[key] = value;\n  return obj;\n}\n/**\n * Does the given string match the specified pattern?\n *\n * @param {String} str\n * @param {String} pattern\n *\n * @return {Boolean}\n */\n\n\nfunction matchesPattern(str, pattern) {\n  var regexp = new RegExp(pattern);\n  return regexp.test(str);\n}\n\nfunction isEmpty(str) {\n  return !str || /^\\s*$/.test(str);\n}\n/**\n * Create a new {@link Error} indicating an unknown\n * property binding.\n *\n * @param {PropertyDescriptor} property\n *\n * @return {Error}\n */\n\n\nfunction unknownPropertyBinding(property) {\n  var binding = property.binding;\n  return new Error('unknown binding: <' + binding.type + '>');\n}","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js-properties-panel/lib/provider/camunda/element-templates/parts/CustomProps.js"],"names":["assign","require","entryFactory","getBusinessObject","getTemplate","cmdHelper","elementHelper","findExtension","findExtensions","findInputParameter","findOutputParameter","findCamundaProperty","findCamundaInOut","createCamundaProperty","createInputParameter","createOutputParameter","createCamundaIn","createCamundaOut","createCamundaInWithBusinessKey","createCamundaFieldInjection","CAMUNDA_PROPERTY_TYPE","CAMUNDA_INPUT_PARAMETER_TYPE","CAMUNDA_OUTPUT_PARAMETER_TYPE","CAMUNDA_IN_TYPE","CAMUNDA_OUT_TYPE","CAMUNDA_IN_BUSINESS_KEY_TYPE","CAMUNDA_EXECUTION_LISTENER_TYPE","CAMUNDA_FIELD","BASIC_MODDLE_TYPES","EXTENSION_BINDING_TYPES","IO_BINDING_TYPES","IN_OUT_BINDING_TYPES","module","exports","element","elementTemplates","bpmnFactory","translate","template","renderCustomField","id","p","idx","propertyType","type","entryOptions","description","label","modelProperty","get","propertyGetter","set","propertySetter","validate","propertyValidator","entry","checkbox","textField","textBox","selectOptions","choices","selectBox","groups","customFieldsGroup","entries","properties","forEach","push","length","scopes","scopeName","scope","idScopeName","replace","customScopeFieldsGroup","propertyId","scopedProperty","propertyWithScope","name","property","value","getPropertyValue","objectWithKey","values","setPropertyValue","error","validateValue","bo","binding","bindingType","bindingName","propertyValue","body","camundaProperties","camundaProperty","inputOutput","ioParameter","indexOf","scriptFormat","definition","ioElement","businessKey","target","expression","executionListener","script","fieldInjection","fieldInjections","item","string","unknownPropertyBinding","updates","extensionElements","createElement","updateBusinessObject","addElementsTolist","language","moddlePropertyDescriptor","$descriptor","propertiesByName","moddleType","Error","parseInt","isNaN","undefined","existingCamundaProperty","newCamundaProperty","addAndRemoveElementsFromList","existingIoParameter","newIoParameter","existingInOut","newInOut","existingFieldInjections","newFieldInjections","console","warn","constraints","notEmpty","isEmpty","maxLength","minLength","pattern","message","matchesPattern","key","obj","str","regexp","RegExp","test"],"mappings":"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","sourcesContent":["'use strict';\n\nvar assign = require('lodash/assign');\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n    getTemplate = require('../Helper').getTemplate,\n    cmdHelper = require('../../../../helper/CmdHelper'),\n    elementHelper = require('../../../../helper/ElementHelper');\n\nvar findExtension = require('../Helper').findExtension,\n    findExtensions = require('../Helper').findExtensions,\n    findInputParameter = require('../Helper').findInputParameter,\n    findOutputParameter = require('../Helper').findOutputParameter,\n    findCamundaProperty = require('../Helper').findCamundaProperty,\n    findCamundaInOut = require('../Helper').findCamundaInOut;\n\nvar createCamundaProperty = require('../CreateHelper').createCamundaProperty,\n    createInputParameter = require('../CreateHelper').createInputParameter,\n    createOutputParameter = require('../CreateHelper').createOutputParameter,\n    createCamundaIn = require('../CreateHelper').createCamundaIn,\n    createCamundaOut = require('../CreateHelper').createCamundaOut,\n    createCamundaInWithBusinessKey = require('../CreateHelper').createCamundaInWithBusinessKey,\n    createCamundaFieldInjection = require('../CreateHelper').createCamundaFieldInjection;\n\nvar CAMUNDA_PROPERTY_TYPE = 'camunda:property',\n    CAMUNDA_INPUT_PARAMETER_TYPE = 'camunda:inputParameter',\n    CAMUNDA_OUTPUT_PARAMETER_TYPE = 'camunda:outputParameter',\n    CAMUNDA_IN_TYPE = 'camunda:in',\n    CAMUNDA_OUT_TYPE = 'camunda:out',\n    CAMUNDA_IN_BUSINESS_KEY_TYPE = 'camunda:in:businessKey',\n    CAMUNDA_EXECUTION_LISTENER_TYPE = 'camunda:executionListener',\n    CAMUNDA_FIELD = 'camunda:field';\n\nvar BASIC_MODDLE_TYPES = [\n  'Boolean',\n  'Integer',\n  'String'\n];\n\nvar EXTENSION_BINDING_TYPES = [\n  CAMUNDA_PROPERTY_TYPE,\n  CAMUNDA_INPUT_PARAMETER_TYPE,\n  CAMUNDA_OUTPUT_PARAMETER_TYPE,\n  CAMUNDA_IN_TYPE,\n  CAMUNDA_OUT_TYPE,\n  CAMUNDA_IN_BUSINESS_KEY_TYPE,\n  CAMUNDA_FIELD\n];\n\nvar IO_BINDING_TYPES = [\n  CAMUNDA_INPUT_PARAMETER_TYPE,\n  CAMUNDA_OUTPUT_PARAMETER_TYPE\n];\n\nvar IN_OUT_BINDING_TYPES = [\n  CAMUNDA_IN_TYPE,\n  CAMUNDA_OUT_TYPE,\n  CAMUNDA_IN_BUSINESS_KEY_TYPE\n];\n\n/**\n * Injects custom properties into the given group.\n *\n * @param {GroupDescriptor} group\n * @param {djs.model.Base} element\n * @param {ElementTemplates} elementTemplates\n * @param {BpmnFactory} bpmnFactory\n */\nmodule.exports = function(element, elementTemplates, bpmnFactory, translate) {\n\n  var template = getTemplate(element, elementTemplates);\n\n  if (!template) {\n    return [];\n  }\n\n  var renderCustomField = function(id, p, idx) {\n    var propertyType = p.type;\n\n    var entryOptions = {\n      id: id,\n      description: p.description,\n      label: p.label,\n      modelProperty: id,\n      get: propertyGetter(id, p),\n      set: propertySetter(id, p, bpmnFactory),\n      validate: propertyValidator(id, p)\n    };\n\n    var entry;\n\n    if (propertyType === 'Boolean') {\n      entry = entryFactory.checkbox(entryOptions);\n    }\n\n    if (propertyType === 'String') {\n      entry = entryFactory.textField(entryOptions);\n    }\n\n    if (propertyType === 'Text') {\n      entry = entryFactory.textBox(entryOptions);\n    }\n\n    if (propertyType === 'Dropdown') {\n      entryOptions.selectOptions = p.choices;\n\n      entry = entryFactory.selectBox(entryOptions);\n    }\n\n    return entry;\n  };\n\n  var groups = [];\n  var id, entry;\n\n  var customFieldsGroup = {\n    id: 'customField',\n    label: translate('Custom Fields'),\n    entries: []\n  };\n  template.properties.forEach(function(p, idx) {\n\n    id = 'custom-' + template.id + '-' + idx;\n\n    entry = renderCustomField(id, p, idx);\n    if (entry) {\n      customFieldsGroup.entries.push(entry);\n    }\n  });\n  if (customFieldsGroup.entries.length > 0) {\n    groups.push(customFieldsGroup);\n  }\n\n  if (template.scopes) {\n    for (var scopeName in template.scopes) {\n\n      var scope = template.scopes[scopeName];\n      var idScopeName = scopeName.replace(/:/g, '_');\n\n      var customScopeFieldsGroup = {\n        id: 'customField-' + idScopeName,\n        label: translate('Custom Fields for scope: ') + scopeName,\n        entries: []\n      };\n\n      scope.properties.forEach(function(p, idx) {\n\n        var propertyId = 'custom-' + template.id + '-' + idScopeName + '-' + idx;\n\n        var scopedProperty = propertyWithScope(p, scopeName);\n\n        entry = renderCustomField(propertyId, scopedProperty, idx);\n        if (entry) {\n          customScopeFieldsGroup.entries.push(entry);\n        }\n      });\n\n      if (customScopeFieldsGroup.entries.length > 0) {\n        groups.push(customScopeFieldsGroup);\n      }\n    }\n  }\n\n  return groups;\n};\n\n\n// getters, setters and validators ///////////////\n\n\n/**\n * Return a getter that retrieves the given property.\n *\n * @param {String} name\n * @param {PropertyDescriptor} property\n *\n * @return {Function}\n */\nfunction propertyGetter(name, property) {\n\n  /* getter */\n  return function get(element) {\n    var value = getPropertyValue(element, property);\n\n    return objectWithKey(name, value);\n  };\n}\n\n/**\n * Return a setter that updates the given property.\n *\n * @param {String} name\n * @param {PropertyDescriptor} property\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {Function}\n */\nfunction propertySetter(name, property, bpmnFactory) {\n\n  /* setter */\n  return function set(element, values) {\n\n    var value = values[name];\n\n    return setPropertyValue(element, property, value, bpmnFactory);\n  };\n}\n\n/**\n * Return a validator that ensures the property is ok.\n *\n * @param {String} name\n * @param {PropertyDescriptor} property\n *\n * @return {Function}\n */\nfunction propertyValidator(name, property) {\n\n  /* validator */\n  return function validate(element, values) {\n    var value = values[name];\n\n    var error = validateValue(value, property);\n\n    if (error) {\n      return objectWithKey(name, error);\n    }\n  };\n}\n\n\n// get, set and validate helpers ///////////////////\n\n/**\n * Return the value of the specified property descriptor,\n * on the passed diagram element.\n *\n * @param {djs.model.Base} element\n * @param {PropertyDescriptor} property\n *\n * @return {Any}\n */\nfunction getPropertyValue(element, property) {\n\n  var bo = getBusinessObject(element);\n\n  var binding = property.binding,\n      scope = property.scope;\n\n  var bindingType = binding.type,\n      bindingName = binding.name;\n\n  var propertyValue = property.value || '';\n\n  if (scope) {\n    bo = findExtension(bo, scope.name);\n    if (!bo) {\n      return propertyValue;\n    }\n  }\n\n  // property\n  if (bindingType === 'property') {\n\n    var value = bo.get(bindingName);\n\n    if (bindingName === 'conditionExpression') {\n      if (value) {\n        return value.body;\n      } else {\n        // return defined default\n        return propertyValue;\n      }\n    } else {\n      // return value; default to defined default\n      return typeof value !== 'undefined' ? value : propertyValue;\n    }\n  }\n\n  var camundaProperties,\n      camundaProperty;\n\n  if (bindingType === CAMUNDA_PROPERTY_TYPE) {\n    if (scope) {\n      camundaProperties = bo.get('properties');\n    } else {\n      camundaProperties = findExtension(bo, 'camunda:Properties');\n    }\n\n    if (camundaProperties) {\n      camundaProperty = findCamundaProperty(camundaProperties, binding);\n\n      if (camundaProperty) {\n        return camundaProperty.value;\n      }\n    }\n\n    return propertyValue;\n  }\n\n  var inputOutput,\n      ioParameter;\n\n  if (IO_BINDING_TYPES.indexOf(bindingType) !== -1) {\n\n    if (scope) {\n      inputOutput = bo.get('inputOutput');\n    } else {\n      inputOutput = findExtension(bo, 'camunda:InputOutput');\n    }\n\n    if (!inputOutput) {\n      // ioParameter cannot exist yet, return property value\n      return propertyValue;\n    }\n  }\n\n  // camunda input parameter\n  if (bindingType === CAMUNDA_INPUT_PARAMETER_TYPE) {\n    ioParameter = findInputParameter(inputOutput, binding);\n\n    if (ioParameter) {\n      if (binding.scriptFormat) {\n        if (ioParameter.definition) {\n          return ioParameter.definition.value;\n        }\n      } else {\n        return ioParameter.value || '';\n      }\n    }\n\n    return propertyValue;\n  }\n\n  // camunda output parameter\n  if (binding.type === CAMUNDA_OUTPUT_PARAMETER_TYPE) {\n    ioParameter = findOutputParameter(inputOutput, binding);\n\n    if (ioParameter) {\n      return ioParameter.name;\n    }\n\n    return propertyValue;\n  }\n\n\n  var ioElement;\n\n  if (IN_OUT_BINDING_TYPES.indexOf(bindingType) != -1) {\n    ioElement = findCamundaInOut(bo, binding);\n\n    if (ioElement) {\n      if (bindingType === CAMUNDA_IN_BUSINESS_KEY_TYPE) {\n        return ioElement.businessKey;\n      } else\n      if (bindingType === CAMUNDA_OUT_TYPE) {\n        return ioElement.target;\n      } else\n      if (bindingType === CAMUNDA_IN_TYPE) {\n        return ioElement[binding.expression ? 'sourceExpression' : 'source'];\n      }\n    }\n\n    return propertyValue;\n  }\n\n  if (bindingType === CAMUNDA_EXECUTION_LISTENER_TYPE) {\n    var executionListener;\n    if (scope) {\n      executionListener = bo.get('executionListener');\n    } else {\n      executionListener = findExtension(bo, 'camunda:ExecutionListener');\n    }\n\n    return executionListener.script.value;\n  }\n\n  var fieldInjection;\n  if (CAMUNDA_FIELD === bindingType) {\n    var fieldInjections = findExtensions(bo, [ 'camunda:Field' ]);\n    fieldInjections.forEach(function(item) {\n      if (item.name === binding.name) {\n        fieldInjection = item;\n      }\n    });\n    if (fieldInjection) {\n      return fieldInjection.string || fieldInjection.expression;\n    } else {\n      return '';\n    }\n  }\n\n  throw unknownPropertyBinding(property);\n}\n\nmodule.exports.getPropertyValue = getPropertyValue;\n\n\n/**\n * Return an update operation that changes the diagram\n * element's custom property to the given value.\n *\n * The response of this method will be processed via\n * {@link PropertiesPanel#applyChanges}.\n *\n * @param {djs.model.Base} element\n * @param {PropertyDescriptor} property\n * @param {String} value\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {Object|Array<Object>} results to be processed\n */\nfunction setPropertyValue(element, property, value, bpmnFactory) {\n  var bo = getBusinessObject(element);\n\n  var binding = property.binding,\n      scope = property.scope;\n\n  var bindingType = binding.type,\n      bindingName = binding.name;\n\n  var propertyValue;\n\n  var updates = [];\n\n  var extensionElements;\n\n  if (EXTENSION_BINDING_TYPES.indexOf(bindingType) !== -1) {\n    extensionElements = bo.get('extensionElements');\n\n    // create extension elements, if they do not exist (yet)\n    if (!extensionElements) {\n      extensionElements = elementHelper.createElement('bpmn:ExtensionElements', null, element, bpmnFactory);\n\n      updates.push(cmdHelper.updateBusinessObject(\n        element, bo, objectWithKey('extensionElements', extensionElements)\n      ));\n    }\n  }\n\n  if (scope) {\n    bo = findExtension(bo, scope.name);\n    if (!bo) {\n      bo = elementHelper.createElement(scope.name, null, element, bpmnFactory);\n\n      updates.push(cmdHelper.addElementsTolist(\n        bo, extensionElements, 'values', [ bo ]\n      ));\n    }\n  }\n\n  // property\n  if (bindingType === 'property') {\n\n    if (bindingName === 'conditionExpression') {\n\n      propertyValue = elementHelper.createElement('bpmn:FormalExpression', {\n        body: value,\n        language: binding.scriptFormat\n      }, bo, bpmnFactory);\n    } else {\n\n      var moddlePropertyDescriptor = bo.$descriptor.propertiesByName[bindingName];\n\n      var moddleType = moddlePropertyDescriptor.type;\n\n      // make sure we only update String, Integer, Real and\n      // Boolean properties (do not accidentally override complex objects...)\n      if (BASIC_MODDLE_TYPES.indexOf(moddleType) === -1) {\n        throw new Error('cannot set moddle type <' + moddleType + '>');\n      }\n\n      if (moddleType === 'Boolean') {\n        propertyValue = !!value;\n      } else\n      if (moddleType === 'Integer') {\n        propertyValue = parseInt(value, 10);\n\n        if (isNaN(propertyValue)) {\n          // do not write NaN value\n          propertyValue = undefined;\n        }\n      } else {\n        propertyValue = value;\n      }\n    }\n\n    if (propertyValue !== undefined) {\n      updates.push(cmdHelper.updateBusinessObject(\n        element, bo, objectWithKey(bindingName, propertyValue)\n      ));\n    }\n  }\n\n  // camunda:property\n  var camundaProperties,\n      existingCamundaProperty,\n      newCamundaProperty;\n\n  if (bindingType === CAMUNDA_PROPERTY_TYPE) {\n\n    if (scope) {\n      camundaProperties = bo.get('properties');\n    } else {\n      camundaProperties = findExtension(extensionElements, 'camunda:Properties');\n    }\n\n    if (!camundaProperties) {\n      camundaProperties = elementHelper.createElement('camunda:Properties', null, bo, bpmnFactory);\n\n      if (scope) {\n        updates.push(cmdHelper.updateBusinessObject(\n          element, bo, { properties: camundaProperties }\n        ));\n      }\n      else {\n        updates.push(cmdHelper.addElementsTolist(\n          element, extensionElements, 'values', [ camundaProperties ]\n        ));\n      }\n    }\n\n    existingCamundaProperty = findCamundaProperty(camundaProperties, binding);\n\n    newCamundaProperty = createCamundaProperty(binding, value, bpmnFactory);\n\n    updates.push(cmdHelper.addAndRemoveElementsFromList(\n      element,\n      camundaProperties,\n      'values',\n      null,\n      [ newCamundaProperty ],\n      existingCamundaProperty ? [ existingCamundaProperty ] : []\n    ));\n  }\n\n  // camunda:inputParameter\n  // camunda:outputParameter\n  var inputOutput,\n      existingIoParameter,\n      newIoParameter;\n\n  if (IO_BINDING_TYPES.indexOf(bindingType) !== -1) {\n\n    if (scope) {\n      inputOutput = bo.get('inputOutput');\n    } else {\n      inputOutput = findExtension(extensionElements, 'camunda:InputOutput');\n    }\n\n    // create inputOutput element, if it do not exist (yet)\n    if (!inputOutput) {\n      inputOutput = elementHelper.createElement('camunda:InputOutput', null, bo, bpmnFactory);\n\n      if (scope) {\n        updates.push(cmdHelper.updateBusinessObject(\n          element, bo, { inputOutput: inputOutput }\n        ));\n      }\n      else {\n        updates.push(cmdHelper.addElementsTolist(\n          element, extensionElements, 'values', inputOutput\n        ));\n      }\n    }\n  }\n\n  if (bindingType === CAMUNDA_INPUT_PARAMETER_TYPE) {\n\n    existingIoParameter = findInputParameter(inputOutput, binding);\n\n    newIoParameter = createInputParameter(binding, value, bpmnFactory);\n\n    updates.push(cmdHelper.addAndRemoveElementsFromList(\n      element,\n      inputOutput,\n      'inputParameters',\n      null,\n      [ newIoParameter ],\n      existingIoParameter ? [ existingIoParameter ] : []\n    ));\n  }\n\n  if (bindingType === CAMUNDA_OUTPUT_PARAMETER_TYPE) {\n\n    existingIoParameter = findOutputParameter(inputOutput, binding);\n\n    newIoParameter = createOutputParameter(binding, value, bpmnFactory);\n\n    updates.push(cmdHelper.addAndRemoveElementsFromList(\n      element,\n      inputOutput,\n      'outputParameters',\n      null,\n      [ newIoParameter ],\n      existingIoParameter ? [ existingIoParameter ] : []\n    ));\n  }\n\n\n  // camunda:in\n  // camunda:out\n  // camunda:in:businessKey\n  var existingInOut,\n      newInOut;\n\n  if (IN_OUT_BINDING_TYPES.indexOf(bindingType) !== -1) {\n\n    existingInOut = findCamundaInOut(bo, binding);\n\n    if (bindingType === CAMUNDA_IN_TYPE) {\n      newInOut = createCamundaIn(binding, value, bpmnFactory);\n    } else\n    if (bindingType === CAMUNDA_OUT_TYPE) {\n      newInOut = createCamundaOut(binding, value, bpmnFactory);\n    } else {\n      newInOut = createCamundaInWithBusinessKey(binding, value, bpmnFactory);\n    }\n\n    updates.push(cmdHelper.addAndRemoveElementsFromList(\n      element,\n      extensionElements,\n      'values',\n      null,\n      [ newInOut ],\n      existingInOut ? [ existingInOut ] : []\n    ));\n  }\n\n  if (bindingType === CAMUNDA_FIELD) {\n    var existingFieldInjections = findExtensions(bo, [ 'camunda:Field' ]);\n    var newFieldInjections = [];\n\n    if (existingFieldInjections.length > 0) {\n      existingFieldInjections.forEach(function(item) {\n        if (item.name === binding.name) {\n          newFieldInjections.push(createCamundaFieldInjection(binding, value, bpmnFactory));\n        } else {\n          newFieldInjections.push(item);\n        }\n      });\n    } else {\n      newFieldInjections.push(createCamundaFieldInjection(binding, value, bpmnFactory));\n    }\n\n    updates.push(cmdHelper.addAndRemoveElementsFromList(\n      element,\n      extensionElements,\n      'values',\n      null,\n      newFieldInjections,\n      existingFieldInjections ? existingFieldInjections : []\n    ));\n  }\n\n  if (updates.length) {\n    return updates;\n  }\n\n  // quick warning for better debugging\n  console.warn('no update', element, property, value);\n}\n\nmodule.exports.setPropertyValue = setPropertyValue;\n\n/**\n * Validate value of a given property.\n *\n * @param {String} value\n * @param {PropertyDescriptor} property\n *\n * @return {Object} with validation errors\n */\nfunction validateValue(value, property) {\n\n  var constraints = property.constraints || {};\n\n  if (constraints.notEmpty && isEmpty(value)) {\n    return 'Must not be empty';\n  }\n\n  if (constraints.maxLength && value.length > constraints.maxLength) {\n    return 'Must have max length ' + constraints.maxLength;\n  }\n\n  if (constraints.minLength && value.length < constraints.minLength) {\n    return 'Must have min length ' + constraints.minLength;\n  }\n\n  var pattern = constraints.pattern,\n      message;\n\n  if (pattern) {\n\n    if (typeof pattern !== 'string') {\n      message = pattern.message;\n      pattern = pattern.value;\n    }\n\n    if (!matchesPattern(value, pattern)) {\n      return message || 'Must match pattern ' + pattern;\n    }\n  }\n}\n\n\n// misc helpers ///////////////////////////////\n\nfunction propertyWithScope(property, scopeName) {\n  if (!scopeName) {\n    return property;\n  }\n\n  return assign({}, property, {\n    scope: {\n      name: scopeName\n    }\n  });\n}\n\n/**\n * Return an object with a single key -> value association.\n *\n * @param {String} key\n * @param {Any} value\n *\n * @return {Object}\n */\nfunction objectWithKey(key, value) {\n  var obj = {};\n\n  obj[key] = value;\n\n  return obj;\n}\n\n/**\n * Does the given string match the specified pattern?\n *\n * @param {String} str\n * @param {String} pattern\n *\n * @return {Boolean}\n */\nfunction matchesPattern(str, pattern) {\n  var regexp = new RegExp(pattern);\n\n  return regexp.test(str);\n}\n\nfunction isEmpty(str) {\n  return !str || /^\\s*$/.test(str);\n}\n\n/**\n * Create a new {@link Error} indicating an unknown\n * property binding.\n *\n * @param {PropertyDescriptor} property\n *\n * @return {Error}\n */\nfunction unknownPropertyBinding(property) {\n  var binding = property.binding;\n\n  return new Error('unknown binding: <' + binding.type + '>');\n}\n"]},"metadata":{},"sourceType":"script"}