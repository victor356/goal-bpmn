{"ast":null,"code":"var round = Math.round;\n/**\n * Service that allow replacing of elements.\n */\n\nexport default function Replace(modeling) {\n  this._modeling = modeling;\n}\nReplace.$inject = ['modeling'];\n/**\n * @param {Element} oldElement - Element to be replaced\n * @param {Object}  newElementData - Containing information about the new Element, for example height, width, type.\n * @param {Object}  options - Custom options that will be attached to the context. It can be used to inject data\n *                            that is needed in the command chain. For example it could be used in\n *                            eventbus.on('commandStack.shape.replace.postExecute') to change shape attributes after\n *                            shape creation.\n */\n\nReplace.prototype.replaceElement = function (oldElement, newElementData, options) {\n  var modeling = this._modeling;\n  var newElement = null;\n\n  if (oldElement.waypoints) {// TODO\n    // modeling.replaceConnection\n  } else {\n    // set center of element for modeling API\n    // if no new width / height is given use old elements size\n    newElementData.x = round(oldElement.x + (newElementData.width || oldElement.width) / 2);\n    newElementData.y = round(oldElement.y + (newElementData.height || oldElement.height) / 2);\n    newElement = modeling.replaceShape(oldElement, newElementData, options);\n  }\n\n  return newElement;\n};","map":{"version":3,"sources":["C:/Users/Vittorio/Documents/GitHub/SPM2021-MTV/frontend/node_modules/bpmn-js/node_modules/diagram-js/lib/features/replace/Replace.js"],"names":["round","Math","Replace","modeling","_modeling","$inject","prototype","replaceElement","oldElement","newElementData","options","newElement","waypoints","x","width","y","height","replaceShape"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,IAAI,CAACD,KAAjB;AAEA;AACA;AACA;;AACA,eAAe,SAASE,OAAT,CAAiBC,QAAjB,EAA2B;AAExC,OAAKC,SAAL,GAAiBD,QAAjB;AACD;AAEDD,OAAO,CAACG,OAAR,GAAkB,CAAE,UAAF,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,OAAO,CAACI,SAAR,CAAkBC,cAAlB,GAAmC,UAASC,UAAT,EAAqBC,cAArB,EAAqCC,OAArC,EAA8C;AAE/E,MAAIP,QAAQ,GAAG,KAAKC,SAApB;AAEA,MAAIO,UAAU,GAAG,IAAjB;;AAEA,MAAIH,UAAU,CAACI,SAAf,EAA0B,CACxB;AACA;AACD,GAHD,MAGO;AACL;AACA;AACAH,IAAAA,cAAc,CAACI,CAAf,GAAmBb,KAAK,CAACQ,UAAU,CAACK,CAAX,GAAe,CAACJ,cAAc,CAACK,KAAf,IAAwBN,UAAU,CAACM,KAApC,IAA6C,CAA7D,CAAxB;AACAL,IAAAA,cAAc,CAACM,CAAf,GAAmBf,KAAK,CAACQ,UAAU,CAACO,CAAX,GAAe,CAACN,cAAc,CAACO,MAAf,IAAyBR,UAAU,CAACQ,MAArC,IAA+C,CAA/D,CAAxB;AAEAL,IAAAA,UAAU,GAAGR,QAAQ,CAACc,YAAT,CAAsBT,UAAtB,EAAkCC,cAAlC,EAAkDC,OAAlD,CAAb;AACD;;AAED,SAAOC,UAAP;AACD,CAnBD","sourcesContent":["var round = Math.round;\n\n/**\n * Service that allow replacing of elements.\n */\nexport default function Replace(modeling) {\n\n  this._modeling = modeling;\n}\n\nReplace.$inject = [ 'modeling' ];\n\n/**\n * @param {Element} oldElement - Element to be replaced\n * @param {Object}  newElementData - Containing information about the new Element, for example height, width, type.\n * @param {Object}  options - Custom options that will be attached to the context. It can be used to inject data\n *                            that is needed in the command chain. For example it could be used in\n *                            eventbus.on('commandStack.shape.replace.postExecute') to change shape attributes after\n *                            shape creation.\n */\nReplace.prototype.replaceElement = function(oldElement, newElementData, options) {\n\n  var modeling = this._modeling;\n\n  var newElement = null;\n\n  if (oldElement.waypoints) {\n    // TODO\n    // modeling.replaceConnection\n  } else {\n    // set center of element for modeling API\n    // if no new width / height is given use old elements size\n    newElementData.x = round(oldElement.x + (newElementData.width || oldElement.width) / 2);\n    newElementData.y = round(oldElement.y + (newElementData.height || oldElement.height) / 2);\n\n    newElement = modeling.replaceShape(oldElement, newElementData, options);\n  }\n\n  return newElement;\n};\n"]},"metadata":{},"sourceType":"module"}